import ctypes
from pyWinAPI import *
from pyWinAPI.shared.wtypes_h import *
from pyWinAPI.shared.winapifamily_h import *
from pyWinAPI.shared.sdkddkver_h import *
from pyWinAPI.shared.guiddef_h import *


class _CHANGE_BUFFERING_STATE_REQUEST_(ctypes.Structure):
    pass


CHANGE_BUFFERING_STATE_REQUEST = _CHANGE_BUFFERING_STATE_REQUEST_
PCHANGE_BUFFERING_STATE_REQUEST = POINTER(_CHANGE_BUFFERING_STATE_REQUEST_)


class _RX_BUFFERING_MANAGER_(ctypes.Structure):
    pass


RX_BUFFERING_MANAGER = _RX_BUFFERING_MANAGER_
PRX_BUFFERING_MANAGER = POINTER(_RX_BUFFERING_MANAGER_)


# /* + + BUILD Version: 0009 // Increment this if a change has global effects
# Copyright (c) 1987 - 1993 Microsoft Corporation Module Name: buffring.h
# Abstract: This module defines the change buffering state requests related
# data structures in RDBSS. Author: Notes: The buffering manager
# implementation consists of two primary data structures (1)
# CHANGE_BUFFERING_STATE_REQUEST and (2) BUFFERING_MANAGER. The
# BUFFERING_MANAGER tracks and initiates actions on all change buffering state
# requests generated by the various mini redirectors as well as the RDBSS.
# There are three lists associated with the buffering manager, i.e., the
# registration list, the dispatcher list and the handler list. The
# registration list contains all the requests initiated for which no
# processing has been done. All DPC level indications merely register the
# indication in this list. The access to this list is protected by a spin
# lock(RxStrucsupSpinLock). The dispatcher list contains all the requests for
# which the lookup has not been completed. This list is organized as a two
# tier list. The top level is based on the NetRootKey. Each entry for a
# NetRootKey in this list has an associated cluster of requests corresponding
# to the various SrvOpenKey's. This is the reason for ghaving two LIST_ENTRY's
# in the request data structure as well. The NetRootListEntry field is used
# for inter cluster threading and the listEntry field is used for intra
# cluster threading. The handler list consists of all the requests for which
# the lookup has been completed and are awaiting processing. The dispatcher
# list and the handler list access is protected by the buffering manager
# mutex. The three routines of interest to mini rdr writers are ...
# 1) RxIndicateChangeOfBufferingState - - for registering the request. 2)
# RxAssociateSrvOpenKey - - for associating a SRV_OPEN instance with the key.
# Note that the key associations are irreverisble and will last the lifetime
# of the associated SRV_OPEN. Also note that 0 and 0xffffffff are not valid
# keys for SRV_OPEN. It has special significance for the buffering manager. - -


__BUFFRING_H__ = None
if not defined(__BUFFRING_H__):
    __BUFFRING_H__ = 1

    from pyWinAPI.km.wdm_h import *
    from pyWinAPI.km.rxworkq_h import *
    from pyWinAPI.km.struchdr_h import *

    RX_REQUEST_PREPARED_FOR_HANDLING = 0x10000000

    _CHANGE_BUFFERING_STATE_REQUEST_._fields_ = [
        ('ListEntry', LIST_ENTRY),
        ('Flags', ULONG),
        ('SrvOpen', PSRV_OPEN),
        ('SrvOpenKey', PVOID),
        ('MRxContext', PVOID),
    ]

    _RX_BUFFERING_MANAGER_._fields_ = [
        ('DispatcherActive', BOOLEAN),
        ('HandlerInactive', BOOLEAN),
        ('LastChanceHandlerActive', BOOLEAN),
        ('Pad', UCHAR),
        ('SpinLock', KSPIN_LOCK),
        # been received for a given srvcall since a point in time.
        ('CumulativeNumberOfBufferingChangeRequests', LONG),
        ('NumberOfUnhandledRequests', LONG),
        ('NumberOfUndispatchedRequests', LONG),
        ('NumberOfOutstandingOpens', LONG),
        ('DispatcherList', LIST_ENTRY),
        ('HandlerList', LIST_ENTRY),
        ('LastChanceHandlerList', LIST_ENTRY),
        ('DispatcherWorkItem', RX_WORK_QUEUE_ITEM),
        ('HandlerWorkItem', RX_WORK_QUEUE_ITEM),
        ('LastChanceHandlerWorkItem', RX_WORK_QUEUE_ITEM),
        ('Mutex', FAST_MUTEX),
        ('SrvOpenLists', LIST_ENTRY * 1),
    ]


    def RxAcquireBufferingManagerMutex(BUFMAN):
        return ExAcquireFastMutex(ctypes.byref(BUFMAN.Mutex))


    def RxReleaseBufferingManagerMutex(BUFMAN):
        return ExReleaseFastMutex(ctypes.byref(BUFMAN.Mutex))


    rdbss = ctypes.windll.RDBSS
    # VOID
    # RxpProcessChangeBufferingStateRequests (
    # PSRV_CALL SrvCall,
    # BOOLEAN UpdateHandlerState
    # );
    RxpProcessChangeBufferingStateRequests = (
        rdbss.RxpProcessChangeBufferingStateRequests
    )
    RxpProcessChangeBufferingStateRequests.restype = VOID

    # VOID
    # RxProcessChangeBufferingStateRequests (
    # PSRV_CALL SrvCall
    # );
    RxProcessFcbChangeBufferingStateRequests = (
        rdbss.RxProcessFcbChangeBufferingStateRequests
    )
    RxProcessFcbChangeBufferingStateRequests.restype = VOID

    # VOID
    # RxProcessFcbChangeBufferingStateRequest (
    # PFCB Fcb
    # );
    RxProcessFcbChangeBufferingStateRequest = (
        rdbss.RxProcessFcbChangeBufferingStateRequest
    )
    RxProcessFcbChangeBufferingStateRequest.restype = VOID

    # VOID
    # RxPurgeChangeBufferingStateRequestsForSrvOpen(
    # PSRV_OPEN SrvOpen
    # );
    RxPurgeChangeBufferingStateRequestsForSrvOpen = (
        rdbss.RxPurgeChangeBufferingStateRequestsForSrvOpen
    )
    RxPurgeChangeBufferingStateRequestsForSrvOpen.restype = VOID

    # VOID
    # RxCompleteSrvOpenKeyAssociation (
    # IN OUT PSRV_OPEN SrvOpen
    # );
    RxCompleteSrvOpenKeyAssociation = rdbss.RxCompleteSrvOpenKeyAssociation
    RxCompleteSrvOpenKeyAssociation.restype = VOID

    # VOID
    # RxInitiateSrvOpenKeyAssociation (
    # IN OUT PSRV_OPEN SrvOpen
    # );
    RxInitiateSrvOpenKeyAssociation = rdbss.RxInitiateSrvOpenKeyAssociation
    RxInitiateSrvOpenKeyAssociation.restype = VOID

    # NTSTATUS
    # RxInitializeBufferingManager (
    # PSRV_CALL SrvCall
    # );
    RxInitializeBufferingManager = rdbss.RxInitializeBufferingManager
    RxInitializeBufferingManager.restype = NTSTATUS

    # NTSTATUS
    # RxTearDownBufferingManager (
    # PSRV_CALL SrvCall
    # );
    RxTearDownBufferingManager = rdbss.RxTearDownBufferingManager
    RxTearDownBufferingManager.restype = NTSTATUS

    # NTSTATUS
    # RxFlushFcbInSystemCache (
    # IN PFCB Fcb,
    # IN BOOLEAN SynchronizeWithLazyWriter
    # );
    RxFlushFcbInSystemCache = rdbss.RxFlushFcbInSystemCache
    RxFlushFcbInSystemCache.restype = NTSTATUS

    # NTSTATUS
    # RxPurgeFcbInSystemCache (
    # IN PFCB Fcb,
    # IN PLARGE_INTEGER FileOffset OPTIONAL,
    # IN ULONG Length,
    # IN BOOLEAN UninitializeCacheMaps,
    # IN BOOLEAN  FlushFile
    # );
    RxPurgeFcbInSystemCache = rdbss.RxPurgeFcbInSystemCache
    RxPurgeFcbInSystemCache.restype = NTSTATUS


# END IF
