# -*- coding: utf-8 -*-
#
# This file is part of EventGhost.
# Copyright Â© 2005-2016 EventGhost Project <http://www.eventghost.net/>
#
# EventGhost is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# EventGhost is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with EventGhost. If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function, absolute_import


# noinspection PyProtectedMember
from ctypes.wintypes import (
    VARIANT_BOOL,
    SMALL_RECT,
    _COORD as COORD,
    MSG,
    WIN32_FIND_DATAA,
    WIN32_FIND_DATAW,
)


from ctypes import (
    POINTER,
    CFUNCTYPE,
    WINFUNCTYPE,
    Structure,
    Union,
    sizeof,
    c_void_p,
    c_ulonglong,
    c_ulong,
    c_long,
    c_longlong,
    c_byte,
    c_ubyte,
    c_double,
    c_float,
    c_int,
    c_wchar_p,
    c_char_p,
    c_short,
    c_uint,
    c_ushort,
    c_wchar,
    c_char,
    c_size_t,
    c_ssize_t,
    c_int8,
    c_int16,
    c_int32,
    c_int64,
    c_uint8,
    c_uint16,
    c_uint32,
    c_uint64,
    create_unicode_buffer
)

if sizeof(c_long) == sizeof(c_void_p):
    UINT_PTR = c_ulong
    LONG_PTR = c_long
    ULONG_PTR = c_ulong
elif sizeof(c_longlong) == sizeof(c_void_p):
    UINT_PTR = c_ulonglong
    LONG_PTR = c_longlong
    ULONG_PTR = c_ulonglong
else:
    UINT_PTR = c_ulong
    LONG_PTR = c_long
    ULONG_PTR = c_ulong

HANDLE = c_void_p
BOOL = c_long
BYTE = c_byte
CHAR = c_char
DWORD = c_ulong
DOUBLE = c_double
FLOAT = c_float
INT = c_int
LARGE_INTEGER = c_longlong
LONG = c_long
LONGLONG = c_longlong
LPCOLESTR = c_wchar_p
LPCSTR = c_char_p
LPCVOID = c_void_p
LPCWSTR = c_wchar_p
LPOLESTR = c_wchar_p
LPSTR = c_char_p
LPVOID = c_void_p
LPWSTR = c_wchar_p
OLESTR = c_wchar_p
SHORT = c_short
ULARGE_INTEGER = c_ulonglong
ULONG = c_ulong
ULONGLONG = c_ulonglong
WCHAR = c_wchar
WORD = c_ushort
USHORT = c_ushort
SIZE_T = c_size_t
SSIZE_T = c_ssize_t
INT8 = c_int8
INT16 = c_int16
INT32 = c_int32
INT64 = c_int64
UINT = c_uint
UINT8 = c_uint8
UINT16 = c_uint16
UINT32 = c_uint32
UINT64 = c_uint64


ENUM = INT
ATOM = WORD
BOOLEAN = BYTE
CALLBACK = CFUNCTYPE
CCHAR = CHAR
COLORREF = DWORD
DWORDLONG = UINT64
DWORD_PTR = ULONG_PTR
DWORD32 = UINT32
DWORD64 = UINT64
HACCEL = HANDLE
HALF_PTR = INT
HBITMAP = HANDLE
HBRUSH = HANDLE
HCOLORSPACE = HANDLE
HCONV = HANDLE
HCONVLIST = HANDLE
HICON = HANDLE
HSTR = HANDLE
HTASK = HANDLE
HCURSOR = HICON
HDC = HANDLE
HDDEDATA = HANDLE
HDESK = HANDLE
HDROP = HANDLE
HDWP = HANDLE
HENHMETAFILE = HANDLE
HFILE = INT
HFONT = HANDLE
HGDIOBJ = HANDLE
HGLOBAL = HANDLE
HHOOK = HANDLE
HINSTANCE = HANDLE
HKEY = HANDLE
HKL = HANDLE
HLOCAL = HANDLE
HMENU = HANDLE
HMETAFILE = HANDLE
HMODULE = HINSTANCE
HMONITOR = HANDLE
HPALETTE = HANDLE
HPEN = HANDLE
HRESULT = LONG
HRGN = HANDLE
HRSRC = HANDLE
HSZ = HANDLE
HWINSTA = HANDLE
HWND = HANDLE
SERVICE_STATUS_HANDLE = HANDLE
INT_PTR = INT64
LANGID = WORD
LCID = DWORD
LCTYPE = DWORD
LGRPID = DWORD
LONG32 = INT32
LONG64 = INT64
LPARAM = LONG_PTR
LPBOOL = POINTER(BOOL)
LPBYTE = POINTER(BYTE)
LPCOLORREF = POINTER(COLORREF)
LPCTSTR = LPCWSTR
LPDWORD = POINTER(DWORD)
LPHANDLE = POINTER(HANDLE)
LPINT = POINTER(INT)
LPLONG = POINTER(LONG)
LPTSTR = LPWSTR
LPWORD = POINTER(WORD)
LRESULT = LONG_PTR
PBOOL = POINTER(BOOL)
PBOOLEAN = POINTER(BOOLEAN)
PBYTE = POINTER(BYTE)
PCHAR = POINTER(CHAR)
PCSTR = POINTER(CHAR)
PCTSTR = LPCWSTR
PCWSTR = POINTER(WCHAR)
PDWORD = POINTER(DWORD)
PDWORDLONG = POINTER(DWORDLONG)
PDWORD_PTR = POINTER(DWORD_PTR)
PDWORD32 = POINTER(DWORD32)
PDWORD64 = POINTER(DWORD64)
PFLOAT = POINTER(FLOAT)
PHALF_PTR = POINTER(HALF_PTR)
PHANDLE = POINTER(HANDLE)
PHKEY = POINTER(HKEY)
PINT = POINTER(INT)
PINT_PTR = POINTER(INT_PTR)
PINT8 = POINTER(INT8)
PINT16 = POINTER(INT16)
PINT32 = POINTER(INT32)
PINT64 = POINTER(INT64)
PLCID = POINTER(LCID)
PLONG = POINTER(LONG)
PLONGLONG = POINTER(LONGLONG)
PLONG_PTR = POINTER(LONG_PTR)
PLONG32 = POINTER(LONG32)
PLONG64 = POINTER(LONG64)
POINTER_32 = POINTER
POINTER_64 = POINTER
POINTER_64_INT = UINT64
UPOINTER_32 = UINT32
POINTER_SIGNED = POINTER
POINTER_UNSIGNED = POINTER
SPOINTER_32 = POINTER_SIGNED
PSHORT = POINTER(SHORT)
PSIZE_T = POINTER(SIZE_T)
PSSIZE_T = POINTER(SSIZE_T)
PSTR = POINTER(CHAR)
TBYTE = WCHAR
TCHAR = WCHAR
PTBYTE = POINTER(TBYTE)
PTCHAR = POINTER(TCHAR)
PTSTR = LPWSTR
UCHAR = UINT
UHALF_PTR = UINT
PUCHAR = POINTER(UCHAR)
PUHALF_PTR = POINTER(UHALF_PTR)
PUINT = POINTER(UINT)
PUINT_PTR = POINTER(UINT_PTR)
PUINT8 = POINTER(UINT8)
PUINT16 = POINTER(UINT16)
PUINT32 = POINTER(UINT32)
PUINT64 = POINTER(UINT64)
PULONG = POINTER(ULONG)
PULONGLONG = POINTER(ULONGLONG)
PULONG_PTR = POINTER(ULONG_PTR)
ULONG32 = UINT
ULONG64 = UINT64
PULONG32 = POINTER(ULONG32)
PULONG64 = POINTER(ULONG64)
PUSHORT = POINTER(USHORT)
PVOID = LPVOID
PWCHAR = POINTER(WCHAR)
PWORD = POINTER(WORD)
PWSTR = POINTER(WCHAR)
QWORD = UINT64
SC_HANDLE = HANDLE
SC_LOCK = LPVOID
SHANDLE_PTR = INT64
HANDLE_PTR = UINT64
KAFFINITY = ULONG_PTR
PKAFFINITY = POINTER(KAFFINITY)


# noinspection PyPep8Naming
class _UNICODE_STRING(Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', PWSTR)
    ]


UNICODE_STRING = _UNICODE_STRING
PUNICODE_STRING = POINTER(UNICODE_STRING)
PCUNICODE_STRING = POINTER(UNICODE_STRING)
USN = LONGLONG
VOID = None
WINAPI = WINFUNCTYPE
WPARAM = UINT_PTR
NULL = None

# noinspection PyTypeChecker
PBYTE256 = c_ubyte * 256


class _FLOAT128(Structure):
    _fields_ = [
        ('LowPart', INT64),
        ('HighPart', INT64),
    ]


FLOAT128 = _FLOAT128


class _LUID(Structure):
    _fields_ = [
        ('LowPart', DWORD),
        ('HighPart', LONG),
    ]


LUID = _LUID
PLUID = POINTER(_LUID)

LCID = DWORD

cdecl = CFUNCTYPE
CDECL = CFUNCTYPE
pascal = WINFUNCTYPE
WINAPIV = CFUNCTYPE
APIENTRY = WINAPI
APIPRIVATE = WINFUNCTYPE
PASCAL = pascal
WINAPI_INLINE = WINAPI

PSZ = c_wchar

far = LPCVOID
near = LPCVOID

FAR = far
NEAR = near


SPHANDLE = POINTER(HANDLE)
GLOBALHANDLE = HANDLE
LOCALHANDLE = HANDLE

FARPROC = LPCVOID
NEARPROC = LPCVOID
PROC = LPCVOID

HKEY = HANDLE

HINSTANCE = HANDLE
HSPRITE = HANDLE
HLSURF = HANDLE


class _FILETIME(Structure):
    _fields_ = [
        ('dwLowDateTime', DWORD),
        ('dwHighDateTime', DWORD)
    ]


FILETIME = _FILETIME
PFILETIME = POINTER(_FILETIME)
LPFILETIME = POINTER(_FILETIME)


HGLRC = HANDLE
HICON = HANDLE
HWINEVENTHOOK = HANDLE
HUMPD = HANDLE
HEVENT = HANDLE


class tagRECT(Structure):
    _fields_ = [
        ('left', LONG),
        ('top', LONG),
        ('right', LONG),
        ('bottom', LONG),
    ]


RECT = tagRECT
PRECT = POINTER(tagRECT)
NPRECT = POINTER(tagRECT)
LPRECT = POINTER(tagRECT)
LPCRECT = POINTER(RECT)


class _RECTL(Structure):
    _fields_ = [
        ('left', LONG),
        ('top', LONG),
        ('right', LONG),
        ('bottom', LONG),
    ]


RECTL = _RECTL
PRECTL = POINTER(_RECTL)
LPRECTL = POINTER(_RECTL)
LPCRECTL = POINTER(RECTL)


class tagPOINT(Structure):
    _fields_ = [
        ('x', LONG),
        ('y', LONG),
    ]


POINT = tagPOINT
PPOINT = POINTER(tagPOINT)
NPPOINT = POINTER(tagPOINT)
LPPOINT = POINTER(tagPOINT)


# ptl
class _POINTL(Structure):
    _fields_ = [
        ('x', LONG),
        ('y', LONG),
    ]


POINTL = _POINTL
PPOINTL = POINTER(_POINTL)


class tagSIZE(Structure):
    _fields_ = [
        ('cx', LONG),
        ('cy', LONG),
    ]


SIZE = tagSIZE
PSIZE = POINTER(tagSIZE)
LPSIZE = POINTER(tagSIZE)

SIZEL = SIZE
PSIZEL = POINTER(SIZEL)
LPSIZEL = POINTER(SIZEL)


class tagPOINTS(Structure):
    _fields_ = [
        ('x', SHORT),
        ('y', SHORT),
        ('y', SHORT),
        ('x', SHORT),
    ]


POINTS = tagPOINTS
PPOINTS = POINTER(tagPOINTS)
LPPOINTS = POINTER(tagPOINTS)


from guiddef_h import (
    GUID as _GUID,
    GUID_NULL as _GUID_NULL,
    LPGUID as _LPGUID,
    LPCGUID as _LPCGUID,
    IID as _IID,
    LPIID as _LPIID,
    IID_NULL as _IID_NULL,
    CLSID as _CLSID,
    LPCLSID as _LPCLSID,
    CLSID_NULL as _CLSID_NULL,
    FMTID as _FMTID,
    LPFMTID as _LPFMTID,
    FMTID_NULL as _FMTID_NULL,
    REFGUID as _REFGUID,
    REFIID as _REFIID,
    REFCLSID as _REFCLSID,
    REFFMTID as _REFFMTID
) # NOQA


GUID = _GUID
GUID_NULL = _GUID_NULL
LPGUID = _LPGUID
LPCGUID = _LPCGUID
IID = _IID
LPIID = _LPIID
IID_NULL = _IID_NULL
CLSID = _CLSID
LPCLSID = _LPCLSID
CLSID_NULL = _CLSID_NULL
FMTID = _FMTID
LPFMTID = _LPFMTID
FMTID_NULL = _FMTID_NULL
REFGUID = _REFGUID
REFIID = _REFIID
REFCLSID = _REFCLSID
REFFMTID = _REFFMTID
WSTRING = c_wchar_p
UBYTE = c_ubyte

CSHORT = SHORT
CLONG = ULONG
PCCHAR = POINTER(CCHAR)
PCSHORT = POINTER(CSHORT)
PCLONG = POINTER(CLONG)

FCHAR = UCHAR
FSHORT = USHORT
FLONG = ULONG
SCHAR = INT
PSCHAR = POINTER(SCHAR)
PCUCHAR = POINTER(UCHAR)
PCUSHORT = POINTER(USHORT)
PCULONG = POINTER(ULONG)


def __TEXT(quote):
    return quote + '\x00'


def TEXT(quote):
    return __TEXT(quote)



class _QUAD(Structure):
    class DUMMYUNIONNAME(Union):
        _fields_ = [
            ('UseThisFieldToCopy', INT64),
            ('DoNotUseThisField', DOUBLE)
        ]

    _fields_ = [
        ('DUMMYUNIONNAME', DUMMYUNIONNAME)
    ]


QUAD = _QUAD
PQUAD = POINTER(QUAD)
UQUAD = QUAD
PUQUAD = POINTER(UQUAD)


LPWCH = POINTER(WCHAR)
PWCH = POINTER(WCHAR)
LPCWCH = POINTER(WCHAR)
PCWCH = POINTER(WCHAR)
NWPSTR = POINTER(WCHAR)
PZPWSTR = POINTER(PWSTR)
PCZPWSTR = POINTER(PWSTR)
LPUWSTR = POINTER(WCHAR)
PUWSTR = POINTER(WCHAR)
PZPCWSTR = POINTER(PCWSTR)
PCZPCWSTR = POINTER(PCWSTR)
LPCUWSTR = POINTER(WCHAR)
PCUWSTR = POINTER(WCHAR)
PZZWSTR = POINTER(WCHAR)
PCZZWSTR = POINTER(WCHAR)
PUZZWSTR = POINTER(WCHAR)
PCUZZWSTR = POINTER(WCHAR)
PNZWCH = POINTER(WCHAR)
PCNZWCH = POINTER(WCHAR)
PUNZWCH = POINTER(WCHAR)
PCUNZWCH = POINTER(WCHAR)
LPCWCHAR = POINTER(WCHAR)
PCWCHAR = POINTER(WCHAR)
LPCUWCHAR = POINTER(WCHAR)
PCUWCHAR = POINTER(WCHAR)

UCSCHAR = UINT
PUCSCHAR = POINTER(UCSCHAR)
PUCSSTR = POINTER(UCSCHAR)

LPCH = POINTER(CHAR)
PCH = POINTER(CHAR)
LPCCH = POINTER(CHAR)
PCCH = POINTER(CHAR)
NPSTR = POINTER(CHAR)
PZPSTR = POINTER(PSTR)
PCZPSTR = POINTER(PSTR)
PZPCSTR = POINTER(PCSTR)
PCZPCSTR = POINTER(PCSTR)
PZZSTR = POINTER(CHAR)
PCZZSTR = POINTER(CHAR)
PNZCH = POINTER(CHAR)
PCNZCH = POINTER(CHAR)
TUCHAR = WCHAR
PTUCHAR = POINTER(WCHAR)
# !_TCHAR_DEFINED
LPTCH = LPWCH
PTCH = LPWCH
LPCTCH = LPCWCH
PCTCH = LPCWCH
PUTSTR = LPUWSTR
LPUTSTR = LPUWSTR
PCUTSTR = LPCUWSTR
LPCUTSTR = LPCUWSTR
LP = LPWSTR
PZZTSTR = PZZWSTR
PCZZTSTR = PCZZWSTR
PUZZTSTR = PUZZWSTR
PCUZZTSTR = PCUZZWSTR
PZPTSTR = PZPWSTR
PNZTCH = PNZWCH
PCNZTCH = PCNZWCH
PUNZTCH = PUNZWCH
# r_winnt
PCUNZTCH = PCUNZWCH

CSHORT = SHORT
CLONG = ULONG


LOGICAL = ULONG
PLOGICAL = POINTER(ULONG)

NTSTATUS = LONG
PNTSTATUS = POINTER(NTSTATUS)

PLARGE_INTEGER = POINTER(LARGE_INTEGER)
TIME = LARGE_INTEGER
_TIME = LARGE_INTEGER
PTIME = PLARGE_INTEGER


PFLOAT128 = POINTER(FLOAT128)

PULARGE_INTEGER = POINTER(ULARGE_INTEGER)


RTL_REFERENCE_COUNT = LONG_PTR
PRTL_REFERENCE_COUNT = POINTER(LONG_PTR)
RTL_REFERENCE_COUNT32 = LONG
PRTL_REFERENCE_COUNT32 = POINTER(LONG)


PHYSICAL_ADDRESS = LARGE_INTEGER
PPHYSICAL_ADDRESS = POINTER(LARGE_INTEGER)

PCSZ = POINTER(CHAR)

RTL_STRING_LENGTH_TYPE = USHORT


class STRING(Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
    ]


PSTRING = POINTER(STRING)
ANSI_STRING = STRING
PANSI_STRING = PSTRING
OEM_STRING = STRING
POEM_STRING = PSTRING


class CSTRING(Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
    ]


PCSTRING = POINTER(CSTRING)
ANSI_NULL = CHAR
CANSI_STRING = STRING
PCANSI_STRING = PSTRING


UNICODE_NULL = WCHAR


class STRING32(Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
    ]


PSTRING32 = POINTER(STRING32)
UNICODE_STRING32 = STRING32
PUNICODE_STRING32 = POINTER(UNICODE_STRING32)
ANSI_STRING32 = STRING32
PANSI_STRING32 = POINTER(ANSI_STRING32)


class STRING64(Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
    ]


PSTRING64 = POINTER(STRING64)
UNICODE_STRING64 = STRING64
PUNICODE_STRING64 = POINTER(UNICODE_STRING64)
ANSI_STRING64 = STRING64
PANSI_STRING64 = POINTER(ANSI_STRING64)

NULL64 = NULL

KIRQL = UCHAR
PKIRQL = POINTER(KIRQL)

LPUINT = POINTER(UINT)
LPUINT32 = POINTER(UINT32)
HNSTIME = LONGLONG
REFERENCE_TIME = LONGLONG
LPREFERENCE_TIME = POINTER(REFERENCE_TIME)
LPUINT64 = POINTER(UINT64)
LPFLOAT = POINTER(FLOAT)

MFTIME = LONGLONG
FLOAT32 = FLOAT
FLOAT64 = DOUBLE

