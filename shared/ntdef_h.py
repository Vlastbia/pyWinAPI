

from shared.wtypes_h import (
    ENUM,
    DOUBLE,
    LONG,
    POINTER,
    UINT,
    CHAR,
    SHORT,
    INT,
    VOID,
    LONG_PTR,
    ULONG_PTR,
    INT64,
    ULONG64,
    KAFFINITY
)
import ctypes

ANYSIZE_ARRAY = 0x1
kernel32 = ctypes.windll.Kernel32
# from .ctype_h import * # NOQA
from shared.winapifamily_h import * # NOQA

# from .specstrings_h import * # NOQA
# from .kernelspecs_h import * # NOQA
RESTRICTED_POINTER = POINTER
UNALIGNED = VOID
UNALIGNED64 = VOID


def TYPE_ALIGNMENT(t):
    return t


def PROBE_ALIGNMENT(_s):
    return TYPE_ALIGNMENT(ULONG)


def PROBE_ALIGNMENT32(_s):
    return TYPE_ALIGNMENT(ULONG)


def C_ASSERT(e):
    try:
        assert e
        return 1
    except AssertionError:
        return -1


CONST = VOID
DECLSPEC_IMPORT = VOID
DECLSPEC_NORETURN = VOID
DECLSPEC_NOTHROW = VOID


def DECLSPEC_ALIGN(x):
    return x


SYSTEM_CACHE_ALIGNMENT_SIZE = 0x80
DECLSPEC_CACHEALIGN = DECLSPEC_ALIGN(SYSTEM_CACHE_ALIGNMENT_SIZE)


def DECLSPEC_UUID(x):
    from pyWinAPI.shared.guiddef_h import GUID
    return GUID(x)


DECLSPEC_NOVTABLE = VOID
DECLSPEC_SELECTANY = VOID
NOP_FUNCTION = VOID
DECLSPEC_ADDRSAFE = VOID
DECLSPEC_SAFEBUFFERS = VOID
DECLSPEC_NOINLINE = VOID
DECLSPEC_GUARDIGNORE = VOID
DECLSPEC_GUARDNOCF = VOID
DECLSPEC_GUARD_SUPPRESS = VOID
DECLSPEC_CHPE_GUEST = VOID
DECLSPEC_CHPE_PATCHABLE = VOID
FORCEINLINE = VOID
CFORCEINLINE = FORCEINLINE
STKFORCEINLINE = FORCEINLINE
PFORCEINLINE = FORCEINLINE
DECLSPEC_DEPRECATED = VOID
DECLSPEC_DEPRECATED_DDK = DECLSPEC_DEPRECATED
PRAGMA_DEPRECATED_DDK = 0x1

PVOID = POINTER(VOID)
PVOID64 = VOID
NTAPI = VOID
FASTCALL = NTAPI
NTAPI_INLINE = NTAPI
NTSYSAPI = DECLSPEC_IMPORT
NTSYSCALLAPI = DECLSPEC_IMPORT
WCHAR = ctypes.c_wchar
LPCWSTR = ctypes.c_wchar_p
LPWSTR = ctypes.c_wchar_p
LPCSTR = ctypes.c_wchar_p
LPSTR = ctypes.c_wchar_p
PWCHAR = POINTER(WCHAR)
LPWCH = POINTER(WCHAR)
PWCH = POINTER(WCHAR)
LPCWCH = POINTER(WCHAR)
PCWCH = POINTER(WCHAR)
NWPSTR = POINTER(WCHAR)
PWSTR = POINTER(WCHAR)
PZPWSTR = POINTER(PWSTR)
PCZPWSTR = POINTER(PWSTR)
LPUWSTR = POINTER(WCHAR)
PUWSTR = POINTER(WCHAR)
PCWSTR = POINTER(WCHAR)
PZPCWSTR = POINTER(PCWSTR)
PCZPCWSTR = POINTER(PCWSTR)
LPCUWSTR = POINTER(WCHAR)
PCUWSTR = POINTER(WCHAR)
PZZWSTR = POINTER(WCHAR)
PCZZWSTR = POINTER(WCHAR)
PUZZWSTR = POINTER(WCHAR)
PCUZZWSTR = POINTER(WCHAR)
PNZWCH = POINTER(WCHAR)
PCNZWCH = POINTER(WCHAR)
PUNZWCH = POINTER(WCHAR)
PCUNZWCH = POINTER(WCHAR)
LPCWCHAR = POINTER(WCHAR)
PCWCHAR = POINTER(WCHAR)
LPCUWCHAR = POINTER(WCHAR)
PCUWCHAR = POINTER(WCHAR)
UCSCHAR = UINT
UCSCHAR_INVALID_CHARACTER = 0xFFFFFFFF
MIN_UCSCHAR = 0x0
MAX_UCSCHAR = 0x0010FFFF
PUCSCHAR = POINTER(UCSCHAR)
PCUCSCHAR = POINTER(UCSCHAR)
PUCSSTR = POINTER(UCSCHAR)
PUUCSSTR = POINTER(UCSCHAR)
PCUCSSTR = POINTER(UCSCHAR)
PCUUCSSTR = POINTER(UCSCHAR)
PUUCSCHAR = POINTER(UCSCHAR)
PCUUCSCHAR = POINTER(UCSCHAR)
PCHAR = POINTER(CHAR)
LPCH = POINTER(CHAR)
PCH = POINTER(CHAR)
LPCCH = POINTER(CHAR)
PCCH = POINTER(CHAR)
NPSTR = POINTER(CHAR)
PSTR = POINTER(CHAR)
PZPSTR = POINTER(PSTR)
PCZPSTR = POINTER(PSTR)
PCSTR = POINTER(CHAR)
PZPCSTR = POINTER(PCSTR)
PCZPCSTR = POINTER(PCSTR)
PZZSTR = POINTER(CHAR)
PCZZSTR = POINTER(CHAR)
PNZCH = POINTER(CHAR)
PCNZCH = POINTER(CHAR)
TCHAR = WCHAR
PTCHAR = POINTER(WCHAR)
TUCHAR = WCHAR
PTUCHAR = POINTER(WCHAR)
LPTCH = LPWCH
PTCH = LPWCH
LPCTCH = LPCWCH
PCTCH = LPCWCH
PTSTR = LPWSTR
LPTSTR = LPWSTR
PCTSTR = LPCWSTR
LPCTSTR = LPCWSTR
PUTSTR = LPUWSTR
LPUTSTR = LPUWSTR
PCUTSTR = LPCUWSTR
LPCUTSTR = LPCUWSTR
LP = LPWSTR
PZZTSTR = PZZWSTR
PCZZTSTR = PCZZWSTR
PUZZTSTR = PUZZWSTR
PCUZZTSTR = PCUZZWSTR
PZPTSTR = PZPWSTR
PNZTCH = PNZWCH
PCNZTCH = PCNZWCH
PUNZTCH = PUNZWCH
PCUNZTCH = PCUNZWCH

USHORT = ctypes.c_ushort


def __TEXT(quote):
    return quote + '\x00'


def TEXT(quote):
    return __TEXT(quote)


class _QUAD(ctypes.Structure):

    class DUMMYUNIONNAME(ctypes.Union):
        _fields_ = [
            ('UseThisFieldToCopy', INT64),
            ('DoNotUseThisField', DOUBLE),
        ]

    _fields_ = [
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
    ]


QUAD = _QUAD

ULONG = ctypes.c_ulong
PSHORT = POINTER(SHORT)
PLONG = POINTER(LONG)
PQUAD = POINTER(QUAD)
UCHAR = UINT
UQUAD = QUAD
PUCHAR = POINTER(UCHAR)
PUSHORT = POINTER(USHORT)
PULONG = POINTER(ULONG)
PUQUAD = POINTER(UQUAD)
PCUCHAR = POINTER(UCHAR)
PCUSHORT = POINTER(USHORT)
PCULONG = POINTER(ULONG)
PCUQUAD = POINTER(UQUAD)
SCHAR = INT
PSCHAR = POINTER(SCHAR)
PCSCHAR = POINTER(SCHAR)
STRICT = 0x1
ALL_PROCESSOR_GROUPS = 0xffff


class _PROCESSOR_NUMBER(ctypes.Structure):
    _fields_ = [
        ('Group', USHORT),
        ('Number', UCHAR),
        ('Reserved', UCHAR),
    ]


PROCESSOR_NUMBER = _PROCESSOR_NUMBER
PPROCESSOR_NUMBER = POINTER(_PROCESSOR_NUMBER)


class _GROUP_AFFINITY(ctypes.Structure):
    _fields_ = [
        ('Mask', KAFFINITY),
        ('Group', USHORT),
        ('Reserved', USHORT * 3),
    ]


GROUP_AFFINITY = _GROUP_AFFINITY
PGROUP_AFFINITY = POINTER(_GROUP_AFFINITY)

from ctypes.wintypes import HANDLE


def DECLARE_HANDLE():
    return HANDLE


PHANDLE = POINTER(HANDLE)
FCHAR = UCHAR
FSHORT = USHORT
FLONG = ULONG
HRESULT = ctypes.HRESULT
STDMETHODCALLTYPE = VOID
STDMETHODVCALLTYPE = VOID
STDAPICALLTYPE = VOID
STDAPIVCALLTYPE = VOID
STDAPI = HRESULT


def STDAPI_(type):
    return type


STDMETHODIMP = HRESULT


def STDMETHODIMP_(type):
    return type


STDOVERRIDEMETHODIMP = STDMETHODIMP


def STDOVERRIDEMETHODIMP_(type):
    return type


IFACEMETHODIMP = STDMETHODIMP


def IFACEMETHODIMP_(type):
    return type


STDAPIV = HRESULT


def STDAPIV_(type):
    return type


STDMETHODIMPV = HRESULT


def STDMETHODIMPV_(type):
    return type


STDOVERRIDEMETHODIMPV = STDMETHODIMPV


def STDOVERRIDEMETHODIMPV_(type):
    return type


IFACEMETHODIMPV = STDMETHODIMPV


def IFACEMETHODIMPV_(type):
    return type


OBJ_HANDLE_TAGBITS = 0x00000003
CCHAR = CHAR
CSHORT = SHORT
CLONG = ULONG
PCCHAR = POINTER(CCHAR)
PCSHORT = POINTER(CSHORT)
PCLONG = POINTER(CLONG)
LCID = ULONG
PLCID = PULONG
LANGID = USHORT


class COMPARTMENT_ID(ENUM):
    UNSPECIFIED_COMPARTMENT_ID = 0
    DEFAULT_COMPARTMENT_ID = 1


PCOMPARTMENT_ID = POINTER(COMPARTMENT_ID)


LOGICAL = ULONG
PLOGICAL = POINTER(ULONG)
NTSTATUS = LONG
PNTSTATUS = POINTER(NTSTATUS)
PCNTSTATUS = POINTER(NTSTATUS)


def NT_SUCCESS(Status):
    return Status >= 0


def NT_INFORMATION(Status):
    return (Status >> 30) == 1


def NT_WARNING(Status):
    return (Status >> 30) == 2


def NT_ERROR(Status):
    return (Status >> 30) == 3


APPLICATION_ERROR_MASK = 0x20000000
ERROR_SEVERITY_SUCCESS = 0x00000000
ERROR_SEVERITY_INFORMATIONAL = 0x40000000
ERROR_SEVERITY_WARNING = 0x80000000
ERROR_SEVERITY_ERROR = 0xC0000000
SECURITY_STATUS = LONG


class _FLOAT128(ctypes.Structure):
    _fields_ = [
        ('LowPart', INT64),
        ('HighPart', INT64),
    ]


FLOAT128 = _FLOAT128
LowTime = INT64
HighTime = INT64

PFLOAT128 = POINTER(FLOAT128)
LONGLONG = INT64
ULONGLONG = ctypes.c_ulonglong
MAXLONGLONG = 0x7FFFFFFFFFFFFFFF
PLONGLONG = POINTER(LONGLONG)
PULONGLONG = POINTER(ULONGLONG)
USN = LONGLONG


import platform # NOQA

if platform.architecture()[0] == '32bit':
    MAX_NATURAL_ALIGNMENT = ctypes.sizeof(ULONG)
    MEMORY_ALLOCATION_ALIGNMENT = 0x8
    MAXIMUM_PROC_PER_GROUP = 0x20
else:
    MAX_NATURAL_ALIGNMENT = ctypes.sizeof(ULONGLONG)
    MEMORY_ALLOCATION_ALIGNMENT = 0x10
    MAXIMUM_PROC_PER_GROUP = 0x40

del platform

MAXIMUM_PROCESSORS = MAXIMUM_PROC_PER_GROUP


class _LARGE_INTEGER(ctypes.Union):

    class DUMMYSTRUCTNAME(ctypes.Structure):
        _fields_ = [
            ('LowPart', ULONG),
            ('HighPart', LONG),
        ]

    class u(ctypes.Structure):
        _fields_ = [
            ('LowPart', ULONG),
            ('HighPart', LONG),
        ]

    _fields_ = [
        ('DUMMYSTRUCTNAME', DUMMYSTRUCTNAME),
        ('u', u),
        ('QuadPart', LONGLONG),
    ]


LARGE_INTEGER = _LARGE_INTEGER
PLARGE_INTEGER = POINTER(LARGE_INTEGER)

TIME = LARGE_INTEGER
_TIME = _LARGE_INTEGER
PTIME = PLARGE_INTEGER


class _ULARGE_INTEGER(ctypes.Union):

    class DUMMYSTRUCTNAME(ctypes.Structure):
        _fields_ = [
            ('LowPart', ULONG),
            ('HighPart', ULONG),
        ]

    class u(ctypes.Structure):
        _fields_ = [
            ('LowPart', ULONG),
            ('HighPart', ULONG),
        ]

    _fields_ = [
        ('DUMMYSTRUCTNAME', DUMMYSTRUCTNAME),
        ('u', u),
        ('QuadPart', ULONGLONG),
    ]


ULARGE_INTEGER = _ULARGE_INTEGER
PULARGE_INTEGER = POINTER(ULARGE_INTEGER)
RTL_REFERENCE_COUNT = LONG_PTR
PRTL_REFERENCE_COUNT = POINTER(LONG_PTR)
RTL_REFERENCE_COUNT32 = LONG
PRTL_REFERENCE_COUNT32 = POINTER(LONG)


class _LUID(ctypes.Structure):
    _fields_ = [
        ('LowPart', ULONG),
        ('HighPart', LONG),
    ]


LUID = _LUID
PLUID = POINTER(_LUID)


DWORDLONG = ULONGLONG
PDWORDLONG = POINTER(DWORDLONG)
PHYSICAL_ADDRESS = LARGE_INTEGER
PPHYSICAL_ADDRESS = POINTER(LARGE_INTEGER)


def Int32x32To64(a, b):
    return a * b


def UInt32x32To64(a, b):
    return a * b


def Int64ShllMod32(a, b):
    return a << b


def Int64ShraMod32(a, b):
    return a >> b


def Int64ShrlMod32(a, b):
    return a >> b


def __rotl(v, b, m):
    return (
        ((v << b % m) & (2 ** m - 1)) |
        ((v & (2 ** m - 1)) >> (m - (b % m)))
    )


def _rotl8(v, b):
    return __rotl(v, b, 8)


def _rotl16(v, b):
    return __rotl(v, b, 16)


def _rotl32(v, b):
    return __rotl(v, b, 32)


def _rotl64(v, b):
    return __rotl(v, b, 64)


def __rotr(v, b, m):
    return (
        ((v & (2 ** m - 1)) >> b % m) |
        (v << (m - (b % m)) & (2 ** m - 1))
    )


def _rotr8(v, b):
    return __rotr(v, b, 8)


def _rotr16(v, b):
    return __rotr(v, b, 16)


def _rotr32(v, b):
    return __rotr(v, b, 8)


def _rotr64(v, b):
    return __rotr(v, b, 16)


RotateLeft8 = _rotl8
RotateLeft16 = _rotl16
RotateRight8 = _rotr8
RotateRight16 = _rotr16
RotateLeft32 = _rotl32
RotateLeft64 = _rotl64
RotateRight32 = _rotr32
RotateRight64 = _rotr64


class _EVENT_TYPE(ENUM):
    NotificationEvent = 0
    SynchronizationEvent = 1


EVENT_TYPE = _EVENT_TYPE


class _TIMER_TYPE(ENUM):
    NotificationTimer = 0
    SynchronizationTimer = 1


TIMER_TYPE = _TIMER_TYPE


class _WAIT_TYPE(ENUM):
    WaitAll = 0
    WaitAny = 1
    WaitNotification = 2
    WaitDequeue = 3


WAIT_TYPE = _WAIT_TYPE


PSZ = POINTER(CHAR)
PCSZ = POINTER(CHAR)
RTL_STRING_LENGTH_TYPE = USHORT


class _STRING(ctypes.Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', PCHAR),
    ]


STRING = _STRING
PSTRING = POINTER(STRING)
ANSI_STRING = STRING
PANSI_STRING = PSTRING
OEM_STRING = STRING
POEM_STRING = PSTRING
PCOEM_STRING = POINTER(STRING)


class _CSTRING(ctypes.Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', POINTER(CHAR)),
    ]


CSTRING = _CSTRING


PCSTRING = POINTER(CSTRING)
ANSI_NULL = '\00'
CANSI_STRING = STRING
PCANSI_STRING = PSTRING


class _UNICODE_STRING(ctypes.Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', POINTER(USHORT)),
    ]


UNICODE_STRING = _UNICODE_STRING
PUNICODE_STRING = POINTER(UNICODE_STRING)
PCUNICODE_STRING = POINTER(UNICODE_STRING)
UNICODE_NULL = '\00'
UNICODE_STRING_MAX_BYTES = 0xFFFE
UNICODE_STRING_MAX_CHARS = 0x7FFF


def DECLARE_CONST_UNICODE_STRING(_string):
    return _string.decode('utf-8')


def DECLARE_GLOBAL_CONST_UNICODE_STRING(_string):
    return _string.decode('utf-8')


def DECLARE_UNICODE_STRING_SIZE(_size):
    return WCHAR * _size


BOOLEAN = UCHAR
PBOOLEAN = POINTER(BOOLEAN)


class _LIST_ENTRY(ctypes.Structure):
    pass


_LIST_ENTRY._fields_ = [
        ('Flink', POINTER(_LIST_ENTRY)),
        ('Blink', POINTER(_LIST_ENTRY)),
    ]


LIST_ENTRY = _LIST_ENTRY
PLIST_ENTRY = POINTER(_LIST_ENTRY)
RESTRICTED_POINTERPRLIST_ENTRY = POINTER(_LIST_ENTRY)


class _SINGLE_LIST_ENTRY(ctypes.Structure):
    pass


_SINGLE_LIST_ENTRY._fields_ = [
        ('Next', POINTER(_SINGLE_LIST_ENTRY)),
    ]


SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY
PSINGLE_LIST_ENTRY = POINTER(_SINGLE_LIST_ENTRY)


class _RTL_BALANCED_NODE(ctypes.Structure):
    pass


class DUMMYUNIONNAME(ctypes.Union):
    class DUMMYSTRUCTNAME(ctypes.Structure):
        _fields_ = [
            ('Left', POINTER(_RTL_BALANCED_NODE)),
            ('Right', POINTER(_RTL_BALANCED_NODE)),
        ]


    _fields_ = [
        ('Children', POINTER(_RTL_BALANCED_NODE) * 2),
        ('s', DUMMYSTRUCTNAME),
    ]


class DUMMYUNIONNAME2(ctypes.Union):
    _fields_ = [
        ('Red : 1', UCHAR),
        ('Balance : 2', UCHAR),
        ('ParentValue', ULONG_PTR),
    ]


_RTL_BALANCED_NODE._fields_ = [
    ('u', DUMMYUNIONNAME),
    ('u2', DUMMYUNIONNAME2),
]


RTL_BALANCED_NODE = _RTL_BALANCED_NODE
PRTL_BALANCED_NODE = POINTER(_RTL_BALANCED_NODE)


RTL_BALANCED_NODE_RESERVED_PARENT_MASK = 0x3


def RTL_BALANCED_NODE_GET_PARENT_POINTER(Node):
    return PRTL_BALANCED_NODE(
        Node.ParentValue & ~RTL_BALANCED_NODE_RESERVED_PARENT_MASK
    )


class LIST_ENTRY32(ctypes.Structure):
    _fields_ = [
        ('Flink', ULONG),
        ('Blink', ULONG),
    ]


PLIST_ENTRY32 = POINTER(LIST_ENTRY32)


class LIST_ENTRY64(ctypes.Structure):
    _fields_ = [
        ('Flink', ULONGLONG),
        ('Blink', ULONGLONG),
    ]


PLIST_ENTRY64 = POINTER(LIST_ENTRY64)


class _SINGLE_LIST_ENTRY32(ctypes.Structure):
    _fields_ = [
        ('Next', ULONG),
    ]


SINGLE_LIST_ENTRY32 = _SINGLE_LIST_ENTRY32
PSINGLE_LIST_ENTRY32 = POINTER(_SINGLE_LIST_ENTRY32)


class _WNF_STATE_NAME(ctypes.Structure):
    _fields_ = [
        ('Data', ULONG * 2),
    ]


WNF_STATE_NAME = _WNF_STATE_NAME
PWNF_STATE_NAME = POINTER(_WNF_STATE_NAME)
PCWNF_STATE_NAME = POINTER(_WNF_STATE_NAME)


class _STRING32(ctypes.Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', ULONG),
    ]


STRING32 = _STRING32
PSTRING32 = POINTER(STRING32)
UNICODE_STRING32 = STRING32
PUNICODE_STRING32 = POINTER(UNICODE_STRING32)
ANSI_STRING32 = STRING32
PANSI_STRING32 = POINTER(ANSI_STRING32)


class _STRING64(ctypes.Structure):
    _fields_ = [
        ('Length', USHORT),
        ('MaximumLength', USHORT),
        ('Buffer', ULONGLONG),
    ]


STRING64 = _STRING64
PSTRING64 = POINTER(STRING64)
UNICODE_STRING64 = STRING64
PUNICODE_STRING64 = POINTER(UNICODE_STRING64)
ANSI_STRING64 = STRING64
PANSI_STRING64 = POINTER(ANSI_STRING64)


OBJ_INHERIT = 0x00000002
OBJ_PERMANENT = 0x00000010
OBJ_EXCLUSIVE = 0x00000020
OBJ_CASE_INSENSITIVE = 0x00000040
OBJ_OPENIF = 0x00000080
OBJ_OPENLINK = 0x00000100
OBJ_KERNEL_HANDLE = 0x00000200
OBJ_FORCE_ACCESS_CHECK = 0x00000400
OBJ_IGNORE_IMPERSONATED_DEVICEMAP = 0x00000800
OBJ_DONT_REPARSE = 0x00001000
OBJ_VALID_ATTRIBUTES = 0x00001FF2


class _OBJECT_ATTRIBUTES64(ctypes.Structure):
    _fields_ = [
        ('Length', ULONG),
        ('RootDirectory', ULONG64),
        ('ObjectName', ULONG64),
        ('Attributes', ULONG),
        ('SecurityDescriptor', ULONG64),
        ('SecurityQualityOfService', ULONG64),
    ]


OBJECT_ATTRIBUTES64 = _OBJECT_ATTRIBUTES64
POBJECT_ATTRIBUTES64 = POINTER(OBJECT_ATTRIBUTES64)
PCOBJECT_ATTRIBUTES64 = POINTER(CONST)


class _OBJECT_ATTRIBUTES32(ctypes.Structure):
    _fields_ = [
        ('Length', ULONG),
        ('RootDirectory', ULONG),
        ('ObjectName', ULONG),
        ('Attributes', ULONG),
        ('SecurityDescriptor', ULONG),
        ('SecurityQualityOfService', ULONG),
    ]


OBJECT_ATTRIBUTES32 = _OBJECT_ATTRIBUTES32
POBJECT_ATTRIBUTES32 = POINTER(OBJECT_ATTRIBUTES32)
PCOBJECT_ATTRIBUTES32 = POINTER(CONST)


class _OBJECT_ATTRIBUTES(ctypes.Structure):
    _fields_ = [
        ('Length', ULONG),
        ('RootDirectory', HANDLE),
        ('ObjectName', PUNICODE_STRING),
        ('Attributes', ULONG),
        ('SecurityDescriptor', PVOID),
        ('SecurityQualityOfService', PVOID),
    ]


OBJECT_ATTRIBUTES = _OBJECT_ATTRIBUTES
POBJECT_ATTRIBUTES = POINTER(OBJECT_ATTRIBUTES)
PCOBJECT_ATTRIBUTES = POINTER(CONST)


def InitializeObjectAttributes(p, n, a, r, s):
    p.Length = ctypes.sizeof(OBJECT_ATTRIBUTES)
    p.RootDirectory = r
    p.Attributes = a
    p.ObjectName = n
    p.SecurityDescriptor = s
    p.SecurityQualityOfService = NULL
    return p


def RTL_CONSTANT_OBJECT_ATTRIBUTES(n, a):
    return (
        ctypes.sizeof(OBJECT_ATTRIBUTES),
        NULL,
        RTL_CONST_CAST(PUNICODE_STRING)(n),
        a,
        NULL,
        NULL
    )


def RTL_INIT_OBJECT_ATTRIBUTES(n, a):
    return RTL_CONSTANT_OBJECT_ATTRIBUTES(n, a)


FALSE = 0x0
TRUE = 0x1
NULL = 0x0
NULL64 = 0x0


from .guiddef_h import * # NOQA


class _OBJECTID(ctypes.Structure):
    _fields_ = [
        ('Lineage', GUID),
        ('Uniquifier', ULONG),
    ]


OBJECTID = _OBJECTID


MINCHAR = 0x80
MAXCHAR = 0x7f
MINSHORT = 0x8000
MAXSHORT = 0x7fff
MINLONG = 0x80000000
MAXLONG = 0x7fffffff
MAXUCHAR = 0xff
MAXUSHORT = 0xffff
MAXULONG = 0xffffffff


def ARGUMENT_PRESENT(ArgumentPointer):
    return ArgumentPointer != CHAR


def FIELD_OFFSET(type):
    return ctypes.byref(type(0))


def UFIELD_OFFSET(type):
    return ctypes.byref(type(0))


def RTL_FIELD_SIZE(type):
    return ctypes.sizeof(ctypes.byref(type(0)))


def RTL_SIZEOF_THROUGH_FIELD(type):
    return FIELD_OFFSET(type) + RTL_FIELD_SIZE(type)


def RTL_CONTAINS_FIELD(Struct, Size, Field):
    pass
    # return ((((&Struct.Field)) + ctypes.sizeof(Struct.Field)) <= ((Struct)+Size))


def RTL_NUMBER_OF_V1(A):
    return ctypes.sizeof(A) / ctypes.sizeof(A[0])


def RTL_NUMBER_OF_V2(A):
    return RTL_NUMBER_OF_V1(A)


def RTL_NUMBER_OF(A):
    return RTL_NUMBER_OF_V2(A)


def ARRAYSIZE(A):
    return RTL_NUMBER_OF_V2(A)


def _ARRAYSIZE(A):
    return RTL_NUMBER_OF_V1(A)


def RTL_FIELD_TYPE(type):
    return type(0)


def RTL_NUMBER_OF_FIELD(type):
    return RTL_NUMBER_OF(RTL_FIELD_TYPE(type))


def RTL_PADDING_BETWEEN_FIELDS(T, F1, F2):
    pass
    # return ((FIELD_OFFSET(T) > FIELD_OFFSETT, F1) ? (FIELD_OFFSETT, F2 - FIELD_OFFSETT, F1 - RTL_FIELD_SIZET, F1) : (FIELD_OFFSETT, F1 - FIELD_OFFSETT, F2 - RTL_FIELD_SIZET, F2))


def RTL_CONST_CAST(type):
    return type


def _RTL_CONSTANT_STRING_remove_const_macro(s):
    return s


def RTL_CONSTANT_STRING(s):
    pass
    # return { ctypes.sizeof s - ctypes.sizeof( s[0] ), ctypes.sizeof s / ctypes.sizeof(_RTL_CONSTANT_STRING_type_checks), _RTL_CONSTANT_STRING_remove_const_macros }


def RTL_BITS_OF(sizeOfArg):
    return ctypes.sizeof(sizeOfArg) * 8


def RTL_BITS_OF_FIELD(type):
    return RTL_BITS_OF(RTL_FIELD_TYPE(type))


def CONTAINING_RECORD(address, type, field):
    pass
    # return (type *( address - (&(type *0).field)))


# from .excpt_h import * # NOQA

# EXCEPTION_ROUTINE (
#     _Inout_ struct _EXCEPTION_RECORD *ExceptionRecord,
#     _In_ PVOID EstablisherFrame,
#     _Inout_ struct _CONTEXT *ContextRecord,
#     _In_ PVOID DispatcherContext
#     );


# PEXCEPTION_ROUTINE = POINTER(EXCEPTION_ROUTINE)


KIRQL = UCHAR
PKIRQL = POINTER(KIRQL)


class _NT_PRODUCT_TYPE(ENUM):
    NtProductWinNt = 1
    NtProductLanManNt = 2
    NtProductServer = 3


NT_PRODUCT_TYPE = _NT_PRODUCT_TYPE
PNT_PRODUCT_TYPE = POINTER(_NT_PRODUCT_TYPE)


class _SUITE_TYPE(ENUM):
    SmallBusiness = 0
    Enterprise = 1
    BackOffice = 2
    CommunicationServer = 3
    TerminalServer = 4
    SmallBusinessRestricted = 5
    EmbeddedNT = 6
    DataCenter = 7
    SingleUserTS = 8
    Personal = 9
    Blade = 10
    EmbeddedRestricted = 11
    SecurityAppliance = 12
    StorageServer = 13
    ComputeServer = 14
    WHServer = 15
    PhoneNT = 16
    MultiUserTS = 17
    MaxSuiteType = 18


SUITE_TYPE = _SUITE_TYPE


VER_SERVER_NT = 0x80000000
VER_WORKSTATION_NT = 0x40000000
VER_SUITE_SMALLBUSINESS = 0x00000001
VER_SUITE_ENTERPRISE = 0x00000002
VER_SUITE_BACKOFFICE = 0x00000004
VER_SUITE_COMMUNICATIONS = 0x00000008
VER_SUITE_TERMINAL = 0x00000010
VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x00000020
VER_SUITE_EMBEDDEDNT = 0x00000040
VER_SUITE_DATACENTER = 0x00000080
VER_SUITE_SINGLEUSERTS = 0x00000100
VER_SUITE_PERSONAL = 0x00000200
VER_SUITE_BLADE = 0x00000400
VER_SUITE_EMBEDDED_RESTRICTED = 0x00000800
VER_SUITE_SECURITY_APPLIANCE = 0x00001000
VER_SUITE_STORAGE_SERVER = 0x00002000
VER_SUITE_COMPUTE_SERVER = 0x00004000
VER_SUITE_WH_SERVER = 0x00008000
VER_SUITE_MULTIUSERTS = 0x00020000
PRODUCT_UNDEFINED = 0x00000000
PRODUCT_ULTIMATE = 0x00000001
PRODUCT_HOME_BASIC = 0x00000002
PRODUCT_HOME_PREMIUM = 0x00000003
PRODUCT_ENTERPRISE = 0x00000004
PRODUCT_HOME_BASIC_N = 0x00000005
PRODUCT_BUSINESS = 0x00000006
PRODUCT_STANDARD_SERVER = 0x00000007
PRODUCT_DATACENTER_SERVER = 0x00000008
PRODUCT_SMALLBUSINESS_SERVER = 0x00000009
PRODUCT_ENTERPRISE_SERVER = 0x0000000A
PRODUCT_STARTER = 0x0000000B
PRODUCT_DATACENTER_SERVER_CORE = 0x0000000C
PRODUCT_STANDARD_SERVER_CORE = 0x0000000D
PRODUCT_ENTERPRISE_SERVER_CORE = 0x0000000E
PRODUCT_ENTERPRISE_SERVER_IA64 = 0x0000000F
PRODUCT_BUSINESS_N = 0x00000010
PRODUCT_WEB_SERVER = 0x00000011
PRODUCT_CLUSTER_SERVER = 0x00000012
PRODUCT_HOME_SERVER = 0x00000013
PRODUCT_STORAGE_EXPRESS_SERVER = 0x00000014
PRODUCT_STORAGE_STANDARD_SERVER = 0x00000015
PRODUCT_STORAGE_WORKGROUP_SERVER = 0x00000016
PRODUCT_STORAGE_ENTERPRISE_SERVER = 0x00000017
PRODUCT_SERVER_FOR_SMALLBUSINESS = 0x00000018
PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 0x00000019
PRODUCT_HOME_PREMIUM_N = 0x0000001A
PRODUCT_ENTERPRISE_N = 0x0000001B
PRODUCT_ULTIMATE_N = 0x0000001C
PRODUCT_WEB_SERVER_CORE = 0x0000001D
PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 0x0000001E
PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 0x0000001F
PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 0x00000020
PRODUCT_SERVER_FOUNDATION = 0x00000021
PRODUCT_HOME_PREMIUM_SERVER = 0x00000022
PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 0x00000023
PRODUCT_STANDARD_SERVER_V = 0x00000024
PRODUCT_DATACENTER_SERVER_V = 0x00000025
PRODUCT_ENTERPRISE_SERVER_V = 0x00000026
PRODUCT_DATACENTER_SERVER_CORE_V = 0x00000027
PRODUCT_STANDARD_SERVER_CORE_V = 0x00000028
PRODUCT_ENTERPRISE_SERVER_CORE_V = 0x00000029
PRODUCT_HYPERV = 0x0000002A
PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 0x0000002B
PRODUCT_STORAGE_STANDARD_SERVER_CORE = 0x0000002C
PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 0x0000002D
PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 0x0000002E
PRODUCT_STARTER_N = 0x0000002F
PRODUCT_PROFESSIONAL = 0x00000030
PRODUCT_PROFESSIONAL_N = 0x00000031
PRODUCT_SB_SOLUTION_SERVER = 0x00000032
PRODUCT_SERVER_FOR_SB_SOLUTIONS = 0x00000033
PRODUCT_STANDARD_SERVER_SOLUTIONS = 0x00000034
PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 0x00000035
PRODUCT_SB_SOLUTION_SERVER_EM = 0x00000036
PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 0x00000037
PRODUCT_SOLUTION_EMBEDDEDSERVER = 0x00000038
PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 0x00000039
PRODUCT_PROFESSIONAL_EMBEDDED = 0x0000003A
PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 0x0000003B
PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 0x0000003C
PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 0x0000003D
PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 0x0000003E
PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 0x0000003F
PRODUCT_CLUSTER_SERVER_V = 0x00000040
PRODUCT_EMBEDDED = 0x00000041
PRODUCT_STARTER_E = 0x00000042
PRODUCT_HOME_BASIC_E = 0x00000043
PRODUCT_HOME_PREMIUM_E = 0x00000044
PRODUCT_PROFESSIONAL_E = 0x00000045
PRODUCT_ENTERPRISE_E = 0x00000046
PRODUCT_ULTIMATE_E = 0x00000047
PRODUCT_ENTERPRISE_EVALUATION = 0x00000048
PRODUCT_MULTIPOINT_STANDARD_SERVER = 0x0000004C
PRODUCT_MULTIPOINT_PREMIUM_SERVER = 0x0000004D
PRODUCT_STANDARD_EVALUATION_SERVER = 0x0000004F
PRODUCT_DATACENTER_EVALUATION_SERVER = 0x00000050
PRODUCT_ENTERPRISE_N_EVALUATION = 0x00000054
PRODUCT_EMBEDDED_AUTOMOTIVE = 0x00000055
PRODUCT_EMBEDDED_INDUSTRY_A = 0x00000056
PRODUCT_THINPC = 0x00000057
PRODUCT_EMBEDDED_A = 0x00000058
PRODUCT_EMBEDDED_INDUSTRY = 0x00000059
PRODUCT_EMBEDDED_E = 0x0000005A
PRODUCT_EMBEDDED_INDUSTRY_E = 0x0000005B
PRODUCT_EMBEDDED_INDUSTRY_A_E = 0x0000005C
PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 0x0000005F
PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 0x00000060
PRODUCT_CORE_ARM = 0x00000061
PRODUCT_CORE_N = 0x00000062
PRODUCT_CORE_COUNTRYSPECIFIC = 0x00000063
PRODUCT_CORE_SINGLELANGUAGE = 0x00000064
PRODUCT_CORE = 0x00000065
PRODUCT_PROFESSIONAL_WMC = 0x00000067
PRODUCT_EMBEDDED_INDUSTRY_EVAL = 0x00000069
PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 0x0000006A
PRODUCT_EMBEDDED_EVAL = 0x0000006B
PRODUCT_EMBEDDED_E_EVAL = 0x0000006C
PRODUCT_NANO_SERVER = 0x0000006D
PRODUCT_CLOUD_STORAGE_SERVER = 0x0000006E
PRODUCT_CORE_CONNECTED = 0x0000006F
PRODUCT_PROFESSIONAL_STUDENT = 0x00000070
PRODUCT_CORE_CONNECTED_N = 0x00000071
PRODUCT_PROFESSIONAL_STUDENT_N = 0x00000072
PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 0x00000073
PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 0x00000074
PRODUCT_CONNECTED_CAR = 0x00000075
PRODUCT_INDUSTRY_HANDHELD = 0x00000076
PRODUCT_PPI_PRO = 0x00000077
PRODUCT_ARM64_SERVER = 0x00000078
PRODUCT_EDUCATION = 0x00000079
PRODUCT_EDUCATION_N = 0x0000007A
PRODUCT_IOTUAP = 0x0000007B
PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 0x0000007C
PRODUCT_ENTERPRISE_S = 0x0000007D
PRODUCT_ENTERPRISE_S_N = 0x0000007E
PRODUCT_PROFESSIONAL_S = 0x0000007F
PRODUCT_PROFESSIONAL_S_N = 0x00000080
PRODUCT_ENTERPRISE_S_EVALUATION = 0x00000081
PRODUCT_ENTERPRISE_S_N_EVALUATION = 0x00000082
PRODUCT_HOLOGRAPHIC = 0x00000087
PRODUCT_PRO_SINGLE_LANGUAGE = 0x0000008A
PRODUCT_PRO_CHINA = 0x0000008B
PRODUCT_ENTERPRISE_SUBSCRIPTION = 0x0000008C
PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 0x0000008D
PRODUCT_DATACENTER_NANO_SERVER = 0x0000008F
PRODUCT_STANDARD_NANO_SERVER = 0x00000090
PRODUCT_DATACENTER_A_SERVER_CORE = 0x00000091
PRODUCT_STANDARD_A_SERVER_CORE = 0x00000092
PRODUCT_DATACENTER_WS_SERVER_CORE = 0x00000093
PRODUCT_STANDARD_WS_SERVER_CORE = 0x00000094
PRODUCT_UTILITY_VM = 0x00000095
PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 0x0000009F
PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 0x000000A0
PRODUCT_PRO_WORKSTATION = 0x000000A1
PRODUCT_PRO_WORKSTATION_N = 0x000000A2
PRODUCT_PRO_FOR_EDUCATION = 0x000000A4
PRODUCT_PRO_FOR_EDUCATION_N = 0x000000A5
PRODUCT_AZURE_SERVER_CORE = 0x000000A8
PRODUCT_AZURE_NANO_SERVER = 0x000000A9
PRODUCT_ENTERPRISEG = 0x000000AB
PRODUCT_ENTERPRISEGN = 0x000000AC
PRODUCT_SERVERRDSH = 0x000000AF
PRODUCT_CLOUD = 0x000000B2
PRODUCT_CLOUDN = 0x000000B3
PRODUCT_HUBOS = 0x000000B4
PRODUCT_ONECOREUPDATEOS = 0x000000B6
PRODUCT_ANDROMEDA = 0x000000B8
PRODUCT_UNLICENSED = 0xABCDABCD

# from .sdkddkver_h import * # NOQA


LANG_NEUTRAL = 0x00
LANG_INVARIANT = 0x7f
LANG_AFRIKAANS = 0x36
LANG_ALBANIAN = 0x1c
LANG_ALSATIAN = 0x84
LANG_AMHARIC = 0x5e
LANG_ARABIC = 0x01
LANG_ARMENIAN = 0x2b
LANG_ASSAMESE = 0x4d
LANG_AZERI = 0x2c
LANG_AZERBAIJANI = 0x2c
LANG_BANGLA = 0x45
LANG_BASHKIR = 0x6d
LANG_BASQUE = 0x2d
LANG_BELARUSIAN = 0x23
LANG_BENGALI = 0x45
LANG_BRETON = 0x7e
LANG_BOSNIAN = 0x1a
LANG_BOSNIAN_NEUTRAL = 0x781a
LANG_BULGARIAN = 0x02
LANG_CATALAN = 0x03
LANG_CENTRAL_KURDISH = 0x92
LANG_CHEROKEE = 0x5c
LANG_CHINESE = 0x04
LANG_CHINESE_SIMPLIFIED = 0x04
LANG_CHINESE_TRADITIONAL = 0x7c04
LANG_CORSICAN = 0x83
LANG_CROATIAN = 0x1a
LANG_CZECH = 0x05
LANG_DANISH = 0x06
LANG_DARI = 0x8c
LANG_DIVEHI = 0x65
LANG_DUTCH = 0x13
LANG_ENGLISH = 0x09
LANG_ESTONIAN = 0x25
LANG_FAEROESE = 0x38
LANG_FARSI = 0x29
LANG_FILIPINO = 0x64
LANG_FINNISH = 0x0b
LANG_FRENCH = 0x0c
LANG_FRISIAN = 0x62
LANG_FULAH = 0x67
LANG_GALICIAN = 0x56
LANG_GEORGIAN = 0x37
LANG_GERMAN = 0x07
LANG_GREEK = 0x08
LANG_GREENLANDIC = 0x6f
LANG_GUJARATI = 0x47
LANG_HAUSA = 0x68
LANG_HAWAIIAN = 0x75
LANG_HEBREW = 0x0d
LANG_HINDI = 0x39
LANG_HUNGARIAN = 0x0e
LANG_ICELANDIC = 0x0f
LANG_IGBO = 0x70
LANG_INDONESIAN = 0x21
LANG_INUKTITUT = 0x5d
LANG_IRISH = 0x3c
LANG_ITALIAN = 0x10
LANG_JAPANESE = 0x11
LANG_KANNADA = 0x4b
LANG_KASHMIRI = 0x60
LANG_KAZAK = 0x3f
LANG_KHMER = 0x53
LANG_KICHE = 0x86
LANG_KINYARWANDA = 0x87
LANG_KONKANI = 0x57
LANG_KOREAN = 0x12
LANG_KYRGYZ = 0x40
LANG_LAO = 0x54
LANG_LATVIAN = 0x26
LANG_LITHUANIAN = 0x27
LANG_LOWER_SORBIAN = 0x2e
LANG_LUXEMBOURGISH = 0x6e
LANG_MACEDONIAN = 0x2f
LANG_MALAY = 0x3e
LANG_MALAYALAM = 0x4c
LANG_MALTESE = 0x3a
LANG_MANIPURI = 0x58
LANG_MAORI = 0x81
LANG_MAPUDUNGUN = 0x7a
LANG_MARATHI = 0x4e
LANG_MOHAWK = 0x7c
LANG_MONGOLIAN = 0x50
LANG_NEPALI = 0x61
LANG_NORWEGIAN = 0x14
LANG_OCCITAN = 0x82
LANG_ODIA = 0x48
LANG_ORIYA = 0x48
LANG_PASHTO = 0x63
LANG_PERSIAN = 0x29
LANG_POLISH = 0x15
LANG_PORTUGUESE = 0x16
LANG_PULAR = 0x67
LANG_PUNJABI = 0x46
LANG_QUECHUA = 0x6b
LANG_ROMANIAN = 0x18
LANG_ROMANSH = 0x17
LANG_RUSSIAN = 0x19
LANG_SAKHA = 0x85
LANG_SAMI = 0x3b
LANG_SANSKRIT = 0x4f
LANG_SCOTTISH_GAELIC = 0x91
LANG_SERBIAN = 0x1a
LANG_SERBIAN_NEUTRAL = 0x7c1a
LANG_SINDHI = 0x59
LANG_SINHALESE = 0x5b
LANG_SLOVAK = 0x1b
LANG_SLOVENIAN = 0x24
LANG_SOTHO = 0x6c
LANG_SPANISH = 0x0a
LANG_SWAHILI = 0x41
LANG_SWEDISH = 0x1d
LANG_SYRIAC = 0x5a
LANG_TAJIK = 0x28
LANG_TAMAZIGHT = 0x5f
LANG_TAMIL = 0x49
LANG_TATAR = 0x44
LANG_TELUGU = 0x4a
LANG_THAI = 0x1e
LANG_TIBETAN = 0x51
LANG_TIGRIGNA = 0x73
LANG_TIGRINYA = 0x73
LANG_TSWANA = 0x32
LANG_TURKISH = 0x1f
LANG_TURKMEN = 0x42
LANG_UIGHUR = 0x80
LANG_UKRAINIAN = 0x22
LANG_UPPER_SORBIAN = 0x2e
LANG_URDU = 0x20
LANG_UZBEK = 0x43
LANG_VALENCIAN = 0x03
LANG_VIETNAMESE = 0x2a
LANG_WELSH = 0x52
LANG_WOLOF = 0x88
LANG_XHOSA = 0x34
LANG_YAKUT = 0x85
LANG_YI = 0x78
LANG_YORUBA = 0x6a
LANG_ZULU = 0x35
SUBLANG_NEUTRAL = 0x00
SUBLANG_DEFAULT = 0x01
SUBLANG_SYS_DEFAULT = 0x02
SUBLANG_CUSTOM_DEFAULT = 0x03
SUBLANG_CUSTOM_UNSPECIFIED = 0x04
SUBLANG_UI_CUSTOM_DEFAULT = 0x05
SUBLANG_AFRIKAANS_SOUTH_AFRICA = 0x01
SUBLANG_ALBANIAN_ALBANIA = 0x01
SUBLANG_ALSATIAN_FRANCE = 0x01
SUBLANG_AMHARIC_ETHIOPIA = 0x01
SUBLANG_ARABIC_SAUDI_ARABIA = 0x01
SUBLANG_ARABIC_IRAQ = 0x02
SUBLANG_ARABIC_EGYPT = 0x03
SUBLANG_ARABIC_LIBYA = 0x04
SUBLANG_ARABIC_ALGERIA = 0x05
SUBLANG_ARABIC_MOROCCO = 0x06
SUBLANG_ARABIC_TUNISIA = 0x07
SUBLANG_ARABIC_OMAN = 0x08
SUBLANG_ARABIC_YEMEN = 0x09
SUBLANG_ARABIC_SYRIA = 0x0a
SUBLANG_ARABIC_JORDAN = 0x0b
SUBLANG_ARABIC_LEBANON = 0x0c
SUBLANG_ARABIC_KUWAIT = 0x0d
SUBLANG_ARABIC_UAE = 0x0e
SUBLANG_ARABIC_BAHRAIN = 0x0f
SUBLANG_ARABIC_QATAR = 0x10
SUBLANG_ARMENIAN_ARMENIA = 0x01
SUBLANG_ASSAMESE_INDIA = 0x01
SUBLANG_AZERI_LATIN = 0x01
SUBLANG_AZERI_CYRILLIC = 0x02
SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 0x01
SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 0x02
SUBLANG_BANGLA_INDIA = 0x01
SUBLANG_BANGLA_BANGLADESH = 0x02
SUBLANG_BASHKIR_RUSSIA = 0x01
SUBLANG_BASQUE_BASQUE = 0x01
SUBLANG_BELARUSIAN_BELARUS = 0x01
SUBLANG_BENGALI_INDIA = 0x01
SUBLANG_BENGALI_BANGLADESH = 0x02
SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 0x05
SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x08
SUBLANG_BRETON_FRANCE = 0x01
SUBLANG_BULGARIAN_BULGARIA = 0x01
SUBLANG_CATALAN_CATALAN = 0x01
SUBLANG_CENTRAL_KURDISH_IRAQ = 0x01
SUBLANG_CHEROKEE_CHEROKEE = 0x01
SUBLANG_CHINESE_TRADITIONAL = 0x01
SUBLANG_CHINESE_SIMPLIFIED = 0x02
SUBLANG_CHINESE_HONGKONG = 0x03
SUBLANG_CHINESE_SINGAPORE = 0x04
SUBLANG_CHINESE_MACAU = 0x05
SUBLANG_CORSICAN_FRANCE = 0x01
SUBLANG_CZECH_CZECH_REPUBLIC = 0x01
SUBLANG_CROATIAN_CROATIA = 0x01
SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 0x04
SUBLANG_DANISH_DENMARK = 0x01
SUBLANG_DARI_AFGHANISTAN = 0x01
SUBLANG_DIVEHI_MALDIVES = 0x01
SUBLANG_DUTCH = 0x01
SUBLANG_DUTCH_BELGIAN = 0x02
SUBLANG_ENGLISH_US = 0x01
SUBLANG_ENGLISH_UK = 0x02
SUBLANG_ENGLISH_AUS = 0x03
SUBLANG_ENGLISH_CAN = 0x04
SUBLANG_ENGLISH_NZ = 0x05
SUBLANG_ENGLISH_EIRE = 0x06
SUBLANG_ENGLISH_SOUTH_AFRICA = 0x07
SUBLANG_ENGLISH_JAMAICA = 0x08
SUBLANG_ENGLISH_CARIBBEAN = 0x09
SUBLANG_ENGLISH_BELIZE = 0x0a
SUBLANG_ENGLISH_TRINIDAD = 0x0b
SUBLANG_ENGLISH_ZIMBABWE = 0x0c
SUBLANG_ENGLISH_PHILIPPINES = 0x0d
SUBLANG_ENGLISH_INDIA = 0x10
SUBLANG_ENGLISH_MALAYSIA = 0x11
SUBLANG_ENGLISH_SINGAPORE = 0x12
SUBLANG_ESTONIAN_ESTONIA = 0x01
SUBLANG_FAEROESE_FAROE_ISLANDS = 0x01
SUBLANG_FILIPINO_PHILIPPINES = 0x01
SUBLANG_FINNISH_FINLAND = 0x01
SUBLANG_FRENCH = 0x01
SUBLANG_FRENCH_BELGIAN = 0x02
SUBLANG_FRENCH_CANADIAN = 0x03
SUBLANG_FRENCH_SWISS = 0x04
SUBLANG_FRENCH_LUXEMBOURG = 0x05
SUBLANG_FRENCH_MONACO = 0x06
SUBLANG_FRISIAN_NETHERLANDS = 0x01
SUBLANG_FULAH_SENEGAL = 0x02
SUBLANG_GALICIAN_GALICIAN = 0x01
SUBLANG_GEORGIAN_GEORGIA = 0x01
SUBLANG_GERMAN = 0x01
SUBLANG_GERMAN_SWISS = 0x02
SUBLANG_GERMAN_AUSTRIAN = 0x03
SUBLANG_GERMAN_LUXEMBOURG = 0x04
SUBLANG_GERMAN_LIECHTENSTEIN = 0x05
SUBLANG_GREEK_GREECE = 0x01
SUBLANG_GREENLANDIC_GREENLAND = 0x01
SUBLANG_GUJARATI_INDIA = 0x01
SUBLANG_HAUSA_NIGERIA_LATIN = 0x01
SUBLANG_HAWAIIAN_US = 0x01
SUBLANG_HEBREW_ISRAEL = 0x01
SUBLANG_HINDI_INDIA = 0x01
SUBLANG_HUNGARIAN_HUNGARY = 0x01
SUBLANG_ICELANDIC_ICELAND = 0x01
SUBLANG_IGBO_NIGERIA = 0x01
SUBLANG_INDONESIAN_INDONESIA = 0x01
SUBLANG_INUKTITUT_CANADA = 0x01
SUBLANG_INUKTITUT_CANADA_LATIN = 0x02
SUBLANG_IRISH_IRELAND = 0x02
SUBLANG_ITALIAN = 0x01
SUBLANG_ITALIAN_SWISS = 0x02
SUBLANG_JAPANESE_JAPAN = 0x01
SUBLANG_KANNADA_INDIA = 0x01
SUBLANG_KASHMIRI_SASIA = 0x02
SUBLANG_KASHMIRI_INDIA = 0x02
SUBLANG_KAZAK_KAZAKHSTAN = 0x01
SUBLANG_KHMER_CAMBODIA = 0x01
SUBLANG_KICHE_GUATEMALA = 0x01
SUBLANG_KINYARWANDA_RWANDA = 0x01
SUBLANG_KONKANI_INDIA = 0x01
SUBLANG_KOREAN = 0x01
SUBLANG_KYRGYZ_KYRGYZSTAN = 0x01
SUBLANG_LAO_LAO = 0x01
SUBLANG_LATVIAN_LATVIA = 0x01
SUBLANG_LITHUANIAN = 0x01
SUBLANG_LOWER_SORBIAN_GERMANY = 0x02
SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 0x01
SUBLANG_MACEDONIAN_MACEDONIA = 0x01
SUBLANG_MALAY_MALAYSIA = 0x01
SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x02
SUBLANG_MALAYALAM_INDIA = 0x01
SUBLANG_MALTESE_MALTA = 0x01
SUBLANG_MAORI_NEW_ZEALAND = 0x01
SUBLANG_MAPUDUNGUN_CHILE = 0x01
SUBLANG_MARATHI_INDIA = 0x01
SUBLANG_MOHAWK_MOHAWK = 0x01
SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 0x01
SUBLANG_MONGOLIAN_PRC = 0x02
SUBLANG_NEPALI_INDIA = 0x02
SUBLANG_NEPALI_NEPAL = 0x01
SUBLANG_NORWEGIAN_BOKMAL = 0x01
SUBLANG_NORWEGIAN_NYNORSK = 0x02
SUBLANG_OCCITAN_FRANCE = 0x01
SUBLANG_ODIA_INDIA = 0x01
SUBLANG_ORIYA_INDIA = 0x01
SUBLANG_PASHTO_AFGHANISTAN = 0x01
SUBLANG_PERSIAN_IRAN = 0x01
SUBLANG_POLISH_POLAND = 0x01
SUBLANG_PORTUGUESE = 0x02
SUBLANG_PORTUGUESE_BRAZILIAN = 0x01
SUBLANG_PULAR_SENEGAL = 0x02
SUBLANG_PUNJABI_INDIA = 0x01
SUBLANG_PUNJABI_PAKISTAN = 0x02
SUBLANG_QUECHUA_BOLIVIA = 0x01
SUBLANG_QUECHUA_ECUADOR = 0x02
SUBLANG_QUECHUA_PERU = 0x03
SUBLANG_ROMANIAN_ROMANIA = 0x01
SUBLANG_ROMANSH_SWITZERLAND = 0x01
SUBLANG_RUSSIAN_RUSSIA = 0x01
SUBLANG_SAKHA_RUSSIA = 0x01
SUBLANG_SAMI_NORTHERN_NORWAY = 0x01
SUBLANG_SAMI_NORTHERN_SWEDEN = 0x02
SUBLANG_SAMI_NORTHERN_FINLAND = 0x03
SUBLANG_SAMI_LULE_NORWAY = 0x04
SUBLANG_SAMI_LULE_SWEDEN = 0x05
SUBLANG_SAMI_SOUTHERN_NORWAY = 0x06
SUBLANG_SAMI_SOUTHERN_SWEDEN = 0x07
SUBLANG_SAMI_SKOLT_FINLAND = 0x08
SUBLANG_SAMI_INARI_FINLAND = 0x09
SUBLANG_SANSKRIT_INDIA = 0x01
SUBLANG_SCOTTISH_GAELIC = 0x01
SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 0x06
SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x07
SUBLANG_SERBIAN_MONTENEGRO_LATIN = 0x0b
SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 0x0c
SUBLANG_SERBIAN_SERBIA_LATIN = 0x09
SUBLANG_SERBIAN_SERBIA_CYRILLIC = 0x0a
SUBLANG_SERBIAN_CROATIA = 0x01
SUBLANG_SERBIAN_LATIN = 0x02
SUBLANG_SERBIAN_CYRILLIC = 0x03
SUBLANG_SINDHI_INDIA = 0x01
SUBLANG_SINDHI_PAKISTAN = 0x02
SUBLANG_SINDHI_AFGHANISTAN = 0x02
SUBLANG_SINHALESE_SRI_LANKA = 0x01
SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 0x01
SUBLANG_SLOVAK_SLOVAKIA = 0x01
SUBLANG_SLOVENIAN_SLOVENIA = 0x01
SUBLANG_SPANISH = 0x01
SUBLANG_SPANISH_MEXICAN = 0x02
SUBLANG_SPANISH_MODERN = 0x03
SUBLANG_SPANISH_GUATEMALA = 0x04
SUBLANG_SPANISH_COSTA_RICA = 0x05
SUBLANG_SPANISH_PANAMA = 0x06
SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x07
SUBLANG_SPANISH_VENEZUELA = 0x08
SUBLANG_SPANISH_COLOMBIA = 0x09
SUBLANG_SPANISH_PERU = 0x0a
SUBLANG_SPANISH_ARGENTINA = 0x0b
SUBLANG_SPANISH_ECUADOR = 0x0c
SUBLANG_SPANISH_CHILE = 0x0d
SUBLANG_SPANISH_URUGUAY = 0x0e
SUBLANG_SPANISH_PARAGUAY = 0x0f
SUBLANG_SPANISH_BOLIVIA = 0x10
SUBLANG_SPANISH_EL_SALVADOR = 0x11
SUBLANG_SPANISH_HONDURAS = 0x12
SUBLANG_SPANISH_NICARAGUA = 0x13
SUBLANG_SPANISH_PUERTO_RICO = 0x14
SUBLANG_SPANISH_US = 0x15
SUBLANG_SWAHILI_KENYA = 0x01
SUBLANG_SWEDISH = 0x01
SUBLANG_SWEDISH_FINLAND = 0x02
SUBLANG_SYRIAC_SYRIA = 0x01
SUBLANG_TAJIK_TAJIKISTAN = 0x01
SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 0x02
SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 0x04
SUBLANG_TAMIL_INDIA = 0x01
SUBLANG_TAMIL_SRI_LANKA = 0x02
SUBLANG_TATAR_RUSSIA = 0x01
SUBLANG_TELUGU_INDIA = 0x01
SUBLANG_THAI_THAILAND = 0x01
SUBLANG_TIBETAN_PRC = 0x01
SUBLANG_TIGRIGNA_ERITREA = 0x02
SUBLANG_TIGRINYA_ERITREA = 0x02
SUBLANG_TIGRINYA_ETHIOPIA = 0x01
SUBLANG_TSWANA_BOTSWANA = 0x02
SUBLANG_TSWANA_SOUTH_AFRICA = 0x01
SUBLANG_TURKISH_TURKEY = 0x01
SUBLANG_TURKMEN_TURKMENISTAN = 0x01
SUBLANG_UIGHUR_PRC = 0x01
SUBLANG_UKRAINIAN_UKRAINE = 0x01
SUBLANG_UPPER_SORBIAN_GERMANY = 0x01
SUBLANG_URDU_PAKISTAN = 0x01
SUBLANG_URDU_INDIA = 0x02
SUBLANG_UZBEK_LATIN = 0x01
SUBLANG_UZBEK_CYRILLIC = 0x02
SUBLANG_VALENCIAN_VALENCIA = 0x02
SUBLANG_VIETNAMESE_VIETNAM = 0x01
SUBLANG_WELSH_UNITED_KINGDOM = 0x01
SUBLANG_WOLOF_SENEGAL = 0x01
SUBLANG_XHOSA_SOUTH_AFRICA = 0x01
SUBLANG_YAKUT_RUSSIA = 0x01
SUBLANG_YI_PRC = 0x01
SUBLANG_YORUBA_NIGERIA = 0x01
SUBLANG_ZULU_SOUTH_AFRICA = 0x01
SORT_DEFAULT = 0x0
SORT_INVARIANT_MATH = 0x1
SORT_JAPANESE_XJIS = 0x0
SORT_JAPANESE_UNICODE = 0x1
SORT_JAPANESE_RADICALSTROKE = 0x4
SORT_CHINESE_BIG5 = 0x0
SORT_CHINESE_PRCP = 0x0
SORT_CHINESE_UNICODE = 0x1
SORT_CHINESE_PRC = 0x2
SORT_CHINESE_BOPOMOFO = 0x3
SORT_CHINESE_RADICALSTROKE = 0x4
SORT_KOREAN_KSC = 0x0
SORT_KOREAN_UNICODE = 0x1
SORT_GERMAN_PHONE_BOOK = 0x1
SORT_HUNGARIAN_DEFAULT = 0x0
SORT_HUNGARIAN_TECHNICAL = 0x1
SORT_GEORGIAN_TRADITIONAL = 0x0
SORT_GEORGIAN_MODERN = 0x1


def MAKELANGID(p, s):
    return (s << 10) | p


def PRIMARYLANGID(lgid):
    return lgid & 0x3ff


def SUBLANGID(lgid):
    return lgid >> 10


NLS_VALID_LOCALE_MASK = 0x000fffff


def MAKELCID(lgid, srtid):
    return (srtid << 16) | lgid


def MAKESORTLCID(lgid, srtid, ver):
    return MAKELCID(lgid, srtid) | (ver << 20)


def LANGIDFROMLCID(lcid):
    return lcid


def SORTIDFROMLCID(lcid):
    return (lcid >> 16) & 0xf


def SORTVERSIONFROMLCID(lcid):
    return (lcid >> 20) & 0xf


LOCALE_NAME_MAX_LENGTH = 0x55
LANG_SYSTEM_DEFAULT = MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT)
LANG_USER_DEFAULT = MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT)
LOCALE_SYSTEM_DEFAULT = MAKELCID(LANG_SYSTEM_DEFAULT, SORT_DEFAULT)
LOCALE_USER_DEFAULT = MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT)
LOCALE_CUSTOM_DEFAULT = (
    MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_DEFAULT), SORT_DEFAULT)
)
LOCALE_CUSTOM_UNSPECIFIED = (
    MAKELCID(
        MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_UNSPECIFIED), SORT_DEFAULT
    )
)
LOCALE_CUSTOM_UI_DEFAULT = (
    MAKELCID(
        MAKELANGID(LANG_NEUTRAL, SUBLANG_UI_CUSTOM_DEFAULT), SORT_DEFAULT
    )
)
LOCALE_NEUTRAL = (
    MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), SORT_DEFAULT)
)
LOCALE_INVARIANT = (
    MAKELCID(MAKELANGID(LANG_INVARIANT, SUBLANG_NEUTRAL), SORT_DEFAULT)
)
LOCALE_TRANSIENT_KEYBOARD1 = 0x2000
LOCALE_TRANSIENT_KEYBOARD2 = 0x2400
LOCALE_TRANSIENT_KEYBOARD3 = 0x2800
LOCALE_TRANSIENT_KEYBOARD4 = 0x2c00
LOCALE_UNASSIGNED_LCID = LOCALE_CUSTOM_UNSPECIFIED


def UNREFERENCED_PARAMETER(P):
    return P


def DBG_UNREFERENCED_PARAMETER(P):
    return P


def DBG_UNREFERENCED_LOCAL_VARIABLE(V):
    return V


DEFAULT_UNREACHABLE = VOID
_ENUM_FLAG_CONSTEXPR = VOID


def DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE):
    pass
    # return extern "C++" { inline _ENUM_FLAG_CONSTEXPR ENUMTYPE operator | ENUMTYPE a, ENUMTYPE b throw { return ENUMTYPE((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b); } inline ENUMTYPE &operator |= (ENUMTYPE &a, ENUMTYPE b) throw { return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); } inline _ENUM_FLAG_CONSTEXPR ENUMTYPE operator & ENUMTYPE a, ENUMTYPE b throw { return ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); } inline ENUMTYPE &operator &= (ENUMTYPE &a, ENUMTYPE b) throw { return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); } inline _ENUM_FLAG_CONSTEXPR ENUMTYPE operator ~ ENUMTYPE a throw { return ENUMTYPE(~((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a)); } inline _ENUM_FLAG_CONSTEXPR ENUMTYPE operator ^ ENUMTYPE a, ENUMTYPE b throw { return ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); } inline ENUMTYPE &operator ^= (ENUMTYPE &a, ENUMTYPE b) throw { return (ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b)); } }\n"


def COMPILETIME_OR_2FLAGS(a, b):
    return a | b


def COMPILETIME_OR_3FLAGS(a, b, c):
    return a | b | c


def COMPILETIME_OR_4FLAGS(a, b, c, d):
    return a | b | c | d


def COMPILETIME_OR_5FLAGS(a, b, c, d, e):
    return a | b | c | d | e


def COMPILETIME_OR_6FLAGS(a, b, c, d, e, f):
    return a | b | c | d | e | f


def min(a, b):
    return a if a < b else b


def max(a, b):
    return a if a > b else b


# from .basetsd_h import * # NOQA

__all__ = (
    'ALL_PROCESSOR_GROUPS', 'ANSI_NULL', 'ANSI_STRING', 'ANSI_STRING32',
    'ANSI_STRING64', 'ANYSIZE_ARRAY', 'APPLICATION_ERROR_MASK', 'BOOLEAN',
    'ARGUMENT_PRESENT', 'ARRAYSIZE', 'CANSI_STRING', 'CCHAR', 'CHAR',
    'CFORCEINLINE', 'CLONG', 'CLSID', 'CLSID_NULL', 'COMPARTMENT_ID',
    'COMPILETIME_OR_2FLAGS', 'COMPILETIME_OR_3FLAGS', 'CONST', 'CSHORT',
    'COMPILETIME_OR_4FLAGS', 'COMPILETIME_OR_5FLAGS', 'CONTAINING_RECORD',
    'COMPILETIME_OR_6FLAGS', 'CSTRING', 'C_ASSERT', 'DECLARE_HANDLE',
    'DBG_UNREFERENCED_LOCAL_VARIABLE', 'DBG_UNREFERENCED_PARAMETER', 'LP',
    'DECLARE_CONST_UNICODE_STRING', 'DECLARE_GLOBAL_CONST_UNICODE_STRING',
    'DECLARE_UNICODE_STRING_SIZE', 'DECLSPEC_ADDRSAFE', 'DECLSPEC_ALIGN',
    'DECLSPEC_CACHEALIGN', 'DECLSPEC_CHPE_GUEST', 'DECLSPEC_DEPRECATED',
    'DECLSPEC_CHPE_PATCHABLE', 'DECLSPEC_DEPRECATED_DDK', 'DECLSPEC_UUID',
    'DECLSPEC_GUARDIGNORE', 'DECLSPEC_GUARDNOCF', 'DECLSPEC_IMPORT',
    'DECLSPEC_GUARD_SUPPRESS', 'DECLSPEC_NOINLINE', 'DECLSPEC_NORETURN',
    'DECLSPEC_NOTHROW', 'DECLSPEC_NOVTABLE', 'DECLSPEC_SAFEBUFFERS',
    'DECLSPEC_SELECTANY', 'DEFAULT_UNREACHABLE', 'DEFINE_GUID', 'DOUBLE',
    'DEFINE_ENUM_FLAG_OPERATORS', 'DEFINE_GUIDNAMED', 'DEFINE_GUIDSTRUCT',
    'DEFINE_OLEGUID', 'DUMMYUNIONNAME', 'DUMMYUNIONNAME2', 'DWORDLONG',
    'ENUM', 'ERROR_SEVERITY_ERROR', 'ERROR_SEVERITY_INFORMATIONAL', 'IID',
    'ERROR_SEVERITY_SUCCESS', 'ERROR_SEVERITY_WARNING', 'EVENT_TYPE',
    'EXTERN_GUID', 'FALSE', 'FASTCALL', 'FCHAR', 'FIELD_OFFSET', 'FLONG',
    'FLOAT128', 'FMTID', 'FMTID_NULL', 'FORCEINLINE', 'FSHORT', 'GUID',
    'GROUP_AFFINITY', 'GUID_NULL', 'HANDLE', 'HRESULT', 'HighTime', 'INT',
    'IFACEMETHODIMP', 'IFACEMETHODIMPV', 'IFACEMETHODIMPV_', 'IID_NULL',
    'IFACEMETHODIMP_', 'INT64', 'InitializeObjectAttributes', 'KAFFINITY',
    'InlineIsEqualGUID', 'Int32x32To64', 'Int64ShllMod32', 'IsEqualCLSID',
    'Int64ShraMod32', 'Int64ShrlMod32', 'IsEqualFMTID', 'IsEqualGUID',
    'IsEqualIID', 'KIRQL', 'LANGID', 'LANGIDFROMLCID', 'LANG_AFRIKAANS',
    'LANG_ALBANIAN', 'LANG_ALSATIAN', 'LANG_AMHARIC', 'LANG_ARABIC',
    'LANG_ARMENIAN', 'LANG_ASSAMESE', 'LANG_AZERBAIJANI', 'LANG_AZERI',
    'LANG_BANGLA', 'LANG_BASHKIR', 'LANG_BASQUE', 'LANG_BELARUSIAN',
    'LANG_BENGALI', 'LANG_BOSNIAN', 'LANG_BOSNIAN_NEUTRAL', 'LANG_BRETON',
    'LANG_BULGARIAN', 'LANG_CATALAN', 'LANG_CENTRAL_KURDISH', 'LANG_DARI',
    'LANG_CHEROKEE', 'LANG_CHINESE', 'LANG_CHINESE_SIMPLIFIED', 'LANG_YI',
    'LANG_CHINESE_TRADITIONAL', 'LANG_CORSICAN', 'LANG_CROATIAN', 'LCID',
    'LANG_CZECH', 'LANG_DANISH', 'LANG_DIVEHI', 'LANG_DUTCH', 'LANG_IGBO',
    'LANG_ENGLISH', 'LANG_ESTONIAN', 'LANG_FAEROESE', 'LANG_FARSI', 'PCH',
    'LANG_FILIPINO', 'LANG_FINNISH', 'LANG_FRENCH', 'LANG_FRISIAN', 'PSZ',
    'LANG_FULAH', 'LANG_GALICIAN', 'LANG_GEORGIAN', 'LANG_GERMAN', 'LONG',
    'LANG_GREEK', 'LANG_GREENLANDIC', 'LANG_GUJARATI', 'LANG_HAUSA',
    'LANG_HAWAIIAN', 'LANG_HEBREW', 'LANG_HINDI', 'LANG_HUNGARIAN', 'USN',
    'LANG_ICELANDIC', 'LANG_INDONESIAN', 'LANG_INUKTITUT', 'LANG_IRISH',
    'LANG_INVARIANT', 'LANG_ITALIAN', 'LANG_JAPANESE', 'LANG_KANNADA',
    'LANG_KASHMIRI', 'LANG_KAZAK', 'LANG_KHMER', 'LANG_KICHE', 'LANG_LAO',
    'LANG_KINYARWANDA', 'LANG_KONKANI', 'LANG_KOREAN', 'LANG_KYRGYZ',
    'LANG_LATVIAN', 'LANG_LITHUANIAN', 'LANG_LOWER_SORBIAN', 'LANG_MALAY',
    'LANG_LUXEMBOURGISH', 'LANG_MACEDONIAN', 'LANG_MALAYALAM', 'LOGICAL',
    'LANG_MALTESE', 'LANG_MANIPURI', 'LANG_MAORI', 'LANG_MAPUDUNGUN',
    'LANG_MARATHI', 'LANG_MOHAWK', 'LANG_MONGOLIAN', 'LANG_NEPALI', 'max',
    'LANG_NEUTRAL', 'LANG_NORWEGIAN', 'LANG_OCCITAN', 'LANG_ODIA', 'LPCH',
    'LANG_ORIYA', 'LANG_PASHTO', 'LANG_PERSIAN', 'LANG_POLISH', 'LPCCH',
    'LANG_PORTUGUESE', 'LANG_PULAR', 'LANG_PUNJABI', 'LANG_QUECHUA',
    'LANG_ROMANIAN', 'LANG_ROMANSH', 'LANG_RUSSIAN', 'LANG_SAKHA', 'LUID',
    'LANG_SAMI', 'LANG_SANSKRIT', 'LANG_SCOTTISH_GAELIC', 'LANG_SERBIAN',
    'LANG_SERBIAN_NEUTRAL', 'LANG_SINDHI', 'LANG_SINHALESE', 'LANG_SOTHO',
    'LANG_SLOVAK', 'LANG_SLOVENIAN', 'LANG_SPANISH', 'LANG_SWAHILI',
    'LANG_SWEDISH', 'LANG_SYRIAC', 'LANG_SYSTEM_DEFAULT', 'LANG_TAJIK',
    'LANG_TAMAZIGHT', 'LANG_TAMIL', 'LANG_TATAR', 'LANG_TELUGU', 'LPCSTR',
    'LANG_THAI', 'LANG_TIBETAN', 'LANG_TIGRIGNA', 'LANG_TIGRINYA', 'NULL',
    'LANG_TSWANA', 'LANG_TURKISH', 'LANG_TURKMEN', 'LANG_UIGHUR', 'LPIID',
    'LANG_UKRAINIAN', 'LANG_UPPER_SORBIAN', 'LANG_URDU', 'LANG_UZBEK',
    'LANG_USER_DEFAULT', 'LANG_VALENCIAN', 'LANG_VIETNAMESE', 'LANG_ZULU',
    'LANG_WELSH', 'LANG_WOLOF', 'LANG_XHOSA', 'LANG_YAKUT', 'LANG_YORUBA',
    'LARGE_INTEGER', 'LIST_ENTRY', 'LIST_ENTRY32', 'LIST_ENTRY64', 'PCCH',
    'LOCALE_CUSTOM_DEFAULT', 'LOCALE_CUSTOM_UI_DEFAULT', 'LOCALE_NEUTRAL',
    'LOCALE_CUSTOM_UNSPECIFIED', 'LOCALE_INVARIANT', 'LONGLONG', 'LPCTCH',
    'LOCALE_NAME_MAX_LENGTH', 'LOCALE_SYSTEM_DEFAULT', 'LONG_PTR', 'PCSZ',
    'LOCALE_TRANSIENT_KEYBOARD1', 'LOCALE_TRANSIENT_KEYBOARD2', 'LPCGUID',
    'LOCALE_TRANSIENT_KEYBOARD3', 'LOCALE_TRANSIENT_KEYBOARD4', 'LPCLSID',
    'LOCALE_UNASSIGNED_LCID', 'LOCALE_USER_DEFAULT', 'LPCTSTR', 'LPCWCH',
    'LPCUTSTR', 'LPCUWCHAR', 'LPCUWSTR', 'LPCWCHAR', 'LPCWSTR', 'LPFMTID',
    'LPGUID', 'LPSTR', 'LPTCH', 'LPTSTR', 'LPUTSTR', 'LPUWSTR', 'LPWCH',
    'LPWSTR', 'LowTime', 'MAKELANGID', 'MAKELCID', 'MAKESORTLCID', 'PSTR',
    'MAXCHAR', 'MAXIMUM_PROCESSORS', 'MAXIMUM_PROC_PER_GROUP', 'MAXLONG',
    'MAXLONGLONG', 'MAXSHORT', 'MAXUCHAR', 'MAXULONG', 'MAXUSHORT', 'min',
    'MAX_NATURAL_ALIGNMENT', 'MAX_UCSCHAR', 'MEMORY_ALLOCATION_ALIGNMENT',
    'MINCHAR', 'MINLONG', 'MINSHORT', 'MIN_UCSCHAR', 'NPSTR',
    'NLS_VALID_LOCALE_MASK', 'NOP_FUNCTION', 'NTAPI',
    'NTAPI_INLINE', 'NTSTATUS', 'NTSYSAPI', 'NT_ERROR',
    'NTSYSCALLAPI', 'NT_INFORMATION', 'NT_PRODUCT_TYPE', 'NT_SUCCESS',
    'NT_WARNING', 'NULL64', 'NWPSTR', 'OBJECTID', 'OBJECT_ATTRIBUTES',
    'OBJECT_ATTRIBUTES32', 'OBJECT_ATTRIBUTES64', 'OBJ_CASE_INSENSITIVE',
    'OBJ_DONT_REPARSE', 'OBJ_EXCLUSIVE', 'OBJ_FORCE_ACCESS_CHECK', 'PTCH',
    'OBJ_HANDLE_TAGBITS', 'OBJ_IGNORE_IMPERSONATED_DEVICEMAP', 'PBOOLEAN',
    'OBJ_INHERIT', 'OBJ_KERNEL_HANDLE', 'OBJ_OPENIF', 'OBJ_OPENLINK',
    'OBJ_PERMANENT', 'OBJ_VALID_ATTRIBUTES', 'OEM_STRING', 'PANSI_STRING',
    'PANSI_STRING32', 'PANSI_STRING64', 'PCANSI_STRING', 'PCCHAR', 'PWCH',
    'PCHAR', 'PCLONG', 'PCNTSTATUS', 'PCNZCH', 'PCNZTCH', 'PCNZWCH',
    'PCOBJECT_ATTRIBUTES', 'PCOBJECT_ATTRIBUTES32', 'PCOEM_STRING',
    'PCOBJECT_ATTRIBUTES64', 'PCOMPARTMENT_ID', 'PCSCHAR', 'PCSHORT',
    'PCSTR', 'PCSTRING', 'PCTCH', 'PCTSTR', 'PCUCHAR', 'PCUCSCHAR',
    'PCUCSSTR', 'PCULONG', 'PCUNICODE_STRING', 'PCUNZTCH', 'PCUNZWCH',
    'PCUQUAD', 'PCUSHORT', 'PCUTSTR', 'PCUUCSCHAR', 'PCUUCSSTR', 'PCWCH',
    'PCUWCHAR', 'PCUWSTR', 'PCUZZTSTR', 'PCUZZWSTR', 'PCWCHAR', 'PCWSTR',
    'PCWNF_STATE_NAME', 'PCZPCSTR', 'PCZPCWSTR', 'PCZPSTR', 'PCZPWSTR',
    'PCZZSTR', 'PCZZTSTR', 'PCZZWSTR', 'PDWORDLONG', 'PFLOAT128', 'PLCID',
    'PFORCEINLINE', 'PGROUP_AFFINITY', 'PHANDLE', 'PHYSICAL_ADDRESS',
    'PKIRQL', 'PLARGE_INTEGER', 'PLIST_ENTRY', 'PLIST_ENTRY32', 'PLONG',
    'PLIST_ENTRY64', 'PLOGICAL', 'PLONGLONG', 'PLUID', 'PNTSTATUS',
    'PNT_PRODUCT_TYPE', 'PNZCH', 'PNZTCH', 'PNZWCH', 'POBJECT_ATTRIBUTES',
    'POBJECT_ATTRIBUTES32', 'POBJECT_ATTRIBUTES64', 'POEM_STRING', 'QUAD',
    'POINTER', 'PPHYSICAL_ADDRESS', 'PPROCESSOR_NUMBER', 'PQUAD', 'PTIME',
    'PRAGMA_DEPRECATED_DDK', 'PRIMARYLANGID', 'PROBE_ALIGNMENT', 'PSCHAR',
    'PROBE_ALIGNMENT32', 'PROCESSOR_NUMBER', 'PRODUCT_ANDROMEDA', 'PTSTR',
    'PRODUCT_ARM64_SERVER', 'PRODUCT_AZURE_NANO_SERVER', 'PRODUCT_CLOUD',
    'PRODUCT_AZURE_SERVER_CORE', 'PRODUCT_BUSINESS', 'PRODUCT_BUSINESS_N',
    'PRODUCT_CLOUDN', 'PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER', 'PVOID',
    'PRODUCT_CLOUD_STORAGE_SERVER', 'PRODUCT_CLUSTER_SERVER', 'PSHORT',
    'PRODUCT_CLUSTER_SERVER_V', 'PRODUCT_CONNECTED_CAR', 'PRODUCT_CORE',
    'PRODUCT_CORE_ARM', 'PRODUCT_CORE_CONNECTED', 'PRODUCT_CORE_N',
    'PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC', 'PRODUCT_CORE_CONNECTED_N',
    'PRODUCT_CORE_CONNECTED_SINGLELANGUAGE', 'PRODUCT_DATACENTER_SERVER',
    'PRODUCT_CORE_COUNTRYSPECIFIC', 'PRODUCT_CORE_SINGLELANGUAGE', 'TEXT',
    'PRODUCT_DATACENTER_A_SERVER_CORE', 'PRODUCT_DATACENTER_NANO_SERVER',
    'PRODUCT_DATACENTER_EVALUATION_SERVER', 'PRODUCT_DATACENTER_SERVER_V',
    'PRODUCT_DATACENTER_EVALUATION_SERVER_CORE', 'PRODUCT_EDUCATION',
    'PRODUCT_DATACENTER_SERVER_CORE', 'PRODUCT_DATACENTER_SERVER_CORE_V',
    'PRODUCT_DATACENTER_WS_SERVER_CORE', 'PRODUCT_EDUCATION_N', 'PSTRING',
    'PRODUCT_EMBEDDED', 'PRODUCT_EMBEDDED_A', 'PRODUCT_EMBEDDED_E',
    'PRODUCT_EMBEDDED_AUTOMOTIVE', 'PRODUCT_EMBEDDED_EVAL', 'PROPERTYKEY',
    'PRODUCT_EMBEDDED_E_EVAL', 'PRODUCT_EMBEDDED_INDUSTRY', 'PSTRING32',
    'PRODUCT_EMBEDDED_INDUSTRY_A', 'PRODUCT_EMBEDDED_INDUSTRY_A_E',
    'PRODUCT_EMBEDDED_INDUSTRY_E', 'PRODUCT_EMBEDDED_INDUSTRY_EVAL',
    'PRODUCT_EMBEDDED_INDUSTRY_E_EVAL', 'PRODUCT_ENTERPRISE', 'PSTRING64',
    'PRODUCT_ENTERPRISEG', 'PRODUCT_ENTERPRISEGN', 'PRODUCT_ENTERPRISE_E',
    'PRODUCT_ENTERPRISE_EVALUATION', 'PRODUCT_ENTERPRISE_N', 'PTCHAR',
    'PRODUCT_ENTERPRISE_N_EVALUATION', 'PRODUCT_ENTERPRISE_S', 'PTUCHAR',
    'PRODUCT_ENTERPRISE_SERVER', 'PRODUCT_ENTERPRISE_SERVER_CORE', 'TIME',
    'PRODUCT_ENTERPRISE_SERVER_CORE_V', 'PRODUCT_ENTERPRISE_SERVER_IA64',
    'PRODUCT_ENTERPRISE_SERVER_V', 'PRODUCT_ENTERPRISE_SUBSCRIPTION',
    'PRODUCT_ENTERPRISE_SUBSCRIPTION_N', 'PRODUCT_ENTERPRISE_S_N', 'TRUE',
    'PRODUCT_ENTERPRISE_S_EVALUATION', 'PRODUCT_HOLOGRAPHIC', 'PUCHAR',
    'PRODUCT_ENTERPRISE_S_N_EVALUATION', 'PRODUCT_HOME_BASIC', 'PUCSCHAR',
    'PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL', 'PRODUCT_HOME_BASIC_E',
    'PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC', 'PRODUCT_HOME_BASIC_N',
    'PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT', 'PRODUCT_HOME_PREMIUM',
    'PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC', 'PRODUCT_HOME_PREMIUM_E',
    'PRODUCT_HOME_PREMIUM_N', 'PRODUCT_HOME_PREMIUM_SERVER', 'PUCSSTR',
    'PRODUCT_HOME_SERVER', 'PRODUCT_HUBOS', 'PRODUCT_HYPERV', 'PULONG',
    'PRODUCT_INDUSTRY_HANDHELD', 'PRODUCT_IOTUAP', 'PRODUCT_NANO_SERVER',
    'PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT', 'PRODUCT_ONECOREUPDATEOS',
    'PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING', 'PRODUCT_PPI_PRO', 'PWSTR',
    'PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY', 'PRODUCT_PROFESSIONAL',
    'PRODUCT_MULTIPOINT_PREMIUM_SERVER', 'PRODUCT_PROFESSIONAL_E', 'UINT',
    'PRODUCT_MULTIPOINT_STANDARD_SERVER', 'PRODUCT_PROFESSIONAL_EMBEDDED',
    'PRODUCT_PROFESSIONAL_N', 'PRODUCT_PROFESSIONAL_S', 'PRODUCT_STARTER',
    'PRODUCT_PROFESSIONAL_STUDENT', 'PRODUCT_PROFESSIONAL_STUDENT_N',
    'PRODUCT_PROFESSIONAL_S_N', 'PRODUCT_PROFESSIONAL_WMC', 'PULONGLONG',
    'PRODUCT_PRO_CHINA', 'PRODUCT_PRO_FOR_EDUCATION', 'PRODUCT_STARTER_E',
    'PRODUCT_PRO_FOR_EDUCATION_N', 'PRODUCT_PRO_SINGLE_LANGUAGE', 'SCHAR',
    'PRODUCT_PRO_WORKSTATION', 'PRODUCT_PRO_WORKSTATION_N', 'PUNZTCH',
    'PRODUCT_SB_SOLUTION_SERVER', 'PRODUCT_SB_SOLUTION_SERVER_EM', 'VOID',
    'PRODUCT_SERVERRDSH', 'PRODUCT_SERVER_FOR_SB_SOLUTIONS', 'PUNZWCH',
    'PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM', 'PRODUCT_SERVER_FOUNDATION',
    'PRODUCT_SERVER_FOR_SMALLBUSINESS', 'PRODUCT_SMALLBUSINESS_SERVER',
    'PRODUCT_SERVER_FOR_SMALLBUSINESS_V', 'PRODUCT_STANDARD_NANO_SERVER',
    'PRODUCT_SMALLBUSINESS_SERVER_PREMIUM', 'PRODUCT_STANDARD_SERVER',
    'PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE', 'PRODUCT_STARTER_N',
    'PRODUCT_SOLUTION_EMBEDDEDSERVER', 'PRODUCT_STANDARD_A_SERVER_CORE',
    'PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE', 'PRODUCT_STANDARD_SERVER_V',
    'PRODUCT_STANDARD_EVALUATION_SERVER', 'PRODUCT_STANDARD_SERVER_CORE',
    'PRODUCT_STANDARD_EVALUATION_SERVER_CORE', 'PRODUCT_THINPC', 'PUQUAD',
    'PRODUCT_STANDARD_SERVER_CORE_V', 'PRODUCT_STANDARD_SERVER_SOLUTIONS',
    'PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE', 'PRODUCT_ULTIMATE', 'SHORT',
    'PRODUCT_STANDARD_WS_SERVER_CORE', 'PRODUCT_STORAGE_EXPRESS_SERVER',
    'PRODUCT_STORAGE_ENTERPRISE_SERVER', 'PRODUCT_ULTIMATE_E', 'PUSHORT',
    'PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE', 'PRODUCT_ULTIMATE_N',
    'PRODUCT_STORAGE_EXPRESS_SERVER_CORE', 'PRODUCT_UNDEFINED', 'PUTSTR',
    'PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER', 'PRODUCT_UNLICENSED',
    'PRODUCT_STORAGE_STANDARD_SERVER', 'PRODUCT_STORAGE_WORKGROUP_SERVER',
    'PRODUCT_STORAGE_STANDARD_SERVER_CORE', 'PRODUCT_UTILITY_VM', 'TCHAR',
    'PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER', 'PRODUCT_WEB_SERVER',
    'PRODUCT_STORAGE_WORKGROUP_SERVER_CORE', 'PRODUCT_WEB_SERVER_CORE',
    'PRTL_BALANCED_NODE', 'PRTL_REFERENCE_COUNT', 'PSINGLE_LIST_ENTRY',
    'PRTL_REFERENCE_COUNT32', 'PSINGLE_LIST_ENTRY32', 'PULARGE_INTEGER',
    'PUNICODE_STRING', 'PUNICODE_STRING32', 'PUNICODE_STRING64', 'PUWSTR',
    'PUUCSCHAR', 'PUUCSSTR', 'PUZZTSTR', 'PUZZWSTR', 'PVOID64', 'PWCHAR',
    'PWNF_STATE_NAME', 'PZPCSTR', 'PZPCWSTR', 'PZPSTR', 'PZPTSTR', 'uuid',
    'PZPWSTR', 'PZZSTR', 'PZZTSTR', 'PZZWSTR', 'REFCLSID',
    'REFFMTID', 'REFGUID', 'REFIID', 'RESTRICTED_POINTER', 'RTL_BITS_OF',
    'RESTRICTED_POINTERPRLIST_ENTRY', 'RTL_BALANCED_NODE', 'RotateLeft16',
    'RTL_BALANCED_NODE_GET_PARENT_POINTER', 'RTL_BITS_OF_FIELD', 'STDAPI',
    'RTL_BALANCED_NODE_RESERVED_PARENT_MASK', 'RTL_CONSTANT_STRING',
    'RTL_CONSTANT_OBJECT_ATTRIBUTES', 'RTL_CONST_CAST', 'RTL_FIELD_SIZE',
    'RTL_CONTAINS_FIELD', 'RTL_FIELD_TYPE', 'RTL_INIT_OBJECT_ATTRIBUTES',
    'RTL_NUMBER_OF', 'RTL_NUMBER_OF_FIELD', 'RTL_NUMBER_OF_V1', 'STDAPIV',
    'RTL_NUMBER_OF_V2', 'RTL_PADDING_BETWEEN_FIELDS', 'RotateLeft32',
    'RTL_REFERENCE_COUNT', 'RTL_REFERENCE_COUNT32', 'RotateLeft64',
    'RTL_SIZEOF_THROUGH_FIELD', 'RTL_STRING_LENGTH_TYPE', 'RotateLeft8',
    'RotateRight16', 'RotateRight32', 'RotateRight64', 'RotateRight8',
    'SECURITY_STATUS', 'SINGLE_LIST_ENTRY', 'SINGLE_LIST_ENTRY32',
    'SORTIDFROMLCID', 'SORTVERSIONFROMLCID', 'SORT_CHINESE_BIG5', 'UCHAR',
    'SORT_CHINESE_BOPOMOFO', 'SORT_CHINESE_PRC', 'SORT_CHINESE_PRCP',
    'SORT_CHINESE_RADICALSTROKE', 'SORT_CHINESE_UNICODE', 'SORT_DEFAULT',
    'SORT_GEORGIAN_MODERN', 'SORT_GEORGIAN_TRADITIONAL', 'STDAPICALLTYPE',
    'SORT_GERMAN_PHONE_BOOK', 'SORT_HUNGARIAN_DEFAULT', 'SORT_KOREAN_KSC',
    'SORT_HUNGARIAN_TECHNICAL', 'SORT_INVARIANT_MATH', 'STDAPIVCALLTYPE',
    'SORT_JAPANESE_RADICALSTROKE', 'SORT_JAPANESE_UNICODE', 'STDAPIV_',
    'SORT_JAPANESE_XJIS', 'SORT_KOREAN_UNICODE', 'STDAPI_', 'STRICT',
    'STDMETHODCALLTYPE', 'STDMETHODIMP', 'STDMETHODIMPV', 'STDMETHODIMP_',
    'STDMETHODIMPV_', 'STDMETHODVCALLTYPE', 'STDOVERRIDEMETHODIMP',
    'STDOVERRIDEMETHODIMPV', 'STDOVERRIDEMETHODIMPV_', 'STKFORCEINLINE',
    'STDOVERRIDEMETHODIMP_', 'STRING', 'STRING32', 'STRING64', 'TUCHAR',
    'SUBLANGID', 'SUBLANG_AFRIKAANS_SOUTH_AFRICA', 'SUBLANG_ARABIC_EGYPT',
    'SUBLANG_ALBANIAN_ALBANIA', 'SUBLANG_ALSATIAN_FRANCE', 'SUITE_TYPE',
    'SUBLANG_AMHARIC_ETHIOPIA', 'SUBLANG_ARABIC_ALGERIA', 'SUBLANG_DUTCH',
    'SUBLANG_ARABIC_BAHRAIN', 'SUBLANG_ARABIC_IRAQ', 'SUBLANG_ARABIC_UAE',
    'SUBLANG_ARABIC_JORDAN', 'SUBLANG_ARABIC_KUWAIT', 'SUBLANG_DEFAULT',
    'SUBLANG_ARABIC_LEBANON', 'SUBLANG_ARABIC_LIBYA', 'SUBLANG_FRENCH',
    'SUBLANG_ARABIC_MOROCCO', 'SUBLANG_ARABIC_OMAN', 'SUBLANG_ENGLISH_NZ',
    'SUBLANG_ARABIC_QATAR', 'SUBLANG_ARABIC_SAUDI_ARABIA', 'TIMER_TYPE',
    'SUBLANG_ARABIC_SYRIA', 'SUBLANG_ARABIC_TUNISIA', 'SUBLANG_GERMAN',
    'SUBLANG_ARABIC_YEMEN', 'SUBLANG_ARMENIAN_ARMENIA', 'SUBLANG_ITALIAN',
    'SUBLANG_ASSAMESE_INDIA', 'SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC',
    'SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN', 'SUBLANG_AZERI_CYRILLIC',
    'SUBLANG_AZERI_LATIN', 'SUBLANG_BANGLA_BANGLADESH', 'SUBLANG_KOREAN',
    'SUBLANG_BANGLA_INDIA', 'SUBLANG_BASHKIR_RUSSIA', 'SUBLANG_LAO_LAO',
    'SUBLANG_BASQUE_BASQUE', 'SUBLANG_BELARUSIAN_BELARUS', 'UCSCHAR',
    'SUBLANG_BENGALI_BANGLADESH', 'SUBLANG_BENGALI_INDIA', 'ULONG',
    'SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC', 'SUBLANG_ENGLISH_AUS',
    'SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN', 'SUBLANG_BRETON_FRANCE',
    'SUBLANG_BULGARIAN_BULGARIA', 'SUBLANG_CATALAN_CATALAN', 'ULONG64',
    'SUBLANG_CENTRAL_KURDISH_IRAQ', 'SUBLANG_CHEROKEE_CHEROKEE', 'UQUAD',
    'SUBLANG_CHINESE_HONGKONG', 'SUBLANG_CHINESE_MACAU', 'SUBLANG_YI_PRC',
    'SUBLANG_CHINESE_SIMPLIFIED', 'SUBLANG_CHINESE_SINGAPORE', 'USHORT',
    'SUBLANG_CHINESE_TRADITIONAL', 'SUBLANG_CORSICAN_FRANCE', 'ULONGLONG',
    'SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN', 'SUBLANG_CUSTOM_DEFAULT',
    'SUBLANG_CROATIAN_CROATIA', 'SUBLANG_CUSTOM_UNSPECIFIED', 'ULONG_PTR',
    'SUBLANG_CZECH_CZECH_REPUBLIC', 'SUBLANG_DANISH_DENMARK', 'UNALIGNED',
    'SUBLANG_DARI_AFGHANISTAN', 'SUBLANG_DIVEHI_MALDIVES', 'UNALIGNED64',
    'SUBLANG_DUTCH_BELGIAN', 'SUBLANG_ENGLISH_BELIZE', 'SUBLANG_NEUTRAL',
    'SUBLANG_ENGLISH_CAN', 'SUBLANG_ENGLISH_CARIBBEAN', 'SUBLANG_SPANISH',
    'SUBLANG_ENGLISH_EIRE', 'SUBLANG_ENGLISH_INDIA', 'SUBLANG_ENGLISH_UK',
    'SUBLANG_ENGLISH_JAMAICA', 'SUBLANG_ENGLISH_MALAYSIA', 'UNICODE_NULL',
    'SUBLANG_ENGLISH_PHILIPPINES', 'SUBLANG_ENGLISH_SINGAPORE', 'WCHAR',
    'SUBLANG_ENGLISH_SOUTH_AFRICA', 'SUBLANG_ENGLISH_TRINIDAD',
    'SUBLANG_ENGLISH_US', 'SUBLANG_ENGLISH_ZIMBABWE', 'SUBLANG_SWEDISH',
    'SUBLANG_ESTONIAN_ESTONIA', 'SUBLANG_FAEROESE_FAROE_ISLANDS', '_LUID',
    'SUBLANG_FILIPINO_PHILIPPINES', 'SUBLANG_FINNISH_FINLAND', '_CSTRING',
    'SUBLANG_FRENCH_BELGIAN', 'SUBLANG_FRENCH_CANADIAN', 'TYPE_ALIGNMENT',
    'SUBLANG_FRENCH_LUXEMBOURG', 'SUBLANG_FRENCH_MONACO', 'UFIELD_OFFSET',
    'SUBLANG_FRENCH_SWISS', 'SUBLANG_FRISIAN_NETHERLANDS', 'WAIT_TYPE',
    'SUBLANG_FULAH_SENEGAL', 'SUBLANG_GALICIAN_GALICIAN', 'UInt32x32To64',
    'SUBLANG_GEORGIAN_GEORGIA', 'SUBLANG_GERMAN_AUSTRIAN', '_ARRAYSIZE',
    'SUBLANG_GERMAN_LIECHTENSTEIN', 'SUBLANG_GERMAN_LUXEMBOURG', '_QUAD',
    'SUBLANG_GERMAN_SWISS', 'SUBLANG_GREEK_GREECE', 'SUBLANG_HAWAIIAN_US',
    'SUBLANG_GREENLANDIC_GREENLAND', 'SUBLANG_GUJARATI_INDIA', '_STRING',
    'SUBLANG_HAUSA_NIGERIA_LATIN', 'SUBLANG_HEBREW_ISRAEL', '_EVENT_TYPE',
    'SUBLANG_HINDI_INDIA', 'SUBLANG_HUNGARIAN_HUNGARY', 'ULARGE_INTEGER',
    'SUBLANG_ICELANDIC_ICELAND', 'SUBLANG_IGBO_NIGERIA', 'UNICODE_STRING',
    'SUBLANG_INDONESIAN_INDONESIA', 'SUBLANG_INUKTITUT_CANADA', '_TIME',
    'SUBLANG_INUKTITUT_CANADA_LATIN', 'SUBLANG_IRISH_IRELAND', '__TEXT',
    'SUBLANG_ITALIAN_SWISS', 'SUBLANG_JAPANESE_JAPAN', 'UNICODE_STRING32',
    'SUBLANG_KANNADA_INDIA', 'SUBLANG_KASHMIRI_INDIA', 'UNICODE_STRING64',
    'SUBLANG_KASHMIRI_SASIA', 'SUBLANG_KAZAK_KAZAKHSTAN', 'VER_SERVER_NT',
    'SUBLANG_KHMER_CAMBODIA', 'SUBLANG_KICHE_GUATEMALA',
    'SUBLANG_KINYARWANDA_RWANDA', 'SUBLANG_KONKANI_INDIA', '_FLOAT128',
    'SUBLANG_KYRGYZ_KYRGYZSTAN', 'SUBLANG_LATVIAN_LATVIA', '_LIST_ENTRY',
    'SUBLANG_LITHUANIAN', 'SUBLANG_LOWER_SORBIAN_GERMANY', '_OBJECTID',
    'SUBLANG_LUXEMBOURGISH_LUXEMBOURG', 'SUBLANG_MACEDONIAN_MACEDONIA',
    'SUBLANG_MALAYALAM_INDIA', 'SUBLANG_MALAY_BRUNEI_DARUSSALAM',
    'SUBLANG_MALAY_MALAYSIA', 'SUBLANG_MALTESE_MALTA', 'VER_SUITE_BLADE',
    'SUBLANG_MAORI_NEW_ZEALAND', 'SUBLANG_MAPUDUNGUN_CHILE', '_STRING32',
    'SUBLANG_MARATHI_INDIA', 'SUBLANG_MOHAWK_MOHAWK', 'WINAPI_FAMILY_APP',
    'SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA', 'SUBLANG_MONGOLIAN_PRC',
    'SUBLANG_NEPALI_INDIA', 'SUBLANG_NEPALI_NEPAL', 'SUBLANG_ODIA_INDIA',
    'SUBLANG_NORWEGIAN_BOKMAL', 'SUBLANG_NORWEGIAN_NYNORSK', '_STRING64',
    'SUBLANG_OCCITAN_FRANCE', 'SUBLANG_ORIYA_INDIA', 'SUBLANG_PORTUGUESE',
    'SUBLANG_PASHTO_AFGHANISTAN', 'SUBLANG_PERSIAN_IRAN', '_SUITE_TYPE',
    'SUBLANG_POLISH_POLAND', 'SUBLANG_PORTUGUESE_BRAZILIAN', '_WAIT_TYPE',
    'SUBLANG_PULAR_SENEGAL', 'SUBLANG_PUNJABI_INDIA', 'WNF_STATE_NAME',
    'SUBLANG_PUNJABI_PAKISTAN', 'SUBLANG_QUECHUA_BOLIVIA', '_TIMER_TYPE',
    'SUBLANG_QUECHUA_ECUADOR', 'SUBLANG_QUECHUA_PERU', '_GROUP_AFFINITY',
    'SUBLANG_ROMANIAN_ROMANIA', 'SUBLANG_ROMANSH_SWITZERLAND', '__rotl',
    'SUBLANG_RUSSIAN_RUSSIA', 'SUBLANG_SAKHA_RUSSIA', '_LARGE_INTEGER',
    'SUBLANG_SAMI_INARI_FINLAND', 'SUBLANG_SAMI_LULE_NORWAY', '__rotr',
    'SUBLANG_SAMI_LULE_SWEDEN', 'SUBLANG_SAMI_NORTHERN_FINLAND', '_rotl8',
    'SUBLANG_SAMI_NORTHERN_NORWAY', 'SUBLANG_SAMI_NORTHERN_SWEDEN',
    'SUBLANG_SAMI_SKOLT_FINLAND', 'SUBLANG_SAMI_SOUTHERN_NORWAY',
    'SUBLANG_SAMI_SOUTHERN_SWEDEN', 'SUBLANG_SANSKRIT_INDIA', '_rotl16',
    'SUBLANG_SCOTTISH_GAELIC', 'SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN',
    'SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC', 'SUBLANG_SINDHI_INDIA',
    'SUBLANG_SERBIAN_CROATIA', 'SUBLANG_SERBIAN_CYRILLIC', '_rotl32',
    'SUBLANG_SERBIAN_LATIN', 'SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC',
    'SUBLANG_SERBIAN_MONTENEGRO_LATIN', 'SUBLANG_SERBIAN_SERBIA_CYRILLIC',
    'SUBLANG_SERBIAN_SERBIA_LATIN', 'SUBLANG_SINDHI_AFGHANISTAN',
    'SUBLANG_SINDHI_PAKISTAN', 'SUBLANG_SINHALESE_SRI_LANKA', '_rotl64',
    'SUBLANG_SLOVAK_SLOVAKIA', 'SUBLANG_SLOVENIAN_SLOVENIA', '_rotr16',
    'SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA', 'SUBLANG_SPANISH_ARGENTINA',
    'SUBLANG_SPANISH_BOLIVIA', 'SUBLANG_SPANISH_CHILE', '_ULARGE_INTEGER',
    'SUBLANG_SPANISH_COLOMBIA', 'SUBLANG_SPANISH_COSTA_RICA', '_rotr32',
    'SUBLANG_SPANISH_DOMINICAN_REPUBLIC', 'SUBLANG_SPANISH_ECUADOR',
    'SUBLANG_SPANISH_EL_SALVADOR', 'SUBLANG_SPANISH_GUATEMALA', '_rotr64',
    'SUBLANG_SPANISH_HONDURAS', 'SUBLANG_SPANISH_MEXICAN', '_rotr8',
    'SUBLANG_SPANISH_MODERN', 'SUBLANG_SPANISH_NICARAGUA',
    'SUBLANG_SPANISH_PANAMA', 'SUBLANG_SPANISH_PARAGUAY', 'kernel32',
    'SUBLANG_SPANISH_PERU', 'SUBLANG_SPANISH_PUERTO_RICO',
    'SUBLANG_SPANISH_URUGUAY', 'SUBLANG_SPANISH_US', 'SUBLANG_UIGHUR_PRC',
    'SUBLANG_SPANISH_VENEZUELA', 'SUBLANG_SWAHILI_KENYA',
    'SUBLANG_SWEDISH_FINLAND', 'SUBLANG_SYRIAC_SYRIA', '_NT_PRODUCT_TYPE',
    'SUBLANG_SYS_DEFAULT', 'SUBLANG_TAJIK_TAJIKISTAN', '_UNICODE_STRING',
    'SUBLANG_TAMAZIGHT_ALGERIA_LATIN', 'SUBLANG_TAMIL_INDIA',
    'SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH', 'SUBLANG_TAMIL_SRI_LANKA',
    'SUBLANG_TATAR_RUSSIA', 'SUBLANG_TELUGU_INDIA', 'SUBLANG_TIBETAN_PRC',
    'SUBLANG_THAI_THAILAND', 'SUBLANG_TIGRIGNA_ERITREA',
    'SUBLANG_TIGRINYA_ERITREA', 'SUBLANG_TIGRINYA_ETHIOPIA',
    'SUBLANG_TSWANA_BOTSWANA', 'SUBLANG_TSWANA_SOUTH_AFRICA',
    'SUBLANG_TURKISH_TURKEY', 'SUBLANG_TURKMEN_TURKMENISTAN',
    'SUBLANG_UI_CUSTOM_DEFAULT', 'SUBLANG_UKRAINIAN_UKRAINE',
    'SUBLANG_UPPER_SORBIAN_GERMANY', 'SUBLANG_URDU_INDIA',
    'SUBLANG_URDU_PAKISTAN', 'SUBLANG_UZBEK_CYRILLIC', '_WNF_STATE_NAME',
    'SUBLANG_UZBEK_LATIN', 'SUBLANG_VALENCIAN_VALENCIA',
    'SUBLANG_VIETNAMESE_VIETNAM', 'SUBLANG_WELSH_UNITED_KINGDOM',
    'SUBLANG_WOLOF_SENEGAL', 'SUBLANG_XHOSA_SOUTH_AFRICA',
    'SUBLANG_YAKUT_RUSSIA', 'SUBLANG_YORUBA_NIGERIA', '_PROCESSOR_NUMBER',
    'SUBLANG_ZULU_SOUTH_AFRICA', 'SYSTEM_CACHE_ALIGNMENT_SIZE',
    'UCSCHAR_INVALID_CHARACTER', 'UNICODE_STRING_MAX_BYTES',
    'UNICODE_STRING_MAX_CHARS', 'UNREFERENCED_PARAMETER',
    'VER_SUITE_BACKOFFICE', 'VER_SUITE_COMMUNICATIONS',
    'VER_SUITE_COMPUTE_SERVER', 'VER_SUITE_DATACENTER',
    'VER_SUITE_EMBEDDEDNT', 'VER_SUITE_EMBEDDED_RESTRICTED',
    'VER_SUITE_ENTERPRISE', 'VER_SUITE_MULTIUSERTS', 'VER_SUITE_PERSONAL',
    'VER_SUITE_SECURITY_APPLIANCE', 'VER_SUITE_SINGLEUSERTS',
    'VER_SUITE_SMALLBUSINESS', 'VER_SUITE_SMALLBUSINESS_RESTRICTED',
    'VER_SUITE_STORAGE_SERVER', 'VER_SUITE_TERMINAL',
    'VER_SUITE_WH_SERVER', 'VER_WORKSTATION_NT',
    '_OBJECT_ATTRIBUTES', '_ENUM_FLAG_CONSTEXPR',
    '_OBJECT_ATTRIBUTES32', '_OBJECT_ATTRIBUTES64', '_RTL_BALANCED_NODE',
    '_RTL_CONSTANT_STRING_remove_const_macro', '_SINGLE_LIST_ENTRY',
    '_SINGLE_LIST_ENTRY32',
)
