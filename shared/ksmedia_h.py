import ctypes

from pyWinAPI import *
from pyWinAPI.shared.guiddef_h import *
from pyWinAPI.shared.sdkddkver_h import *
from pyWinAPI.shared.wtypes_h import *


_KS_ = None
_KSMEDIA_ = None
INIT_USBAUDIO_MID = None
INIT_USBAUDIO_PID = None
INIT_USBAUDIO_PRODUCT_NAME = None
DEFINE_WAVEFORMATEX_GUID = None
STATIC_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = None
INIT_WAVEFORMATEX_GUID = None
EXTRACT_WAVEFORMATEX_ID = None
IS_VALID_WAVEFORMATEX_GUID = None
INIT_MMREG_MID = None
INIT_MMREG_PID = None
STATIC_KSDATAFORMAT_SUBTYPE_PCM = None
_INC_MMREG = None
STATIC_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = None
_INC_MMSYSTEM = None
PACK_PRAGMAS_NOT_SUPPORTED = None
_WAVEFORMATEXTENSIBLE_ = None
_WAVEFORMATEXTENSIBLE_IEC61937_ = None
WAVE_FORMAT_EXTENSIBLE = None
DEFINE_DEVPROPKEY = None
__EDevCtrl__ = None
TIMECODE_DEFINED = None
__IVPType__ = None
__DDRAW_INCLUDED__ = None
_DDPIXELFORMAT_DEFINED = None
__DVP_INCLUDED__ = None
__ENCODER_API_GUIDS__ = None
__ENCODER_API_DEFINES__ = None
_AUDIO_CURVE_TYPE_ = None

class KSMULTIPLE_DATA_PROP(ctypes.Structure):
    pass


PKSMULTIPLE_DATA_PROP = POINTER(KSMULTIPLE_DATA_PROP)


class KSDATAFORMAT_WAVEFORMATEX(ctypes.Structure):
    pass


PKSDATAFORMAT_WAVEFORMATEX = POINTER(KSDATAFORMAT_WAVEFORMATEX)


class WAVEFORMATEXTENSIBLE(ctypes.Structure):
    pass


PWAVEFORMATEXTENSIBLE = POINTER(WAVEFORMATEXTENSIBLE)


class WAVEFORMATEXTENSIBLE_IEC61937(ctypes.Structure):
    pass


PWAVEFORMATEXTENSIBLE_IEC61937 = POINTER(WAVEFORMATEXTENSIBLE_IEC61937)


class KSDATAFORMAT_WAVEFORMATEXTENSIBLE(ctypes.Structure):
    pass


PKSDATAFORMAT_WAVEFORMATEXTENSIBLE = POINTER(KSDATAFORMAT_WAVEFORMATEXTENSIBLE)


class KSDSOUND_BUFFERDESC(ctypes.Structure):
    pass


PKSDSOUND_BUFFERDESC = POINTER(KSDSOUND_BUFFERDESC)


class KSDATAFORMAT_DSOUND(ctypes.Structure):
    pass


PKSDATAFORMAT_DSOUND = POINTER(KSDATAFORMAT_DSOUND)


class KSAUDIO_POSITION(ctypes.Structure):
    pass


PKSAUDIO_POSITION = POINTER(KSAUDIO_POSITION)


class KSAUDIO_PRESENTATION_POSITION(ctypes.Structure):
    pass


PKSAUDIO_PRESENTATION_POSITION = POINTER(KSAUDIO_PRESENTATION_POSITION)


class _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT(ctypes.Structure):
    pass


KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT = _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT


class _KSAUDIO_PACKETSIZE_CONSTRAINTS(ctypes.Structure):
    pass


KSAUDIO_PACKETSIZE_CONSTRAINTS = _KSAUDIO_PACKETSIZE_CONSTRAINTS


class _KSAUDIO_PACKETSIZE_CONSTRAINTS2(ctypes.Structure):
    pass


KSAUDIO_PACKETSIZE_CONSTRAINTS2 = _KSAUDIO_PACKETSIZE_CONSTRAINTS2


class KSAUDIO_MICROPHONE_COORDINATES(ctypes.Structure):
    pass


PKSAUDIO_MICROPHONE_COORDINATES = POINTER(KSAUDIO_MICROPHONE_COORDINATES)


class KSAUDIO_MIC_ARRAY_GEOMETRY(ctypes.Structure):
    pass


PKSAUDIO_MIC_ARRAY_GEOMETRY = POINTER(KSAUDIO_MIC_ARRAY_GEOMETRY)


class _DS3DVECTOR(ctypes.Structure):
    pass


DS3DVECTOR = _DS3DVECTOR
PDS3DVECTOR = POINTER(_DS3DVECTOR)


class KSDS3D_LISTENER_ALL(ctypes.Structure):
    pass


PKSDS3D_LISTENER_ALL = POINTER(KSDS3D_LISTENER_ALL)


class KSDS3D_LISTENER_ORIENTATION(ctypes.Structure):
    pass


PKSDS3D_LISTENER_ORIENTATION = POINTER(KSDS3D_LISTENER_ORIENTATION)


class KSDS3D_BUFFER_ALL(ctypes.Structure):
    pass


PKSDS3D_BUFFER_ALL = POINTER(KSDS3D_BUFFER_ALL)


class KSDS3D_BUFFER_CONE_ANGLES(ctypes.Structure):
    pass


PKSDS3D_BUFFER_CONE_ANGLES = POINTER(KSDS3D_BUFFER_CONE_ANGLES)


class KSDS3D_HRTF_PARAMS_MSG(ctypes.Structure):
    pass


PKSDS3D_HRTF_PARAMS_MSG = POINTER(KSDS3D_HRTF_PARAMS_MSG)


class KSDS3D_HRTF_INIT_MSG(ctypes.Structure):
    pass


PKSDS3D_HRTF_INIT_MSG = POINTER(KSDS3D_HRTF_INIT_MSG)


class KSDS3D_HRTF_FILTER_FORMAT_MSG(ctypes.Structure):
    pass


PKSDS3D_HRTF_FILTER_FORMAT_MSG = POINTER(KSDS3D_HRTF_FILTER_FORMAT_MSG)


class KSDS3D_ITD_PARAMS(ctypes.Structure):
    pass


PKSDS3D_ITD_PARAMS = POINTER(KSDS3D_ITD_PARAMS)


class KSDS3D_ITD_PARAMS_MSG(ctypes.Structure):
    pass


PKSDS3D_ITD_PARAMS_MSG = POINTER(KSDS3D_ITD_PARAMS_MSG)


class KSDATARANGE_AUDIO(ctypes.Structure):
    pass


PKSDATARANGE_AUDIO = POINTER(KSDATARANGE_AUDIO)


class KSRTAUDIO_BUFFER_PROPERTY(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER_PROPERTY = POINTER(KSRTAUDIO_BUFFER_PROPERTY)


class KSRTAUDIO_BUFFER_PROPERTY32(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER_PROPERTY32 = POINTER(KSRTAUDIO_BUFFER_PROPERTY32)


class KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION = POINTER(KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION)


class KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 = POINTER(KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32)


class KSRTAUDIO_BUFFER(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER = POINTER(KSRTAUDIO_BUFFER)


class KSRTAUDIO_BUFFER32(ctypes.Structure):
    pass


PKSRTAUDIO_BUFFER32 = POINTER(KSRTAUDIO_BUFFER32)


class KSRTAUDIO_HWLATENCY(ctypes.Structure):
    pass


PKSRTAUDIO_HWLATENCY = POINTER(KSRTAUDIO_HWLATENCY)


class KSRTAUDIO_HWREGISTER_PROPERTY(ctypes.Structure):
    pass


PKSRTAUDIO_HWREGISTER_PROPERTY = POINTER(KSRTAUDIO_HWREGISTER_PROPERTY)


class KSRTAUDIO_HWREGISTER_PROPERTY32(ctypes.Structure):
    pass


PKSRTAUDIO_HWREGISTER_PROPERTY32 = POINTER(KSRTAUDIO_HWREGISTER_PROPERTY32)


class KSRTAUDIO_HWREGISTER(ctypes.Structure):
    pass


PKSRTAUDIO_HWREGISTER = POINTER(KSRTAUDIO_HWREGISTER)


class KSRTAUDIO_HWREGISTER32(ctypes.Structure):
    pass


PKSRTAUDIO_HWREGISTER32 = POINTER(KSRTAUDIO_HWREGISTER32)


class KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY(ctypes.Structure):
    pass


PKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY = POINTER(KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY)


class KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32(ctypes.Structure):
    pass


PKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 = POINTER(KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32)


class KSRTAUDIO_GETREADPACKET_INFO(ctypes.Structure):
    pass


PKSRTAUDIO_GETREADPACKET_INFO = POINTER(KSRTAUDIO_GETREADPACKET_INFO)


class KSRTAUDIO_SETWRITEPACKET_INFO(ctypes.Structure):
    pass


PKSRTAUDIO_SETWRITEPACKET_INFO = POINTER(KSRTAUDIO_SETWRITEPACKET_INFO)


class SOUNDDETECTOR_PATTERNHEADER(ctypes.Structure):
    pass





class KSAUDIO_COPY_PROTECTION(ctypes.Structure):
    pass


PKSAUDIO_COPY_PROTECTION = POINTER(KSAUDIO_COPY_PROTECTION)


class KSAUDIO_CHANNEL_CONFIG(ctypes.Structure):
    pass


PKSAUDIO_CHANNEL_CONFIG = POINTER(KSAUDIO_CHANNEL_CONFIG)


class KSAUDIO_DYNAMIC_RANGE(ctypes.Structure):
    pass


PKSAUDIO_DYNAMIC_RANGE = POINTER(KSAUDIO_DYNAMIC_RANGE)


class KSAUDIO_MIXLEVEL(ctypes.Structure):
    pass


PKSAUDIO_MIXLEVEL = POINTER(KSAUDIO_MIXLEVEL)


class KSAUDIO_MIX_CAPS(ctypes.Structure):
    pass


PKSAUDIO_MIX_CAPS = POINTER(KSAUDIO_MIX_CAPS)


class KSAUDIO_MIXCAP_TABLE(ctypes.Structure):
    pass


PKSAUDIO_MIXCAP_TABLE = POINTER(KSAUDIO_MIXCAP_TABLE)


class KSAUDIO_PREFERRED_STATUS(ctypes.Structure):
    pass


PKSAUDIO_PREFERRED_STATUS = POINTER(KSAUDIO_PREFERRED_STATUS)


class KSAUDIO_POSITIONEX(ctypes.Structure):
    pass


PKSAUDIO_POSITIONEX = POINTER(KSAUDIO_POSITIONEX)


class _tagKSTELEPHONY_CALLCONTROL(ctypes.Structure):
    pass


KSTELEPHONY_CALLCONTROL = _tagKSTELEPHONY_CALLCONTROL
PKSTELEPHONY_CALLCONTROL = POINTER(_tagKSTELEPHONY_CALLCONTROL)


class _tagKSTELEPHONY_PROVIDERCHANGE(ctypes.Structure):
    pass


KSTELEPHONY_PROVIDERCHANGE = _tagKSTELEPHONY_PROVIDERCHANGE
PKSTELEPHONY_PROVIDERCHANGE = POINTER(_tagKSTELEPHONY_PROVIDERCHANGE)


class _tagKSTELEPHONY_CALLINFO(ctypes.Structure):
    pass


KSTELEPHONY_CALLINFO = _tagKSTELEPHONY_CALLINFO
PKSTELEPHONY_CALLINFO = POINTER(_tagKSTELEPHONY_CALLINFO)


class _tagKSTOPOLOGY_ENDPOINTID(ctypes.Structure):
    pass


KSTOPOLOGY_ENDPOINTID = _tagKSTOPOLOGY_ENDPOINTID
PKSTOPOLOGY_ENDPOINTID = POINTER(_tagKSTOPOLOGY_ENDPOINTID)


class _tagKSTOPOLOGY_ENDPOINTIDPAIR(ctypes.Structure):
    pass


KSTOPOLOGY_ENDPOINTIDPAIR = _tagKSTOPOLOGY_ENDPOINTIDPAIR
PKSTOPOLOGY_ENDPOINTIDPAIR = POINTER(_tagKSTOPOLOGY_ENDPOINTIDPAIR)


class KSWAVETABLE_WAVE_DESC(ctypes.Structure):
    pass


PKSWAVETABLE_WAVE_DESC = POINTER(KSWAVETABLE_WAVE_DESC)


class KSWAVE_COMPATCAPS(ctypes.Structure):
    pass


PKSWAVE_COMPATCAPS = POINTER(KSWAVE_COMPATCAPS)


class KSWAVE_INPUT_CAPABILITIES(ctypes.Structure):
    pass


PKSWAVE_INPUT_CAPABILITIES = POINTER(KSWAVE_INPUT_CAPABILITIES)


class KSWAVE_OUTPUT_CAPABILITIES(ctypes.Structure):
    pass


PKSWAVE_OUTPUT_CAPABILITIES = POINTER(KSWAVE_OUTPUT_CAPABILITIES)


class KSWAVE_VOLUME(ctypes.Structure):
    pass


PKSWAVE_VOLUME = POINTER(KSWAVE_VOLUME)


class KSWAVE_BUFFER(ctypes.Structure):
    pass


PKSWAVE_BUFFER = POINTER(KSWAVE_BUFFER)


class KSDATARANGE_MUSIC(ctypes.Structure):
    pass


PKSDATARANGE_MUSIC = POINTER(KSDATARANGE_MUSIC)


class LOOPEDSTREAMING_POSITION_EVENT_DATA(ctypes.Structure):
    pass


PLOOPEDSTREAMING_POSITION_EVENT_DATA = POINTER(LOOPEDSTREAMING_POSITION_EVENT_DATA)


class SYSAUDIO_CREATE_VIRTUAL_SOURCE(ctypes.Structure):
    pass


PSYSAUDIO_CREATE_VIRTUAL_SOURCE = POINTER(SYSAUDIO_CREATE_VIRTUAL_SOURCE)


class SYSAUDIO_SELECT_GRAPH(ctypes.Structure):
    pass


PSYSAUDIO_SELECT_GRAPH = POINTER(SYSAUDIO_SELECT_GRAPH)


class SYSAUDIO_INSTANCE_INFO(ctypes.Structure):
    pass


PSYSAUDIO_INSTANCE_INFO = POINTER(SYSAUDIO_INSTANCE_INFO)


class SYSAUDIO_PREFERRED_DEVICE(ctypes.Structure):
    pass


PSYSAUDIO_PREFERRED_DEVICE = POINTER(SYSAUDIO_PREFERRED_DEVICE)


class SYSAUDIO_ATTACH_VIRTUAL_SOURCE(ctypes.Structure):
    pass


PSYSAUDIO_ATTACH_VIRTUAL_SOURCE = POINTER(SYSAUDIO_ATTACH_VIRTUAL_SOURCE)


class KSNODEPROPERTY(ctypes.Structure):
    pass


PKSNODEPROPERTY = POINTER(KSNODEPROPERTY)


class KSNODEPROPERTY_AUDIO_CHANNEL(ctypes.Structure):
    pass


PKSNODEPROPERTY_AUDIO_CHANNEL = POINTER(KSNODEPROPERTY_AUDIO_CHANNEL)


class KSNODEPROPERTY_AUDIO_DEV_SPECIFIC(ctypes.Structure):
    pass


PKSNODEPROPERTY_AUDIO_DEV_SPECIFIC = POINTER(KSNODEPROPERTY_AUDIO_DEV_SPECIFIC)


class KSNODEPROPERTY_AUDIO_3D_LISTENER(ctypes.Structure):
    pass


PKSNODEPROPERTY_AUDIO_3D_LISTENER = POINTER(KSNODEPROPERTY_AUDIO_3D_LISTENER)


class KSNODEPROPERTY_AUDIO_PROPERTY(ctypes.Structure):
    pass


PKSNODEPROPERTY_AUDIO_PROPERTY = POINTER(KSNODEPROPERTY_AUDIO_PROPERTY)


class KSMUSICFORMAT(ctypes.Structure):
    pass


PKSMUSICFORMAT = POINTER(KSMUSICFORMAT)


class _KSMPEGVID_RECT(ctypes.Structure):
    pass


KSMPEGVID_RECT = _KSMPEGVID_RECT
PKSMPEGVID_RECT = POINTER(_KSMPEGVID_RECT)


class KSAC3_ERROR_CONCEALMENT(ctypes.Structure):
    pass


PKSAC3_ERROR_CONCEALMENT = POINTER(KSAC3_ERROR_CONCEALMENT)


class KSAC3_ALTERNATE_AUDIO(ctypes.Structure):
    pass


PKSAC3_ALTERNATE_AUDIO = POINTER(KSAC3_ALTERNATE_AUDIO)


class KSAC3_DOWNMIX(ctypes.Structure):
    pass


PKSAC3_DOWNMIX = POINTER(KSAC3_DOWNMIX)


class KSAC3_BIT_STREAM_MODE(ctypes.Structure):
    pass


PKSAC3_BIT_STREAM_MODE = POINTER(KSAC3_BIT_STREAM_MODE)


class KSAC3_DIALOGUE_LEVEL(ctypes.Structure):
    pass


PKSAC3_DIALOGUE_LEVEL = POINTER(KSAC3_DIALOGUE_LEVEL)


class KSAC3_ROOM_TYPE(ctypes.Structure):
    pass


PKSAC3_ROOM_TYPE = POINTER(KSAC3_ROOM_TYPE)


class _KS_DVD_YCrCb(ctypes.Structure):
    pass


KS_DVD_YCrCb = _KS_DVD_YCrCb
PKS_DVD_YCrCb = POINTER(_KS_DVD_YCrCb)


class _KS_DVD_YUV(ctypes.Structure):
    pass


KS_DVD_YUV = _KS_DVD_YUV
PKS_DVD_YUV = POINTER(_KS_DVD_YUV)


class _KSPROPERTY_SPPAL(ctypes.Structure):
    pass


KSPROPERTY_SPPAL = _KSPROPERTY_SPPAL
PKSPROPERTY_SPPAL = POINTER(_KSPROPERTY_SPPAL)


class _KS_COLCON(ctypes.Structure):
    pass


KS_COLCON = _KS_COLCON
PKS_COLCON = POINTER(_KS_COLCON)


class _KSPROPERTY_SPHLI(ctypes.Structure):
    pass


KSPROPERTY_SPHLI = _KSPROPERTY_SPHLI
PKSPROPERTY_SPHLI = POINTER(_KSPROPERTY_SPHLI)


class _KS_DVDCOPY_CHLGKEY(ctypes.Structure):
    pass


KS_DVDCOPY_CHLGKEY = _KS_DVDCOPY_CHLGKEY
PKS_DVDCOPY_CHLGKEY = POINTER(_KS_DVDCOPY_CHLGKEY)


class _KS_DVDCOPY_BUSKEY(ctypes.Structure):
    pass


KS_DVDCOPY_BUSKEY = _KS_DVDCOPY_BUSKEY
PKS_DVDCOPY_BUSKEY = POINTER(_KS_DVDCOPY_BUSKEY)


class _KS_DVDCOPY_DISCKEY(ctypes.Structure):
    pass


KS_DVDCOPY_DISCKEY = _KS_DVDCOPY_DISCKEY
PKS_DVDCOPY_DISCKEY = POINTER(_KS_DVDCOPY_DISCKEY)


class _KS_DVDCOPY_REGION(ctypes.Structure):
    pass


KS_DVDCOPY_REGION = _KS_DVDCOPY_REGION
PKS_DVDCOPY_REGION = POINTER(_KS_DVDCOPY_REGION)


class _KS_DVDCOPY_TITLEKEY(ctypes.Structure):
    pass


KS_DVDCOPY_TITLEKEY = _KS_DVDCOPY_TITLEKEY
PKS_DVDCOPY_TITLEKEY = POINTER(_KS_DVDCOPY_TITLEKEY)


class _KS_COPY_MACROVISION(ctypes.Structure):
    pass


KS_COPY_MACROVISION = _KS_COPY_MACROVISION
PKS_COPY_MACROVISION = POINTER(_KS_COPY_MACROVISION)


class _KS_DVDCOPY_SET_COPY_STATE(ctypes.Structure):
    pass


KS_DVDCOPY_SET_COPY_STATE = _KS_DVDCOPY_SET_COPY_STATE
PKS_DVDCOPY_SET_COPY_STATE = POINTER(_KS_DVDCOPY_SET_COPY_STATE)


class tagKS_RGBQUAD(ctypes.Structure):
    pass


KS_RGBQUAD = tagKS_RGBQUAD
PKS_RGBQUAD = POINTER(tagKS_RGBQUAD)


class tagKS_BITMAPINFOHEADER(ctypes.Structure):
    pass


KS_BITMAPINFOHEADER = tagKS_BITMAPINFOHEADER
PKS_BITMAPINFOHEADER = POINTER(tagKS_BITMAPINFOHEADER)


class tag_KS_TRUECOLORINFO(ctypes.Structure):
    pass


KS_TRUECOLORINFO = tag_KS_TRUECOLORINFO
PKS_TRUECOLORINFO = POINTER(tag_KS_TRUECOLORINFO)


class tagKS_VIDEOINFOHEADER(ctypes.Structure):
    pass


KS_VIDEOINFOHEADER = tagKS_VIDEOINFOHEADER
PKS_VIDEOINFOHEADER = POINTER(tagKS_VIDEOINFOHEADER)


class tagKS_VIDEOINFO(ctypes.Structure):
    pass


KS_VIDEOINFO = tagKS_VIDEOINFO
PKS_VIDEOINFO = POINTER(tagKS_VIDEOINFO)


class tagKS_VBIINFOHEADER(ctypes.Structure):
    pass


KS_VBIINFOHEADER = tagKS_VBIINFOHEADER
PKS_VBIINFOHEADER = POINTER(tagKS_VBIINFOHEADER)


class tagKS_AnalogVideoInfo(ctypes.Structure):
    pass


KS_ANALOGVIDEOINFO = tagKS_AnalogVideoInfo
PKS_ANALOGVIDEOINFO = POINTER(tagKS_AnalogVideoInfo)


class tagKS_TVTUNER_CHANGE_INFO(ctypes.Structure):
    pass


KS_TVTUNER_CHANGE_INFO = tagKS_TVTUNER_CHANGE_INFO
PKS_TVTUNER_CHANGE_INFO = POINTER(tagKS_TVTUNER_CHANGE_INFO)


class tagKS_VIDEOINFOHEADER2(ctypes.Structure):
    pass


KS_VIDEOINFOHEADER2 = tagKS_VIDEOINFOHEADER2
PKS_VIDEOINFOHEADER2 = POINTER(tagKS_VIDEOINFOHEADER2)


class tagKS_MPEG1VIDEOINFO(ctypes.Structure):
    pass


KS_MPEG1VIDEOINFO = tagKS_MPEG1VIDEOINFO
PKS_MPEG1VIDEOINFO = POINTER(tagKS_MPEG1VIDEOINFO)


class tagKS_MPEGVIDEOINFO2(ctypes.Structure):
    pass


KS_MPEGVIDEOINFO2 = tagKS_MPEGVIDEOINFO2
PKS_MPEGVIDEOINFO2 = POINTER(tagKS_MPEGVIDEOINFO2)


class tagKS_H264VIDEOINFO(ctypes.Structure):
    pass


KS_H264VIDEOINFO = tagKS_H264VIDEOINFO
PKS_H264VIDEOINFO = POINTER(tagKS_H264VIDEOINFO)


class tagKS_MPEAUDIOINFO(ctypes.Structure):
    pass


KS_MPEGAUDIOINFO = tagKS_MPEAUDIOINFO
PKS_MPEGAUDIOINFO = POINTER(tagKS_MPEAUDIOINFO)


class tagKS_DATAFORMAT_VIDEOINFOHEADER(ctypes.Structure):
    pass


KS_DATAFORMAT_VIDEOINFOHEADER = tagKS_DATAFORMAT_VIDEOINFOHEADER
PKS_DATAFORMAT_VIDEOINFOHEADER = POINTER(tagKS_DATAFORMAT_VIDEOINFOHEADER)


class tagKS_DATAFORMAT_VIDEOINFOHEADER2(ctypes.Structure):
    pass


KS_DATAFORMAT_VIDEOINFOHEADER2 = tagKS_DATAFORMAT_VIDEOINFOHEADER2
PKS_DATAFORMAT_VIDEOINFOHEADER2 = POINTER(tagKS_DATAFORMAT_VIDEOINFOHEADER2)


class tagKS_DATAFORMAT_MPEGVIDEOINFO2(ctypes.Structure):
    pass


KS_DATAFORMAT_MPEGVIDEOINFO2 = tagKS_DATAFORMAT_MPEGVIDEOINFO2
PKS_DATAFORMAT_MPEGVIDEOINFO2 = POINTER(tagKS_DATAFORMAT_MPEGVIDEOINFO2)


class tagKS_DATAFORMAT_H264VIDEOINFO(ctypes.Structure):
    pass


KS_DATAFORMAT_H264VIDEOINFO = tagKS_DATAFORMAT_H264VIDEOINFO
PKS_DATAFORMAT_H264VIDEOINFO = POINTER(tagKS_DATAFORMAT_H264VIDEOINFO)


class tagKS_DATAFORMAT_IMAGEINFO(ctypes.Structure):
    pass


KS_DATAFORMAT_IMAGEINFO = tagKS_DATAFORMAT_IMAGEINFO
PKS_DATAFORMAT_IMAGEINFO = POINTER(tagKS_DATAFORMAT_IMAGEINFO)


class tagKS_DATAFORMAT_VIDEOINFO_PALETTE(ctypes.Structure):
    pass


KS_DATAFORMAT_VIDEOINFO_PALETTE = tagKS_DATAFORMAT_VIDEOINFO_PALETTE
PKS_DATAFORMAT_VIDEOINFO_PALETTE = POINTER(tagKS_DATAFORMAT_VIDEOINFO_PALETTE)


class tagKS_DATAFORMAT_VBIINFOHEADER(ctypes.Structure):
    pass


KS_DATAFORMAT_VBIINFOHEADER = tagKS_DATAFORMAT_VBIINFOHEADER
PKS_DATAFORMAT_VBIINFOHEADER = POINTER(tagKS_DATAFORMAT_VBIINFOHEADER)


class _KS_VIDEO_STREAM_CONFIG_CAPS(ctypes.Structure):
    pass


KS_VIDEO_STREAM_CONFIG_CAPS = _KS_VIDEO_STREAM_CONFIG_CAPS
PKS_VIDEO_STREAM_CONFIG_CAPS = POINTER(_KS_VIDEO_STREAM_CONFIG_CAPS)


class tagKS_DATARANGE_VIDEO(ctypes.Structure):
    pass


KS_DATARANGE_VIDEO = tagKS_DATARANGE_VIDEO
PKS_DATARANGE_VIDEO = POINTER(tagKS_DATARANGE_VIDEO)


class tagKS_DATARANGE_VIDEO2(ctypes.Structure):
    pass


KS_DATARANGE_VIDEO2 = tagKS_DATARANGE_VIDEO2
PKS_DATARANGE_VIDEO2 = POINTER(tagKS_DATARANGE_VIDEO2)


class tagKS_DATARANGE_MPEG1_VIDEO(ctypes.Structure):
    pass


KS_DATARANGE_MPEG1_VIDEO = tagKS_DATARANGE_MPEG1_VIDEO
PKS_DATARANGE_MPEG1_VIDEO = POINTER(tagKS_DATARANGE_MPEG1_VIDEO)


class tagKS_DATARANGE_MPEG2_VIDEO(ctypes.Structure):
    pass


KS_DATARANGE_MPEG2_VIDEO = tagKS_DATARANGE_MPEG2_VIDEO
PKS_DATARANGE_MPEG2_VIDEO = POINTER(tagKS_DATARANGE_MPEG2_VIDEO)


class tagKS_DATARANGE_H264_VIDEO(ctypes.Structure):
    pass


KS_DATARANGE_H264_VIDEO = tagKS_DATARANGE_H264_VIDEO
PKS_DATARANGE_H264_VIDEO = POINTER(tagKS_DATARANGE_H264_VIDEO)


class tagKS_DATARANGE_IMAGE(ctypes.Structure):
    pass


KS_DATARANGE_IMAGE = tagKS_DATARANGE_IMAGE
PKS_DATARANGE_IMAGE = POINTER(tagKS_DATARANGE_IMAGE)


class tagKS_DATARANGE_VIDEO_PALETTE(ctypes.Structure):
    pass


KS_DATARANGE_VIDEO_PALETTE = tagKS_DATARANGE_VIDEO_PALETTE
PKS_DATARANGE_VIDEO_PALETTE = POINTER(tagKS_DATARANGE_VIDEO_PALETTE)


class tagKS_DATARANGE_VIDEO_VBI(ctypes.Structure):
    pass


KS_DATARANGE_VIDEO_VBI = tagKS_DATARANGE_VIDEO_VBI
PKS_DATARANGE_VIDEO_VBI = POINTER(tagKS_DATARANGE_VIDEO_VBI)


class tagKS_DATARANGE_ANALOGVIDEO(ctypes.Structure):
    pass


KS_DATARANGE_ANALOGVIDEO = tagKS_DATARANGE_ANALOGVIDEO
PKS_DATARANGE_ANALOGVIDEO = POINTER(tagKS_DATARANGE_ANALOGVIDEO)


class _VBICAP_PROPERTIES_PROTECTION_S(ctypes.Structure):
    pass


VBICAP_PROPERTIES_PROTECTION_S = _VBICAP_PROPERTIES_PROTECTION_S
PVBICAP_PROPERTIES_PROTECTION_S = POINTER(_VBICAP_PROPERTIES_PROTECTION_S)


class _NABTSFEC_BUFFER(ctypes.Structure):
    pass


NABTSFEC_BUFFER = _NABTSFEC_BUFFER
PNABTSFEC_BUFFER = POINTER(_NABTSFEC_BUFFER)


class _VBICODECFILTERING_SCANLINES(ctypes.Structure):
    pass


VBICODECFILTERING_SCANLINES = _VBICODECFILTERING_SCANLINES
PVBICODECFILTERING_SCANLINES = POINTER(_VBICODECFILTERING_SCANLINES)


class _VBICODECFILTERING_NABTS_SUBSTREAMS(ctypes.Structure):
    pass


VBICODECFILTERING_NABTS_SUBSTREAMS = _VBICODECFILTERING_NABTS_SUBSTREAMS
PVBICODECFILTERING_NABTS_SUBSTREAMS = POINTER(_VBICODECFILTERING_NABTS_SUBSTREAMS)


class _VBICODECFILTERING_CC_SUBSTREAMS(ctypes.Structure):
    pass


VBICODECFILTERING_CC_SUBSTREAMS = _VBICODECFILTERING_CC_SUBSTREAMS
PVBICODECFILTERING_CC_SUBSTREAMS = POINTER(_VBICODECFILTERING_CC_SUBSTREAMS)


class _CC_BYTE_PAIR(ctypes.Structure):
    pass


CC_BYTE_PAIR = _CC_BYTE_PAIR
PCC_BYTE_PAIR = POINTER(_CC_BYTE_PAIR)


class _CC_HW_FIELD(ctypes.Structure):
    pass


CC_HW_FIELD = _CC_HW_FIELD
PCC_HW_FIELD = POINTER(_CC_HW_FIELD)


class _NABTS_BUFFER_LINE(ctypes.Structure):
    pass


NABTS_BUFFER_LINE = _NABTS_BUFFER_LINE
PNABTS_BUFFER_LINE = POINTER(_NABTS_BUFFER_LINE)


class _NABTS_BUFFER(ctypes.Structure):
    pass


NABTS_BUFFER = _NABTS_BUFFER
PNABTS_BUFFER = POINTER(_NABTS_BUFFER)


class _WST_BUFFER_LINE(ctypes.Structure):
    pass


WST_BUFFER_LINE = _WST_BUFFER_LINE
PWST_BUFFER_LINE = POINTER(_WST_BUFFER_LINE)


class _WST_BUFFER(ctypes.Structure):
    pass


WST_BUFFER = _WST_BUFFER
PWST_BUFFER = POINTER(_WST_BUFFER)


class _VBICODECFILTERING_STATISTICS_COMMON(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_COMMON = _VBICODECFILTERING_STATISTICS_COMMON
PVBICODECFILTERING_STATISTICS_COMMON = POINTER(_VBICODECFILTERING_STATISTICS_COMMON)


class _VBICODECFILTERING_STATISTICS_COMMON_PIN(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_COMMON_PIN = _VBICODECFILTERING_STATISTICS_COMMON_PIN
PVBICODECFILTERING_STATISTICS_COMMON_PIN = POINTER(_VBICODECFILTERING_STATISTICS_COMMON_PIN)


class _VBICODECFILTERING_STATISTICS_NABTS(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_NABTS = _VBICODECFILTERING_STATISTICS_NABTS
PVBICODECFILTERING_STATISTICS_NABTS = POINTER(_VBICODECFILTERING_STATISTICS_NABTS)


class _VBICODECFILTERING_STATISTICS_NABTS_PIN(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_NABTS_PIN = _VBICODECFILTERING_STATISTICS_NABTS_PIN
PVBICODECFILTERING_STATISTICS_NABTS_PIN = POINTER(_VBICODECFILTERING_STATISTICS_NABTS_PIN)


class _VBICODECFILTERING_STATISTICS_CC(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_CC = _VBICODECFILTERING_STATISTICS_CC
PVBICODECFILTERING_STATISTICS_CC = POINTER(_VBICODECFILTERING_STATISTICS_CC)


class _VBICODECFILTERING_STATISTICS_CC_PIN(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_CC_PIN = _VBICODECFILTERING_STATISTICS_CC_PIN
PVBICODECFILTERING_STATISTICS_CC_PIN = POINTER(_VBICODECFILTERING_STATISTICS_CC_PIN)


class _VBICODECFILTERING_STATISTICS_TELETEXT(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_TELETEXT = _VBICODECFILTERING_STATISTICS_TELETEXT
PVBICODECFILTERING_STATISTICS_TELETEXT = POINTER(_VBICODECFILTERING_STATISTICS_TELETEXT)


class _VBICODECFILTERING_STATISTICS_TELETEXT_PIN(ctypes.Structure):
    pass


VBICODECFILTERING_STATISTICS_TELETEXT_PIN = _VBICODECFILTERING_STATISTICS_TELETEXT_PIN
PVBICODECFILTERING_STATISTICS_TELETEXT_PIN = POINTER(_VBICODECFILTERING_STATISTICS_TELETEXT_PIN)


class KSPROPERTY_VBICODECFILTERING_SCANLINES_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_SCANLINES_S = POINTER(KSPROPERTY_VBICODECFILTERING_SCANLINES_S)


class KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S = POINTER(KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S)


class KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S = POINTER(KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S)


class KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S(ctypes.Structure):
    pass


PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S = POINTER(KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S)


class VRAM_SURFACE_INFO(ctypes.Structure):
    pass


PVRAM_SURFACE_INFO = POINTER(VRAM_SURFACE_INFO)


class VRAM_SURFACE_INFO_PROPERTY_S(ctypes.Structure):
    pass


PVRAM_SURFACE_INFO_PROPERTY_S = POINTER(VRAM_SURFACE_INFO_PROPERTY_S)


class SECURE_BUFFER_INFO(ctypes.Structure):
    pass


PSECURE_BUFFER_INFO = POINTER(SECURE_BUFFER_INFO)


class tagKS_FRAME_INFO(ctypes.Structure):
    pass


KS_FRAME_INFO = tagKS_FRAME_INFO
PKS_FRAME_INFO = POINTER(tagKS_FRAME_INFO)


class tagKS_VBI_FRAME_INFO(ctypes.Structure):
    pass


KS_VBI_FRAME_INFO = tagKS_VBI_FRAME_INFO
PKS_VBI_FRAME_INFO = POINTER(tagKS_VBI_FRAME_INFO)


class KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S(ctypes.Structure):
    pass


PKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S = POINTER(KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S)


class KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S = POINTER(KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S)


class KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S(ctypes.Structure):
    pass


PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S = POINTER(KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S)


class KSPROPERTY_VIDEOPROCAMP_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOPROCAMP_S = POINTER(KSPROPERTY_VIDEOPROCAMP_S)


class KSPROPERTY_VIDEOPROCAMP_NODE_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOPROCAMP_NODE_S = POINTER(KSPROPERTY_VIDEOPROCAMP_NODE_S)


class KSPROPERTY_VIDEOPROCAMP_S2(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOPROCAMP_S2 = POINTER(KSPROPERTY_VIDEOPROCAMP_S2)


class KSPROPERTY_VIDEOPROCAMP_NODE_S2(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOPROCAMP_NODE_S2 = POINTER(KSPROPERTY_VIDEOPROCAMP_NODE_S2)


class KSPROPERTY_SELECTOR_S(ctypes.Structure):
    pass


PKSPROPERTY_SELECTOR_S = POINTER(KSPROPERTY_SELECTOR_S)


class KSPROPERTY_SELECTOR_NODE_S(ctypes.Structure):
    pass


PKSPROPERTY_SELECTOR_NODE_S = POINTER(KSPROPERTY_SELECTOR_NODE_S)


class KSPROPERTY_TUNER_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_CAPS_S = POINTER(KSPROPERTY_TUNER_CAPS_S)


class KSPROPERTY_TUNER_IF_MEDIUM_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_IF_MEDIUM_S = POINTER(KSPROPERTY_TUNER_IF_MEDIUM_S)


class KSPROPERTY_TUNER_MODE_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_MODE_CAPS_S = POINTER(KSPROPERTY_TUNER_MODE_CAPS_S)


class KSPROPERTY_TUNER_MODE_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_MODE_S = POINTER(KSPROPERTY_TUNER_MODE_S)


class KSPROPERTY_TUNER_FREQUENCY_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_FREQUENCY_S = POINTER(KSPROPERTY_TUNER_FREQUENCY_S)


class KSPROPERTY_TUNER_STANDARD_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_STANDARD_S = POINTER(KSPROPERTY_TUNER_STANDARD_S)


class KSPROPERTY_TUNER_STANDARD_MODE_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_STANDARD_MODE_S = POINTER(KSPROPERTY_TUNER_STANDARD_MODE_S)


class KSPROPERTY_TUNER_INPUT_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_INPUT_S = POINTER(KSPROPERTY_TUNER_INPUT_S)


class KSPROPERTY_TUNER_STATUS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_STATUS_S = POINTER(KSPROPERTY_TUNER_STATUS_S)


class TUNER_ANALOG_CAPS_S(ctypes.Structure):
    pass


PTUNER_ANALOG_CAPS_S = POINTER(TUNER_ANALOG_CAPS_S)


class KSPROPERTY_TUNER_SCAN_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_SCAN_CAPS_S = POINTER(KSPROPERTY_TUNER_SCAN_CAPS_S)


class KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S = POINTER(KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S)


class KSPROPERTY_TUNER_SCAN_STATUS_S(ctypes.Structure):
    pass


PKSPROPERTY_TUNER_SCAN_STATUS_S = POINTER(KSPROPERTY_TUNER_SCAN_STATUS_S)


class KSEVENT_TUNER_INITIATE_SCAN_S(ctypes.Structure):
    pass


PKSEVENT_TUNER_INITIATE_SCAN_S = POINTER(KSEVENT_TUNER_INITIATE_SCAN_S)


class KSPROPERTY_VIDEOENCODER_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOENCODER_S = POINTER(KSPROPERTY_VIDEOENCODER_S)


class KSPROPERTY_VIDEODECODER_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEODECODER_CAPS_S = POINTER(KSPROPERTY_VIDEODECODER_CAPS_S)


class KSPROPERTY_VIDEODECODER_STATUS_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEODECODER_STATUS_S = POINTER(KSPROPERTY_VIDEODECODER_STATUS_S)


class KSPROPERTY_VIDEODECODER_STATUS2_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEODECODER_STATUS2_S = POINTER(KSPROPERTY_VIDEODECODER_STATUS2_S)


class KSPROPERTY_VIDEODECODER_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEODECODER_S = POINTER(KSPROPERTY_VIDEODECODER_S)


class KSPROPERTY_CAMERACONTROL_S_EX(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_S_EX = POINTER(KSPROPERTY_CAMERACONTROL_S_EX)


class KSPROPERTY_CAMERACONTROL_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_S = POINTER(KSPROPERTY_CAMERACONTROL_S)


class KSPROPERTY_CAMERACONTROL_NODE_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_NODE_S = KSPROPERTY_CAMERACONTROL_NODE_S


class KSPROPERTY_CAMERACONTROL_S2(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_S2 = POINTER(KSPROPERTY_CAMERACONTROL_S2)


class KSPROPERTY_CAMERACONTROL_NODE_S2(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_NODE_S2 = POINTER(KSPROPERTY_CAMERACONTROL_NODE_S2)


class KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S = POINTER(KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S)


class KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S = POINTER(KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S)


class KSPROPERTY_CAMERACONTROL_FLASH_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_FLASH_S = POINTER(KSPROPERTY_CAMERACONTROL_FLASH_S)


class KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S = POINTER(KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S)


class KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S = POINTER(KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S)


class KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S(ctypes.Structure):
    pass


PKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S = POINTER(KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S)


class tagKSCAMERA_EXTENDEDPROP_HEADER(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_HEADER = tagKSCAMERA_EXTENDEDPROP_HEADER
PKSCAMERA_EXTENDEDPROP_HEADER = POINTER(tagKSCAMERA_EXTENDEDPROP_HEADER)


class tagKSCAMERA_EXTENDEDPROP_VALUE(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_VALUE = tagKSCAMERA_EXTENDEDPROP_VALUE
PKSCAMERA_EXTENDEDPROP_VALUE = POINTER(tagKSCAMERA_EXTENDEDPROP_VALUE)


class tagKSCAMERA_MAXVIDEOFPS_FORPHOTORES(ctypes.Structure):
    pass


KSCAMERA_MAXVIDEOFPS_FORPHOTORES = tagKSCAMERA_MAXVIDEOFPS_FORPHOTORES
PKSCAMERA_MAXVIDEOFPS_FORPHOTORES = POINTER(tagKSCAMERA_MAXVIDEOFPS_FORPHOTORES)


class tagKSCAMERA_EXTENDEDPROP_PHOTOMODE(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_PHOTOMODE = tagKSCAMERA_EXTENDEDPROP_PHOTOMODE
PKSCAMERA_EXTENDEDPROP_PHOTOMODE = POINTER(tagKSCAMERA_EXTENDEDPROP_PHOTOMODE)


class tagKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING = tagKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING
PKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING = POINTER(tagKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING)


class tagKSCAMERA_EXTENDEDPROP_EVCOMPENSATION(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_EVCOMPENSATION = tagKSCAMERA_EXTENDEDPROP_EVCOMPENSATION
PKSCAMERA_EXTENDEDPROP_EVCOMPENSATION = POINTER(tagKSCAMERA_EXTENDEDPROP_EVCOMPENSATION)


class tagKSCAMERA_EXTENDEDPROP_FIELDOFVIEW(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_FIELDOFVIEW = tagKSCAMERA_EXTENDEDPROP_FIELDOFVIEW
PKSCAMERA_EXTENDEDPROP_FIELDOFVIEW = POINTER(tagKSCAMERA_EXTENDEDPROP_FIELDOFVIEW)


class tagKSCAMERA_EXTENDEDPROP_CAMERAOFFSET(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_CAMERAOFFSET = tagKSCAMERA_EXTENDEDPROP_CAMERAOFFSET
PKSCAMERA_EXTENDEDPROP_CAMERAOFFSET = POINTER(tagKSCAMERA_EXTENDEDPROP_CAMERAOFFSET)


class tagKSCAMERA_EXTENDEDPROP_METADATAINFO(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_METADATAINFO = tagKSCAMERA_EXTENDEDPROP_METADATAINFO
PKSCAMERA_EXTENDEDPROP_METADATAINFO = POINTER(tagKSCAMERA_EXTENDEDPROP_METADATAINFO)


class tagKSCAMERA_METADATA_ITEMHEADER(ctypes.Structure):
    pass


KSCAMERA_METADATA_ITEMHEADER = tagKSCAMERA_METADATA_ITEMHEADER
PKSCAMERA_METADATA_ITEMHEADER = POINTER(tagKSCAMERA_METADATA_ITEMHEADER)


class tagKSCAMERA_METADATA_PHOTOCONFIRMATION(ctypes.Structure):
    pass


KSCAMERA_METADATA_PHOTOCONFIRMATION = tagKSCAMERA_METADATA_PHOTOCONFIRMATION
PKSCAMERA_METADATA_PHOTOCONFIRMATION = POINTER(tagKSCAMERA_METADATA_PHOTOCONFIRMATION)


class tagKSCAMERA_METADATA_FRAMEILLUMINATION(ctypes.Structure):
    pass


KSCAMERA_METADATA_FRAMEILLUMINATION = tagKSCAMERA_METADATA_FRAMEILLUMINATION
PKSCAMERA_METADATA_FRAMEILLUMINATION = POINTER(tagKSCAMERA_METADATA_FRAMEILLUMINATION)


class tagKSCAMERA_METADATA_CAPTURESTATS(ctypes.Structure):
    pass


KSCAMERA_METADATA_CAPTURESTATS = tagKSCAMERA_METADATA_CAPTURESTATS
PKSCAMERA_METADATA_CAPTURESTATS = POINTER(tagKSCAMERA_METADATA_CAPTURESTATS)


class tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER = tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER
PKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER)


class tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS = tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS
PKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS)


class tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER = tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER
PKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER)


class tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL = tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL
PKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL)


class tagKSCAMERA_EXTENDEDPROP_ROI_INFO(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_INFO = tagKSCAMERA_EXTENDEDPROP_ROI_INFO
PKSCAMERA_EXTENDEDPROP_ROI_INFO = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_INFO)


class tagKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE = tagKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE
PKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE)


class tagKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE = tagKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE
PKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE)


class tagKSCAMERA_EXTENDEDPROP_ROI_FOCUS(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_ROI_FOCUS = tagKSCAMERA_EXTENDEDPROP_ROI_FOCUS
PKSCAMERA_EXTENDEDPROP_ROI_FOCUS = POINTER(tagKSCAMERA_EXTENDEDPROP_ROI_FOCUS)


class KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER = POINTER(KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER)


class KSCAMERA_PERFRAMESETTING_CAP_HEADER(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_CAP_HEADER = POINTER(KSCAMERA_PERFRAMESETTING_CAP_HEADER)


class KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM = POINTER(KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM)


class KSCAMERA_PERFRAMESETTING_ITEM_HEADER(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_ITEM_HEADER = POINTER(KSCAMERA_PERFRAMESETTING_ITEM_HEADER)


class KSCAMERA_PERFRAMESETTING_FRAME_HEADER(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_FRAME_HEADER = POINTER(KSCAMERA_PERFRAMESETTING_FRAME_HEADER)


class KSCAMERA_PERFRAMESETTING_HEADER(ctypes.Structure):
    pass


PKSCAMERA_PERFRAMESETTING_HEADER = POINTER(KSCAMERA_PERFRAMESETTING_HEADER)


class _KSCAMERA_EXTENDEDPROP_PROFILE(ctypes.Structure):
    pass


KSCAMERA_EXTENDEDPROP_PROFILE = _KSCAMERA_EXTENDEDPROP_PROFILE
PKSCAMERA_EXTENDEDPROP_PROFILE = POINTER(_KSCAMERA_EXTENDEDPROP_PROFILE)


class _KSCAMERA_PROFILE_MEDIAINFO(ctypes.Structure):
    pass


KSCAMERA_PROFILE_MEDIAINFO = _KSCAMERA_PROFILE_MEDIAINFO
PKSCAMERA_PROFILE_MEDIAINFO = POINTER(_KSCAMERA_PROFILE_MEDIAINFO)


class _KSCAMERA_PROFILE_PININFO(ctypes.Structure):
    pass


KSCAMERA_PROFILE_PININFO = _KSCAMERA_PROFILE_PININFO
PKSCAMERA_PROFILE_PININFO = POINTER(_KSCAMERA_PROFILE_PININFO)


class _KSCAMERA_PROFILE_INFO(ctypes.Structure):
    pass


KSCAMERA_PROFILE_INFO = _KSCAMERA_PROFILE_INFO
PKSCAMERA_PROFILE_INFO = POINTER(_KSCAMERA_PROFILE_INFO)


class _KSCAMERA_PROFILE_CONCURRENCYINFO(ctypes.Structure):
    pass


KSCAMERA_PROFILE_CONCURRENCYINFO = _KSCAMERA_PROFILE_CONCURRENCYINFO
PKSCAMERA_PROFILE_CONCURRENCYINFO = POINTER(_KSCAMERA_PROFILE_CONCURRENCYINFO)


class _KSDEVICE_PROFILE_INFO(ctypes.Structure):
    pass


KSDEVICE_PROFILE_INFO = _KSDEVICE_PROFILE_INFO
PKSDEVICE_PROFILE_INFO = POINTER(_KSDEVICE_PROFILE_INFO)


class _WNF_KSCAMERA_STREAMSTATE_INFO(ctypes.Structure):
    pass


WNF_KSCAMERA_STREAMSTATE_INFO = _WNF_KSCAMERA_STREAMSTATE_INFO
PWNF_KSCAMERA_STREAMSTATE_INFO = POINTER(_WNF_KSCAMERA_STREAMSTATE_INFO)


class tagDEVCAPS(ctypes.Structure):
    pass


DEVCAPS = tagDEVCAPS
PDEVCAPS = POINTER(tagDEVCAPS)


class KSPROPERTY_EXTDEVICE_S(ctypes.Structure):
    pass


PKSPROPERTY_EXTDEVICE_S = POINTER(KSPROPERTY_EXTDEVICE_S)


class tagTRANSPORTSTATUS(ctypes.Structure):
    pass


TRANSPORTSTATUS = tagTRANSPORTSTATUS
PTRANSPORTSTATUS = POINTER(tagTRANSPORTSTATUS)


class tagTRANSPORTBASICPARMS(ctypes.Structure):
    pass


TRANSPORTBASICPARMS = tagTRANSPORTBASICPARMS
PTRANSPORTBASICPARMS = POINTER(tagTRANSPORTBASICPARMS)


class tagTRANSPORTVIDEOPARMS(ctypes.Structure):
    pass


TRANSPORTVIDEOPARMS = tagTRANSPORTVIDEOPARMS
PTRANSPORTVIDEOPARMS = POINTER(tagTRANSPORTVIDEOPARMS)


class tagTRANSPORTAUDIOPARMS(ctypes.Structure):
    pass


TRANSPORTAUDIOPARMS = tagTRANSPORTAUDIOPARMS
PTRANSPORTAUDIOPARMS = POINTER(tagTRANSPORTAUDIOPARMS)


class MEDIUM_INFO(ctypes.Structure):
    pass


PMEDIUM_INFO = POINTER(MEDIUM_INFO)


class TRANSPORT_STATE(ctypes.Structure):
    pass


PTRANSPORT_STATE = POINTER(TRANSPORT_STATE)


class KSPROPERTY_EXTXPORT_S(ctypes.Structure):
    pass


PKSPROPERTY_EXTXPORT_S = POINTER(KSPROPERTY_EXTXPORT_S)


class KSPROPERTY_EXTXPORT_NODE_S(ctypes.Structure):
    pass


PKSPROPERTY_EXTXPORT_NODE_S = POINTER(KSPROPERTY_EXTXPORT_NODE_S)


class _timecode(ctypes.Union):
    pass


TIMECODE = _timecode


class tagTIMECODE_SAMPLE(ctypes.Structure):
    pass


TIMECODE_SAMPLE = tagTIMECODE_SAMPLE


class KSPROPERTY_TIMECODE_S(ctypes.Structure):
    pass


PKSPROPERTY_TIMECODE_S = POINTER(KSPROPERTY_TIMECODE_S)


class KSPROPERTY_TIMECODE_NODE_S(ctypes.Structure):
    pass


PKSPROPERTY_TIMECODE_NODE_S = POINTER(KSPROPERTY_TIMECODE_NODE_S)


class KSPROPERTY_CROSSBAR_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_CROSSBAR_CAPS_S = POINTER(KSPROPERTY_CROSSBAR_CAPS_S)


class KSPROPERTY_CROSSBAR_PININFO_S(ctypes.Structure):
    pass


PKSPROPERTY_CROSSBAR_PININFO_S = POINTER(KSPROPERTY_CROSSBAR_PININFO_S)


class KSPROPERTY_CROSSBAR_ROUTE_S(ctypes.Structure):
    pass


PKSPROPERTY_CROSSBAR_ROUTE_S = POINTER(KSPROPERTY_CROSSBAR_ROUTE_S)


class KSPROPERTY_CROSSBAR_ACTIVE_S(ctypes.Structure):
    pass


PKSPROPERTY_CROSSBAR_ACTIVE_S = POINTER(KSPROPERTY_CROSSBAR_ACTIVE_S)


class KSPROPERTY_TVAUDIO_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_TVAUDIO_CAPS_S = POINTER(KSPROPERTY_TVAUDIO_CAPS_S)


class KSPROPERTY_TVAUDIO_S(ctypes.Structure):
    pass


PKSPROPERTY_TVAUDIO_S = POINTER(KSPROPERTY_TVAUDIO_S)


class KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S = POINTER(KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S)


class KSPROPERTY_VIDEOCOMPRESSION_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCOMPRESSION_S = POINTER(KSPROPERTY_VIDEOCOMPRESSION_S)


class KSPROPERTY_VIDEOCOMPRESSION_S1(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCOMPRESSION_S1 = POINTER(KSPROPERTY_VIDEOCOMPRESSION_S1)


class KSDISPLAYCHANGE(ctypes.Structure):
    pass


PKSDISPLAYCHANGE = POINTER(KSDISPLAYCHANGE)


class KSPROPERTY_VIDEOCONTROL_CAPS_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCONTROL_CAPS_S = POINTER(KSPROPERTY_VIDEOCONTROL_CAPS_S)


class KSPROPERTY_VIDEOCONTROL_MODE_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCONTROL_MODE_S = POINTER(KSPROPERTY_VIDEOCONTROL_MODE_S)


class KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S = POINTER(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S)


class KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S(ctypes.Structure):
    pass


PKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S = POINTER(KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S)


class KSPROPERTY_DROPPEDFRAMES_CURRENT_S(ctypes.Structure):
    pass


PKSPROPERTY_DROPPEDFRAMES_CURRENT_S = POINTER(KSPROPERTY_DROPPEDFRAMES_CURRENT_S)


class KSVPMAXPIXELRATE(ctypes.Structure):
    pass


PKSVPMAXPIXELRATE = POINTER(KSVPMAXPIXELRATE)


class KSVPSIZE_PROP(ctypes.Structure):
    pass


PKSVPSIZE_PROP = POINTER(KSVPSIZE_PROP)


class KSVPSURFACEPARAMS(ctypes.Structure):
    pass


PKSVPSURFACEPARAMS = POINTER(KSVPSURFACEPARAMS)


class _DDPIXELFORMAT(ctypes.Structure):
    pass


DDPIXELFORMAT = _DDPIXELFORMAT
LPDDPIXELFORMAT = POINTER(_DDPIXELFORMAT)


class _DDVIDEOPORTCONNECT(ctypes.Structure):
    pass


DDVIDEOPORTCONNECT = _DDVIDEOPORTCONNECT
LPDDVIDEOPORTCONNECT = POINTER(_DDVIDEOPORTCONNECT)


PKSVPMAXPIXELRATE = POINTER(KSVPMAXPIXELRATE)


PKSVPSIZE_PROP = POINTER(KSVPSIZE_PROP)


PKSVPSURFACEPARAMS = POINTER(KSVPSURFACEPARAMS)


class _KSGOP_USERDATA(ctypes.Structure):
    pass


KSGOP_USERDATA = _KSGOP_USERDATA
PKSGOP_USERDATA = POINTER(_KSGOP_USERDATA)


class KS_AM_SimpleRateChange(ctypes.Structure):
    pass


PKS_AM_SimpleRateChange = POINTER(KS_AM_SimpleRateChange)


class KS_AM_ExactRateChange(ctypes.Structure):
    pass


PKS_AM_ExactRateChange = POINTER(KS_AM_ExactRateChange)


class KSJACK_DESCRIPTION(ctypes.Structure):
    pass


PKSJACK_DESCRIPTION = POINTER(KSJACK_DESCRIPTION)


class _tagKSJACK_SINK_INFORMATION(ctypes.Structure):
    pass


KSJACK_SINK_INFORMATION = _tagKSJACK_SINK_INFORMATION
PKSJACK_SINK_INFORMATION = POINTER(_tagKSJACK_SINK_INFORMATION)


class _tagKSJACK_DESCRIPTION2(ctypes.Structure):
    pass


KSJACK_DESCRIPTION2 = _tagKSJACK_DESCRIPTION2
PKSJACK_DESCRIPTION2 = POINTER(_tagKSJACK_DESCRIPTION2)


class _tagKSAUDIOENGINE_DESCRIPTOR(ctypes.Structure):
    pass


KSAUDIOENGINE_DESCRIPTOR = _tagKSAUDIOENGINE_DESCRIPTOR
PKSAUDIOENGINE_DESCRIPTOR = POINTER(_tagKSAUDIOENGINE_DESCRIPTOR)


class _tagKSAUDIOENGINE_BUFFER_SIZE_RANGE(ctypes.Structure):
    pass


KSAUDIOENGINE_BUFFER_SIZE_RANGE = _tagKSAUDIOENGINE_BUFFER_SIZE_RANGE
PKSAUDIOENGINE_BUFFER_SIZE_RANGE = POINTER(_tagKSAUDIOENGINE_BUFFER_SIZE_RANGE)


class _tagKSAUDIOENGINE_VOLUMELEVEL(ctypes.Structure):
    pass


KSAUDIOENGINE_VOLUMELEVEL = _tagKSAUDIOENGINE_VOLUMELEVEL
PKSAUDIOENGINE_VOLUMELEVEL = POINTER(_tagKSAUDIOENGINE_VOLUMELEVEL)


class tagKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE(ctypes.Structure):
    pass


KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE = tagKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE
PKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE = POINTER(tagKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE)


class _KSAUDIOMODULE_DESCRIPTOR(ctypes.Structure):
    pass


KSAUDIOMODULE_DESCRIPTOR = _KSAUDIOMODULE_DESCRIPTOR
PKSAUDIOMODULE_DESCRIPTOR = POINTER(_KSAUDIOMODULE_DESCRIPTOR)


class _KSAUDIOMODULE_PROPERTY(ctypes.Structure):
    pass


KSAUDIOMODULE_PROPERTY = _KSAUDIOMODULE_PROPERTY
PKSAUDIOMODULE_PROPERTY = POINTER(_KSAUDIOMODULE_PROPERTY)


class _KSAUDIOMODULE_NOTIFICATION(ctypes.Structure):
    pass


KSAUDIOMODULE_NOTIFICATION = _KSAUDIOMODULE_NOTIFICATION
PKSAUDIOMODULE_NOTIFICATION = POINTER(_KSAUDIOMODULE_NOTIFICATION)


class tagKS_AMVPSIZE(ctypes.Structure):
    pass

KS_AMVPSIZE = tagKS_AMVPSIZE
PKS_AMVPSIZE = POINTER(tagKS_AMVPSIZE)


class tagKS_AMVPDIMINFO(ctypes.Structure):
    pass

KS_AMVPDIMINFO = tagKS_AMVPDIMINFO
PKS_AMVPDIMINFO = POINTER(tagKS_AMVPDIMINFO)


class tagKS_AMVPDATAINFO(ctypes.Structure):
    pass

KS_AMVPDATAINFO = tagKS_AMVPDATAINFO
PKS_AMVPDATAINFO = POINTER(tagKS_AMVPDATAINFO)


from pyWinAPI.shared.winapifamily_h import * # NOQA

# /* + + Copyright (c) Microsoft Corporation. All rights reserved. Module
# Name: ksmedia.h Abstract: WDM-CSA Multimedia Definitions. --
if not defined(_KS_):
    pass
# END IF   not defined(_KS_)

if not defined(_KSMEDIA_):
    _KSMEDIA_ = 1

    from pyWinAPI.shared.ks_h import *  # NOQA
    from pyWinAPI.shared.mmreg_h import *  # NOQA
    from pyWinAPI.um.mmeapi_h import *  # NOQA

    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP):
        KSMULTIPLE_DATA_PROP._fields_ = [
            ('Property', KSPROPERTY),
            ('MultipleItem', KSMULTIPLE_ITEM),
        ]
        STATIC_KSMEDIUMSETID_MidiBus = (
            0x05908040,
            0x3246,
            0x11D0,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSMEDIUMSETID_MidiBus = DEFINE_GUIDSTRUCT(
            "05908040-3246-11D0-A5D6-28DB04C10000"
        )
        KSMEDIUMSETID_MidiBus = DEFINE_GUIDNAMED(KSMEDIUMSETID_MidiBus)
        STATIC_KSMEDIUMSETID_VPBus = (
            0xA18C15EC,
            0xCE43,
            0x11D0,
            0xAB,
            0xE7,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSMEDIUMSETID_VPBus = DEFINE_GUIDSTRUCT(
            "A18C15EC-CE43-11D0-ABE7-00A0C9223196"
        )
        KSMEDIUMSETID_VPBus = DEFINE_GUIDNAMED(KSMEDIUMSETID_VPBus)
        STATIC_KSINTERFACESETID_Media = (
            0x3A13EB40,
            0x30A7,
            0x11D0,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSINTERFACESETID_Media = DEFINE_GUIDSTRUCT(
            "3A13EB40-30A7-11D0-A5D6-28DB04C10000"
        )
        KSINTERFACESETID_Media = DEFINE_GUIDNAMED(KSINTERFACESETID_Media)


        class KSINTERFACE_MEDIA(ENUM):
            KSINTERFACE_MEDIA_MUSIC = 1
            KSINTERFACE_MEDIA_WAVE_BUFFERED = 2
            KSINTERFACE_MEDIA_WAVE_QUEUED = 3

        KSINTERFACE_MEDIA_MUSIC = KSINTERFACE_MEDIA.KSINTERFACE_MEDIA_MUSIC
        KSINTERFACE_MEDIA_WAVE_BUFFERED = KSINTERFACE_MEDIA.KSINTERFACE_MEDIA_WAVE_BUFFERED
        KSINTERFACE_MEDIA_WAVE_QUEUED = KSINTERFACE_MEDIA.KSINTERFACE_MEDIA_WAVE_QUEUED
        if NTDDI_VERSION >= NTDDI_WINXP:
            if not defined(INIT_USBAUDIO_MID):
                # {4e1cecd2-1679-463b-a72f-a5bf64c86eba}
                def INIT_USBAUDIO_MID(guid, id):
                    guid.Data1 = 0x4E1CECD2 + id
                    guid.Data2 = 0x1679
                    guid.Data3 = 0x463B
                    guid.Data4[0] = 0xA7
                    guid.Data4[1] = 0x2F
                    guid.Data4[2] = 0xA5
                    guid.Data4[3] = 0xBF
                    guid.Data4[4] = 0x64
                    guid.Data4[5] = 0xC8
                    guid.Data4[6] = 0x6E
                    guid.Data4[7] = 0xBA


                def EXTRACT_USBAUDIO_MID(guid):
                    return guid.Data1 - 0x4E1CECD2


                def DEFINE_USBAUDIO_MID_GUID(id):
                    return (
                        0x4E1CECD2 + id,
                        0x1679,
                        0x463B,
                        0xA7,
                        0x2F,
                        0xA5,
                        0xBF,
                        0x64,
                        0xC8,
                        0x6E,
                        0xBA
                    )
                INIT_EXBUS_MANUFACTURER_ID = INIT_USBAUDIO_MID


                def IS_COMPATIBLE_USBAUDIO_MID(guid):
                    return (
                        (guid.Data1 >= 0x4E1CECD2) and
                        (guid.Data1 < 0x4E1CECD2 + 0xFFFF) and
                        (guid.Data2 == 0x1679) and
                        (guid.Data3 == 0x463B) and
                        (guid.Data4[0] == 0xA7) and
                        (guid.Data4[1] == 0x2F) and
                        (guid.Data4[2] == 0xA5) and
                        (guid.Data4[3] == 0xBF) and
                        (guid.Data4[4] == 0x64) and
                        (guid.Data4[5] == 0xC8) and
                        (guid.Data4[6] == 0x6E) and
                        (guid.Data4[7] == 0xBA)
                    )
            # END IF   not defined(INIT_USBAUDIO_MID)

            if not defined(INIT_USBAUDIO_PID):
                # {abcc5a5e-c263-463b-a72f-a5bf64c86eba}
                def INIT_USBAUDIO_PID(guid, id):
                    guid.Data1 = 0xABCC5A5E + id
                    guid.Data2 = 0xC263
                    guid.Data3 = 0x463B
                    guid.Data4[0] = 0xA7
                    guid.Data4[1] = 0x2F
                    guid.Data4[2] = 0xA5
                    guid.Data4[3] = 0xBF
                    guid.Data4[4] = 0x64
                    guid.Data4[5] = 0xC8
                    guid.Data4[6] = 0x6E
                    guid.Data4[7] = 0xBA


                def EXTRACT_USBAUDIO_PID(guid):
                    return guid.Data1 - 0xABCC5A5E


                def DEFINE_USBAUDIO_PID_GUID(id):
                    return (
                        0xABCC5A5E + id,
                        0xC263,
                        0x463B,
                        0xA7,
                        0x2F,
                        0xA5,
                        0xBF,
                        0x64,
                        0xC8,
                        0x6E,
                        0xBA
                    )
                INIT_EXBUS_PRODUCT_ID = INIT_USBAUDIO_PID


                def IS_COMPATIBLE_USBAUDIO_PID(guid):
                    return (
                        (guid.Data1 >= 0xABCC5A5E) and
                        (guid.Data1 < 0xABCC5A5E + 0xFFFF) and
                        (guid.Data2 == 0xC263) and
                        (guid.Data3 == 0x463B) and
                        (guid.Data4[0] == 0xA7) and
                        (guid.Data4[1] == 0x2F) and
                        (guid.Data4[2] == 0xA5) and
                        (guid.Data4[3] == 0xBF) and
                        (guid.Data4[4] == 0x64) and
                        (guid.Data4[5] == 0xC8) and
                        (guid.Data4[6] == 0x6E) and
                        (guid.Data4[7] == 0xBA)
                    )
            # END IF   not defined(INIT_USBAUDIO_PID)

            if not defined(INIT_USBAUDIO_PRODUCT_NAME):
                # {FC575048-2E08-463B-A72F-A5BF64C86EBA}
                def INIT_USBAUDIO_PRODUCT_NAME(guid, vid, pid, strIndex):
                    guid.Data1 = 0xFC575048 + vid
                    guid.Data2 = 0x2E08 + pid
                    guid.Data3 = 0x463B + strIndex
                    guid.Data4[0] = 0xA7
                    guid.Data4[1] = 0x2F
                    guid.Data4[2] = 0xA5
                    guid.Data4[3] = 0xBF
                    guid.Data4[4] = 0x64
                    guid.Data4[5] = 0xC8
                    guid.Data4[6] = 0x6E
                    guid.Data4[7] = 0xBA


                def DEFINE_USBAUDIO_PRODUCT_NAME(vid, pid, strIndex):
                    return (
                        0xFC575048 + vid,
                        0x2E08 + pid,
                        0x463B + strIndex,
                        0xA7,
                        0x2F,
                        0xA5,
                        0xBF,
                        0x64,
                        0xC8,
                        0x6E,
                        0xBA
                    )
            # END IF   not defined(INIT_USBAUDIO_PRODUCT_NAME)

            INIT_EXBUS_PRODUCT_NAME = INIT_USBAUDIO_PRODUCT_NAME

            # USB Component ID
            STATIC_KSCOMPONENTID_USBAUDIO = (
                0x8F1275F0,
                0x26E9,
                0x4264,
                0xBA,
                0x4D,
                0x39,
                0xFF,
                0xF0,
                0x1D,
                0x94,
                0xAA
            )
            KSCOMPONENTID_USBAUDIO = DEFINE_GUIDSTRUCT(
                "8F1275F0-26E9-4264-BA4D-39FFF01D94AA"
            )
            KSCOMPONENTID_USBAUDIO = DEFINE_GUIDNAMED(KSCOMPONENTID_USBAUDIO)
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # USB Terminals
        def INIT_USB_TERMINAL(guid, id):
            guid.Data1 = 0xDFF219E0 + id
            guid.Data2 = 0xF70F
            guid.Data3 = 0x11D0
            guid.Data4[0] = 0xB9
            guid.Data4[1] = 0x17
            guid.Data4[2] = 0x00
            guid.Data4[3] = 0xA0
            guid.Data4[4] = 0xC9
            guid.Data4[5] = 0x22
            guid.Data4[6] = 0x31
            guid.Data4[7] = 0x96


        def EXTRACT_USB_TERMINAL(guid):
            return guid.Data1 - 0xDFF219E0


        def DEFINE_USB_TERMINAL_GUID(id):
            return (
                0xDFF219E0 + id,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
        STATIC_KSNODETYPE_INPUT_UNDEFINED = DEFINE_USB_TERMINAL_GUID(0x0200)
        KSNODETYPE_INPUT_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF21BE0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_INPUT_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_INPUT_UNDEFINED)
        )
        STATIC_KSNODETYPE_MICROPHONE = DEFINE_USB_TERMINAL_GUID(0x0201)
        KSNODETYPE_MICROPHONE = DEFINE_GUIDSTRUCT(
            "DFF21BE1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_MICROPHONE = DEFINE_GUIDNAMED(KSNODETYPE_MICROPHONE)
        STATIC_KSNODETYPE_DESKTOP_MICROPHONE = DEFINE_USB_TERMINAL_GUID(0x0202)
        KSNODETYPE_DESKTOP_MICROPHONE = DEFINE_GUIDSTRUCT(
            "DFF21BE2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DESKTOP_MICROPHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DESKTOP_MICROPHONE)
        )
        STATIC_KSNODETYPE_PERSONAL_MICROPHONE = (
            DEFINE_USB_TERMINAL_GUID(0x0203)
        )
        KSNODETYPE_PERSONAL_MICROPHONE = DEFINE_GUIDSTRUCT(
            "DFF21BE3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_PERSONAL_MICROPHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_PERSONAL_MICROPHONE)
        )
        STATIC_KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE = (
            DEFINE_USB_TERMINAL_GUID(0x0204)
        )
        KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE = DEFINE_GUIDSTRUCT(
            "DFF21BE4-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE)
        )
        STATIC_KSNODETYPE_MICROPHONE_ARRAY = DEFINE_USB_TERMINAL_GUID(0x0205)
        KSNODETYPE_MICROPHONE_ARRAY = DEFINE_GUIDSTRUCT(
            "DFF21BE5-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_MICROPHONE_ARRAY = (
            DEFINE_GUIDNAMED(KSNODETYPE_MICROPHONE_ARRAY)
        )
        STATIC_KSNODETYPE_PROCESSING_MICROPHONE_ARRAY = (
            DEFINE_USB_TERMINAL_GUID(0x0206)
        )
        KSNODETYPE_PROCESSING_MICROPHONE_ARRAY = DEFINE_GUIDSTRUCT(
            "DFF21BE6-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_PROCESSING_MICROPHONE_ARRAY = (
            DEFINE_GUIDNAMED(KSNODETYPE_PROCESSING_MICROPHONE_ARRAY)
        )
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR = (
                0x830A44F2,
                0xA32D,
                0x476B,
                0xBE,
                0x97,
                0x42,
                0x84,
                0x56,
                0x73,
                0xB3,
                0x5A
            )
            KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR = DEFINE_GUIDSTRUCT(
                "830a44f2-a32d-476b-be97-42845673b35a"
            )
            KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR = (
                DEFINE_GUIDNAMED(KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        STATIC_KSNODETYPE_OUTPUT_UNDEFINED = DEFINE_USB_TERMINAL_GUID(0x0300)
        KSNODETYPE_OUTPUT_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF21CE0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_OUTPUT_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_OUTPUT_UNDEFINED)
        )
        STATIC_KSNODETYPE_SPEAKER = DEFINE_USB_TERMINAL_GUID(0x0301)
        KSNODETYPE_SPEAKER = DEFINE_GUIDSTRUCT(
            "DFF21CE1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_SPEAKER = DEFINE_GUIDNAMED(KSNODETYPE_SPEAKER)
        STATIC_KSNODETYPE_HEADPHONES = DEFINE_USB_TERMINAL_GUID(0x0302)
        KSNODETYPE_HEADPHONES = DEFINE_GUIDSTRUCT(
            "DFF21CE2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_HEADPHONES = DEFINE_GUIDNAMED(KSNODETYPE_HEADPHONES)
        STATIC_KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO = (
            DEFINE_USB_TERMINAL_GUID(0x0303)
        )
        KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF21CE3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO = (
            DEFINE_GUIDNAMED(KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO)
        )
        STATIC_KSNODETYPE_DESKTOP_SPEAKER = DEFINE_USB_TERMINAL_GUID(0x0304)
        KSNODETYPE_DESKTOP_SPEAKER = DEFINE_GUIDSTRUCT(
            "DFF21CE4-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DESKTOP_SPEAKER = (
            DEFINE_GUIDNAMED(KSNODETYPE_DESKTOP_SPEAKER)
        )
        STATIC_KSNODETYPE_ROOM_SPEAKER = DEFINE_USB_TERMINAL_GUID(0x0305)
        KSNODETYPE_ROOM_SPEAKER = DEFINE_GUIDSTRUCT(
            "DFF21CE5-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_ROOM_SPEAKER = DEFINE_GUIDNAMED(KSNODETYPE_ROOM_SPEAKER)
        STATIC_KSNODETYPE_COMMUNICATION_SPEAKER = (
            DEFINE_USB_TERMINAL_GUID(0x0306)
        )
        KSNODETYPE_COMMUNICATION_SPEAKER = DEFINE_GUIDSTRUCT(
            "DFF21CE6-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_COMMUNICATION_SPEAKER = (
            DEFINE_GUIDNAMED(KSNODETYPE_COMMUNICATION_SPEAKER)
        )
        STATIC_KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER = (
            DEFINE_USB_TERMINAL_GUID(0x0307)
        )
        KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER = DEFINE_GUIDSTRUCT(
            "DFF21CE7-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER = (
            DEFINE_GUIDNAMED(KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER)
        )
        STATIC_KSNODETYPE_BIDIRECTIONAL_UNDEFINED = (
            DEFINE_USB_TERMINAL_GUID(0x0400)
        )
        KSNODETYPE_BIDIRECTIONAL_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF21DE0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_BIDIRECTIONAL_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_BIDIRECTIONAL_UNDEFINED)
        )
        STATIC_KSNODETYPE_HANDSET = DEFINE_USB_TERMINAL_GUID(0x0401)
        KSNODETYPE_HANDSET = DEFINE_GUIDSTRUCT(
            "DFF21DE1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_HANDSET = DEFINE_GUIDNAMED(KSNODETYPE_HANDSET)
        KSNODETYPE_HEADSET_MICROPHONE = KSNODETYPE_PERSONAL_MICROPHONE
        KSNODETYPE_HEADSET_SPEAKERS = KSNODETYPE_COMMUNICATION_SPEAKER
        STATIC_KSNODETYPE_HEADSET = DEFINE_USB_TERMINAL_GUID(0x0402)
        KSNODETYPE_HEADSET = DEFINE_GUIDSTRUCT(
            "DFF21DE2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_HEADSET = DEFINE_GUIDNAMED(KSNODETYPE_HEADSET)
        STATIC_KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION = (
            DEFINE_USB_TERMINAL_GUID(0x0403)
        )
        KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION = DEFINE_GUIDSTRUCT(
            "DFF21DE3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION = (
            DEFINE_GUIDNAMED(KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION)
        )
        STATIC_KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE = (
            DEFINE_USB_TERMINAL_GUID(0x0404)
        )
        KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE = DEFINE_GUIDSTRUCT(
            "DFF21DE4-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE)
        )
        STATIC_KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE = (
            DEFINE_USB_TERMINAL_GUID(0x0405)
        )
        KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE = DEFINE_GUIDSTRUCT(
            "DFF21DE5-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE)
        )
        STATIC_KSNODETYPE_TELEPHONY_UNDEFINED = (
            DEFINE_USB_TERMINAL_GUID(0x0500)
        )
        KSNODETYPE_TELEPHONY_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF21EE0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_TELEPHONY_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_TELEPHONY_UNDEFINED)
        )
        STATIC_KSNODETYPE_PHONE_LINE = DEFINE_USB_TERMINAL_GUID(0x0501)
        KSNODETYPE_PHONE_LINE = DEFINE_GUIDSTRUCT(
            "DFF21EE1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_PHONE_LINE = DEFINE_GUIDNAMED(KSNODETYPE_PHONE_LINE)
        STATIC_KSNODETYPE_TELEPHONE = DEFINE_USB_TERMINAL_GUID(0x0502)
        KSNODETYPE_TELEPHONE = DEFINE_GUIDSTRUCT(
            "DFF21EE2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_TELEPHONE = DEFINE_GUIDNAMED(KSNODETYPE_TELEPHONE)
        STATIC_KSNODETYPE_DOWN_LINE_PHONE = DEFINE_USB_TERMINAL_GUID(0x0503)
        KSNODETYPE_DOWN_LINE_PHONE = DEFINE_GUIDSTRUCT(
            "DFF21EE3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DOWN_LINE_PHONE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DOWN_LINE_PHONE)
        )
        STATIC_KSNODETYPE_EXTERNAL_UNDEFINED = DEFINE_USB_TERMINAL_GUID(0x0600)
        KSNODETYPE_EXTERNAL_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF21FE0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_EXTERNAL_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_EXTERNAL_UNDEFINED)
        )
        STATIC_KSNODETYPE_ANALOG_CONNECTOR = DEFINE_USB_TERMINAL_GUID(0x601)
        KSNODETYPE_ANALOG_CONNECTOR = DEFINE_GUIDSTRUCT(
            "DFF21FE1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_ANALOG_CONNECTOR = (
            DEFINE_GUIDNAMED(KSNODETYPE_ANALOG_CONNECTOR)
        )
        STATIC_KSNODETYPE_DIGITAL_AUDIO_INTERFACE = (
            DEFINE_USB_TERMINAL_GUID(0x0602)
        )
        KSNODETYPE_DIGITAL_AUDIO_INTERFACE = DEFINE_GUIDSTRUCT(
            "DFF21FE2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DIGITAL_AUDIO_INTERFACE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DIGITAL_AUDIO_INTERFACE)
        )
        STATIC_KSNODETYPE_LINE_CONNECTOR = DEFINE_USB_TERMINAL_GUID(0x0603)
        KSNODETYPE_LINE_CONNECTOR = DEFINE_GUIDSTRUCT(
            "DFF21FE3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_LINE_CONNECTOR = DEFINE_GUIDNAMED(KSNODETYPE_LINE_CONNECTOR)
        STATIC_KSNODETYPE_LEGACY_AUDIO_CONNECTOR = (
            DEFINE_USB_TERMINAL_GUID(0x0604)
        )
        KSNODETYPE_LEGACY_AUDIO_CONNECTOR = DEFINE_GUIDSTRUCT(
            "DFF21FE4-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_LEGACY_AUDIO_CONNECTOR = (
            DEFINE_GUIDNAMED(KSNODETYPE_LEGACY_AUDIO_CONNECTOR)
        )
        STATIC_KSNODETYPE_SPDIF_INTERFACE = DEFINE_USB_TERMINAL_GUID(0x0605)
        KSNODETYPE_SPDIF_INTERFACE = DEFINE_GUIDSTRUCT(
            "DFF21FE5-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_SPDIF_INTERFACE = (
            DEFINE_GUIDNAMED(KSNODETYPE_SPDIF_INTERFACE)
        )
        STATIC_KSNODETYPE_1394_DA_STREAM = DEFINE_USB_TERMINAL_GUID(0x0606)
        KSNODETYPE_1394_DA_STREAM = DEFINE_GUIDSTRUCT(
            "DFF21FE6-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_1394_DA_STREAM = DEFINE_GUIDNAMED(KSNODETYPE_1394_DA_STREAM)
        STATIC_KSNODETYPE_1394_DV_STREAM_SOUNDTRACK = (
            DEFINE_USB_TERMINAL_GUID(0x0607)
        )
        KSNODETYPE_1394_DV_STREAM_SOUNDTRACK = DEFINE_GUIDSTRUCT(
            "DFF21FE7-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_1394_DV_STREAM_SOUNDTRACK = (
            DEFINE_GUIDNAMED(KSNODETYPE_1394_DV_STREAM_SOUNDTRACK)
        )
        STATIC_KSNODETYPE_EMBEDDED_UNDEFINED = DEFINE_USB_TERMINAL_GUID(0x0700)
        KSNODETYPE_EMBEDDED_UNDEFINED = DEFINE_GUIDSTRUCT(
            "DFF220E0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_EMBEDDED_UNDEFINED = (
            DEFINE_GUIDNAMED(KSNODETYPE_EMBEDDED_UNDEFINED)
        )
        STATIC_KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE = (
            DEFINE_USB_TERMINAL_GUID(0x0701)
        )
        KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE = DEFINE_GUIDSTRUCT(
            "DFF220E1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE = (
            DEFINE_GUIDNAMED(KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE)
        )
        STATIC_KSNODETYPE_EQUALIZATION_NOISE = DEFINE_USB_TERMINAL_GUID(0x0702)
        KSNODETYPE_EQUALIZATION_NOISE = DEFINE_GUIDSTRUCT(
            "DFF220E2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_EQUALIZATION_NOISE = (
            DEFINE_GUIDNAMED(KSNODETYPE_EQUALIZATION_NOISE)
        )
        STATIC_KSNODETYPE_CD_PLAYER = DEFINE_USB_TERMINAL_GUID(0x0703)
        KSNODETYPE_CD_PLAYER = DEFINE_GUIDSTRUCT(
            "DFF220E3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_CD_PLAYER = DEFINE_GUIDNAMED(KSNODETYPE_CD_PLAYER)
        STATIC_KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE = (
            DEFINE_USB_TERMINAL_GUID(0x0704)
        )
        KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE = DEFINE_GUIDSTRUCT(
            "DFF220E4-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE)
        )
        STATIC_KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE = (
            DEFINE_USB_TERMINAL_GUID(0x0705)
        )
        KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE = DEFINE_GUIDSTRUCT(
            "DFF220E5-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE)
        )
        STATIC_KSNODETYPE_MINIDISK = DEFINE_USB_TERMINAL_GUID(0x0706)
        KSNODETYPE_MINIDISK = DEFINE_GUIDSTRUCT(
            "DFF220E6-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_MINIDISK = DEFINE_GUIDNAMED(KSNODETYPE_MINIDISK)
        STATIC_KSNODETYPE_ANALOG_TAPE = DEFINE_USB_TERMINAL_GUID(0x0707)
        KSNODETYPE_ANALOG_TAPE = DEFINE_GUIDSTRUCT(
            "DFF220E7-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_ANALOG_TAPE = DEFINE_GUIDNAMED(KSNODETYPE_ANALOG_TAPE)
        STATIC_KSNODETYPE_PHONOGRAPH = DEFINE_USB_TERMINAL_GUID(0x0708)
        KSNODETYPE_PHONOGRAPH = DEFINE_GUIDSTRUCT(
            "DFF220E8-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_PHONOGRAPH = DEFINE_GUIDNAMED(KSNODETYPE_PHONOGRAPH)
        STATIC_KSNODETYPE_VCR_AUDIO = DEFINE_USB_TERMINAL_GUID(0x0708)
        KSNODETYPE_VCR_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220E9-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_VCR_AUDIO = DEFINE_GUIDNAMED(KSNODETYPE_VCR_AUDIO)
        STATIC_KSNODETYPE_VIDEO_DISC_AUDIO = DEFINE_USB_TERMINAL_GUID(0x070A)
        KSNODETYPE_VIDEO_DISC_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220EA-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_VIDEO_DISC_AUDIO = (
            DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_DISC_AUDIO)
        )
        STATIC_KSNODETYPE_DVD_AUDIO = DEFINE_USB_TERMINAL_GUID(0x070B)
        KSNODETYPE_DVD_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220EB-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DVD_AUDIO = DEFINE_GUIDNAMED(KSNODETYPE_DVD_AUDIO)
        STATIC_KSNODETYPE_TV_TUNER_AUDIO = DEFINE_USB_TERMINAL_GUID(0x070C)
        KSNODETYPE_TV_TUNER_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220EC-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_TV_TUNER_AUDIO = DEFINE_GUIDNAMED(KSNODETYPE_TV_TUNER_AUDIO)
        STATIC_KSNODETYPE_SATELLITE_RECEIVER_AUDIO = (
            DEFINE_USB_TERMINAL_GUID(0x070D)
        )
        KSNODETYPE_SATELLITE_RECEIVER_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220ED-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_SATELLITE_RECEIVER_AUDIO = (
            DEFINE_GUIDNAMED(KSNODETYPE_SATELLITE_RECEIVER_AUDIO)
        )
        STATIC_KSNODETYPE_CABLE_TUNER_AUDIO = DEFINE_USB_TERMINAL_GUID(0x070E)
        KSNODETYPE_CABLE_TUNER_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220EE-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_CABLE_TUNER_AUDIO = (
            DEFINE_GUIDNAMED(KSNODETYPE_CABLE_TUNER_AUDIO)
        )
        STATIC_KSNODETYPE_DSS_AUDIO = DEFINE_USB_TERMINAL_GUID(0x070F)
        KSNODETYPE_DSS_AUDIO = DEFINE_GUIDSTRUCT(
            "DFF220EF-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_DSS_AUDIO = DEFINE_GUIDNAMED(KSNODETYPE_DSS_AUDIO)
        STATIC_KSNODETYPE_RADIO_RECEIVER = DEFINE_USB_TERMINAL_GUID(0x0710)
        KSNODETYPE_RADIO_RECEIVER = DEFINE_GUIDSTRUCT(
            "DFF220F0-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_RADIO_RECEIVER = DEFINE_GUIDNAMED(KSNODETYPE_RADIO_RECEIVER)
        STATIC_KSNODETYPE_RADIO_TRANSMITTER = DEFINE_USB_TERMINAL_GUID(0x0711)
        KSNODETYPE_RADIO_TRANSMITTER = DEFINE_GUIDSTRUCT(
            "DFF220F1-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_RADIO_TRANSMITTER = (
            DEFINE_GUIDNAMED(KSNODETYPE_RADIO_TRANSMITTER)
        )
        STATIC_KSNODETYPE_MULTITRACK_RECORDER = (
            DEFINE_USB_TERMINAL_GUID(0x0712)
        )
        KSNODETYPE_MULTITRACK_RECORDER = DEFINE_GUIDSTRUCT(
            "DFF220F2-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_MULTITRACK_RECORDER = (
            DEFINE_GUIDNAMED(KSNODETYPE_MULTITRACK_RECORDER)
        )
        STATIC_KSNODETYPE_SYNTHESIZER = DEFINE_USB_TERMINAL_GUID(0x0713)
        KSNODETYPE_SYNTHESIZER = DEFINE_GUIDSTRUCT(
            "DFF220F3-F70F-11D0-B917-00A0C9223196"
        )
        KSNODETYPE_SYNTHESIZER = DEFINE_GUIDNAMED(KSNODETYPE_SYNTHESIZER)
        STATIC_KSNODETYPE_HDMI_INTERFACE = (
            0xD1B9CC2A,
            0xF519,
            0x417F,
            0x91,
            0xC9,
            0x55,
            0xFA,
            0x65,
            0x48,
            0x10,
            0x01
        )
        KSNODETYPE_HDMI_INTERFACE = DEFINE_GUIDSTRUCT(
            "D1B9CC2A-F519-417f-91C9-55FA65481001"
        )
        KSNODETYPE_HDMI_INTERFACE = DEFINE_GUIDNAMED(KSNODETYPE_HDMI_INTERFACE)
        STATIC_KSNODETYPE_DISPLAYPORT_INTERFACE = (
            0xE47E4031,
            0x3EA6,
            0x418D,
            0x8F,
            0x9B,
            0xB7,
            0x38,
            0x43,
            0xCC,
            0xBA,
            0x97
        )
        KSNODETYPE_DISPLAYPORT_INTERFACE = DEFINE_GUIDSTRUCT(
            "E47E4031-3EA6-418d-8F9B-B73843CCBA97"
        )
        KSNODETYPE_DISPLAYPORT_INTERFACE = (
            DEFINE_GUIDNAMED(KSNODETYPE_DISPLAYPORT_INTERFACE)
        )
        STATIC_KSNODETYPE_AUDIO_LOOPBACK = (
            0x8F42C0B2,
            0x91CE,
            0x4BCF,
            0x9C,
            0xCD,
            0xE,
            0x59,
            0x90,
            0x37,
            0xAB,
            0x35
        )
        KSNODETYPE_AUDIO_LOOPBACK = DEFINE_GUIDSTRUCT(
            "8F42C0B2-91CE-4BCF-9CCD-0E599037AB35"
        )
        KSNODETYPE_AUDIO_LOOPBACK = DEFINE_GUIDNAMED(KSNODETYPE_AUDIO_LOOPBACK)
        if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
            STATIC_KSNODETYPE_AUDIO_KEYWORDDETECTOR = (
                0x3817E0B8,
                0xDF58,
                0x4375,
                0xB6,
                0x69,
                0xC4,
                0x96,
                0x34,
                0x33,
                0x1F,
                0x9D
            )
            KSNODETYPE_AUDIO_KEYWORDDETECTOR = DEFINE_GUIDSTRUCT(
                "3817E0B8-DF58-4375-B669-C49634331F9D"
            )
            KSNODETYPE_AUDIO_KEYWORDDETECTOR = (
                DEFINE_GUIDNAMED(KSNODETYPE_AUDIO_KEYWORDDETECTOR)
            )
        # END IF


        # USB MIDI Nodes
        STATIC_KSNODETYPE_MIDI_JACK = (
            0x265E0C3F,
            0xFA39,
            0x4DF3,
            0xAB,
            0x04,
            0xBE,
            0x01,
            0xB9,
            0x1E,
            0x29,
            0x9A
        )
        KSNODETYPE_MIDI_JACK = DEFINE_GUIDSTRUCT(
            "265E0C3F-FA39-4df3-AB04-BE01B91E299A"
        )
        KSNODETYPE_MIDI_JACK = DEFINE_GUIDNAMED(KSNODETYPE_MIDI_JACK)
        STATIC_KSNODETYPE_MIDI_ELEMENT = (
            0x01C6FE66,
            0x6E48,
            0x4C65,
            0xAC,
            0x9B,
            0x52,
            0xDB,
            0x5D,
            0x65,
            0x6C,
            0x7E
        )
        KSNODETYPE_MIDI_ELEMENT = DEFINE_GUIDSTRUCT(
            "01C6FE66-6E48-4c65-AC9B-52DB5D656C7E"
        )
        KSNODETYPE_MIDI_ELEMENT = DEFINE_GUIDNAMED(KSNODETYPE_MIDI_ELEMENT)

        # Hardware Audio Engine Node
        STATIC_KSNODETYPE_AUDIO_ENGINE = (
            0x35CAF6E4,
            0xF3B3,
            0x4168,
            0xBB,
            0x4B,
            0x55,
            0xE7,
            0x7A,
            0x46,
            0x1C,
            0x7E
        )
        KSNODETYPE_AUDIO_ENGINE = DEFINE_GUIDSTRUCT(
            "35CAF6E4-F3B3-4168-BB4B-55E77A461C7E"
        )
        KSNODETYPE_AUDIO_ENGINE = DEFINE_GUIDNAMED(KSNODETYPE_AUDIO_ENGINE)

        # KS Node type for speakers node with static jack
        STATIC_KSNODETYPE_SPEAKERS_STATIC_JACK = (
            0x28E04F87,
            0x4DBE,
            0x4F8D,
            0x85,
            0x89,
            0x2,
            0x5D,
            0x20,
            0x9D,
            0xFB,
            0x4A
        )
        KSNODETYPE_SPEAKERS_STATIC_JACK = DEFINE_GUIDSTRUCT(
            "28E04F87-4DBE-4f8d-8589-025D209DFB4A"
        )
        KSNODETYPE_SPEAKERS_STATIC_JACK = (
            DEFINE_GUIDNAMED(KSNODETYPE_SPEAKERS_STATIC_JACK)
        )

        # GUID for Spdif Out pin name
        STATIC_PINNAME_SPDIF_OUT = (
            0x3A264481,
            0xE52C,
            0x4B82,
            0x8E,
            0x7A,
            0xC8,
            0xE2,
            0xF9,
            0x1D,
            0xC3,
            0x80
        )
        PINNAME_SPDIF_OUT = DEFINE_GUIDSTRUCT(
            "3A264481-E52C-4b82-8E7A-C8E2F91DC380"
        )
        PINNAME_SPDIF_OUT = DEFINE_GUIDNAMED(PINNAME_SPDIF_OUT)

        # GUID for Spdif In pin name
        STATIC_PINNAME_SPDIF_IN = (
            0x15DC9025,
            0x22AD,
            0x41B3,
            0x88,
            0x75,
            0xF4,
            0xCE,
            0xB0,
            0x29,
            0x9E,
            0x20
        )
        PINNAME_SPDIF_IN = DEFINE_GUIDSTRUCT(
            "15DC9025-22AD-41b3-8875-F4CEB0299E20"
        )
        PINNAME_SPDIF_IN = DEFINE_GUIDNAMED(PINNAME_SPDIF_IN)

        # GUID for HDMI Out pin name
        STATIC_PINNAME_HDMI_OUT = (
            0x387BFC03,
            0xE7EF,
            0x4901,
            0x86,
            0xE0,
            0x35,
            0xB7,
            0xC3,
            0x2B,
            0x0,
            0xEF
        )
        PINNAME_HDMI_OUT = DEFINE_GUIDSTRUCT(
            "387BFC03-E7EF-4901-86E0-35B7C32B00EF"
        )
        PINNAME_HDMI_OUT = DEFINE_GUIDNAMED(PINNAME_HDMI_OUT)

        # GUID for Display Port Out pin name
        STATIC_PINNAME_DISPLAYPORT_OUT = (
            0x21FBB329,
            0x1A4A,
            0x48DA,
            0xA0,
            0x76,
            0x23,
            0x18,
            0xA3,
            0xC5,
            0x9B,
            0x26
        )
        PINNAME_DISPLAYPORT_OUT = DEFINE_GUIDSTRUCT(
            "21FBB329-1A4A-48da-A076-2318A3C59B26"
        )
        PINNAME_DISPLAYPORT_OUT = DEFINE_GUIDNAMED(PINNAME_DISPLAYPORT_OUT)
        if NTDDI_VERSION < NTDDI_VISTA:
            # Microsoft's WDMAUD virtual swsynth pin name guid
            STATIC_KSNODETYPE_SWSYNTH = (
                0x423274A0,
                0x8B81,
                0x11D1,
                0xA0,
                0x50,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSNODETYPE_SWSYNTH = DEFINE_GUIDSTRUCT(
                "423274A0-8B81-11D1-A050-0000F8004788"
            )
            KSNODETYPE_SWSYNTH = DEFINE_GUIDNAMED(KSNODETYPE_SWSYNTH)

            # Microsoft's SWMIDI midi pin and node name guid
            STATIC_KSNODETYPE_SWMIDI = (
                0xCB9BEFA0,
                0xA251,
                0x11D1,
                0xA0,
                0x50,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSNODETYPE_SWMIDI = DEFINE_GUIDSTRUCT(
                "CB9BEFA0-A251-11D1-A050-0000F8004788"
            )
            KSNODETYPE_SWMIDI = DEFINE_GUIDNAMED(KSNODETYPE_SWMIDI)
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSNODETYPE_DRM_DESCRAMBLE = (
                0xFFBB6E3F,
                0xCCFE,
                0x4D84,
                0x90,
                0xD9,
                0x42,
                0x14,
                0x18,
                0xB0,
                0x3A,
                0x8E
            )
            KSNODETYPE_DRM_DESCRAMBLE = DEFINE_GUIDSTRUCT(
                "FFBB6E3F-CCFE-4D84-90D9-421418B03A8E"
            )
            KSNODETYPE_DRM_DESCRAMBLE = (
                DEFINE_GUIDNAMED(KSNODETYPE_DRM_DESCRAMBLE)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)


        if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
            # Nodetypes for Windows Phone Cellular Streaming.
            # {686D7CC0-D903-4258-B443-3A3D3580741C}
            STATIC_KSNODETYPE_TELEPHONY_BIDI = (
                0x686D7CC0,
                0xD903,
                0x4258,
                0xB4,
                0x43,
                0x3A,
                0x3D,
                0x35,
                0x80,
                0x74,
                0x1C
            )
            KSNODETYPE_TELEPHONY_BIDI = DEFINE_GUIDSTRUCT(
                "686D7CC0-D903-4258-B443-3A3D3580741C"
            )
            KSNODETYPE_TELEPHONY_BIDI = (
                DEFINE_GUIDNAMED(KSNODETYPE_TELEPHONY_BIDI)
            )


            # Nodetype for FM Receiver.
            # {834A733C-F485-41C0-A62B-513025014E40}
            STATIC_KSNODETYPE_FM_RX = (
                0x834A733C,
                0xF485,
                0x41C0,
                0xA6,
                0x2B,
                0x51,
                0x30,
                0x25,
                0x1,
                0x4E,
                0x40
            )
            KSNODETYPE_FM_RX = DEFINE_GUIDSTRUCT(
                "834A733C-F485-41C0-A62B-513025014E40"
            )
            KSNODETYPE_FM_RX = DEFINE_GUIDNAMED(KSNODETYPE_FM_RX)
        # END IF   (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)

        # General categories
        STATIC_KSCATEGORY_AUDIO = (
            0x6994AD04,
            0x93EF,
            0x11D0,
            0xA3,
            0xCC,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSCATEGORY_AUDIO = DEFINE_GUIDSTRUCT(
            "6994AD04-93EF-11D0-A3CC-00A0C9223196"
        )
        KSCATEGORY_AUDIO = DEFINE_GUIDNAMED(KSCATEGORY_AUDIO)
        STATIC_KSCATEGORY_VIDEO = (
            0x6994AD05,
            0x93EF,
            0x11D0,
            0xA3,
            0xCC,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSCATEGORY_VIDEO = DEFINE_GUIDSTRUCT(
            "6994AD05-93EF-11D0-A3CC-00A0C9223196"
        )
        KSCATEGORY_VIDEO = DEFINE_GUIDNAMED(KSCATEGORY_VIDEO)
        if NTDDI_VERSION >= NTDDI_VISTA:
            STATIC_KSCATEGORY_REALTIME = (
                0xEB115FFC,
                0x10C8,
                0x4964,
                0x83,
                0x1D,
                0x6D,
                0xCB,
                0x02,
                0xE6,
                0xF2,
                0x3F
            )
            KSCATEGORY_REALTIME = DEFINE_GUIDSTRUCT(
                "EB115FFC-10C8-4964-831D-6DCB02E6F23F"
            )
            KSCATEGORY_REALTIME = DEFINE_GUIDNAMED(KSCATEGORY_REALTIME)
        # END IF


        STATIC_KSCATEGORY_TEXT = (
            0x6994AD06,
            0x93EF,
            0x11D0,
            0xA3,
            0xCC,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSCATEGORY_TEXT = DEFINE_GUIDSTRUCT(
            "6994AD06-93EF-11D0-A3CC-00A0C9223196"
        )
        KSCATEGORY_TEXT = DEFINE_GUIDNAMED(KSCATEGORY_TEXT)
        STATIC_KSCATEGORY_NETWORK = (
            0x67C9CC3C,
            0x69C4,
            0x11D2,
            0x87,
            0x59,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSCATEGORY_NETWORK = DEFINE_GUIDSTRUCT(
            "67C9CC3C-69C4-11D2-8759-00A0C9223196"
        )
        KSCATEGORY_NETWORK = DEFINE_GUIDNAMED(KSCATEGORY_NETWORK)
        STATIC_KSCATEGORY_TOPOLOGY = (
            0xDDA54A40,
            0x1E4C,
            0x11D1,
            0xA0,
            0x50,
            0x40,
            0x57,
            0x05,
            0xC1,
            0x00,
            0x00
        )
        KSCATEGORY_TOPOLOGY = DEFINE_GUIDSTRUCT(
            "DDA54A40-1E4C-11D1-A050-405705C10000"
        )
        KSCATEGORY_TOPOLOGY = DEFINE_GUIDNAMED(KSCATEGORY_TOPOLOGY)
        STATIC_KSCATEGORY_VIRTUAL = (
            0x3503EAC4,
            0x1F26,
            0x11D1,
            0x8A,
            0xB0,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSCATEGORY_VIRTUAL = DEFINE_GUIDSTRUCT(
            "3503EAC4-1F26-11D1-8AB0-00A0C9223196"
        )
        KSCATEGORY_VIRTUAL = DEFINE_GUIDNAMED(KSCATEGORY_VIRTUAL)
        STATIC_KSCATEGORY_ACOUSTIC_ECHO_CANCEL = (
            0xBF963D80,
            0xC559,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSCATEGORY_ACOUSTIC_ECHO_CANCEL = DEFINE_GUIDSTRUCT(
            "BF963D80-C559-11D0-8A2B-00A0C9255AC1"
        )
        KSCATEGORY_ACOUSTIC_ECHO_CANCEL = (
            DEFINE_GUIDNAMED(KSCATEGORY_ACOUSTIC_ECHO_CANCEL)
        )
        if NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSCATEGORY_SYSAUDIO = (
                0xA7C7A5B1,
                0x5AF3,
                0x11D1,
                0x9C,
                0xED,
                0x00,
                0xA0,
                0x24,
                0xBF,
                0x04,
                0x07
            )
            KSCATEGORY_SYSAUDIO = DEFINE_GUIDSTRUCT(
                "A7C7A5B1-5AF3-11D1-9CED-00A024BF0407"
            )
            KSCATEGORY_SYSAUDIO = DEFINE_GUIDNAMED(KSCATEGORY_SYSAUDIO)
            STATIC_KSCATEGORY_WDMAUD = (
                0x3E227E76,
                0x690D,
                0x11D2,
                0x81,
                0x61,
                0x00,
                0x00,
                0xF8,
                0x77,
                0x5B,
                0xF1
            )
            KSCATEGORY_WDMAUD = DEFINE_GUIDSTRUCT(
                "3E227E76-690D-11D2-8161-0000F8775BF1"
            )
            KSCATEGORY_WDMAUD = DEFINE_GUIDNAMED(KSCATEGORY_WDMAUD)
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSCATEGORY_AUDIO_GFX = (
                0x9BAF9572,
                0x340C,
                0x11D3,
                0xAB,
                0xDC,
                0x00,
                0xA0,
                0xC9,
                0x0A,
                0xB1,
                0x6F
            )
            KSCATEGORY_AUDIO_GFX = DEFINE_GUIDSTRUCT(
                "9BAF9572-340C-11D3-ABDC-00A0C90AB16F"
            )
            KSCATEGORY_AUDIO_GFX = DEFINE_GUIDNAMED(KSCATEGORY_AUDIO_GFX)
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSCATEGORY_AUDIO_SPLITTER = (
                0x9EA331FA,
                0xB91B,
                0x45F8,
                0x92,
                0x85,
                0xBD,
                0x2B,
                0xC7,
                0x7A,
                0xFC,
                0xDE
            )
            KSCATEGORY_AUDIO_SPLITTER = DEFINE_GUIDSTRUCT(
                "9EA331FA-B91B-45F8-9285-BD2BC77AFCDE"
            )
            KSCATEGORY_AUDIO_SPLITTER = (
                DEFINE_GUIDNAMED(KSCATEGORY_AUDIO_SPLITTER)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        STATIC_KSCATEGORY_SYNTHESIZER = STATIC_KSNODETYPE_SYNTHESIZER
        KSCATEGORY_SYNTHESIZER = KSNODETYPE_SYNTHESIZER
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSCATEGORY_DRM_DESCRAMBLE = STATIC_KSNODETYPE_DRM_DESCRAMBLE
            KSCATEGORY_DRM_DESCRAMBLE = KSNODETYPE_DRM_DESCRAMBLE
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSCATEGORY_AUDIO_DEVICE = (
                0xFBF6F530,
                0x07B9,
                0x11D2,
                0xA7,
                0x1E,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSCATEGORY_AUDIO_DEVICE = DEFINE_GUIDSTRUCT(
                "FBF6F530-07B9-11D2-A71E-0000F8004788"
            )
            KSCATEGORY_AUDIO_DEVICE = DEFINE_GUIDNAMED(KSCATEGORY_AUDIO_DEVICE)
            STATIC_KSCATEGORY_PREFERRED_WAVEOUT_DEVICE = (
                0xD6C5066E,
                0x72C1,
                0x11D2,
                0x97,
                0x55,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSCATEGORY_PREFERRED_WAVEOUT_DEVICE = DEFINE_GUIDSTRUCT(
                "D6C5066E-72C1-11D2-9755-0000F8004788"
            )
            KSCATEGORY_PREFERRED_WAVEOUT_DEVICE = (
                DEFINE_GUIDNAMED(KSCATEGORY_PREFERRED_WAVEOUT_DEVICE)
            )
            STATIC_KSCATEGORY_PREFERRED_WAVEIN_DEVICE = (
                0xD6C50671,
                0x72C1,
                0x11D2,
                0x97,
                0x55,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSCATEGORY_PREFERRED_WAVEIN_DEVICE = DEFINE_GUIDSTRUCT(
                "D6C50671-72C1-11D2-9755-0000F8004788"
            )
            KSCATEGORY_PREFERRED_WAVEIN_DEVICE = (
                DEFINE_GUIDNAMED(KSCATEGORY_PREFERRED_WAVEIN_DEVICE)
            )
            STATIC_KSCATEGORY_PREFERRED_MIDIOUT_DEVICE = (
                0xD6C50674,
                0x72C1,
                0x11D2,
                0x97,
                0x55,
                0x00,
                0x00,
                0xF8,
                0x00,
                0x47,
                0x88
            )
            KSCATEGORY_PREFERRED_MIDIOUT_DEVICE = DEFINE_GUIDSTRUCT(
                "D6C50674-72C1-11D2-9755-0000F8004788"
            )
            KSCATEGORY_PREFERRED_MIDIOUT_DEVICE = (
                DEFINE_GUIDNAMED(KSCATEGORY_PREFERRED_MIDIOUT_DEVICE)
            )
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        # Special pin category for wdmaud
        STATIC_KSCATEGORY_WDMAUD_USE_PIN_NAME = (
            0x47A4FA20,
            0xA251,
            0x11D1,
            0xA0,
            0x50,
            0x00,
            0x00,
            0xF8,
            0x00,
            0x47,
            0x88
        )
        KSCATEGORY_WDMAUD_USE_PIN_NAME = DEFINE_GUIDSTRUCT(
            "47A4FA20-A251-11D1-A050-0000F8004788"
        )
        KSCATEGORY_WDMAUD_USE_PIN_NAME = (
            DEFINE_GUIDNAMED(KSCATEGORY_WDMAUD_USE_PIN_NAME)
        )

        # Escalante Platform Interface
        STATIC_KSCATEGORY_ESCALANTE_PLATFORM_DRIVER = (
            0x74F3AEA8,
            0x9768,
            0x11D1,
            0x8E,
            0x07,
            0x00,
            0xA0,
            0xC9,
            0x5E,
            0xC2,
            0x2E
        )
        KSCATEGORY_ESCALANTE_PLATFORM_DRIVER = DEFINE_GUIDSTRUCT(
            "74f3aea8-9768-11d1-8e07-00a0c95ec22e"
        )
        KSCATEGORY_ESCALANTE_PLATFORM_DRIVER = (
            DEFINE_GUIDNAMED(KSCATEGORY_ESCALANTE_PLATFORM_DRIVER)
        )

        # -- major types ---
        # 'vids' == MEDIATYPE_Video,
        STATIC_KSDATAFORMAT_TYPE_VIDEO = (
            0x73646976,
            0x0000,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_TYPE_VIDEO = DEFINE_GUIDSTRUCT(
            "73646976-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_TYPE_VIDEO = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_VIDEO)

        # 'auds' == MEDIATYPE_Audio
        STATIC_KSDATAFORMAT_TYPE_AUDIO = (
            0x73647561,
            0x0000,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_TYPE_AUDIO = DEFINE_GUIDSTRUCT(
            "73647561-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_TYPE_AUDIO = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_AUDIO)

        # 'txts' == MEDIATYPE_Text
        STATIC_KSDATAFORMAT_TYPE_TEXT = (
            0x73747874,
            0x0000,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_TYPE_TEXT = DEFINE_GUIDSTRUCT(
            "73747874-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_TYPE_TEXT = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_TEXT)
        if not defined(DEFINE_WAVEFORMATEX_GUID):
            def DEFINE_WAVEFORMATEX_GUID(x):
                return (
                    x,
                    0x0000,
                    0x0010,
                    0x80,
                    0x00,
                    0x00,
                    0xAA,
                    0x00,
                    0x38,
                    0x9B,
                    0x71
                )
        # END IF


        if not defined(STATIC_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX):
            STATIC_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = (
                0x00000000,
                0x0000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = DEFINE_GUIDSTRUCT(
                "00000000-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_WAVEFORMATEX)
            )
        # END IF


        if not defined(INIT_WAVEFORMATEX_GUID):
            def INIT_WAVEFORMATEX_GUID(Guid, x):
                Guid.Data1 = x
                return Guid

        # END IF


        if not defined(EXTRACT_WAVEFORMATEX_ID):
            def EXTRACT_WAVEFORMATEX_ID(Guid):
                return Guid.Data1
        # END IF

        if not defined(IS_VALID_WAVEFORMATEX_GUID):
            def IS_VALID_WAVEFORMATEX_GUID(Guid):
                pass
        # END IF

        if not defined(INIT_MMREG_MID):
            # {d5a47fa7-6d98-11d1-a21a-00a0c9223196}
            def INIT_MMREG_MID(guid, id):
                guid.Data1 = 0xD5A47FA7 + id
                guid.Data2 = 0x6D98
                guid.Data3 = 0x11D1
                guid.Data4[0] = 0xA2
                guid.Data4[1] = 0x1A
                guid.Data4[2] = 0x00
                guid.Data4[3] = 0xA0
                guid.Data4[4] = 0xC9
                guid.Data4[5] = 0x22
                guid.Data4[6] = 0x31
                guid.Data4[7] = 0x96


            def EXTRACT_MMREG_MID(guid):
                return guid.Data1 - 0xD5A47FA7


            def DEFINE_MMREG_MID_GUID(id):
                return (
                    0xD5A47FA7 + id,
                    0x6D98,
                    0x11D1,
                    0xA2,
                    0x1A,
                    0x00,
                    0xA0,
                    0xC9,
                    0x22,
                    0x31,
                    0x96
                )


            def IS_COMPATIBLE_MMREG_MID(guid):
                return (
                    (guid.Data1 >= 0xD5A47FA7) and
                    (guid.Data1 < 0xD5A47FA7 + 0xFFFF) and
                    (guid.Data2 == 0x6D98) and
                    (guid.Data3 == 0x11D1) and
                    (guid.Data4[0] == 0xA2) and
                    (guid.Data4[1] == 0x1A) and
                    (guid.Data4[2] == 0x00) and
                    (guid.Data4[3] == 0xA0) and
                    (guid.Data4[4] == 0xC9) and
                    (guid.Data4[5] == 0x22) and
                    (guid.Data4[6] == 0x31) and
                    (guid.Data4[7] == 0x96)
                )
        # END IF   not defined(INIT_MMREG_MID)

        if not defined(INIT_MMREG_PID):
            # {e36dc2ac-6d9a-11d1-a21a-00a0c9223196}
            def INIT_MMREG_PID(guid, id):
                guid.Data1 = 0xE36DC2AC + id
                guid.Data2 = 0x6D9A
                guid.Data3 = 0x11D1
                guid.Data4[0] = 0xA2
                guid.Data4[1] = 0x1A
                guid.Data4[2] = 0x00
                guid.Data4[3] = 0xA0
                guid.Data4[4] = 0xC9
                guid.Data4[5] = 0x22
                guid.Data4[6] = 0x31
                guid.Data4[7] = 0x96


            def EXTRACT_MMREG_PID(guid):
                return guid.Data1 - 0xE36DC2AC


            def DEFINE_MMREG_PID_GUID(id):
                return (
                    0xE36DC2AC + id,
                    0x6D9A,
                    0x11D1,
                    0xA2,
                    0x1A,
                    0x00,
                    0xA0,
                    0xC9,
                    0x22,
                    0x31,
                    0x96
                )


            def IS_COMPATIBLE_MMREG_PID(guid):
                return (
                    (guid.Data1 >= 0xE36DC2AC) and
                    (guid.Data1 < 0xE36DC2AC + 0xFFFF) and
                    (guid.Data2 == 0x6D9A) and
                    (guid.Data3 == 0x11D1) and
                    (guid.Data4[0] == 0xA2) and
                    (guid.Data4[1] == 0x1A) and
                    (guid.Data4[2] == 0x00) and
                    (guid.Data4[3] == 0xA0) and
                    (guid.Data4[4] == 0xC9) and
                    (guid.Data4[5] == 0x22) and
                    (guid.Data4[6] == 0x31) and
                    (guid.Data4[7] == 0x96)
                )
        # END IF   not defined(INIT_MMREG_PID)

        STATIC_KSDATAFORMAT_SUBTYPE_ANALOG = (
            0x6DBA3190,
            0x67BD,
            0x11CF,
            0xA0,
            0xF7,
            0x00,
            0x20,
            0xAF,
            0xD1,
            0x56,
            0xE4
        )
        KSDATAFORMAT_SUBTYPE_ANALOG = DEFINE_GUIDSTRUCT(
            "6dba3190-67bd-11cf-a0f7-0020afd156e4"
        )
        KSDATAFORMAT_SUBTYPE_ANALOG = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_ANALOG)
        )

        if not defined(STATIC_KSDATAFORMAT_SUBTYPE_PCM):
            STATIC_KSDATAFORMAT_SUBTYPE_PCM = (
                DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_PCM)
            )
            KSDATAFORMAT_SUBTYPE_PCM = DEFINE_GUIDSTRUCT(
                "00000001-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_PCM = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_PCM)
            )
        # END IF


        if defined(_INC_MMREG):
            if not defined(STATIC_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT):
                STATIC_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = (
                    DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_IEEE_FLOAT)
                )
                KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = DEFINE_GUIDSTRUCT(
                    "00000003-0000-0010-8000-00aa00389b71"
                )
                KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = (
                    DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEEE_FLOAT)
                )
            # END IF


            if NTDDI_VERSION >= NTDDI_WINXP:
                STATIC_KSDATAFORMAT_SUBTYPE_DRM = (
                    DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_DRM)
                )
                KSDATAFORMAT_SUBTYPE_DRM = DEFINE_GUIDSTRUCT(
                    "00000009-0000-0010-8000-00aa00389b71"
                )
                KSDATAFORMAT_SUBTYPE_DRM = (
                    DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_DRM)
                )
            # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

            STATIC_KSDATAFORMAT_SUBTYPE_ALAW = (
                DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_ALAW)
            )
            KSDATAFORMAT_SUBTYPE_ALAW = DEFINE_GUIDSTRUCT(
                "00000006-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_ALAW = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_ALAW)
            )
            STATIC_KSDATAFORMAT_SUBTYPE_MULAW = (
                DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_MULAW)
            )
            KSDATAFORMAT_SUBTYPE_MULAW = DEFINE_GUIDSTRUCT(
                "00000007-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_MULAW = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MULAW)
            )
            STATIC_KSDATAFORMAT_SUBTYPE_ADPCM = (
                DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_ADPCM)
            )
            KSDATAFORMAT_SUBTYPE_ADPCM = DEFINE_GUIDSTRUCT(
                "00000002-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_ADPCM = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_ADPCM)
            )
            STATIC_KSDATAFORMAT_SUBTYPE_MPEG = (
                DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_MPEG)
            )
            KSDATAFORMAT_SUBTYPE_MPEG = DEFINE_GUIDSTRUCT(
                "00000050-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_MPEG = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG)
            )
        # END IF   defined(_INC_MMREG)

        STATIC_KSDATAFORMAT_SPECIFIER_VC_ID = (
            0xAD98D184,
            0xAAC3,
            0x11D0,
            0xA4,
            0x1C,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSDATAFORMAT_SPECIFIER_VC_ID = DEFINE_GUIDSTRUCT(
            "AD98D184-AAC3-11D0-A41C-00A0C9223196"
        )
        KSDATAFORMAT_SPECIFIER_VC_ID = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_VC_ID)
        )
        STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX = (
            0x05589F81,
            0xC356,
            0x11CE,
            0xBF,
            0x01,
            0x00,
            0xAA,
            0x00,
            0x55,
            0x59,
            0x5A
        )
        KSDATAFORMAT_SPECIFIER_WAVEFORMATEX = DEFINE_GUIDSTRUCT(
            "05589f81-c356-11ce-bf01-00aa0055595a"
        )
        KSDATAFORMAT_SPECIFIER_WAVEFORMATEX = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_WAVEFORMATEX)
        )
        STATIC_KSDATAFORMAT_SPECIFIER_DSOUND = (
            0x518590A2,
            0xA184,
            0x11D0,
            0x85,
            0x22,
            0x00,
            0xC0,
            0x4F,
            0xD9,
            0xBA,
            0xF3
        )
        KSDATAFORMAT_SPECIFIER_DSOUND = DEFINE_GUIDSTRUCT(
            "518590a2-a184-11d0-8522-00c04fd9baf3"
        )
        KSDATAFORMAT_SPECIFIER_DSOUND = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DSOUND)
        )
        if defined(_INC_MMSYSTEM) or defined(_INC_MMREG):
            if not defined(PACK_PRAGMAS_NOT_SUPPORTED):
                from pyWinAPI.shared.pshpack1_h import * # NOQA
            # END IF


            # Convenient wrapper structure for the case in which the
            # WaveFormatEx is
            # known not to contain extra data.
            KSDATAFORMAT_WAVEFORMATEX._fields_ = [
                ('DataFormat', KSDATAFORMAT),
                ('WaveFormatEx', WAVEFORMATEX),
            ]
            if not defined(_WAVEFORMATEXTENSIBLE_):
                _WAVEFORMATEXTENSIBLE_ = 1

                # bits of precision
                class Samples(ctypes.Union):
                    pass


                Samples._fields_ = [
                    ('wValidBitsPerSample', WORD),
                    # valid if wBitsPerSample == 0
                    ('wSamplesPerBlock', WORD),
                    # If neither applies, set to zero.
                    ('wReserved', WORD),
                ]
                WAVEFORMATEXTENSIBLE.Samples = Samples


                WAVEFORMATEXTENSIBLE._fields_ = [
                    ('Format', WAVEFORMATEX),
                    ('Samples', WAVEFORMATEXTENSIBLE.Samples),
                    # which channels are
                    ('dwChannelMask', DWORD),
                    # present in stream
                    ('SubFormat', GUID),
                ]
            # END IF   not _WAVEFORMATEXTENSIBLE_

            if not defined(_WAVEFORMATEXTENSIBLE_IEC61937_):
                _WAVEFORMATEXTENSIBLE_IEC61937_ = 1
                # Format of encoded data as it is
                WAVEFORMATEXTENSIBLE_IEC61937._fields_ = [
                    ('FormatExt', WAVEFORMATEXTENSIBLE),
                    # Sampling rate of the post-decode audio.
                    ('dwEncodedSamplesPerSec', DWORD),
                    # Channel count of the post-decode audio.
                    ('dwEncodedChannelCount', DWORD),
                    # Byte rate of the content, can be 0.
                    ('dwAverageBytesPerSec', DWORD),
                ]
            # END IF   not _WAVEFORMATEXTENSIBLE_IEC61937_

            if not defined(WAVE_FORMAT_EXTENSIBLE):
                WAVE_FORMAT_EXTENSIBLE = 0xFFFE
            # END IF   not defined(WAVE_FORMAT_EXTENSIBLE)

            # Convenient wrapper structure for the case in which the
            # WaveFormatExt is
            # known not to contain extra data.
            KSDATAFORMAT_WAVEFORMATEXTENSIBLE._fields_ = [
                ('DataFormat', KSDATAFORMAT),
                ('WaveFormatExt', WAVEFORMATEXTENSIBLE),
            ]

            # DirectSound buffer description
            KSDSOUND_BUFFERDESC._fields_ = [
                ('Flags', ULONG),
                ('Control', ULONG),
                ('WaveFormatEx', WAVEFORMATEX),
            ]

            # DirectSound format
            KSDATAFORMAT_DSOUND._fields_ = [
                ('DataFormat', KSDATAFORMAT),
                ('BufferDesc', KSDSOUND_BUFFERDESC),
            ]
            if not defined(PACK_PRAGMAS_NOT_SUPPORTED):
                from pyWinAPI.shared.poppack_h import * # NOQA
            # END IF

        # END IF   defined(_INC_MMSYSTEM) or defined(_INC_MMREG)

        # DirectSound buffer flags
        KSDSOUND_BUFFER_PRIMARY = 0x00000001
        KSDSOUND_BUFFER_STATIC = 0x00000002
        KSDSOUND_BUFFER_LOCHARDWARE = 0x00000004
        KSDSOUND_BUFFER_LOCSOFTWARE = 0x00000008

        # DirectSound buffer control flags
        KSDSOUND_BUFFER_CTRL_3D = 0x00000001
        KSDSOUND_BUFFER_CTRL_FREQUENCY = 0x00000002
        KSDSOUND_BUFFER_CTRL_PAN = 0x00000004
        KSDSOUND_BUFFER_CTRL_VOLUME = 0x00000008
        KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 0x00000010


        _TEMP_KSAUDIO_POSITION = [
        ]
        if defined(_NTDDK_):
            _TEMP_KSAUDIO_POSITION += [
                ('PlayOffset', ULONGLONG),
                ('WriteOffset', ULONGLONG),
            ]
        else: # not _NTDDK_
            _TEMP_KSAUDIO_POSITION += [
                ('PlayOffset', DWORDLONG),
                ('WriteOffset', DWORDLONG),
            ]
        # END IF   not _NTDDK_

        KSAUDIO_POSITION._fields_ = _TEMP_KSAUDIO_POSITION

        # The KSAUDIO_PRESENTATION_POSITION structure specifies the current
        # positions of audio data being rendered to the KS pin instance.
        KSAUDIO_PRESENTATION_POSITION._fields_ = [
            # The block offset from the start of the stream to the current
            # post-decoded uncompressed
            ('u64PositionInBlocks', UINT64),
            # The value of the performance counter at the time that the audio
            # endpoint device read the device
            ('u64QPCPosition', UINT64),
        ]


        class CONSTRICTOR_OPTION(ENUM):
            CONSTRICTOR_OPTION_DISABLE = 0
            CONSTRICTOR_OPTION_MUTE = 1

        CONSTRICTOR_OPTION_DISABLE = CONSTRICTOR_OPTION.CONSTRICTOR_OPTION_DISABLE
        CONSTRICTOR_OPTION_MUTE = CONSTRICTOR_OPTION.CONSTRICTOR_OPTION_MUTE
        if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
            if defined(DEFINE_DEVPROPKEY):
                # {13E004D6-B066-43BD-913B-A415CD13DA87},2
                DEVPKEY_KsAudio_PacketSize_Constraints = DEFINE_DEVPROPKEY(
                    0x13E004D6,
                    0xB066,
                    0x43BD,
                    0x91,
                    0x3B,
                    0xA4,
                    0x15,
                    0xCD,
                    0x13,
                    0xDA,
                    0x87
                )
            # END IF


            _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT._fields_ = [
                ('ProcessingMode', GUID),
                ('SamplesPerProcessingPacket', ULONG),
                ('ProcessingPacketDurationInHns', ULONG),
            ]

            _KSAUDIO_PACKETSIZE_CONSTRAINTS._fields_ = [
                ('MinPacketPeriodInHns', ULONG),
                ('PacketSizeFileAlignment', ULONG),
                ('Reserved', ULONG),
                ('NumProcessingModeConstraints', ULONG),
                ('ProcessingModeConstraints', KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT * ANYSIZE_ARRAY),
            ]
        # END IF


        if NTDDI_VERSION >= NTDDI_WIN10_RS1:
            if defined(DEFINE_DEVPROPKEY):
                # {9404F781-7191-409B-8B0B-80BF6EC229AE},2
                DEVPKEY_KsAudio_PacketSize_Constraints2 = DEFINE_DEVPROPKEY(
                    0x9404F781,
                    0x7191,
                    0x409B,
                    0x8B,
                    0xB,
                    0x80,
                    0xBF,
                    0x6E,
                    0xC2,
                    0x29,
                    0xAE
                )
            # END IF


            _KSAUDIO_PACKETSIZE_CONSTRAINTS2._fields_ = [
                ('MinPacketPeriodInHns', ULONG),
                ('PacketSizeFileAlignment', ULONG),
                ('MaxPacketSizeInBytes', ULONG),
                ('NumProcessingModeConstraints', ULONG),
                ('ProcessingModeConstraints', KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT * ANYSIZE_ARRAY),
            ]
        # END IF

    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP):
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Microphone array pin descriptor
        if NTDDI_VERSION >= NTDDI_VISTA:
            class KSMICARRAY_MICTYPE(ENUM):
                KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = 1
                KSMICARRAY_MICTYPE_SUBCARDIOID = 2
                KSMICARRAY_MICTYPE_CARDIOID = 3
                KSMICARRAY_MICTYPE_SUPERCARDIOID = 4
                KSMICARRAY_MICTYPE_HYPERCARDIOID = 5
                KSMICARRAY_MICTYPE_8SHAPED = 6
                KSMICARRAY_MICTYPE_VENDORDEFINED = 0x0F

            KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_OMNIDIRECTIONAL
            KSMICARRAY_MICTYPE_SUBCARDIOID = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_SUBCARDIOID
            KSMICARRAY_MICTYPE_CARDIOID = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_CARDIOID
            KSMICARRAY_MICTYPE_SUPERCARDIOID = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_SUPERCARDIOID
            KSMICARRAY_MICTYPE_HYPERCARDIOID = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_HYPERCARDIOID
            KSMICARRAY_MICTYPE_8SHAPED = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_8SHAPED
            KSMICARRAY_MICTYPE_VENDORDEFINED = KSMICARRAY_MICTYPE.KSMICARRAY_MICTYPE_VENDORDEFINED

            # Type of Microphone
            KSAUDIO_MICROPHONE_COORDINATES._fields_ = [
                ('usType', USHORT),
                # X Coordinate of Mic
                ('wXCoord', SHORT),
                # Y Coordinate of Mic
                ('wYCoord', SHORT),
                # Z Coordinate of Mic
                ('wZCoord', SHORT),
                # MRA Vertical Angle
                ('wVerticalAngle', SHORT),
                # MRA Horizontal Angle
                ('wHorizontalAngle', SHORT),
            ]


            class KSMICARRAY_MICARRAYTYPE(ENUM):
                KSMICARRAY_MICARRAYTYPE_LINEAR = 1
                KSMICARRAY_MICARRAYTYPE_PLANAR = 2
                KSMICARRAY_MICARRAYTYPE_3D = 3

            KSMICARRAY_MICARRAYTYPE_LINEAR = KSMICARRAY_MICARRAYTYPE.KSMICARRAY_MICARRAYTYPE_LINEAR
            KSMICARRAY_MICARRAYTYPE_PLANAR = KSMICARRAY_MICARRAYTYPE.KSMICARRAY_MICARRAYTYPE_PLANAR
            KSMICARRAY_MICARRAYTYPE_3D = KSMICARRAY_MICARRAYTYPE.KSMICARRAY_MICARRAYTYPE_3D

            # Version of Mic array specification (0x0100)
            KSAUDIO_MIC_ARRAY_GEOMETRY._fields_ = [
                ('usVersion', USHORT),
                # Type of Mic Array
                ('usMicArrayType', USHORT),
                # Work Volume Vertical Angle Begin
                ('wVerticalAngleBegin', SHORT),
                # Work Volume Vertical Angle End
                ('wVerticalAngleEnd', SHORT),
                # Work Volume HorizontalAngle Begin
                ('wHorizontalAngleBegin', SHORT),
                # Work Volume HorizontalAngle End
                ('wHorizontalAngleEnd', SHORT),
                # Low end of Freq Range
                ('usFrequencyBandLo', USHORT),
                # High end of Freq Range
                ('usFrequencyBandHi', USHORT),
                # Count of microphone
                ('usNumberOfMicrophones', USHORT),
                # Array of Microphone
                ('KsMicCoord', KSAUDIO_MICROPHONE_COORDINATES * 1),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)
    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)

    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP):
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # DirectSound3D HAL
        class _Union_1(ctypes.Union):
            pass


        _Union_1._fields_ = [
            ('x', FLOAT),
            ('dvX', FLOAT),
        ]
        _DS3DVECTOR._Union_1 = _Union_1


        class _Union_2(ctypes.Union):
            pass


        _Union_2._fields_ = [
            ('y', FLOAT),
            ('dvY', FLOAT),
        ]
        _DS3DVECTOR._Union_2 = _Union_2


        class _Union_3(ctypes.Union):
            pass


        _Union_3._fields_ = [
            ('z', FLOAT),
            ('dvZ', FLOAT),
        ]
        _DS3DVECTOR._Union_3 = _Union_3

        _DS3DVECTOR._anonymous_ = (
            '_Union_1',
            '_Union_2',
            '_Union_3',
        )

        _DS3DVECTOR._fields_ = [
            ('_Union_1', _DS3DVECTOR._Union_1),
            ('_Union_2', _DS3DVECTOR._Union_2),
            ('_Union_3', _DS3DVECTOR._Union_3),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # KSPROPSETID_DirectSound3DListener :
        # {437B3414-D060-11d0-8583-00C04FD9BAF3}
        STATIC_KSPROPSETID_DirectSound3DListener = (
            0x437B3414,
            0xD060,
            0x11D0,
            0x85,
            0x83,
            0x00,
            0xC0,
            0x4F,
            0xD9,
            0xBA,
            0xF3
        )
        KSPROPSETID_DirectSound3DListener = DEFINE_GUIDSTRUCT(
            "437b3414-d060-11d0-8583-00c04fd9baf3"
        )
        KSPROPSETID_DirectSound3DListener = (
            DEFINE_GUIDNAMED(KSPROPSETID_DirectSound3DListener)
        )


        class KSPROPERTY_DIRECTSOUND3DLISTENER(ENUM):
            KSPROPERTY_DIRECTSOUND3DLISTENER_ALL = 1
            KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION = 2
            KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY = 3
            KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION = 4
            KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 5
            KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR = 6
            KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR = 7
            KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH = 8
            KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION = 9

        KSPROPERTY_DIRECTSOUND3DLISTENER_ALL = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_ALL
        KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION
        KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY
        KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION
        KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR
        KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR
        KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR
        KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH
        KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION = KSPROPERTY_DIRECTSOUND3DLISTENER.KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION

        KSDS3D_LISTENER_ALL._fields_ = [
            ('Position', DS3DVECTOR),
            ('Velocity', DS3DVECTOR),
            ('OrientFront', DS3DVECTOR),
            ('OrientTop', DS3DVECTOR),
            ('DistanceFactor', FLOAT),
            ('RolloffFactor', FLOAT),
            ('DopplerFactor', FLOAT),
        ]

        KSDS3D_LISTENER_ORIENTATION._fields_ = [
            ('Front', DS3DVECTOR),
            ('Top', DS3DVECTOR),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # KSPROPSETID_DirectSound3DBuffer :
        # {437B3411-D060-11d0-8583-00C04FD9BAF3}
        STATIC_KSPROPSETID_DirectSound3DBuffer = (
            0x437B3411,
            0xD060,
            0x11D0,
            0x85,
            0x83,
            0x00,
            0xC0,
            0x4F,
            0xD9,
            0xBA,
            0xF3
        )
        KSPROPSETID_DirectSound3DBuffer = DEFINE_GUIDSTRUCT(
            "437b3411-d060-11d0-8583-00c04fd9baf3"
        )
        KSPROPSETID_DirectSound3DBuffer = (
            DEFINE_GUIDNAMED(KSPROPSETID_DirectSound3DBuffer)
        )


        class KSPROPERTY_DIRECTSOUND3DBUFFER(ENUM):
            KSPROPERTY_DIRECTSOUND3DBUFFER_ALL = 1
            KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION = 2
            KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY = 3
            KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES = 4
            KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION = 5
            KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 6
            KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE = 7
            KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE = 8
            KSPROPERTY_DIRECTSOUND3DBUFFER_MODE = 9

        KSPROPERTY_DIRECTSOUND3DBUFFER_ALL = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_ALL
        KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION
        KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY
        KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES
        KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION
        KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME
        KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE
        KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE
        KSPROPERTY_DIRECTSOUND3DBUFFER_MODE = KSPROPERTY_DIRECTSOUND3DBUFFER.KSPROPERTY_DIRECTSOUND3DBUFFER_MODE

        KSDS3D_BUFFER_ALL._fields_ = [
            ('Position', DS3DVECTOR),
            ('Velocity', DS3DVECTOR),
            ('InsideConeAngle', ULONG),
            ('OutsideConeAngle', ULONG),
            ('ConeOrientation', DS3DVECTOR),
            ('ConeOutsideVolume', LONG),
            ('MinDistance', FLOAT),
            ('MaxDistance', FLOAT),
            ('Mode', ULONG),
        ]

        KSDS3D_BUFFER_CONE_ANGLES._fields_ = [
            ('InsideConeAngle', ULONG),
            ('OutsideConeAngle', ULONG),
        ]
        KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = -1
        KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN = 5
        KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW = 10
        KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE = 20
        KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX = 180
        KSDSOUND_3D_MODE_NORMAL = 0x00000000
        KSDSOUND_3D_MODE_HEADRELATIVE = 0x00000001
        KSDSOUND_3D_MODE_DISABLE = 0x00000002

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Definitions intended for hardware acceleration of the HRTF 3D
        # algorithm
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        KSDSOUND_BUFFER_CTRL_HRTF_3D = 0x40000000


        # This is the size of the struct in bytes
        KSDS3D_HRTF_PARAMS_MSG._fields_ = [
            ('Size', ULONG),
            ('Enabled', ULONG),
            ('SwapChannels', BOOL),
            ('ZeroAzimuth', BOOL),
            ('CrossFadeOutput', BOOL),
            # This is the additional size of the filter coeff in bytes
            ('FilterSize', ULONG),
        ]

        # HRTF filter quality levels
        class KSDS3D_HRTF_FILTER_QUALITY(ENUM):
            FULL_FILTER = 1
            LIGHT_FILTER = 2
            KSDS3D_FILTER_QUALITY_COUNT = 3

        FULL_FILTER = KSDS3D_HRTF_FILTER_QUALITY.FULL_FILTER
        LIGHT_FILTER = KSDS3D_HRTF_FILTER_QUALITY.LIGHT_FILTER
        KSDS3D_FILTER_QUALITY_COUNT = KSDS3D_HRTF_FILTER_QUALITY.KSDS3D_FILTER_QUALITY_COUNT

        # This is the size of the struct in bytes
        KSDS3D_HRTF_INIT_MSG._fields_ = [
            ('Size', ULONG),
            ('Quality', KSDS3D_HRTF_FILTER_QUALITY),
            ('SampleRate', FLOAT),
            ('MaxFilterSize', ULONG),
            ('FilterTransientMuteLength', ULONG),
            ('FilterOverlapBufferLength', ULONG),
            ('OutputOverlapBufferLength', ULONG),
            ('Reserved', ULONG),
        ]

        # Coefficient formats
        class KSDS3D_HRTF_COEFF_FORMAT(ENUM):
            FLOAT_COEFF = 1
            SHORT_COEFF = 2
            KSDS3D_COEFF_COUNT = 3

        FLOAT_COEFF = KSDS3D_HRTF_COEFF_FORMAT.FLOAT_COEFF
        SHORT_COEFF = KSDS3D_HRTF_COEFF_FORMAT.SHORT_COEFF
        KSDS3D_COEFF_COUNT = KSDS3D_HRTF_COEFF_FORMAT.KSDS3D_COEFF_COUNT

        # Filter methods
        class KSDS3D_HRTF_FILTER_METHOD(ENUM):
            DIRECT_FORM = 1
            CASCADE_FORM = 2
            KSDS3D_FILTER_METHOD_COUNT = 3

        DIRECT_FORM = KSDS3D_HRTF_FILTER_METHOD.DIRECT_FORM
        CASCADE_FORM = KSDS3D_HRTF_FILTER_METHOD.CASCADE_FORM
        KSDS3D_FILTER_METHOD_COUNT = KSDS3D_HRTF_FILTER_METHOD.KSDS3D_FILTER_METHOD_COUNT

        # Filter methods
        class KSDS3D_HRTF_FILTER_VERSION(ENUM):
            DS3D_HRTF_VERSION_1 = 1

        DS3D_HRTF_VERSION_1 = KSDS3D_HRTF_FILTER_VERSION.DS3D_HRTF_VERSION_1

        KSDS3D_HRTF_FILTER_FORMAT_MSG._fields_ = [
            ('FilterMethod', KSDS3D_HRTF_FILTER_METHOD),
            ('CoeffFormat', KSDS3D_HRTF_COEFF_FORMAT),
            ('Version', KSDS3D_HRTF_FILTER_VERSION),
            ('Reserved', ULONG),
        ]
        STATIC_KSPROPSETID_Hrtf3d = (
            0xB66DECB0,
            0xA083,
            0x11D0,
            0x85,
            0x1E,
            0x00,
            0xC0,
            0x4F,
            0xD9,
            0xBA,
            0xF3
        )
        KSPROPSETID_Hrtf3d = DEFINE_GUIDSTRUCT(
            "b66decb0-a083-11d0-851e-00c04fd9baf3"
        )
        KSPROPSETID_Hrtf3d = DEFINE_GUIDNAMED(KSPROPSETID_Hrtf3d)


        class KSPROPERTY_HRTF3D(ENUM):
            KSPROPERTY_HRTF3D_PARAMS = 0
            KSPROPERTY_HRTF3D_INITIALIZE = 1
            KSPROPERTY_HRTF3D_FILTER_FORMAT = 2

        KSPROPERTY_HRTF3D_PARAMS = KSPROPERTY_HRTF3D.KSPROPERTY_HRTF3D_PARAMS
        KSPROPERTY_HRTF3D_INITIALIZE = KSPROPERTY_HRTF3D.KSPROPERTY_HRTF3D_INITIALIZE
        KSPROPERTY_HRTF3D_FILTER_FORMAT = KSPROPERTY_HRTF3D.KSPROPERTY_HRTF3D_FILTER_FORMAT

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Definitions related to the obsolete Interaural Time Delay 3D
        # algorithm
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # DirectSound3D FIR context
        KSDS3D_ITD_PARAMS._fields_ = [
            ('Channel', LONG),
            ('VolSmoothScale', FLOAT),
            ('TotalDryAttenuation', FLOAT),
            ('TotalWetAttenuation', FLOAT),
            ('SmoothFrequency', LONG),
            ('Delay', LONG),
        ]

        KSDS3D_ITD_PARAMS_MSG._fields_ = [
            ('Enabled', ULONG),
            ('LeftParams', KSDS3D_ITD_PARAMS),
            ('RightParams', KSDS3D_ITD_PARAMS),
            ('Reserved', ULONG),
        ]
        STATIC_KSPROPSETID_Itd3d = (
            0x6429F090,
            0x9FD9,
            0x11D0,
            0xA7,
            0x5B,
            0x00,
            0xA0,
            0xC9,
            0x03,
            0x65,
            0xE3
        )
        KSPROPSETID_Itd3d = DEFINE_GUIDSTRUCT(
            "6429f090-9fd9-11d0-a75b-00a0c90365e3"
        )
        KSPROPSETID_Itd3d = DEFINE_GUIDNAMED(KSPROPSETID_Itd3d)


        class KSPROPERTY_ITD3D(ENUM):
            KSPROPERTY_ITD3D_PARAMS = 0

        KSPROPERTY_ITD3D_PARAMS = KSPROPERTY_ITD3D.KSPROPERTY_ITD3D_PARAMS

        KSDATARANGE_AUDIO._fields_ = [
            ('DataRange', KSDATARANGE),
            ('MaximumChannels', ULONG),
            ('MinimumBitsPerSample', ULONG),
            ('MaximumBitsPerSample', ULONG),
            ('MinimumSampleFrequency', ULONG),
            ('MaximumSampleFrequency', ULONG),
        ]

        # -----------------------------------------------------------------
        STATIC_KSDATAFORMAT_SUBTYPE_RIFF = (
            0x4995DAEE,
            0x9EE6,
            0x11D0,
            0xA4,
            0x0E,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSDATAFORMAT_SUBTYPE_RIFF = DEFINE_GUIDSTRUCT(
            "4995DAEE-9EE6-11D0-A40E-00A0C9223196"
        )
        KSDATAFORMAT_SUBTYPE_RIFF = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_RIFF)
        STATIC_KSDATAFORMAT_SUBTYPE_RIFFWAVE = (
            0xE436EB8B,
            0x524F,
            0x11CE,
            0x9F,
            0x53,
            0x00,
            0x20,
            0xAF,
            0x0B,
            0xA7,
            0x70
        )
        KSDATAFORMAT_SUBTYPE_RIFFWAVE = DEFINE_GUIDSTRUCT(
            "e436eb8b-524f-11ce-9f53-0020af0ba770"
        )
        KSDATAFORMAT_SUBTYPE_RIFFWAVE = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_RIFFWAVE)
        )

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSPROPSETID_Bibliographic = (
            0x07BA150E,
            0xE2B1,
            0x11D0,
            0xAC,
            0x17,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSPROPSETID_Bibliographic = DEFINE_GUIDSTRUCT(
            "07BA150E-E2B1-11D0-AC17-00A0C9223196"
        )
        KSPROPSETID_Bibliographic = DEFINE_GUIDNAMED(KSPROPSETID_Bibliographic)

        # Repeatable tags contain all entries within the property, each
        # preceeded by length
        class KSPROPERTY_BIBLIOGRAPHIC(ENUM):
            KSPROPERTY_BIBLIOGRAPHIC_LEADER = 'RDL '
            KSPROPERTY_BIBLIOGRAPHIC_LCCN = '010 '
            KSPROPERTY_BIBLIOGRAPHIC_ISBN = '020 '
            KSPROPERTY_BIBLIOGRAPHIC_ISSN = '220 '
            KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE = '040 '
            KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME = '001 '
            KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY = '011 '
            KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME = '111 '
            KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE = '031 '
            KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE = '042 '
            KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT = '542 '
            KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE = '642 '
            KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION = '062 '
            KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION = '003 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE = '044 '
            KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT = '094 '
            KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE = '005 '
            KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE = '405 '
            KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE = '505 '
            KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT = '805 '
            KSPROPERTY_BIBLIOGRAPHIC_CITATION = '015 '
            KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT = '115 '
            KSPROPERTY_BIBLIOGRAPHIC_SUMMARY = '025 '
            KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE = '125 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE = '035 '
            KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS = '835 '
            KSPROPERTY_BIBLIOGRAPHIC_AWARDS = '685 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME = '006 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM = '056 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC = '156 '
            KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE = '556 '
            KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM = '856 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE = '037 '
            KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED = '047 '
            KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = '008 '
            KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = '038 '

        KSPROPERTY_BIBLIOGRAPHIC_LEADER = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_LEADER
        KSPROPERTY_BIBLIOGRAPHIC_LCCN = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_LCCN
        KSPROPERTY_BIBLIOGRAPHIC_ISBN = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ISBN
        KSPROPERTY_BIBLIOGRAPHIC_ISSN = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ISSN
        KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE
        KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME
        KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY
        KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME
        KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE
        KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE
        KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT
        KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE
        KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION
        KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE
        KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT
        KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE
        KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE
        KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE
        KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT
        KSPROPERTY_BIBLIOGRAPHIC_CITATION = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_CITATION
        KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT
        KSPROPERTY_BIBLIOGRAPHIC_SUMMARY = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_SUMMARY
        KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE
        KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS
        KSPROPERTY_BIBLIOGRAPHIC_AWARDS = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_AWARDS
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC
        KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE
        KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE
        KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED
        KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME
        KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = KSPROPERTY_BIBLIOGRAPHIC.KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE
        STATIC_KSPROPSETID_TopologyNode = (
            0x45FFAAA1,
            0x6E1B,
            0x11D0,
            0xBC,
            0xF2,
            0x44,
            0x45,
            0x53,
            0x54,
            0x00,
            0x00
        )
        KSPROPSETID_TopologyNode = DEFINE_GUIDSTRUCT(
            "45FFAAA1-6E1B-11D0-BCF2-444553540000"
        )
        KSPROPSETID_TopologyNode = DEFINE_GUIDNAMED(KSPROPSETID_TopologyNode)


        class KSPROPERTY_TOPOLOGYNODE(ENUM):
            KSPROPERTY_TOPOLOGYNODE_ENABLE = 1
            if NTDDI_VERSION >= NTDDI_WINXP:
                KSPROPERTY_TOPOLOGYNODE_RESET = 2
            # END IF

        KSPROPERTY_TOPOLOGYNODE_ENABLE = KSPROPERTY_TOPOLOGYNODE.KSPROPERTY_TOPOLOGYNODE_ENABLE
        if NTDDI_VERSION >= NTDDI_WINXP:
            KSPROPERTY_TOPOLOGYNODE_RESET = KSPROPERTY_TOPOLOGYNODE.KSPROPERTY_TOPOLOGYNODE_RESET
        # END IF

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION >= NTDDI_WINXP:
            if defined(_NTDDK_):
                # typedef NTSTATUS (CALLBACK *PRTAUDIOGETPOSITION)(_In_ PFILE_OBJECT PinFileObject,
                # _Out_ PUCHAR *ppPlayPosition,
                # _Out_ PLONG plOffset);
                PRTAUDIOGETPOSITION = CALLBACK(
                    NTSTATUS,
                    POINTER(PUCHAR),
                    PLONG,
                )


            # END IF   defined(_NTDDK_)

            STATIC_KSPROPSETID_RtAudio = (
                0xA855A48C,
                0x2F78,
                0x4729,
                0x90,
                0x51,
                0x19,
                0x68,
                0x74,
                0x6B,
                0x9E,
                0xEF
            )
            KSPROPSETID_RtAudio = DEFINE_GUIDSTRUCT(
                "A855A48C-2F78-4729-9051-1968746B9EEF"
            )
            KSPROPSETID_RtAudio = DEFINE_GUIDNAMED(KSPROPSETID_RtAudio)


            class KSPROPERTY_RTAUDIO(ENUM):
                KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION = 1
                if NTDDI_VERSION >= NTDDI_VISTA:
                    KSPROPERTY_RTAUDIO_BUFFER = 2
                    KSPROPERTY_RTAUDIO_HWLATENCY = 3
                    KSPROPERTY_RTAUDIO_POSITIONREGISTER = 4
                    KSPROPERTY_RTAUDIO_CLOCKREGISTER = 5
                    KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION = 6
                    KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT = 7
                    KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = 8
                # END IF

                if NTDDI_VERSION >= NTDDI_WIN7:
                    KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT = 9
                # END IF

                if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                    KSPROPERTY_RTAUDIO_PACKETCOUNT = 10
                    KSPROPERTY_RTAUDIO_PRESENTATION_POSITION = 11
                    KSPROPERTY_RTAUDIO_GETREADPACKET = 12
                    KSPROPERTY_RTAUDIO_SETWRITEPACKET = 13
                # END IF

            KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION
            if NTDDI_VERSION >= NTDDI_VISTA:
                KSPROPERTY_RTAUDIO_BUFFER = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_BUFFER
                KSPROPERTY_RTAUDIO_HWLATENCY = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_HWLATENCY
                KSPROPERTY_RTAUDIO_POSITIONREGISTER = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_POSITIONREGISTER
                KSPROPERTY_RTAUDIO_CLOCKREGISTER = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_CLOCKREGISTER
                KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION
                KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT
                KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT
            # END IF

            if NTDDI_VERSION >= NTDDI_WIN7:
                KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT
            # END IF

            if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                KSPROPERTY_RTAUDIO_PACKETCOUNT = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_PACKETCOUNT
                KSPROPERTY_RTAUDIO_PRESENTATION_POSITION = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_PRESENTATION_POSITION
                KSPROPERTY_RTAUDIO_GETREADPACKET = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_GETREADPACKET
                KSPROPERTY_RTAUDIO_SETWRITEPACKET = KSPROPERTY_RTAUDIO.KSPROPERTY_RTAUDIO_SETWRITEPACKET
            # END IF

            if NTDDI_VERSION >= NTDDI_VISTA:
                KSRTAUDIO_BUFFER_PROPERTY._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', PVOID),
                    ('RequestedBufferSize', ULONG),
                ]

                KSRTAUDIO_BUFFER_PROPERTY32._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', ULONG),
                    ('RequestedBufferSize', ULONG),
                ]

                KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', PVOID),
                    ('RequestedBufferSize', ULONG),
                    ('NotificationCount', ULONG),
                ]

                KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', ULONG),
                    ('RequestedBufferSize', ULONG),
                    ('NotificationCount', ULONG),
                ]

                KSRTAUDIO_BUFFER._fields_ = [
                    ('BufferAddress', PVOID),
                    ('ActualBufferSize', ULONG),
                    ('CallMemoryBarrier', BOOL),
                ]

                KSRTAUDIO_BUFFER32._fields_ = [
                    ('BufferAddress', ULONG),
                    ('ActualBufferSize', ULONG),
                    ('CallMemoryBarrier', BOOL),
                ]

                KSRTAUDIO_HWLATENCY._fields_ = [
                    ('FifoSize', ULONG),
                    ('ChipsetDelay', ULONG),
                    ('CodecDelay', ULONG),
                ]

                KSRTAUDIO_HWREGISTER_PROPERTY._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', PVOID),
                ]

                KSRTAUDIO_HWREGISTER_PROPERTY32._fields_ = [
                    ('Property', KSPROPERTY),
                    ('BaseAddress', ULONG),
                ]

                KSRTAUDIO_HWREGISTER._fields_ = [
                    ('Register', PVOID),
                    ('Width', ULONG),
                    ('Numerator', ULONGLONG),
                    ('Denominator', ULONGLONG),
                    ('Accuracy', ULONG),
                ]

                KSRTAUDIO_HWREGISTER32._fields_ = [
                    ('Register', ULONG),
                    ('Width', ULONG),
                    ('Numerator', ULONGLONG),
                    ('Denominator', ULONGLONG),
                    ('Accuracy', ULONG),
                ]

                KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY._fields_ = [
                    ('Property', KSPROPERTY),
                    ('NotificationEvent', HANDLE),
                ]

                KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32._fields_ = [
                    ('Property', KSPROPERTY),
                    ('NotificationEvent', ULONG),
                ]
            # END IF


            if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                KSRTAUDIO_GETREADPACKET_INFO._fields_ = [
                    ('PacketNumber', ULONG),
                    ('Flags', DWORD),
                    ('PerformanceCounterValue', ULONG64),
                    ('MoreData', BOOL),
                ]

                KSRTAUDIO_SETWRITEPACKET_INFO._fields_ = [
                    ('PacketNumber', ULONG),
                    ('Flags', DWORD),
                    ('EosPacketLength', ULONG),
                ]
            # END IF


            if NTDDI_VERSION >= NTDDI_WIN7:
                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == == =
                STATIC_KSPROPSETID_BtAudio = (
                    0x7FA06C40,
                    0xB8F6,
                    0x4C7E,
                    0x85,
                    0x56,
                    0xE8,
                    0xC3,
                    0x3A,
                    0x12,
                    0xE5,
                    0x4D
                )
                KSPROPSETID_BtAudio = DEFINE_GUIDSTRUCT(
                    "7FA06C40-B8F6-4C7E-8556-E8C33A12E54D"
                )
                KSPROPSETID_BtAudio = DEFINE_GUIDNAMED(KSPROPSETID_BtAudio)


                class KSPROPERTY_BTAUDIO(ENUM):
                    KSPROPERTY_ONESHOT_RECONNECT = 1
                    KSPROPERTY_ONESHOT_DISCONNECT = 2

                KSPROPERTY_ONESHOT_RECONNECT = KSPROPERTY_BTAUDIO.KSPROPERTY_ONESHOT_RECONNECT
                KSPROPERTY_ONESHOT_DISCONNECT = KSPROPERTY_BTAUDIO.KSPROPERTY_ONESHOT_DISCONNECT
            # END IF


            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            STATIC_KSPROPSETID_DrmAudioStream = (
                0x2F2C8DDD,
                0x4198,
                0x4FAC,
                0xBA,
                0x29,
                0x61,
                0xBB,
                0x5,
                0xB7,
                0xDE,
                0x6
            )
            KSPROPSETID_DrmAudioStream = DEFINE_GUIDSTRUCT(
                "2F2C8DDD-4198-4fac-BA29-61BB05B7DE06"
            )
            KSPROPSETID_DrmAudioStream = (
                DEFINE_GUIDNAMED(KSPROPSETID_DrmAudioStream)
            )


            class KSPROPERTY_DRMAUDIOSTREAM(ENUM):
                KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 1

            KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = KSPROPERTY_DRMAUDIOSTREAM.KSPROPERTY_DRMAUDIOSTREAM_CONTENTID
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSPROPSETID_SoundDetector = (
            0x113C425E,
            0xFD17,
            0x4057,
            0xB4,
            0x22,
            0xED,
            0x40,
            0x74,
            0xF1,
            0xAF,
            0xDF
        )
        KSPROPSETID_SoundDetector = DEFINE_GUIDSTRUCT(
            "113C425E-FD17-4057-B422-ED4074F1AFDF"
        )
        KSPROPSETID_SoundDetector = DEFINE_GUIDNAMED(KSPROPSETID_SoundDetector)


        class KSPROPERTY_SOUNDDETECTOR(ENUM):
            KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = 1
            KSPROPERTY_SOUNDDETECTOR_PATTERNS = 2
            KSPROPERTY_SOUNDDETECTOR_ARMED = 3
            KSPROPERTY_SOUNDDETECTOR_MATCHRESULT = 4

        KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = KSPROPERTY_SOUNDDETECTOR.KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS
        KSPROPERTY_SOUNDDETECTOR_PATTERNS = KSPROPERTY_SOUNDDETECTOR.KSPROPERTY_SOUNDDETECTOR_PATTERNS
        KSPROPERTY_SOUNDDETECTOR_ARMED = KSPROPERTY_SOUNDDETECTOR.KSPROPERTY_SOUNDDETECTOR_ARMED
        KSPROPERTY_SOUNDDETECTOR_MATCHRESULT = KSPROPERTY_SOUNDDETECTOR.KSPROPERTY_SOUNDDETECTOR_MATCHRESULT

        SOUNDDETECTOR_PATTERNHEADER._fields_ = [
            ('Size', ULONG),
            ('PatternType', GUID),
        ]
        STATIC_KSEVENTSETID_SoundDetector = (
            0x69785C9B,
            0xFC2D,
            0x49D6,
            0xAC,
            0x32,
            0x47,
            0x99,
            0xF8,
            0x7D,
            0xE9,
            0xF6
        )
        KSEVENTSETID_SoundDetector = DEFINE_GUIDSTRUCT(
            "69785C9B-FC2D-49D6-AC32-4799F87DE9F6"
        )
        KSEVENTSETID_SoundDetector = (
            DEFINE_GUIDNAMED(KSEVENTSETID_SoundDetector)
        )


        class KSEVENT_SOUNDDETECTOR(ENUM):
            KSEVENT_SOUNDDETECTOR_MATCHDETECTED = 1

        KSEVENT_SOUNDDETECTOR_MATCHDETECTED = KSEVENT_SOUNDDETECTOR.KSEVENT_SOUNDDETECTOR_MATCHDETECTED

        # endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSPROPSETID_Audio = (
            0x45FFAAA0,
            0x6E1B,
            0x11D0,
            0xBC,
            0xF2,
            0x44,
            0x45,
            0x53,
            0x54,
            0x00,
            0x00
        )
        KSPROPSETID_Audio = DEFINE_GUIDSTRUCT(
            "45FFAAA0-6E1B-11D0-BCF2-444553540000"
        )
        KSPROPSETID_Audio = DEFINE_GUIDNAMED(KSPROPSETID_Audio)


        class KSPROPERTY_AUDIO(ENUM):
            KSPROPERTY_AUDIO_LATENCY = 1
            KSPROPERTY_AUDIO_COPY_PROTECTION = 2
            KSPROPERTY_AUDIO_CHANNEL_CONFIG = 3
            KSPROPERTY_AUDIO_VOLUMELEVEL = 4
            KSPROPERTY_AUDIO_POSITION = 5
            KSPROPERTY_AUDIO_DYNAMIC_RANGE = 6
            KSPROPERTY_AUDIO_QUALITY = 7
            KSPROPERTY_AUDIO_SAMPLING_RATE = 8
            KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE = 9
            KSPROPERTY_AUDIO_MIX_LEVEL_TABLE = 10
            KSPROPERTY_AUDIO_MIX_LEVEL_CAPS = 11
            KSPROPERTY_AUDIO_MUX_SOURCE = 12
            KSPROPERTY_AUDIO_MUTE = 13
            KSPROPERTY_AUDIO_BASS = 14
            KSPROPERTY_AUDIO_MID = 15
            KSPROPERTY_AUDIO_TREBLE = 16
            KSPROPERTY_AUDIO_BASS_BOOST = 17
            KSPROPERTY_AUDIO_EQ_LEVEL = 18
            KSPROPERTY_AUDIO_NUM_EQ_BANDS = 19
            KSPROPERTY_AUDIO_EQ_BANDS = 20
            KSPROPERTY_AUDIO_AGC = 21
            KSPROPERTY_AUDIO_DELAY = 22
            KSPROPERTY_AUDIO_LOUDNESS = 23
            KSPROPERTY_AUDIO_WIDE_MODE = 24
            KSPROPERTY_AUDIO_WIDENESS = 25
            KSPROPERTY_AUDIO_REVERB_LEVEL = 26
            KSPROPERTY_AUDIO_CHORUS_LEVEL = 27
            KSPROPERTY_AUDIO_DEV_SPECIFIC = 28
            KSPROPERTY_AUDIO_DEMUX_DEST = 29
            KSPROPERTY_AUDIO_STEREO_ENHANCE = 30
            KSPROPERTY_AUDIO_MANUFACTURE_GUID = 31
            KSPROPERTY_AUDIO_PRODUCT_GUID = 32
            KSPROPERTY_AUDIO_CPU_RESOURCES = 33
            KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY = 34
            KSPROPERTY_AUDIO_SURROUND_ENCODE = 35
            KSPROPERTY_AUDIO_3D_INTERFACE = 36
            if NTDDI_VERSION >= NTDDI_WINXP:
                KSPROPERTY_AUDIO_PEAKMETER = 37
                KSPROPERTY_AUDIO_ALGORITHM_INSTANCE = 38
                KSPROPERTY_AUDIO_FILTER_STATE = 39
                KSPROPERTY_AUDIO_PREFERRED_STATUS = 40
            # END IF

            if NTDDI_VERSION >= NTDDI_VISTA:
                KSPROPERTY_AUDIO_PEQ_MAX_BANDS = 41
                KSPROPERTY_AUDIO_PEQ_NUM_BANDS = 42
                KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ = 43
                KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR = 44
                KSPROPERTY_AUDIO_PEQ_BAND_LEVEL = 45
                KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE = 46
                KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH = 47
                KSPROPERTY_AUDIO_REVERB_TIME = 48
                KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK = 49
                KSPROPERTY_AUDIO_POSITIONEX = 50
                KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY = 51
            # END IF

            if NTDDI_VERSION >= NTDDI_WIN8:
                KSPROPERTY_AUDIO_PRESENTATION_POSITION = 52
                KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION = 53
                KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION = 54
                KSPROPERTY_AUDIO_PEAKMETER2 = 55
            # END IF

            if NTDDI_VERSION >= NTDDI_WINBLUE:
                KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = 56
                KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED = 57
            # END IF

            if NTDDI_VERSION >= NTDDI_WIN10_RS1:
                KSPROPERTY_AUDIO_MIC_SENSITIVITY = 58
                KSPROPERTY_AUDIO_MIC_SNR = 59
            # END IF

            if NTDDI_VERSION >= NTDDI_WIN10_RS4:
                KSPROPERTY_AUDIO_MIC_SENSITIVITY2 = 60
            # END IF

        KSPROPERTY_AUDIO_LATENCY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_LATENCY
        KSPROPERTY_AUDIO_COPY_PROTECTION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_COPY_PROTECTION
        KSPROPERTY_AUDIO_CHANNEL_CONFIG = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_CHANNEL_CONFIG
        KSPROPERTY_AUDIO_VOLUMELEVEL = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_VOLUMELEVEL
        KSPROPERTY_AUDIO_POSITION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_POSITION
        KSPROPERTY_AUDIO_DYNAMIC_RANGE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_DYNAMIC_RANGE
        KSPROPERTY_AUDIO_QUALITY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_QUALITY
        KSPROPERTY_AUDIO_SAMPLING_RATE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_SAMPLING_RATE
        KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE
        KSPROPERTY_AUDIO_MIX_LEVEL_TABLE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIX_LEVEL_TABLE
        KSPROPERTY_AUDIO_MIX_LEVEL_CAPS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIX_LEVEL_CAPS
        KSPROPERTY_AUDIO_MUX_SOURCE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MUX_SOURCE
        KSPROPERTY_AUDIO_MUTE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MUTE
        KSPROPERTY_AUDIO_BASS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_BASS
        KSPROPERTY_AUDIO_MID = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MID
        KSPROPERTY_AUDIO_TREBLE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_TREBLE
        KSPROPERTY_AUDIO_BASS_BOOST = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_BASS_BOOST
        KSPROPERTY_AUDIO_EQ_LEVEL = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_EQ_LEVEL
        KSPROPERTY_AUDIO_NUM_EQ_BANDS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_NUM_EQ_BANDS
        KSPROPERTY_AUDIO_EQ_BANDS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_EQ_BANDS
        KSPROPERTY_AUDIO_AGC = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_AGC
        KSPROPERTY_AUDIO_DELAY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_DELAY
        KSPROPERTY_AUDIO_LOUDNESS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_LOUDNESS
        KSPROPERTY_AUDIO_WIDE_MODE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_WIDE_MODE
        KSPROPERTY_AUDIO_WIDENESS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_WIDENESS
        KSPROPERTY_AUDIO_REVERB_LEVEL = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_REVERB_LEVEL
        KSPROPERTY_AUDIO_CHORUS_LEVEL = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_CHORUS_LEVEL
        KSPROPERTY_AUDIO_DEV_SPECIFIC = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_DEV_SPECIFIC
        KSPROPERTY_AUDIO_DEMUX_DEST = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_DEMUX_DEST
        KSPROPERTY_AUDIO_STEREO_ENHANCE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_STEREO_ENHANCE
        KSPROPERTY_AUDIO_MANUFACTURE_GUID = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MANUFACTURE_GUID
        KSPROPERTY_AUDIO_PRODUCT_GUID = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PRODUCT_GUID
        KSPROPERTY_AUDIO_CPU_RESOURCES = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_CPU_RESOURCES
        KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY
        KSPROPERTY_AUDIO_SURROUND_ENCODE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_SURROUND_ENCODE
        KSPROPERTY_AUDIO_3D_INTERFACE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_3D_INTERFACE
        if NTDDI_VERSION >= NTDDI_WINXP:
            KSPROPERTY_AUDIO_PEAKMETER = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEAKMETER
            KSPROPERTY_AUDIO_ALGORITHM_INSTANCE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_ALGORITHM_INSTANCE
            KSPROPERTY_AUDIO_FILTER_STATE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_FILTER_STATE
            KSPROPERTY_AUDIO_PREFERRED_STATUS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PREFERRED_STATUS
        # END IF

        if NTDDI_VERSION >= NTDDI_VISTA:
            KSPROPERTY_AUDIO_PEQ_MAX_BANDS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEQ_MAX_BANDS
            KSPROPERTY_AUDIO_PEQ_NUM_BANDS = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEQ_NUM_BANDS
            KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ
            KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR
            KSPROPERTY_AUDIO_PEQ_BAND_LEVEL = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEQ_BAND_LEVEL
            KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE
            KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH
            KSPROPERTY_AUDIO_REVERB_TIME = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_REVERB_TIME
            KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK
            KSPROPERTY_AUDIO_POSITIONEX = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_POSITIONEX
            KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY
        # END IF

        if NTDDI_VERSION >= NTDDI_WIN8:
            KSPROPERTY_AUDIO_PRESENTATION_POSITION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PRESENTATION_POSITION
            KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION
            KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION
            KSPROPERTY_AUDIO_PEAKMETER2 = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_PEAKMETER2
        # END IF

        if NTDDI_VERSION >= NTDDI_WINBLUE:
            KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION
            KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED
        # END IF

        if NTDDI_VERSION >= NTDDI_WIN10_RS1:
            KSPROPERTY_AUDIO_MIC_SENSITIVITY = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIC_SENSITIVITY
            KSPROPERTY_AUDIO_MIC_SNR = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIC_SNR
        # END IF

        if NTDDI_VERSION >= NTDDI_WIN10_RS4:
            KSPROPERTY_AUDIO_MIC_SENSITIVITY2 = KSPROPERTY_AUDIO.KSPROPERTY_AUDIO_MIC_SENSITIVITY2
        # END IF

        # Audio quality constants
        KSAUDIO_QUALITY_WORST = 0x0
        KSAUDIO_QUALITY_PC = 0x1
        KSAUDIO_QUALITY_BASIC = 0x2
        KSAUDIO_QUALITY_ADVANCED = 0x3

        # Audio CPU resource constants
        KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0x00000000
        KSAUDIO_CPU_RESOURCES_HOST_CPU = 0x7FFFFFFF


        KSAUDIO_COPY_PROTECTION._fields_ = [
            ('fCopyrighted', BOOL),
            ('fOriginal', BOOL),
        ]

        KSAUDIO_CHANNEL_CONFIG._fields_ = [
            ('ActiveSpeakerPositions', LONG),
        ]

        # Speaker Positions:
        SPEAKER_FRONT_LEFT = 0x1
        SPEAKER_FRONT_RIGHT = 0x2
        SPEAKER_FRONT_CENTER = 0x4
        SPEAKER_LOW_FREQUENCY = 0x8
        SPEAKER_BACK_LEFT = 0x10
        SPEAKER_BACK_RIGHT = 0x20
        SPEAKER_FRONT_LEFT_OF_CENTER = 0x40
        SPEAKER_FRONT_RIGHT_OF_CENTER = 0x80
        SPEAKER_BACK_CENTER = 0x100
        SPEAKER_SIDE_LEFT = 0x200
        SPEAKER_SIDE_RIGHT = 0x400
        SPEAKER_TOP_CENTER = 0x800
        SPEAKER_TOP_FRONT_LEFT = 0x1000
        SPEAKER_TOP_FRONT_CENTER = 0x2000
        SPEAKER_TOP_FRONT_RIGHT = 0x4000
        SPEAKER_TOP_BACK_LEFT = 0x8000
        SPEAKER_TOP_BACK_CENTER = 0x10000
        SPEAKER_TOP_BACK_RIGHT = 0x20000

        # Bit mask locations reserved for future use
        SPEAKER_RESERVED = 0x7FFC0000

        # Used to specify that any possible permutation of speaker
        # configurations
        SPEAKER_ALL = 0x80000000

        # DirectSound Speaker Config
        if NTDDI_VERSION >= NTDDI_WINXP:
            KSAUDIO_SPEAKER_DIRECTOUT = 0
        # END IF


        KSAUDIO_SPEAKER_MONO = SPEAKER_FRONT_CENTER
        KSAUDIO_SPEAKER_1POINT1 = SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY
        KSAUDIO_SPEAKER_STEREO = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT
        KSAUDIO_SPEAKER_2POINT1 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_LOW_FREQUENCY
        )
        KSAUDIO_SPEAKER_3POINT0 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER
        )
        KSAUDIO_SPEAKER_3POINT1 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_LOW_FREQUENCY
        )
        KSAUDIO_SPEAKER_QUAD = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_BACK_LEFT |
            SPEAKER_BACK_RIGHT
        )
        KSAUDIO_SPEAKER_SURROUND = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_BACK_CENTER
        )
        KSAUDIO_SPEAKER_5POINT0 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_SIDE_LEFT |
            SPEAKER_SIDE_RIGHT
        )
        KSAUDIO_SPEAKER_5POINT1 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_LOW_FREQUENCY |
            SPEAKER_BACK_LEFT |
            SPEAKER_BACK_RIGHT
        )
        KSAUDIO_SPEAKER_7POINT0 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_BACK_LEFT |
            SPEAKER_BACK_RIGHT |
            SPEAKER_SIDE_LEFT |
            SPEAKER_SIDE_RIGHT
        )
        KSAUDIO_SPEAKER_7POINT1 = (
            SPEAKER_FRONT_LEFT |
            SPEAKER_FRONT_RIGHT |
            SPEAKER_FRONT_CENTER |
            SPEAKER_LOW_FREQUENCY |
            SPEAKER_BACK_LEFT |
            SPEAKER_BACK_RIGHT |
            SPEAKER_FRONT_LEFT_OF_CENTER |
            SPEAKER_FRONT_RIGHT_OF_CENTER
        )
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSAUDIO_SPEAKER_5POINT1_SURROUND = (
                SPEAKER_FRONT_LEFT |
                SPEAKER_FRONT_RIGHT |
                SPEAKER_FRONT_CENTER |
                SPEAKER_LOW_FREQUENCY |
                SPEAKER_SIDE_LEFT |
                SPEAKER_SIDE_RIGHT
            )
            KSAUDIO_SPEAKER_7POINT1_SURROUND = (
                SPEAKER_FRONT_LEFT |
                SPEAKER_FRONT_RIGHT |
                SPEAKER_FRONT_CENTER |
                SPEAKER_LOW_FREQUENCY |
                SPEAKER_BACK_LEFT |
                SPEAKER_BACK_RIGHT |
                SPEAKER_SIDE_LEFT |
                SPEAKER_SIDE_RIGHT
            )

            # The following are obsolete 5.1 and 7.1 settings
            # (they lack side speakers). Note this means
            # that the default 5.1 and 7.1 settings
            # (KSAUDIO_SPEAKER_5POINT1 and KSAUDIO_SPEAKER_7POINT1 are
            # similarly obsolete but are unchanged for compatibility reasons).
            KSAUDIO_SPEAKER_5POINT1_BACK = KSAUDIO_SPEAKER_5POINT1
            KSAUDIO_SPEAKER_7POINT1_WIDE = KSAUDIO_SPEAKER_7POINT1
        # END IF   XP SP2 and later (chronologically)

        # DVD Speaker Positions
        KSAUDIO_SPEAKER_GROUND_FRONT_LEFT = SPEAKER_FRONT_LEFT
        KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = SPEAKER_FRONT_CENTER
        KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT = SPEAKER_FRONT_RIGHT
        KSAUDIO_SPEAKER_GROUND_REAR_LEFT = SPEAKER_BACK_LEFT
        KSAUDIO_SPEAKER_GROUND_REAR_RIGHT = SPEAKER_BACK_RIGHT
        KSAUDIO_SPEAKER_TOP_MIDDLE = SPEAKER_TOP_CENTER
        KSAUDIO_SPEAKER_SUPER_WOOFER = SPEAKER_LOW_FREQUENCY


        KSAUDIO_DYNAMIC_RANGE._fields_ = [
            ('QuietCompression', ULONG),
            ('LoudCompression', ULONG),
        ]

        KSAUDIO_MIXLEVEL._fields_ = [
            ('Mute', BOOL),
            ('Level', LONG),
        ]


        class _Union_4(ctypes.Union):
            pass


        _Union_4._fields_ = [
            ('Reset', LONG),
            ('Resolution', LONG),
        ]
        KSAUDIO_MIX_CAPS._Union_4 = _Union_4

        KSAUDIO_MIX_CAPS._anonymous_ = (
            '_Union_4',
        )

        KSAUDIO_MIX_CAPS._fields_ = [
            ('Mute', BOOL),
            ('Minimum', LONG),
            ('Maximum', LONG),
            ('_Union_4', KSAUDIO_MIX_CAPS._Union_4),
        ]

        KSAUDIO_MIXCAP_TABLE._fields_ = [
            ('InputChannels', ULONG),
            ('OutputChannels', ULONG),
            ('Capabilities', KSAUDIO_MIX_CAPS * 1),
        ]
        if NTDDI_VERSION < NTDDI_VISTA:
            class KSPROPERTY_SYSAUDIO_DEFAULT_TYPE(ENUM): # preferred device index
                KSPROPERTY_SYSAUDIO_NORMAL_DEFAULT = 0
                KSPROPERTY_SYSAUDIO_PLAYBACK_DEFAULT = 1
                KSPROPERTY_SYSAUDIO_RECORD_DEFAULT = 2
                KSPROPERTY_SYSAUDIO_MIDI_DEFAULT = 3
                KSPROPERTY_SYSAUDIO_MIXER_DEFAULT = 4

            KSPROPERTY_SYSAUDIO_NORMAL_DEFAULT = KSPROPERTY_SYSAUDIO_DEFAULT_TYPE.KSPROPERTY_SYSAUDIO_NORMAL_DEFAULT
            KSPROPERTY_SYSAUDIO_PLAYBACK_DEFAULT = KSPROPERTY_SYSAUDIO_DEFAULT_TYPE.KSPROPERTY_SYSAUDIO_PLAYBACK_DEFAULT
            KSPROPERTY_SYSAUDIO_RECORD_DEFAULT = KSPROPERTY_SYSAUDIO_DEFAULT_TYPE.KSPROPERTY_SYSAUDIO_RECORD_DEFAULT
            KSPROPERTY_SYSAUDIO_MIDI_DEFAULT = KSPROPERTY_SYSAUDIO_DEFAULT_TYPE.KSPROPERTY_SYSAUDIO_MIDI_DEFAULT
            KSPROPERTY_SYSAUDIO_MIXER_DEFAULT = KSPROPERTY_SYSAUDIO_DEFAULT_TYPE.KSPROPERTY_SYSAUDIO_MIXER_DEFAULT
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            KSAUDIO_PREFERRED_STATUS._fields_ = [
                ('Enable', BOOL),
                ('DeviceType', KSPROPERTY_SYSAUDIO_DEFAULT_TYPE),
                ('Flags', ULONG),
                ('Reserved', ULONG),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_VISTA:
            KSAUDIO_POSITIONEX._fields_ = [
                ('TimerFrequency', LARGE_INTEGER),
                ('TimeStamp1', LARGE_INTEGER),
                ('Position', KSAUDIO_POSITION),
                ('TimeStamp2', LARGE_INTEGER),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
            STATIC_KSPROPSETID_TelephonyControl = (
                0xB6DF7EB1,
                0xD099,
                0x489F,
                0xA6,
                0xA0,
                0xC0,
                0x10,
                0x6F,
                0x8,
                0x87,
                0xA7
            )
            KSPROPSETID_TelephonyControl = DEFINE_GUIDSTRUCT(
                "B6DF7EB1-D099-489F-A6A0-C0106F0887A7"
            )
            KSPROPSETID_TelephonyControl = (
                DEFINE_GUIDNAMED(KSPROPSETID_TelephonyControl)
            )


            class KSPROPERTY_TELEPHONY_CONTROL(ENUM):
                KSPROPERTY_TELEPHONY_PROVIDERID = 0
                KSPROPERTY_TELEPHONY_CALLINFO = 1
                KSPROPERTY_TELEPHONY_CALLCONTROL = 2
                KSPROPERTY_TELEPHONY_PROVIDERCHANGE = 3
                KSPROPERTY_TELEPHONY_CALLHOLD = 4
                KSPROPERTY_TELEPHONY_MUTE_TX = 5

            KSPROPERTY_TELEPHONY_PROVIDERID = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_PROVIDERID
            KSPROPERTY_TELEPHONY_CALLINFO = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_CALLINFO
            KSPROPERTY_TELEPHONY_CALLCONTROL = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_CALLCONTROL
            KSPROPERTY_TELEPHONY_PROVIDERCHANGE = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_PROVIDERCHANGE
            KSPROPERTY_TELEPHONY_CALLHOLD = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_CALLHOLD
            KSPROPERTY_TELEPHONY_MUTE_TX = KSPROPERTY_TELEPHONY_CONTROL.KSPROPERTY_TELEPHONY_MUTE_TX


            class TELEPHONY_CALLTYPE(ENUM):
                TELEPHONY_CALLTYPE_CIRCUITSWITCHED = 0
                TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE = 1
                TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = 2

            TELEPHONY_CALLTYPE_CIRCUITSWITCHED = TELEPHONY_CALLTYPE.TELEPHONY_CALLTYPE_CIRCUITSWITCHED
            TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE = TELEPHONY_CALLTYPE.TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE
            TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = TELEPHONY_CALLTYPE.TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN


            class TELEPHONY_CALLCONTROLOP(ENUM):
                TELEPHONY_CALLCONTROLOP_DISABLE = 0
                TELEPHONY_CALLCONTROLOP_ENABLE = 1

            TELEPHONY_CALLCONTROLOP_DISABLE = TELEPHONY_CALLCONTROLOP.TELEPHONY_CALLCONTROLOP_DISABLE
            TELEPHONY_CALLCONTROLOP_ENABLE = TELEPHONY_CALLCONTROLOP.TELEPHONY_CALLCONTROLOP_ENABLE

            _tagKSTELEPHONY_CALLCONTROL._fields_ = [
                ('CallType', TELEPHONY_CALLTYPE),
                ('CallControlOp', TELEPHONY_CALLCONTROLOP),
            ]


            class TELEPHONY_PROVIDERCHANGEOP(ENUM):
                TELEPHONY_PROVIDERCHANGEOP_END = 0
                TELEPHONY_PROVIDERCHANGEOP_BEGIN = 1
                TELEPHONY_PROVIDERCHANGEOP_CANCEL = 2

            TELEPHONY_PROVIDERCHANGEOP_END = TELEPHONY_PROVIDERCHANGEOP.TELEPHONY_PROVIDERCHANGEOP_END
            TELEPHONY_PROVIDERCHANGEOP_BEGIN = TELEPHONY_PROVIDERCHANGEOP.TELEPHONY_PROVIDERCHANGEOP_BEGIN
            TELEPHONY_PROVIDERCHANGEOP_CANCEL = TELEPHONY_PROVIDERCHANGEOP.TELEPHONY_PROVIDERCHANGEOP_CANCEL

            _tagKSTELEPHONY_PROVIDERCHANGE._fields_ = [
                ('CallType', TELEPHONY_CALLTYPE),
                ('ProviderChangeOp', TELEPHONY_PROVIDERCHANGEOP),
            ]


            class TELEPHONY_CALLSTATE(ENUM):
                TELEPHONY_CALLSTATE_DISABLED = 0
                TELEPHONY_CALLSTATE_ENABLED = 1
                TELEPHONY_CALLSTATE_HOLD = 2
                TELEPHONY_CALLSTATE_PROVIDERTRANSITION = 3

            TELEPHONY_CALLSTATE_DISABLED = TELEPHONY_CALLSTATE.TELEPHONY_CALLSTATE_DISABLED
            TELEPHONY_CALLSTATE_ENABLED = TELEPHONY_CALLSTATE.TELEPHONY_CALLSTATE_ENABLED
            TELEPHONY_CALLSTATE_HOLD = TELEPHONY_CALLSTATE.TELEPHONY_CALLSTATE_HOLD
            TELEPHONY_CALLSTATE_PROVIDERTRANSITION = TELEPHONY_CALLSTATE.TELEPHONY_CALLSTATE_PROVIDERTRANSITION

            _tagKSTELEPHONY_CALLINFO._fields_ = [
                ('CallType', TELEPHONY_CALLTYPE),
                ('CallState', TELEPHONY_CALLSTATE),
            ]
            STATIC_KSPROPSETID_TelephonyTopology = (
                0xABF25C7E,
                0x0E64,
                0x4E32,
                0xB1,
                0x90,
                0xD0,
                0xF6,
                0xD7,
                0xC5,
                0x3E,
                0x97
            )
            KSPROPSETID_TelephonyTopology = DEFINE_GUIDSTRUCT(
                "ABF25C7E-0E64-4E32-B190-D0F6D7C53E97"
            )
            KSPROPSETID_TelephonyTopology = (
                DEFINE_GUIDNAMED(KSPROPSETID_TelephonyTopology)
            )


            class KSPROPERTY_TELEPHONY_TOPOLOGY(ENUM):
                KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = 0
                KSPROPERTY_TELEPHONY_VOLUME = 1

            KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = KSPROPERTY_TELEPHONY_TOPOLOGY.KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR
            KSPROPERTY_TELEPHONY_VOLUME = KSPROPERTY_TELEPHONY_TOPOLOGY.KSPROPERTY_TELEPHONY_VOLUME

            _tagKSTOPOLOGY_ENDPOINTID._fields_ = [
                # Reference string for topology filter of an endpoint
                ('TopologyName', WCHAR * MAX_PATH),
                # Topology filter pin id to which endpoint is connected
                ('PinId', ULONG),
            ]

            _tagKSTOPOLOGY_ENDPOINTIDPAIR._fields_ = [
                ('RenderEndpoint', KSTOPOLOGY_ENDPOINTID),
                ('CaptureEndpoint', KSTOPOLOGY_ENDPOINTID),
            ]
            STATIC_KSPROPSETID_FMRXTopology = (
                0xC46CE8F,
                0xDC2D,
                0x4204,
                0x9D,
                0xC9,
                0xF5,
                0x89,
                0x63,
                0x36,
                0x65,
                0x63
            )
            KSPROPSETID_FMRXTopology = DEFINE_GUIDSTRUCT(
                "0C46CE8F-DC2D-4204-9DC9-F58963366563"
            )
            KSPROPSETID_FMRXTopology = (
                DEFINE_GUIDNAMED(KSPROPSETID_FMRXTopology)
            )


            class KSPROPERTY_FMRX_TOPOLOGY(ENUM):
                KSPROPERTY_FMRX_ENDPOINTID = 0
                KSPROPERTY_FMRX_VOLUME = 1
                KSPROPERTY_FMRX_ANTENNAENDPOINTID = 2

            KSPROPERTY_FMRX_ENDPOINTID = KSPROPERTY_FMRX_TOPOLOGY.KSPROPERTY_FMRX_ENDPOINTID
            KSPROPERTY_FMRX_VOLUME = KSPROPERTY_FMRX_TOPOLOGY.KSPROPERTY_FMRX_VOLUME
            KSPROPERTY_FMRX_ANTENNAENDPOINTID = KSPROPERTY_FMRX_TOPOLOGY.KSPROPERTY_FMRX_ANTENNAENDPOINTID
            STATIC_KSPROPSETID_FMRXControl = (
                0x947BBA3A,
                0xE8EE,
                0x4786,
                0x90,
                0xC4,
                0x84,
                0x28,
                0x18,
                0x5F,
                0x05,
                0xBE
            )
            KSPROPSETID_FMRXControl = DEFINE_GUIDSTRUCT(
                "947BBA3A-E8EE-4786-90C4-8428185F05BE"
            )
            KSPROPSETID_FMRXControl = DEFINE_GUIDNAMED(KSPROPSETID_FMRXControl)


            class KSPROPERTY_FMRX_CONTROL(ENUM):
                KSPROPERTY_FMRX_STATE = 0

            KSPROPERTY_FMRX_STATE = KSPROPERTY_FMRX_CONTROL.KSPROPERTY_FMRX_STATE
        # END IF   (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)

        if NTDDI_VERSION >= NTDDI_WIN10_RS4:
            STATIC_KSEVENTSETID_Telephony = (
                0xB77F12B4,
                0xCEB4,
                0x4484,
                0x8D,
                0x5E,
                0x52,
                0xC1,
                0xE7,
                0xD8,
                0x76,
                0x2D
            )
            KSEVENTSETID_Telephony = DEFINE_GUIDSTRUCT(
                "B77F12B4-CEB4-4484-8D5E-52C1E7D8762D"
            )
            KSEVENTSETID_Telephony = DEFINE_GUIDNAMED(KSEVENTSETID_Telephony)


            class KSEVENT_TELEPHONY(ENUM):
                KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = 1

            KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = KSEVENT_TELEPHONY.KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED
        # END IF   (NTDDI_VERSION >= NTDDI_WIN10_RS4)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Topology Node Type GUIDs
        STATIC_KSNODETYPE_DAC = (
            0x507AE360,
            0xC554,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_DAC = DEFINE_GUIDSTRUCT(
            "507AE360-C554-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_DAC = DEFINE_GUIDNAMED(KSNODETYPE_DAC)
        STATIC_KSNODETYPE_ADC = (
            0x4D837FE0,
            0xC555,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_ADC = DEFINE_GUIDSTRUCT(
            "4D837FE0-C555-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_ADC = DEFINE_GUIDNAMED(KSNODETYPE_ADC)
        STATIC_KSNODETYPE_SRC = (
            0x9DB7B9E0,
            0xC555,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_SRC = DEFINE_GUIDSTRUCT(
            "9DB7B9E0-C555-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_SRC = DEFINE_GUIDNAMED(KSNODETYPE_SRC)
        STATIC_KSNODETYPE_SUPERMIX = (
            0xE573ADC0,
            0xC555,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_SUPERMIX = DEFINE_GUIDSTRUCT(
            "E573ADC0-C555-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_SUPERMIX = DEFINE_GUIDNAMED(KSNODETYPE_SUPERMIX)
        STATIC_KSNODETYPE_MUX = (
            0x2CEAF780,
            0xC556,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_MUX = DEFINE_GUIDSTRUCT(
            "2CEAF780-C556-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_MUX = DEFINE_GUIDNAMED(KSNODETYPE_MUX)
        STATIC_KSNODETYPE_DEMUX = (
            0xC0EB67D4,
            0xE807,
            0x11D0,
            0x95,
            0x8A,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSNODETYPE_DEMUX = DEFINE_GUIDSTRUCT(
            "C0EB67D4-E807-11D0-958A-00C04FB925D3"
        )
        KSNODETYPE_DEMUX = DEFINE_GUIDNAMED(KSNODETYPE_DEMUX)
        STATIC_KSNODETYPE_SUM = (
            0xDA441A60,
            0xC556,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_SUM = DEFINE_GUIDSTRUCT(
            "DA441A60-C556-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_SUM = DEFINE_GUIDNAMED(KSNODETYPE_SUM)
        STATIC_KSNODETYPE_MUTE = (
            0x02B223C0,
            0xC557,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_MUTE = DEFINE_GUIDSTRUCT(
            "02B223C0-C557-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_MUTE = DEFINE_GUIDNAMED(KSNODETYPE_MUTE)
        STATIC_KSNODETYPE_VOLUME = (
            0x3A5ACC00,
            0xC557,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_VOLUME = DEFINE_GUIDSTRUCT(
            "3A5ACC00-C557-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_VOLUME = DEFINE_GUIDNAMED(KSNODETYPE_VOLUME)
        STATIC_KSNODETYPE_TONE = (
            0x7607E580,
            0xC557,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_TONE = DEFINE_GUIDSTRUCT(
            "7607E580-C557-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_TONE = DEFINE_GUIDNAMED(KSNODETYPE_TONE)
        STATIC_KSNODETYPE_EQUALIZER = (
            0x9D41B4A0,
            0xC557,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_EQUALIZER = DEFINE_GUIDSTRUCT(
            "9D41B4A0-C557-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_EQUALIZER = DEFINE_GUIDNAMED(KSNODETYPE_EQUALIZER)
        STATIC_KSNODETYPE_AGC = (
            0xE88C9BA0,
            0xC557,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_AGC = DEFINE_GUIDSTRUCT(
            "E88C9BA0-C557-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_AGC = DEFINE_GUIDNAMED(KSNODETYPE_AGC)
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSNODETYPE_NOISE_SUPPRESS = (
                0xE07F903F,
                0x62FD,
                0x4E60,
                0x8C,
                0xDD,
                0xDE,
                0xA7,
                0x23,
                0x66,
                0x65,
                0xB5
            )
            KSNODETYPE_NOISE_SUPPRESS = DEFINE_GUIDSTRUCT(
                "E07F903F-62FD-4e60-8CDD-DEA7236665B5"
            )
            KSNODETYPE_NOISE_SUPPRESS = (
                DEFINE_GUIDNAMED(KSNODETYPE_NOISE_SUPPRESS)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        STATIC_KSNODETYPE_DELAY = (
            0x144981E0,
            0xC558,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_DELAY = DEFINE_GUIDSTRUCT(
            "144981E0-C558-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_DELAY = DEFINE_GUIDNAMED(KSNODETYPE_DELAY)
        STATIC_KSNODETYPE_LOUDNESS = (
            0x41887440,
            0xC558,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_LOUDNESS = DEFINE_GUIDSTRUCT(
            "41887440-C558-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_LOUDNESS = DEFINE_GUIDNAMED(KSNODETYPE_LOUDNESS)
        STATIC_KSNODETYPE_PROLOGIC_DECODER = (
            0x831C2C80,
            0xC558,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_PROLOGIC_DECODER = DEFINE_GUIDSTRUCT(
            "831C2C80-C558-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_PROLOGIC_DECODER = (
            DEFINE_GUIDNAMED(KSNODETYPE_PROLOGIC_DECODER)
        )
        STATIC_KSNODETYPE_STEREO_WIDE = (
            0xA9E69800,
            0xC558,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_STEREO_WIDE = DEFINE_GUIDSTRUCT(
            "A9E69800-C558-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_STEREO_WIDE = DEFINE_GUIDNAMED(KSNODETYPE_STEREO_WIDE)
        STATIC_KSNODETYPE_REVERB = (
            0xEF0328E0,
            0xC558,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_REVERB = DEFINE_GUIDSTRUCT(
            "EF0328E0-C558-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_REVERB = DEFINE_GUIDNAMED(KSNODETYPE_REVERB)
        STATIC_KSNODETYPE_CHORUS = (
            0x20173F20,
            0xC559,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_CHORUS = DEFINE_GUIDSTRUCT(
            "20173F20-C559-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_CHORUS = DEFINE_GUIDNAMED(KSNODETYPE_CHORUS)
        STATIC_KSNODETYPE_3D_EFFECTS = (
            0x55515860,
            0xC559,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_3D_EFFECTS = DEFINE_GUIDSTRUCT(
            "55515860-C559-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_3D_EFFECTS = DEFINE_GUIDNAMED(KSNODETYPE_3D_EFFECTS)
        STATIC_KSNODETYPE_PARAMETRIC_EQUALIZER = (
            0x19BB3A6A,
            0xCE2B,
            0x4442,
            0x87,
            0xEC,
            0x67,
            0x27,
            0xC3,
            0xCA,
            0xB4,
            0x77
        )
        KSNODETYPE_PARAMETRIC_EQUALIZER = DEFINE_GUIDSTRUCT(
            "19BB3A6A-CE2B-4442-87EC-6727C3CAB477"
        )
        KSNODETYPE_PARAMETRIC_EQUALIZER = (
            DEFINE_GUIDNAMED(KSNODETYPE_PARAMETRIC_EQUALIZER)
        )
        STATIC_KSNODETYPE_UPDOWN_MIX = (
            0xB7EDC5CF,
            0x7B63,
            0x4EE2,
            0xA1,
            0x0,
            0x29,
            0xEE,
            0x2C,
            0xB6,
            0xB2,
            0xDE
        )
        KSNODETYPE_UPDOWN_MIX = DEFINE_GUIDSTRUCT(
            "B7EDC5CF-7B63-4ee2-A100-29EE2CB6B2DE"
        )
        KSNODETYPE_UPDOWN_MIX = DEFINE_GUIDNAMED(KSNODETYPE_UPDOWN_MIX)
        STATIC_KSNODETYPE_DYN_RANGE_COMPRESSOR = (
            0x8C8A6A8,
            0x601F,
            0x4AF8,
            0x87,
            0x93,
            0xD9,
            0x5,
            0xFF,
            0x4C,
            0xA9,
            0x7D
        )
        KSNODETYPE_DYN_RANGE_COMPRESSOR = DEFINE_GUIDSTRUCT(
            "08C8A6A8-601F-4af8-8793-D905FF4CA97D"
        )
        KSNODETYPE_DYN_RANGE_COMPRESSOR = (
            DEFINE_GUIDNAMED(KSNODETYPE_DYN_RANGE_COMPRESSOR)
        )
        STATIC_KSNODETYPE_ACOUSTIC_ECHO_CANCEL = (
            STATIC_KSCATEGORY_ACOUSTIC_ECHO_CANCEL
        )
        KSNODETYPE_ACOUSTIC_ECHO_CANCEL = KSCATEGORY_ACOUSTIC_ECHO_CANCEL
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL = (
                0x1C22C56D,
                0x9879,
                0x4F5B,
                0xA3,
                0x89,
                0x27,
                0x99,
                0x6D,
                0xDC,
                0x28,
                0x10
            )
            KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL = DEFINE_GUIDSTRUCT(
                "1C22C56D-9879-4f5b-A389-27996DDC2810"
            )
            KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL = (
                DEFINE_GUIDNAMED(KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL)
            )
            STATIC_KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS = (
                0x5AB0882E,
                0x7274,
                0x4516,
                0x87,
                0x7D,
                0x4E,
                0xEE,
                0x99,
                0xBA,
                0x4F,
                0xD0
            )
            KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS = DEFINE_GUIDSTRUCT(
                "5AB0882E-7274-4516-877D-4EEE99BA4FD0"
            )
            KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS = (
                DEFINE_GUIDNAMED(KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS)
            )
            STATIC_KSALGORITHMINSTANCE_SYSTEM_AGC = (
                0x950E55B9,
                0x877C,
                0x4C67,
                0xBE,
                0x8,
                0xE4,
                0x7B,
                0x56,
                0x11,
                0x13,
                0xA
            )
            KSALGORITHMINSTANCE_SYSTEM_AGC = DEFINE_GUIDSTRUCT(
                "950E55B9-877C-4c67-BE08-E47B5611130A"
            )
            KSALGORITHMINSTANCE_SYSTEM_AGC = (
                DEFINE_GUIDNAMED(KSALGORITHMINSTANCE_SYSTEM_AGC)
            )
            STATIC_KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR = (
                0xB6F5A0A0,
                0x9E61,
                0x4F8C,
                0x91,
                0xE3,
                0x76,
                0xCF,
                0xF,
                0x3C,
                0x47,
                0x1F
            )
            KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR = DEFINE_GUIDSTRUCT(
                "B6F5A0A0-9E61-4f8c-91E3-76CF0F3C471F"
            )
            KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR = (
                DEFINE_GUIDNAMED(KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR)
            )
            STATIC_KSNODETYPE_MICROPHONE_ARRAY_PROCESSOR = (
                STATIC_KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR
            )
            KSNODETYPE_MICROPHONE_ARRAY_PROCESSOR = (
                KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        STATIC_KSNODETYPE_DEV_SPECIFIC = (
            0x941C7AC0,
            0xC559,
            0x11D0,
            0x8A,
            0x2B,
            0x00,
            0xA0,
            0xC9,
            0x25,
            0x5A,
            0xC1
        )
        KSNODETYPE_DEV_SPECIFIC = DEFINE_GUIDSTRUCT(
            "941C7AC0-C559-11D0-8A2B-00A0C9255AC1"
        )
        KSNODETYPE_DEV_SPECIFIC = DEFINE_GUIDNAMED(KSNODETYPE_DEV_SPECIFIC)
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSNODETYPE_PROLOGIC_ENCODER = (
                0x8074C5B2,
                0x3C66,
                0x11D2,
                0xB4,
                0x5A,
                0x30,
                0x78,
                0x30,
                0x2C,
                0x20,
                0x30
            )
            KSNODETYPE_PROLOGIC_ENCODER = DEFINE_GUIDSTRUCT(
                "8074C5B2-3C66-11D2-B45A-3078302C2030"
            )
            KSNODETYPE_PROLOGIC_ENCODER = (
                DEFINE_GUIDNAMED(KSNODETYPE_PROLOGIC_ENCODER)
            )
            KSNODETYPE_SURROUND_ENCODER = KSNODETYPE_PROLOGIC_ENCODER
            STATIC_KSNODETYPE_PEAKMETER = (
                0xA085651E,
                0x5F0D,
                0x4B36,
                0xA8,
                0x69,
                0xD1,
                0x95,
                0xD6,
                0xAB,
                0x4B,
                0x9E
            )
            KSNODETYPE_PEAKMETER = DEFINE_GUIDSTRUCT(
                "A085651E-5F0D-4b36-A869-D195D6AB4B9E"
            )
            KSNODETYPE_PEAKMETER = DEFINE_GUIDNAMED(KSNODETYPE_PEAKMETER)
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_WINXP:
            STATIC_KSNODETYPE_SURROUND_ENCODER = (
                0x8074C5B2,
                0x3C66,
                0x11D2,
                0xB4,
                0x5A,
                0x30,
                0x78,
                0x30,
                0x2C,
                0x20,
                0x30
            )
            KSNODETYPE_SURROUND_ENCODER = DEFINE_GUIDSTRUCT(
                "8074C5B2-3C66-11D2-B45A-3078302C2030"
            )
            KSNODETYPE_SURROUND_ENCODER = (
                DEFINE_GUIDNAMED(KSNODETYPE_SURROUND_ENCODER)
            )
        # END IF   (NTDDI_VERSION < NTDDI_WINXP)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Topology Node Name GUIDs for common audio nodes
        STATIC_KSAUDFNAME_BASS = (
            0x185FEDE0,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_BASS = DEFINE_GUIDSTRUCT(
            "185FEDE0-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_BASS = DEFINE_GUIDNAMED(KSAUDFNAME_BASS)
        STATIC_KSAUDFNAME_TREBLE = (
            0x185FEDE1,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_TREBLE = DEFINE_GUIDSTRUCT(
            "185FEDE1-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_TREBLE = DEFINE_GUIDNAMED(KSAUDFNAME_TREBLE)
        STATIC_KSAUDFNAME_MIDRANGE = (
            0xA2CBE478,
            0xAE84,
            0x49A1,
            0x8B,
            0x72,
            0x4A,
            0xD0,
            0x9B,
            0x78,
            0xED,
            0x34
        )
        KSAUDFNAME_MIDRANGE = DEFINE_GUIDSTRUCT(
            "A2CBE478-AE84-49A1-8B72-4AD09B78ED34"
        )
        KSAUDFNAME_MIDRANGE = DEFINE_GUIDNAMED(KSAUDFNAME_MIDRANGE)
        STATIC_KSAUDFNAME_3D_STEREO = (
            0x185FEDE2,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_3D_STEREO = DEFINE_GUIDSTRUCT(
            "185FEDE2-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_3D_STEREO = DEFINE_GUIDNAMED(KSAUDFNAME_3D_STEREO)
        STATIC_KSAUDFNAME_MASTER_VOLUME = (
            0x185FEDE3,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MASTER_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDE3-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MASTER_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_MASTER_VOLUME)
        STATIC_KSAUDFNAME_MASTER_MUTE = (
            0x185FEDE4,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MASTER_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDE4-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MASTER_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_MASTER_MUTE)
        STATIC_KSAUDFNAME_WAVE_VOLUME = (
            0x185FEDE5,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_WAVE_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDE5-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_WAVE_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_WAVE_VOLUME)
        STATIC_KSAUDFNAME_WAVE_MUTE = (
            0x185FEDE6,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_WAVE_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDE6-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_WAVE_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_WAVE_MUTE)
        STATIC_KSAUDFNAME_MIDI_VOLUME = (
            0x185FEDE7,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIDI_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDE7-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIDI_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_MIDI_VOLUME)
        STATIC_KSAUDFNAME_MIDI_MUTE = (
            0x185FEDE8,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIDI_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDE8-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIDI_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_MIDI_MUTE)
        STATIC_KSAUDFNAME_CD_VOLUME = (
            0x185FEDE9,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_CD_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDE9-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_CD_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_CD_VOLUME)
        STATIC_KSAUDFNAME_CD_MUTE = (
            0x185FEDEA,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_CD_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDEA-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_CD_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_CD_MUTE)
        STATIC_KSAUDFNAME_LINE_VOLUME = (
            0x185FEDEB,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_LINE_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDEB-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_LINE_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_LINE_VOLUME)
        STATIC_KSAUDFNAME_LINE_MUTE = (
            0x185FEDEC,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_LINE_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDEC-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_LINE_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_LINE_MUTE)
        STATIC_KSAUDFNAME_MIC_VOLUME = (
            0x185FEDED,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIC_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDED-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIC_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_MIC_VOLUME)
        STATIC_KSAUDFNAME_MIC_MUTE = (
            0x185FEDEE,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIC_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDEE-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIC_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_MIC_MUTE)
        STATIC_KSAUDFNAME_RECORDING_SOURCE = (
            0x185FEDEF,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_RECORDING_SOURCE = DEFINE_GUIDSTRUCT(
            "185FEDEF-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_RECORDING_SOURCE = (
            DEFINE_GUIDNAMED(KSAUDFNAME_RECORDING_SOURCE)
        )
        STATIC_KSAUDFNAME_PC_SPEAKER_VOLUME = (
            0x185FEDF0,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_PC_SPEAKER_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF0-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_PC_SPEAKER_VOLUME = (
            DEFINE_GUIDNAMED(KSAUDFNAME_PC_SPEAKER_VOLUME)
        )
        STATIC_KSAUDFNAME_PC_SPEAKER_MUTE = (
            0x185FEDF1,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_PC_SPEAKER_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDF1-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_PC_SPEAKER_MUTE = (
            DEFINE_GUIDNAMED(KSAUDFNAME_PC_SPEAKER_MUTE)
        )
        STATIC_KSAUDFNAME_MIDI_IN_VOLUME = (
            0x185FEDF2,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIDI_IN_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF2-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIDI_IN_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_MIDI_IN_VOLUME)
        STATIC_KSAUDFNAME_CD_IN_VOLUME = (
            0x185FEDF3,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_CD_IN_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF3-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_CD_IN_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_CD_IN_VOLUME)
        STATIC_KSAUDFNAME_LINE_IN_VOLUME = (
            0x185FEDF4,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_LINE_IN_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF4-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_LINE_IN_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_LINE_IN_VOLUME)
        STATIC_KSAUDFNAME_MIC_IN_VOLUME = (
            0x185FEDF5,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIC_IN_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF5-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIC_IN_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_MIC_IN_VOLUME)
        STATIC_KSAUDFNAME_WAVE_IN_VOLUME = (
            0x185FEDF6,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_WAVE_IN_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDF6-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_WAVE_IN_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_WAVE_IN_VOLUME)
        STATIC_KSAUDFNAME_VOLUME_CONTROL = (
            0x185FEDF7,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_VOLUME_CONTROL = DEFINE_GUIDSTRUCT(
            "185FEDF7-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_VOLUME_CONTROL = DEFINE_GUIDNAMED(KSAUDFNAME_VOLUME_CONTROL)
        STATIC_KSAUDFNAME_MIDI = (
            0x185FEDF8,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_MIDI = DEFINE_GUIDSTRUCT(
            "185FEDF8-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_MIDI = DEFINE_GUIDNAMED(KSAUDFNAME_MIDI)
        STATIC_KSAUDFNAME_LINE_IN = (
            0x185FEDF9,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_LINE_IN = DEFINE_GUIDSTRUCT(
            "185FEDF9-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_LINE_IN = DEFINE_GUIDNAMED(KSAUDFNAME_LINE_IN)
        STATIC_KSAUDFNAME_RECORDING_CONTROL = (
            0x185FEDFA,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_RECORDING_CONTROL = DEFINE_GUIDSTRUCT(
            "185FEDFA-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_RECORDING_CONTROL = (
            DEFINE_GUIDNAMED(KSAUDFNAME_RECORDING_CONTROL)
        )
        STATIC_KSAUDFNAME_CD_AUDIO = (
            0x185FEDFB,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_CD_AUDIO = DEFINE_GUIDSTRUCT(
            "185FEDFB-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_CD_AUDIO = DEFINE_GUIDNAMED(KSAUDFNAME_CD_AUDIO)
        STATIC_KSAUDFNAME_AUX_VOLUME = (
            0x185FEDFC,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_AUX_VOLUME = DEFINE_GUIDSTRUCT(
            "185FEDFC-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_AUX_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_AUX_VOLUME)
        STATIC_KSAUDFNAME_AUX_MUTE = (
            0x185FEDFD,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_AUX_MUTE = DEFINE_GUIDSTRUCT(
            "185FEDFD-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_AUX_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_AUX_MUTE)
        STATIC_KSAUDFNAME_AUX = (
            0x185FEDFE,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_AUX = DEFINE_GUIDSTRUCT(
            "185FEDFE-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_AUX = DEFINE_GUIDNAMED(KSAUDFNAME_AUX)
        STATIC_KSAUDFNAME_PC_SPEAKER = (
            0x185FEDFF,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_PC_SPEAKER = DEFINE_GUIDSTRUCT(
            "185FEDFF-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_PC_SPEAKER = DEFINE_GUIDNAMED(KSAUDFNAME_PC_SPEAKER)
        STATIC_KSAUDFNAME_WAVE_OUT_MIX = (
            0x185FEE00,
            0x9905,
            0x11D1,
            0x95,
            0xA9,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSAUDFNAME_WAVE_OUT_MIX = DEFINE_GUIDSTRUCT(
            "185FEE00-9905-11D1-95A9-00C04FB925D3"
        )
        KSAUDFNAME_WAVE_OUT_MIX = DEFINE_GUIDNAMED(KSAUDFNAME_WAVE_OUT_MIX)
        STATIC_KSAUDFNAME_MONO_OUT = (
            0xF9B41DC3,
            0x96E2,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_OUT = DEFINE_GUIDSTRUCT(
            "F9B41DC3-96E2-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_OUT = DEFINE_GUIDNAMED(KSAUDFNAME_MONO_OUT)
        STATIC_KSAUDFNAME_STEREO_MIX = (
            0xDFF077,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_STEREO_MIX = DEFINE_GUIDSTRUCT(
            "00DFF077-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_STEREO_MIX = DEFINE_GUIDNAMED(KSAUDFNAME_STEREO_MIX)
        STATIC_KSAUDFNAME_MONO_MIX = (
            0xDFF078,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_MIX = DEFINE_GUIDSTRUCT(
            "00DFF078-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_MIX = DEFINE_GUIDNAMED(KSAUDFNAME_MONO_MIX)
        STATIC_KSAUDFNAME_MONO_OUT_VOLUME = (
            0x1AD247EB,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_OUT_VOLUME = DEFINE_GUIDSTRUCT(
            "1AD247EB-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_OUT_VOLUME = (
            DEFINE_GUIDNAMED(KSAUDFNAME_MONO_OUT_VOLUME)
        )
        STATIC_KSAUDFNAME_MONO_OUT_MUTE = (
            0x1AD247EC,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_OUT_MUTE = DEFINE_GUIDSTRUCT(
            "1AD247EC-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_OUT_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_MONO_OUT_MUTE)
        STATIC_KSAUDFNAME_STEREO_MIX_VOLUME = (
            0x1AD247ED,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_STEREO_MIX_VOLUME = DEFINE_GUIDSTRUCT(
            "1AD247ED-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_STEREO_MIX_VOLUME = (
            DEFINE_GUIDNAMED(KSAUDFNAME_STEREO_MIX_VOLUME)
        )
        STATIC_KSAUDFNAME_STEREO_MIX_MUTE = (
            0x22B0EAFD,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_STEREO_MIX_MUTE = DEFINE_GUIDSTRUCT(
            "22B0EAFD-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_STEREO_MIX_MUTE = (
            DEFINE_GUIDNAMED(KSAUDFNAME_STEREO_MIX_MUTE)
        )
        STATIC_KSAUDFNAME_MONO_MIX_VOLUME = (
            0x22B0EAFE,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_MIX_VOLUME = DEFINE_GUIDSTRUCT(
            "22B0EAFE-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_MIX_VOLUME = (
            DEFINE_GUIDNAMED(KSAUDFNAME_MONO_MIX_VOLUME)
        )
        STATIC_KSAUDFNAME_MONO_MIX_MUTE = (
            0x2BC31D69,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MONO_MIX_MUTE = DEFINE_GUIDSTRUCT(
            "2BC31D69-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MONO_MIX_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_MONO_MIX_MUTE)
        STATIC_KSAUDFNAME_MICROPHONE_BOOST = (
            0x2BC31D6A,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_MICROPHONE_BOOST = DEFINE_GUIDSTRUCT(
            "2BC31D6A-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_MICROPHONE_BOOST = (
            DEFINE_GUIDNAMED(KSAUDFNAME_MICROPHONE_BOOST)
        )
        STATIC_KSAUDFNAME_ALTERNATE_MICROPHONE = (
            0x2BC31D6B,
            0x96E3,
            0x11D2,
            0xAC,
            0x4C,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_ALTERNATE_MICROPHONE = DEFINE_GUIDSTRUCT(
            "2BC31D6B-96E3-11d2-AC4C-00C04F8EFB68"
        )
        KSAUDFNAME_ALTERNATE_MICROPHONE = (
            DEFINE_GUIDNAMED(KSAUDFNAME_ALTERNATE_MICROPHONE)
        )
        STATIC_KSAUDFNAME_3D_DEPTH = (
            0x63FF5747,
            0x991F,
            0x11D2,
            0xAC,
            0x4D,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_3D_DEPTH = DEFINE_GUIDSTRUCT(
            "63FF5747-991F-11d2-AC4D-00C04F8EFB68"
        )
        KSAUDFNAME_3D_DEPTH = DEFINE_GUIDNAMED(KSAUDFNAME_3D_DEPTH)
        STATIC_KSAUDFNAME_3D_CENTER = (
            0x9F0670B4,
            0x991F,
            0x11D2,
            0xAC,
            0x4D,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_3D_CENTER = DEFINE_GUIDSTRUCT(
            "9F0670B4-991F-11d2-AC4D-00C04F8EFB68"
        )
        KSAUDFNAME_3D_CENTER = DEFINE_GUIDNAMED(KSAUDFNAME_3D_CENTER)
        STATIC_KSAUDFNAME_VIDEO_VOLUME = (
            0x9B46E708,
            0x992A,
            0x11D2,
            0xAC,
            0x4D,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_VIDEO_VOLUME = DEFINE_GUIDSTRUCT(
            "9B46E708-992A-11d2-AC4D-00C04F8EFB68"
        )
        KSAUDFNAME_VIDEO_VOLUME = DEFINE_GUIDNAMED(KSAUDFNAME_VIDEO_VOLUME)
        STATIC_KSAUDFNAME_VIDEO_MUTE = (
            0x9B46E709,
            0x992A,
            0x11D2,
            0xAC,
            0x4D,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_VIDEO_MUTE = DEFINE_GUIDSTRUCT(
            "9B46E709-992A-11d2-AC4D-00C04F8EFB68"
        )
        KSAUDFNAME_VIDEO_MUTE = DEFINE_GUIDNAMED(KSAUDFNAME_VIDEO_MUTE)
        STATIC_KSAUDFNAME_VIDEO = (
            0x915DAEC4,
            0xA434,
            0x11D2,
            0xAC,
            0x52,
            0x0,
            0xC0,
            0x4F,
            0x8E,
            0xFB,
            0x68
        )
        KSAUDFNAME_VIDEO = DEFINE_GUIDSTRUCT(
            "915DAEC4-A434-11d2-AC52-00C04F8EFB68"
        )
        KSAUDFNAME_VIDEO = DEFINE_GUIDNAMED(KSAUDFNAME_VIDEO)
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_KSAUDFNAME_PEAKMETER = (
                0x57E24340,
                0xFC5B,
                0x4612,
                0xA5,
                0x62,
                0x72,
                0xB1,
                0x1A,
                0x29,
                0xDF,
                0xAE
            )
            KSAUDFNAME_PEAKMETER = DEFINE_GUIDSTRUCT(
                "57E24340-FC5B-4612-A562-72B11A29DFAE"
            )
            KSAUDFNAME_PEAKMETER = DEFINE_GUIDNAMED(KSAUDFNAME_PEAKMETER)
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # Internal topology node pin definitions
        KSNODEPIN_STANDARD_IN = 1
        KSNODEPIN_STANDARD_OUT = 0
        KSNODEPIN_SUM_MUX_IN = 1        # can be >= 1
        KSNODEPIN_SUM_MUX_OUT = 0
        KSNODEPIN_DEMUX_IN = 0
        KSNODEPIN_DEMUX_OUT = 1        # can be >= 1
        if NTDDI_VERSION < NTDDI_VISTA:
            KSNODEPIN_AEC_RENDER_IN = 1
            KSNODEPIN_AEC_RENDER_OUT = 0
            KSNODEPIN_AEC_CAPTURE_IN = 2
            KSNODEPIN_AEC_CAPTURE_OUT = 3
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSMETHODSETID_Wavetable = (
            0xDCEF31EB,
            0xD907,
            0x11D0,
            0x95,
            0x83,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSMETHODSETID_Wavetable = DEFINE_GUIDSTRUCT(
            "DCEF31EB-D907-11D0-9583-00C04FB925D3"
        )
        KSMETHODSETID_Wavetable = DEFINE_GUIDNAMED(KSMETHODSETID_Wavetable)


        class KSMETHOD_WAVETABLE(ENUM):
            KSMETHOD_WAVETABLE_WAVE_ALLOC = 1
            KSMETHOD_WAVETABLE_WAVE_FREE = 2
            KSMETHOD_WAVETABLE_WAVE_FIND = 3
            KSMETHOD_WAVETABLE_WAVE_WRITE = 4

        KSMETHOD_WAVETABLE_WAVE_ALLOC = KSMETHOD_WAVETABLE.KSMETHOD_WAVETABLE_WAVE_ALLOC
        KSMETHOD_WAVETABLE_WAVE_FREE = KSMETHOD_WAVETABLE.KSMETHOD_WAVETABLE_WAVE_FREE
        KSMETHOD_WAVETABLE_WAVE_FIND = KSMETHOD_WAVETABLE.KSMETHOD_WAVETABLE_WAVE_FIND
        KSMETHOD_WAVETABLE_WAVE_WRITE = KSMETHOD_WAVETABLE.KSMETHOD_WAVETABLE_WAVE_WRITE

        # wave identifier
        KSWAVETABLE_WAVE_DESC._fields_ = [
            ('Identifier', KSIDENTIFIER),
            # wave size
            ('Size', ULONG),
            # wave looped flag
            ('Looped', BOOL),
            # wave loop point
            ('LoopPoint', ULONG),
            # wave InROM flag
            ('InROM', BOOL),
            # wave format
            ('Format', KSDATAFORMAT),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # /* Property sets and items
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSPROPSETID_Acoustic_Echo_Cancel = (
                0xD7A4AF8B,
                0x3DC1,
                0x4902,
                0x91,
                0xEA,
                0x8A,
                0x15,
                0xC9,
                0x0E,
                0x05,
                0xB2
            )
            KSPROPSETID_Acoustic_Echo_Cancel = DEFINE_GUIDSTRUCT(
                "D7A4AF8B-3DC1-4902-91EA-8A15C90E05B2"
            )
            KSPROPSETID_Acoustic_Echo_Cancel = (
                DEFINE_GUIDNAMED(KSPROPSETID_Acoustic_Echo_Cancel)
            )


            class KSPROPERTY_AEC(ENUM):
                KSPROPERTY_AEC_NOISE_FILL_ENABLE = 0
                KSPROPERTY_AEC_STATUS = 1
                KSPROPERTY_AEC_MODE = 2

            KSPROPERTY_AEC_NOISE_FILL_ENABLE = KSPROPERTY_AEC.KSPROPERTY_AEC_NOISE_FILL_ENABLE
            KSPROPERTY_AEC_STATUS = KSPROPERTY_AEC.KSPROPERTY_AEC_STATUS
            KSPROPERTY_AEC_MODE = KSPROPERTY_AEC.KSPROPERTY_AEC_MODE
            AEC_STATUS_FD_HISTORY_UNINITIALIZED = 0x0
            AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 0x1
            AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED = 0x2
            AEC_STATUS_FD_CURRENTLY_CONVERGED = 0x8
            AEC_MODE_PASS_THROUGH = 0x0
            AEC_MODE_HALF_DUPLEX = 0x1
            AEC_MODE_FULL_DUPLEX = 0x2
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION < NTDDI_WS03:
            STATIC_KSPROPSETID_Wave_Queued = (
                0x16A15B10,
                0x16F0,
                0x11D0,
                0xA1,
                0x95,
                0x00,
                0x20,
                0xAF,
                0xD1,
                0x56,
                0xE4
            )
            KSPROPSETID_Wave_Queued = DEFINE_GUIDSTRUCT(
                "16a15b10-16f0-11d0-a195-0020afd156e4"
            )
            KSPROPSETID_Wave_Queued = DEFINE_GUIDNAMED(KSPROPSETID_Wave_Queued)
            KSPROPERTY_WAVE_QUEUED_POSITION = 0x00000001
            STATIC_KSMETHODSETID_Wave_Queued = (
                0x7432C160,
                0x8827,
                0x11CF,
                0xA1,
                0x02,
                0x00,
                0x20,
                0xAF,
                0xD1,
                0x56,
                0xE4
            )
            KSMETHODSETID_Wave_Queued = DEFINE_GUIDSTRUCT(
                "7432c160-8827-11cf-a102-0020afd156e4"
            )
            KSMETHODSETID_Wave_Queued = (
                DEFINE_GUIDNAMED(KSMETHODSETID_Wave_Queued)
            )
            KSMETHOD_WAVE_QUEUED_BREAKLOOP = 0x00000001
        # END IF   (NTDDI_VERSION < NTDDI_WS03)

        STATIC_KSPROPSETID_Wave = (
            0x924E54B0,
            0x630F,
            0x11CF,
            0xAD,
            0xA7,
            0x08,
            0x00,
            0x3E,
            0x30,
            0x49,
            0x4A
        )
        KSPROPSETID_Wave = DEFINE_GUIDSTRUCT(
            "924e54b0-630f-11cf-ada7-08003e30494a"
        )
        KSPROPSETID_Wave = DEFINE_GUIDNAMED(KSPROPSETID_Wave)


        class KSPROPERTY_WAVE(ENUM):
            KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 1
            KSPROPERTY_WAVE_INPUT_CAPABILITIES = 2
            KSPROPERTY_WAVE_OUTPUT_CAPABILITIES = 3
            KSPROPERTY_WAVE_BUFFER = 4
            KSPROPERTY_WAVE_FREQUENCY = 5
            KSPROPERTY_WAVE_VOLUME = 6
            KSPROPERTY_WAVE_PAN = 7

        KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = KSPROPERTY_WAVE.KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES
        KSPROPERTY_WAVE_INPUT_CAPABILITIES = KSPROPERTY_WAVE.KSPROPERTY_WAVE_INPUT_CAPABILITIES
        KSPROPERTY_WAVE_OUTPUT_CAPABILITIES = KSPROPERTY_WAVE.KSPROPERTY_WAVE_OUTPUT_CAPABILITIES
        KSPROPERTY_WAVE_BUFFER = KSPROPERTY_WAVE.KSPROPERTY_WAVE_BUFFER
        KSPROPERTY_WAVE_FREQUENCY = KSPROPERTY_WAVE.KSPROPERTY_WAVE_FREQUENCY
        KSPROPERTY_WAVE_VOLUME = KSPROPERTY_WAVE.KSPROPERTY_WAVE_VOLUME
        KSPROPERTY_WAVE_PAN = KSPROPERTY_WAVE.KSPROPERTY_WAVE_PAN

        KSWAVE_COMPATCAPS._fields_ = [
            ('ulDeviceType', ULONG),
        ]
        KSWAVE_COMPATCAPS_INPUT = 0x00000000
        KSWAVE_COMPATCAPS_OUTPUT = 0x00000001


        KSWAVE_INPUT_CAPABILITIES._fields_ = [
            ('MaximumChannelsPerConnection', ULONG),
            ('MinimumBitsPerSample', ULONG),
            ('MaximumBitsPerSample', ULONG),
            ('MinimumSampleFrequency', ULONG),
            ('MaximumSampleFrequency', ULONG),
            ('TotalConnections', ULONG),
            ('ActiveConnections', ULONG),
        ]

        KSWAVE_OUTPUT_CAPABILITIES._fields_ = [
            ('MaximumChannelsPerConnection', ULONG),
            ('MinimumBitsPerSample', ULONG),
            ('MaximumBitsPerSample', ULONG),
            ('MinimumSampleFrequency', ULONG),
            ('MaximumSampleFrequency', ULONG),
            ('TotalConnections', ULONG),
            ('StaticConnections', ULONG),
            ('StreamingConnections', ULONG),
            ('ActiveConnections', ULONG),
            ('ActiveStaticConnections', ULONG),
            ('ActiveStreamingConnections', ULONG),
            ('Total3DConnections', ULONG),
            ('Static3DConnections', ULONG),
            ('Streaming3DConnections', ULONG),
            ('Active3DConnections', ULONG),
            ('ActiveStatic3DConnections', ULONG),
            ('ActiveStreaming3DConnections', ULONG),
            ('TotalSampleMemory', ULONG),
            ('FreeSampleMemory', ULONG),
            ('LargestFreeContiguousSampleMemory', ULONG),
        ]

        KSWAVE_VOLUME._fields_ = [
            ('LeftAttenuation', LONG),
            ('RightAttenuation', LONG),
        ]
        KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 0x00000001
        KSWAVE_BUFFER_ATTRIBUTEF_STATIC = 0x00000002


        KSWAVE_BUFFER._fields_ = [
            ('Attributes', ULONG),
            ('BufferSize', ULONG),
            ('BufferAddress', PVOID),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSMUSIC_TECHNOLOGY_PORT = (
            0x86C92E60,
            0x62E8,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSMUSIC_TECHNOLOGY_PORT = DEFINE_GUIDSTRUCT(
            "86C92E60-62E8-11CF-A5D6-28DB04C10000"
        )
        KSMUSIC_TECHNOLOGY_PORT = DEFINE_GUIDNAMED(KSMUSIC_TECHNOLOGY_PORT)
        STATIC_KSMUSIC_TECHNOLOGY_SQSYNTH = (
            0x0ECF4380,
            0x62E9,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSMUSIC_TECHNOLOGY_SQSYNTH = DEFINE_GUIDSTRUCT(
            "0ECF4380-62E9-11CF-A5D6-28DB04C10000"
        )
        KSMUSIC_TECHNOLOGY_SQSYNTH = (
            DEFINE_GUIDNAMED(KSMUSIC_TECHNOLOGY_SQSYNTH)
        )
        STATIC_KSMUSIC_TECHNOLOGY_FMSYNTH = (
            0x252C5C80,
            0x62E9,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSMUSIC_TECHNOLOGY_FMSYNTH = DEFINE_GUIDSTRUCT(
            "252C5C80-62E9-11CF-A5D6-28DB04C10000"
        )
        KSMUSIC_TECHNOLOGY_FMSYNTH = (
            DEFINE_GUIDNAMED(KSMUSIC_TECHNOLOGY_FMSYNTH)
        )
        STATIC_KSMUSIC_TECHNOLOGY_WAVETABLE = (
            0x394EC7C0,
            0x62E9,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSMUSIC_TECHNOLOGY_WAVETABLE = DEFINE_GUIDSTRUCT(
            "394EC7C0-62E9-11CF-A5D6-28DB04C10000"
        )
        KSMUSIC_TECHNOLOGY_WAVETABLE = (
            DEFINE_GUIDNAMED(KSMUSIC_TECHNOLOGY_WAVETABLE)
        )
        STATIC_KSMUSIC_TECHNOLOGY_SWSYNTH = (
            0x37407736,
            0x3620,
            0x11D1,
            0x85,
            0xD3,
            0x00,
            0x00,
            0xF8,
            0x75,
            0x43,
            0x80
        )
        KSMUSIC_TECHNOLOGY_SWSYNTH = DEFINE_GUIDSTRUCT(
            "37407736-3620-11D1-85D3-0000F8754380"
        )
        KSMUSIC_TECHNOLOGY_SWSYNTH = (
            DEFINE_GUIDNAMED(KSMUSIC_TECHNOLOGY_SWSYNTH)
        )
        if NTDDI_VERSION < NTDDI_WS03:
            STATIC_KSPROPSETID_WaveTable = (
                0x8539E660,
                0x62E9,
                0x11CF,
                0xA5,
                0xD6,
                0x28,
                0xDB,
                0x04,
                0xC1,
                0x00,
                0x00
            )
            KSPROPSETID_WaveTable = DEFINE_GUIDSTRUCT(
                "8539E660-62E9-11CF-A5D6-28DB04C10000"
            )
            KSPROPSETID_WaveTable = DEFINE_GUIDNAMED(KSPROPSETID_WaveTable)


            class KSPROPERTY_WAVETABLE(ENUM):
                KSPROPERTY_WAVETABLE_LOAD_SAMPLE = 1
                KSPROPERTY_WAVETABLE_UNLOAD_SAMPLE = 2
                KSPROPERTY_WAVETABLE_MEMORY = 3
                KSPROPERTY_WAVETABLE_VERSION = 4

            KSPROPERTY_WAVETABLE_LOAD_SAMPLE = KSPROPERTY_WAVETABLE.KSPROPERTY_WAVETABLE_LOAD_SAMPLE
            KSPROPERTY_WAVETABLE_UNLOAD_SAMPLE = KSPROPERTY_WAVETABLE.KSPROPERTY_WAVETABLE_UNLOAD_SAMPLE
            KSPROPERTY_WAVETABLE_MEMORY = KSPROPERTY_WAVETABLE.KSPROPERTY_WAVETABLE_MEMORY
            KSPROPERTY_WAVETABLE_VERSION = KSPROPERTY_WAVETABLE.KSPROPERTY_WAVETABLE_VERSION
        # END IF   (NTDDI_VERSION < NTDDI_WS03)


        KSDATARANGE_MUSIC._fields_ = [
            ('DataRange', KSDATARANGE),
            ('Technology', GUID),
            ('Channels', ULONG),
            ('Notes', ULONG),
            ('ChannelMask', ULONG),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION < NTDDI_WS03:
            STATIC_KSEVENTSETID_Cyclic = (
                0x142C1AC0,
                0x072A,
                0x11D0,
                0xA5,
                0xD6,
                0x28,
                0xDB,
                0x04,
                0xC1,
                0x00,
                0x00
            )
            KSEVENTSETID_Cyclic = DEFINE_GUIDSTRUCT(
                "142C1AC0-072A-11D0-A5D6-28DB04C10000"
            )
            KSEVENTSETID_Cyclic = DEFINE_GUIDNAMED(KSEVENTSETID_Cyclic)


            class KSEVENT_CYCLIC_TIME(ENUM):
                KSEVENT_CYCLIC_TIME_INTERVAL = 1

            KSEVENT_CYCLIC_TIME_INTERVAL = KSEVENT_CYCLIC_TIME.KSEVENT_CYCLIC_TIME_INTERVAL
        # END IF   (NTDDI_VERSION < NTDDI_WS03)

        STATIC_KSPROPSETID_Cyclic = (
            0x3FFEAEA0,
            0x2BEE,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSPROPSETID_Cyclic = DEFINE_GUIDSTRUCT(
            "3FFEAEA0-2BEE-11CF-A5D6-28DB04C10000"
        )
        KSPROPSETID_Cyclic = DEFINE_GUIDNAMED(KSPROPSETID_Cyclic)


        class KSPROPERTY_CYCLIC(ENUM):
            KSPROPERTY_CYCLIC_POSITION = 1

        KSPROPERTY_CYCLIC_POSITION = KSPROPERTY_CYCLIC.KSPROPERTY_CYCLIC_POSITION

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSEVENTSETID_AudioControlChange = (
            0xE85E9698,
            0xFA2F,
            0x11D1,
            0x95,
            0xBD,
            0x00,
            0xC0,
            0x4F,
            0xB9,
            0x25,
            0xD3
        )
        KSEVENTSETID_AudioControlChange = DEFINE_GUIDSTRUCT(
            "E85E9698-FA2F-11D1-95BD-00C04FB925D3"
        )
        KSEVENTSETID_AudioControlChange = (
            DEFINE_GUIDNAMED(KSEVENTSETID_AudioControlChange)
        )


        class KSEVENT_AUDIO_CONTROL_CHANGE(ENUM):
            KSEVENT_CONTROL_CHANGE = 1

        KSEVENT_CONTROL_CHANGE = KSEVENT_AUDIO_CONTROL_CHANGE.KSEVENT_CONTROL_CHANGE

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSEVENTSETID_LoopedStreaming = (
            0x4682B940,
            0xC6EF,
            0x11D0,
            0x96,
            0xD8,
            0x00,
            0xAA,
            0x00,
            0x51,
            0xE5,
            0x1D
        )
        KSEVENTSETID_LoopedStreaming = DEFINE_GUIDSTRUCT(
            "4682B940-C6EF-11D0-96D8-00AA0051E51D"
        )
        KSEVENTSETID_LoopedStreaming = (
            DEFINE_GUIDNAMED(KSEVENTSETID_LoopedStreaming)
        )


        class KSEVENT_LOOPEDSTREAMING(ENUM):
            KSEVENT_LOOPEDSTREAMING_POSITION = 1

        KSEVENT_LOOPEDSTREAMING_POSITION = KSEVENT_LOOPEDSTREAMING.KSEVENT_LOOPEDSTREAMING_POSITION

        _TEMP_LOOPEDSTREAMING_POSITION_EVENT_DATA = [
            ('KsEventData', KSEVENTDATA),
        ]
        if defined(_NTDDK_):
            _TEMP_LOOPEDSTREAMING_POSITION_EVENT_DATA += [
                ('Position', ULONGLONG),
            ]
        else: #  not _NTDDK_
            _TEMP_LOOPEDSTREAMING_POSITION_EVENT_DATA += [
                ('Position', DWORDLONG),
            ]
        # END IF   not _NTDDK_


        LOOPEDSTREAMING_POSITION_EVENT_DATA._fields_ = _TEMP_LOOPEDSTREAMING_POSITION_EVENT_DATA
        if NTDDI_VERSION <= NTDDI_WINXP:
            STATIC_KSEVENTSETID_Sysaudio = (
                0x04800320,
                0x4491,
                0x11D1,
                0xA0,
                0x50,
                0x40,
                0x57,
                0x05,
                0xC1,
                0x00,
                0x00
            )
            KSEVENTSETID_Sysaudio = DEFINE_GUIDSTRUCT(
                "04800320-4491-11D1-A050-405705C10000"
            )
            KSEVENTSETID_Sysaudio = DEFINE_GUIDNAMED(KSEVENTSETID_Sysaudio)


            class KSEVENT_SYSAUDIO(ENUM):
                KSEVENT_SYSAUDIO_ADDREMOVE_DEVICE = 1
                if NTDDI_VERSION == NTDDI_WINXP:
                    KSEVENT_SYSAUDIO_CHANGE_DEVICE = 2
                # END IF

            KSEVENT_SYSAUDIO_ADDREMOVE_DEVICE = KSEVENT_SYSAUDIO.KSEVENT_SYSAUDIO_ADDREMOVE_DEVICE
            if NTDDI_VERSION == NTDDI_WINXP:
                KSEVENT_SYSAUDIO_CHANGE_DEVICE = KSEVENT_SYSAUDIO.KSEVENT_SYSAUDIO_CHANGE_DEVICE
            # END IF
        # END IF   (NTDDI_VERSION <= NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_VISTA:
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            STATIC_KSPROPSETID_Sysaudio = (
                0xCBE3FAA0,
                0xCC75,
                0x11D0,
                0xB4,
                0x65,
                0x00,
                0x00,
                0x1A,
                0x18,
                0x18,
                0xE6
            )
            KSPROPSETID_Sysaudio = DEFINE_GUIDSTRUCT(
                "CBE3FAA0-CC75-11D0-B465-00001A1818E6"
            )
            KSPROPSETID_Sysaudio = DEFINE_GUIDNAMED(KSPROPSETID_Sysaudio)
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)


        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            class KSPROPERTY_SYSAUDIO(ENUM):
                KSPROPERTY_SYSAUDIO_DEVICE_COUNT = 1
                KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME = 2
                KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE = 3
                KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = 4
                KSPROPERTY_SYSAUDIO_SELECT_GRAPH = 5
                KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = 6
                KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT = 7
                KSPROPERTY_SYSAUDIO_INSTANCE_INFO = 14
                KSPROPERTY_SYSAUDIO_COMPONENT_ID = 16

            KSPROPERTY_SYSAUDIO_DEVICE_COUNT = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_COUNT
            KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME
            KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE
            KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME
            KSPROPERTY_SYSAUDIO_SELECT_GRAPH = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_SELECT_GRAPH
            KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE
            KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT
            KSPROPERTY_SYSAUDIO_INSTANCE_INFO = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_INSTANCE_INFO
            KSPROPERTY_SYSAUDIO_COMPONENT_ID = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_COMPONENT_ID
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION < NTDDI_WINXP:
            class KSPROPERTY_SYSAUDIO(ENUM):
                KSPROPERTY_SYSAUDIO_DEVICE_COUNT = 1
                KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME = 2
                KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE = 3
                KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = 4
                KSPROPERTY_SYSAUDIO_SELECT_GRAPH = 5
                KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = 6
                KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT = 7
                KSPROPERTY_SYSAUDIO_ALWAYS_CREATE_VIRTUAL_SOURCE = 8
                KSPROPERTY_SYSAUDIO_ADDREMOVE_LOCK = 9
                KSPROPERTY_SYSAUDIO_ADDREMOVE_UNLOCK = 10
                KSPROPERTY_SYSAUDIO_RENDER_PIN_INSTANCES = 11
                KSPROPERTY_SYSAUDIO_RENDER_CONNECTION_INDEX = 12
                KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE_ONLY = 13
                KSPROPERTY_SYSAUDIO_INSTANCE_INFO = 14
                KSPROPERTY_SYSAUDIO_PREFERRED_DEVICE = 15

            KSPROPERTY_SYSAUDIO_DEVICE_COUNT = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_COUNT
            KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME
            KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE
            KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME
            KSPROPERTY_SYSAUDIO_SELECT_GRAPH = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_SELECT_GRAPH
            KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE
            KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT
            KSPROPERTY_SYSAUDIO_ALWAYS_CREATE_VIRTUAL_SOURCE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_ALWAYS_CREATE_VIRTUAL_SOURCE
            KSPROPERTY_SYSAUDIO_ADDREMOVE_LOCK = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_ADDREMOVE_LOCK
            KSPROPERTY_SYSAUDIO_ADDREMOVE_UNLOCK = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_ADDREMOVE_UNLOCK
            KSPROPERTY_SYSAUDIO_RENDER_PIN_INSTANCES = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_RENDER_PIN_INSTANCES
            KSPROPERTY_SYSAUDIO_RENDER_CONNECTION_INDEX = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_RENDER_CONNECTION_INDEX
            KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE_ONLY = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE_ONLY
            KSPROPERTY_SYSAUDIO_INSTANCE_INFO = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_INSTANCE_INFO
            KSPROPERTY_SYSAUDIO_PREFERRED_DEVICE = KSPROPERTY_SYSAUDIO.KSPROPERTY_SYSAUDIO_PREFERRED_DEVICE
        # END IF   (NTDDI_VERSION < NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_VISTA:
            SYSAUDIO_CREATE_VIRTUAL_SOURCE._fields_ = [
                ('Property', KSPROPERTY),
                ('PinCategory', GUID),
                ('PinName', GUID),
            ]
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION < NTDDI_VISTA:
            SYSAUDIO_SELECT_GRAPH._fields_ = [
                ('Property', KSPROPERTY),
                ('PinId', ULONG),
                ('NodeId', ULONG),
                ('Flags', ULONG),
                ('Reserved', ULONG),
            ]

            SYSAUDIO_INSTANCE_INFO._fields_ = [
                ('Property', KSPROPERTY),
                ('Flags', ULONG),
                ('DeviceNumber', ULONG),
            ]
            SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 0x00000001
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)


        if NTDDI_VERSION < NTDDI_WINXP:
            SYSAUDIO_PREFERRED_DEVICE._fields_ = [
                ('Property', KSPROPERTY),
                ('Flags', ULONG),
                # KSPROPERTY_SYSAUDIO_DEFAULT_TYPE
                ('Index', ULONG),
            ]
            SYSAUDIO_FLAGS_CLEAR_PREFERRED = 0x00000002
        # END IF   (NTDDI_VERSION < NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_VISTA:
            STATIC_KSPROPSETID_Sysaudio_Pin = (
                0xA3A53220,
                0xC6E4,
                0x11D0,
                0xB4,
                0x65,
                0x00,
                0x00,
                0x1A,
                0x18,
                0x18,
                0xE6
            )
            KSPROPSETID_Sysaudio_Pin = DEFINE_GUIDSTRUCT(
                "A3A53220-C6E4-11D0-B465-00001A1818E6"
            )
            KSPROPSETID_Sysaudio_Pin = (
                DEFINE_GUIDNAMED(KSPROPSETID_Sysaudio_Pin)
            )
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)


        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            class KSPROPERTY_SYSAUDIO_PIN(ENUM):
                KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = 1

            KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = KSPROPERTY_SYSAUDIO_PIN.KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        if NTDDI_VERSION < NTDDI_WINXP:
            class KSPROPERTY_SYSAUDIO_PIN(ENUM):
                KSPROPERTY_SYSAUDIO_TOPOLOGY_CONNECTION_INDEX = 1
                KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = 2
                KSPROPERTY_SYSAUDIO_PIN_VOLUME_NODE = 3

            KSPROPERTY_SYSAUDIO_TOPOLOGY_CONNECTION_INDEX = KSPROPERTY_SYSAUDIO_PIN.KSPROPERTY_SYSAUDIO_TOPOLOGY_CONNECTION_INDEX
            KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = KSPROPERTY_SYSAUDIO_PIN.KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE
            KSPROPERTY_SYSAUDIO_PIN_VOLUME_NODE = KSPROPERTY_SYSAUDIO_PIN.KSPROPERTY_SYSAUDIO_PIN_VOLUME_NODE
        # END IF   (NTDDI_VERSION < NTDDI_WINXP)

        if NTDDI_VERSION < NTDDI_VISTA:
            SYSAUDIO_ATTACH_VIRTUAL_SOURCE._fields_ = [
                ('Property', KSPROPERTY),
                ('MixerPinId', ULONG),
                ('Reserved', ULONG),
            ]
        # END IF   (NTDDI_VERSION < NTDDI_VISTA)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        KSNODEPROPERTY._fields_ = [
            ('Property', KSPROPERTY),
            ('NodeId', ULONG),
            ('Reserved', ULONG),
        ]

        KSNODEPROPERTY_AUDIO_CHANNEL._fields_ = [
            ('NodeProperty', KSNODEPROPERTY),
            # value to get or set
            ('Channel', LONG),
            ('Reserved', ULONG),
        ]

        KSNODEPROPERTY_AUDIO_DEV_SPECIFIC._fields_ = [
            ('NodeProperty', KSNODEPROPERTY),
            ('DevSpecificId', ULONG),
            ('DeviceInfo', ULONG),
            ('Length', ULONG),
        ]

        _TEMP_KSNODEPROPERTY_AUDIO_3D_LISTENER = [
            ('NodeProperty', KSNODEPROPERTY),
            ('ListenerId', PVOID),
        ]
        if not defined(_WIN64):
                _TEMP_KSNODEPROPERTY_AUDIO_3D_LISTENER += [
                ('Reserved', ULONG),
                ]
            # END IF   _WIN64


                KSNODEPROPERTY_AUDIO_3D_LISTENER._fields_ = _TEMP_KSNODEPROPERTY_AUDIO_3D_LISTENER

        _TEMP_KSNODEPROPERTY_AUDIO_PROPERTY = [
            ('NodeProperty', KSNODEPROPERTY),
            ('AppContext', PVOID),
            ('Length', ULONG),
        ]
        if not defined(_WIN64):
                _TEMP_KSNODEPROPERTY_AUDIO_PROPERTY += [
                ('Reserved', ULONG),
                ]
            # END IF   _WIN64


                KSNODEPROPERTY_AUDIO_PROPERTY._fields_ = _TEMP_KSNODEPROPERTY_AUDIO_PROPERTY
        if NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA:
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            # {79A9312E-59AE-43b0-A350-8B05284CAB24}
            STATIC_KSPROPSETID_AudioGfx = (
                0x79A9312E,
                0x59AE,
                0x43B0,
                0xA3,
                0x50,
                0x8B,
                0x5,
                0x28,
                0x4C,
                0xAB,
                0x24
            )
            KSPROPSETID_AudioGfx = DEFINE_GUIDSTRUCT(
                "79A9312E-59AE-43b0-A350-8B05284CAB24"
            )
            KSPROPSETID_AudioGfx = DEFINE_GUIDNAMED(KSPROPSETID_AudioGfx)


            class KSPROPERTY_AUDIOGFX(ENUM):
                KSPROPERTY_AUDIOGFX_RENDERTARGETDEVICEID = 1
                KSPROPERTY_AUDIOGFX_CAPTURETARGETDEVICEID = 2

            KSPROPERTY_AUDIOGFX_RENDERTARGETDEVICEID = KSPROPERTY_AUDIOGFX.KSPROPERTY_AUDIOGFX_RENDERTARGETDEVICEID
            KSPROPERTY_AUDIOGFX_CAPTURETARGETDEVICEID = KSPROPERTY_AUDIOGFX.KSPROPERTY_AUDIOGFX_CAPTURETARGETDEVICEID
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP and NTDDI_VERSION < NTDDI_VISTA)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION < NTDDI_WS03:
            STATIC_KSPROPSETID_Linear = (
                0x5A2FFE80,
                0x16B9,
                0x11D0,
                0xA5,
                0xD6,
                0x28,
                0xDB,
                0x04,
                0xC1,
                0x00,
                0x00
            )
            KSPROPSETID_Linear = DEFINE_GUIDSTRUCT(
                "5A2FFE80-16B9-11D0-A5D6-28DB04C10000"
            )
            KSPROPSETID_Linear = DEFINE_GUIDNAMED(KSPROPSETID_Linear)


            class KSPROPERTY_LINEAR(ENUM):
                KSPROPERTY_LINEAR_POSITION = 1

            KSPROPERTY_LINEAR_POSITION = KSPROPERTY_LINEAR.KSPROPERTY_LINEAR_POSITION
        # END IF   (NTDDI_VERSION < NTDDI_WS03)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Midi definitions
        # /* Formats
        STATIC_KSDATAFORMAT_TYPE_MUSIC = (
            0xE725D360,
            0x62CC,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSDATAFORMAT_TYPE_MUSIC = DEFINE_GUIDSTRUCT(
            "E725D360-62CC-11CF-A5D6-28DB04C10000"
        )
        KSDATAFORMAT_TYPE_MUSIC = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_MUSIC)

        # 'mids' == MEDIATYPE_Midi
        STATIC_KSDATAFORMAT_TYPE_MIDI = (
            0x7364696D,
            0x0000,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_TYPE_MIDI = DEFINE_GUIDSTRUCT(
            "7364696D-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_TYPE_MIDI = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_MIDI)
        STATIC_KSDATAFORMAT_SUBTYPE_MIDI = (
            0x1D262760,
            0xE957,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSDATAFORMAT_SUBTYPE_MIDI = DEFINE_GUIDSTRUCT(
            "1D262760-E957-11CF-A5D6-28DB04C10000"
        )
        KSDATAFORMAT_SUBTYPE_MIDI = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MIDI)
        STATIC_KSDATAFORMAT_SUBTYPE_MIDI_BUS = (
            0x2CA15FA0,
            0x6CFE,
            0x11CF,
            0xA5,
            0xD6,
            0x28,
            0xDB,
            0x04,
            0xC1,
            0x00,
            0x00
        )
        KSDATAFORMAT_SUBTYPE_MIDI_BUS = DEFINE_GUIDSTRUCT(
            "2CA15FA0-6CFE-11CF-A5D6-28DB04C10000"
        )
        KSDATAFORMAT_SUBTYPE_MIDI_BUS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MIDI_BUS)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_RIFFMIDI = (
            0x4995DAF0,
            0x9EE6,
            0x11D0,
            0xA4,
            0x0E,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSDATAFORMAT_SUBTYPE_RIFFMIDI = DEFINE_GUIDSTRUCT(
            "4995DAF0-9EE6-11D0-A40E-00A0C9223196"
        )
        KSDATAFORMAT_SUBTYPE_RIFFMIDI = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_RIFFMIDI)
        )

        # /* KSDATAFORMAT_SUBTYPE_DIRECTMUSIC see DMusicKS.h
        # WARNINGnot This structure MUST be dword aligned
        # regardless of the number of data bytes.
        # Delta Milliseconds from the previous midiformat
        KSMUSICFORMAT._fields_ = [
            ('TimeDeltaMs', ULONG),
            # Number of bytes of data that follow this struct.
            ('ByteCount', ULONG),
        ]


        # This entire set of MPEG Standard/Dialect Guids are obsolete. Do not
        # use them.
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # The following official MPEG Formats, Subtypes and Specifiers are
        # listed as required or optional
        # These official MPEG GUIDs are the preferred method of supporting
        # MPEG/AC-3 media types in new code.
        # Older MPEG GUIDs should also be supported for compatibilty, but
        # these new modes are still required.
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # /* This is a summary of what media types/specifiers will be required
        # for all DVD + DSS + DVB + DTV MPEG decoders. These media types are
        # what the decoder driver must accept, hardware support for all of
        # these media types may or may not actually be provided by the decoder
        # natively. These media types are intended to define the "officially"
        # supported MPEG/AC-3 media types that all WHQL certified decoders
        # must implement. This specifically includes driver and/or hardware
        # support for all the required standards and dialects. All MPEG video
        # decoders must support all of the MPEG video modes shown as
        # [required] below. All MPEG audio decoders must support all of the
        # MPEG audio modes shown as [required] below. All AC-3 audio decoders
        # must support all of the AC-3 audio modes shown as [required] below.
        # The line items shown as [optional] need not be implemented, but are
        # possible formats that might be implemented. Note that the
        # input/output pin formats are defined by 2 or 3 GUIDs: TYPE, SUBTYPE,
        # and maybe SPECIFIER. The specifiers are included if the data format
        # is a "dialect" that needs to be differentiated during decoding. The
        # decoder MUST be prepared to deal with ALL requests for _required_
        # "Standard" formats OR _required_ "Dialects".
        # STATIC_KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM [required]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO [required]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO [optional]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO [required]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO [optional]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO [required]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO [required]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO [required]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO [optional]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO [required]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO [optional]
        # STATIC_KSDATAFORMAT_TYPE_STANDARD_PES_PACKET [required]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO [optional]
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO [optional]
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO [required]
        # STATIC_KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER [required] Note that
        # the SPECIFIER GUIDs normally identify particular versions of MPEG
        # such as DSS and DVD. This approach was taken to minimize the number
        # of DSS/DVB/DVD/DTV etc. media SUBTYPES. These specifiers are
        # currently required to disambiguate MPEG syntax _parsing_ by the
        # decoder using alternate parsing routines or downloadable firmware or
        # hardware decode settings. In the future these specifiers will be
        # extended to cover new KS MPEG flavors such as DVB and DTV. Thus, the
        # optional specifiers will be subject to clarification and/or
        # definition as they are needed. Important note: Per the ITU MPEG
        # specs, MPEG 2 media may contain pure MPEG 1 syntax and any "MPEG 2"
        # PES packets may actually contain MPEG 1 payloads and MPEG 1 syntax.
        # Some MPEG broadcasts can revert from MPEG2 to MPEG1 format data at
        # their discretion, without warning. CAUTION: Decoders MUST attempt to
        # process MPEG data AS SOON AS POSSIBLE after reception. In
        # particular, elementary MPEG or MPEG PES packet streams should not be
        # aggregated into DVD "pack headers" internally before submission to
        # the codec hardware if AT ALL POSSIBLE. The reason is that mpeg data
        # may need to be processed immediately but there may be no additional
        # MPEG data forthcoming to fill up the PES packet OR DVD "pack" in a
        # timely fashion. This is particularly true of MPEG dialects that
        # utilize "repeat field signally" to reuse the last decoded MPEG video
        # field.
        # ///////////////////////////////////////////////////////////////////////
        #
        # The major data type GUIDs that define the data packet encapsulation
        # //
        # ///////////////////////////////////////////////////////////////////////
        #
        # STATIC_KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM
        STATIC_KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM = (
            0x36523B11,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM = DEFINE_GUIDSTRUCT(
            "36523B11-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM)
        )

        # STATIC_KSDATAFORMAT_TYPE_STANDARD_PES_PACKET
        STATIC_KSDATAFORMAT_TYPE_STANDARD_PES_PACKET = (
            0x36523B12,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_TYPE_STANDARD_PES_PACKET = DEFINE_GUIDSTRUCT(
            "36523B12-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_TYPE_STANDARD_PES_PACKET = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_STANDARD_PES_PACKET)
        )

        # STATIC_KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER
        STATIC_KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER = (
            0x36523B13,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER = DEFINE_GUIDSTRUCT(
            "36523B13-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER)
        )

        # /////////////////////////////////////////////////////////////////////////////
        #
        # The minor data subtype GUIDs that define the exact class of the data
        # type.//
        # /////////////////////////////////////////////////////////////////////////////
        #
        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO
        STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO = (
            0x36523B21,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO = DEFINE_GUIDSTRUCT(
            "36523B21-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO)
        )

        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO
        STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO = (
            0x36523B22,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B22-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO)
        )

        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO
        STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO = (
            0x36523B23,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO = DEFINE_GUIDSTRUCT(
            "36523B23-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO)
        )

        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO
        STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO = (
            0x36523B24,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B24-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO)
        )

        # STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO
        STATIC_KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO = (
            0x36523B25,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B25-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO)
        )

        # /////////////////////////////////////////////////////////////////////////////
        #
        # The low-level specifier GUIDs that define the flavor of the data
        # subtype. //
        # Some SUBTYPES, notably MPEG2_VIDEO, MPEG2_AUDIO have different
        # dialects. //
        # These specifiers are intended to be accompanied by a specifier
        # structure. //
        # /////////////////////////////////////////////////////////////////////////////
        #
        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO
        STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO = (
            0x36523B31,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO = DEFINE_GUIDSTRUCT(
            "36523B31-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO)
        )

        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO
        STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO = (
            0x36523B32,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B32-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO)
        )

        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO Associated with
        # KS_MPEGVIDEOINFO2 defined later
        STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO = (
            0x36523B33,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO = DEFINE_GUIDSTRUCT(
            "36523B33-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO)
        )

        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO Associated with
        # KS_MPEGAUDIOINFO defined later
        STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO = (
            0x36523B34,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B34-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO)
        )

        # STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO
        STATIC_KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO = (
            0x36523B35,
            0x8EE5,
            0x11D1,
            0x8C,
            0xA3,
            0x00,
            0x60,
            0xB0,
            0x57,
            0x66,
            0x4A
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO = DEFINE_GUIDSTRUCT(
            "36523B35-8EE5-11d1-8CA3-0060B057664A"
        )
        KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO)
        )

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # *** COMPATIBILITY WARNING ***
        # The *following* older DSS, MPEG, DVD & AC-3 GUID definitions are
        # retained for backward compability.
        # These MPEG GUIDs should also be supported for compatibilty, but the
        # above newer modes are still required.
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == ==
        # DSS definitions
        STATIC_KSDATAFORMAT_SUBTYPE_DSS_VIDEO = (
            0xA0AF4F81,
            0xE163,
            0x11D0,
            0xBA,
            0xD9,
            0x00,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSDATAFORMAT_SUBTYPE_DSS_VIDEO = DEFINE_GUIDSTRUCT(
            "a0af4f81-e163-11d0-bad9-00609744111a"
        )
        KSDATAFORMAT_SUBTYPE_DSS_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_DSS_VIDEO)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_DSS_AUDIO = (
            0xA0AF4F82,
            0xE163,
            0x11D0,
            0xBA,
            0xD9,
            0x00,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSDATAFORMAT_SUBTYPE_DSS_AUDIO = DEFINE_GUIDSTRUCT(
            "a0af4f82-e163-11d0-bad9-00609744111a"
        )
        KSDATAFORMAT_SUBTYPE_DSS_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_DSS_AUDIO)
        )


        # End of obsolete MPEG definitions.
        # mpeg 1 definitions
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG1Packet = (
            0xE436EB80,
            0x524F,
            0x11CE,
            0x9F,
            0x53,
            0x00,
            0x20,
            0xAF,
            0x0B,
            0xA7,
            0x70
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Packet = DEFINE_GUIDSTRUCT(
            "e436eb80-524f-11ce-9F53-0020af0ba770"
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Packet = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG1Packet)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG1Payload = (
            0xE436EB81,
            0x524F,
            0x11CE,
            0x9F,
            0x53,
            0x00,
            0x20,
            0xAF,
            0x0B,
            0xA7,
            0x70
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Payload = DEFINE_GUIDSTRUCT(
            "e436eb81-524f-11ce-9F53-0020af0ba770"
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Payload = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG1Payload)
        )

        # MEDIASUBTYPE_MPEG1Video
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG1Video = (
            0xE436EB86,
            0x524F,
            0x11CE,
            0x9F,
            0x53,
            0x00,
            0x20,
            0xAF,
            0x0B,
            0xA7,
            0x70
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Video = DEFINE_GUIDSTRUCT(
            "e436eb86-524f-11ce-9f53-0020af0ba770"
        )
        KSDATAFORMAT_SUBTYPE_MPEG1Video = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG1Video)
        )

        # FORMAT_MPEGVideo
        STATIC_KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO = (
            0x05589F82,
            0xC356,
            0x11CE,
            0xBF,
            0x01,
            0x00,
            0xAA,
            0x00,
            0x55,
            0x59,
            0x5A
        )
        KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO = DEFINE_GUIDSTRUCT(
            "05589f82-c356-11ce-bf01-00aa0055595a"
        )
        KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO)
        )


        # mpeg 2 definitions
        STATIC_KSDATAFORMAT_TYPE_MPEG2_PES = (
            0xE06D8020,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_TYPE_MPEG2_PES = DEFINE_GUIDSTRUCT(
            "e06d8020-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_TYPE_MPEG2_PES = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_MPEG2_PES)
        )
        STATIC_KSDATAFORMAT_TYPE_MPEG2_PROGRAM = (
            0xE06D8022,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_TYPE_MPEG2_PROGRAM = DEFINE_GUIDSTRUCT(
            "e06d8022-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_TYPE_MPEG2_PROGRAM = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_MPEG2_PROGRAM)
        )
        STATIC_KSDATAFORMAT_TYPE_MPEG2_TRANSPORT = (
            0xE06D8023,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_TYPE_MPEG2_TRANSPORT = DEFINE_GUIDSTRUCT(
            "e06d8023-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_TYPE_MPEG2_TRANSPORT = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_MPEG2_TRANSPORT)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO = (
            0xE06D8026,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO = DEFINE_GUIDSTRUCT(
            "e06d8026-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO)
        )

        # use MPEGVIDEOINFO2 (defined below) with
        # KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO
        STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO = (
            0xE06D80E3,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO = DEFINE_GUIDSTRUCT(
            "e06d80e3-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO)
        )


        # Mpeg2 video properties
        STATIC_KSPROPSETID_Mpeg2Vid = (
            0xC8E11B60,
            0x0CC9,
            0x11D0,
            0xBD,
            0x69,
            0x00,
            0x35,
            0x05,
            0xC1,
            0x03,
            0xA9
        )
        KSPROPSETID_Mpeg2Vid = DEFINE_GUIDSTRUCT(
            "C8E11B60-0CC9-11D0-BD69-003505C103A9"
        )
        KSPROPSETID_Mpeg2Vid = DEFINE_GUIDNAMED( KSPROPSETID_Mpeg2Vid )


        class KSPROPERTY_MPEG2VID(ENUM):
            KSPROPERTY_MPEG2VID_MODES = 1
            KSPROPERTY_MPEG2VID_CUR_MODE = 2
            KSPROPERTY_MPEG2VID_4_3_RECT = 3
            KSPROPERTY_MPEG2VID_16_9_RECT = 4
            KSPROPERTY_MPEG2VID_16_9_PANSCAN = 5

        KSPROPERTY_MPEG2VID_MODES = KSPROPERTY_MPEG2VID.KSPROPERTY_MPEG2VID_MODES
        KSPROPERTY_MPEG2VID_CUR_MODE = KSPROPERTY_MPEG2VID.KSPROPERTY_MPEG2VID_CUR_MODE
        KSPROPERTY_MPEG2VID_4_3_RECT = KSPROPERTY_MPEG2VID.KSPROPERTY_MPEG2VID_4_3_RECT
        KSPROPERTY_MPEG2VID_16_9_RECT = KSPROPERTY_MPEG2VID.KSPROPERTY_MPEG2VID_16_9_RECT
        KSPROPERTY_MPEG2VID_16_9_PANSCAN = KSPROPERTY_MPEG2VID.KSPROPERTY_MPEG2VID_16_9_PANSCAN


        # bit field definitions for MPEG2 VIDEO mode
        KSMPEGVIDMODE_PANSCAN = 0x0001
        KSMPEGVIDMODE_LTRBOX = 0x0002
        KSMPEGVIDMODE_SCALE = 0x0004


        # rectangle definitions for the 4/3 and 16/9 cropping properties of
        # the MPEG2Video decoder
        _KSMPEGVID_RECT._fields_ = [
            ('StartX', ULONG),
            ('StartY', ULONG),
            ('EndX', ULONG),
            ('EndY', ULONG),
        ]


        # Params for pan / scan
        # MPEG2 Audio definition
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO = (
            0xE06D802B,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d802b-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO)
        )
        STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO = (
            0xE06D80E5,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d80e5-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO)
        )


        # DVD LPCM Audio definition
        STATIC_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO = (
            0xE06D8032,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SUBTYPE_LPCM_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d8032-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SUBTYPE_LPCM_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_LPCM_AUDIO)
        )
        STATIC_KSDATAFORMAT_SPECIFIER_LPCM_AUDIO = (
            0xE06D80E6,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SPECIFIER_LPCM_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d80e6-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SPECIFIER_LPCM_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_LPCM_AUDIO)
        )


        # AC-3 definition
        STATIC_KSDATAFORMAT_SUBTYPE_AC3_AUDIO = (
            0xE06D802C,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SUBTYPE_AC3_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d802c-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SUBTYPE_AC3_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_AC3_AUDIO)
        )
        STATIC_KSDATAFORMAT_SPECIFIER_AC3_AUDIO = (
            0xE06D80E4,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SPECIFIER_AC3_AUDIO = DEFINE_GUIDSTRUCT(
            "e06d80e4-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SPECIFIER_AC3_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_AC3_AUDIO)
        )
        STATIC_KSPROPSETID_AC3 = (
            0xBFABE720,
            0x6E1F,
            0x11D0,
            0xBC,
            0xF2,
            0x44,
            0x45,
            0x53,
            0x54,
            0x00,
            0x00
        )
        KSPROPSETID_AC3 = DEFINE_GUIDSTRUCT(
            "BFABE720-6E1F-11D0-BCF2-444553540000"
        )
        KSPROPSETID_AC3 = DEFINE_GUIDNAMED(KSPROPSETID_AC3)


        class KSPROPERTY_AC3(ENUM):
            KSPROPERTY_AC3_ERROR_CONCEALMENT = 1
            KSPROPERTY_AC3_ALTERNATE_AUDIO = 2
            KSPROPERTY_AC3_DOWNMIX = 3
            KSPROPERTY_AC3_BIT_STREAM_MODE = 4
            KSPROPERTY_AC3_DIALOGUE_LEVEL = 5
            KSPROPERTY_AC3_LANGUAGE_CODE = 6
            KSPROPERTY_AC3_ROOM_TYPE = 7

        KSPROPERTY_AC3_ERROR_CONCEALMENT = KSPROPERTY_AC3.KSPROPERTY_AC3_ERROR_CONCEALMENT
        KSPROPERTY_AC3_ALTERNATE_AUDIO = KSPROPERTY_AC3.KSPROPERTY_AC3_ALTERNATE_AUDIO
        KSPROPERTY_AC3_DOWNMIX = KSPROPERTY_AC3.KSPROPERTY_AC3_DOWNMIX
        KSPROPERTY_AC3_BIT_STREAM_MODE = KSPROPERTY_AC3.KSPROPERTY_AC3_BIT_STREAM_MODE
        KSPROPERTY_AC3_DIALOGUE_LEVEL = KSPROPERTY_AC3.KSPROPERTY_AC3_DIALOGUE_LEVEL
        KSPROPERTY_AC3_LANGUAGE_CODE = KSPROPERTY_AC3.KSPROPERTY_AC3_LANGUAGE_CODE
        KSPROPERTY_AC3_ROOM_TYPE = KSPROPERTY_AC3.KSPROPERTY_AC3_ROOM_TYPE

        KSAC3_ERROR_CONCEALMENT._fields_ = [
            ('fRepeatPreviousBlock', BOOL),
            ('fErrorInCurrentBlock', BOOL),
        ]

        KSAC3_ALTERNATE_AUDIO._fields_ = [
            ('fStereo', BOOL),
            ('DualMode', ULONG),
        ]
        KSAC3_ALTERNATE_AUDIO_1 = 1
        KSAC3_ALTERNATE_AUDIO_2 = 2
        KSAC3_ALTERNATE_AUDIO_BOTH = 3


        KSAC3_DOWNMIX._fields_ = [
            ('fDownMix', BOOL),
            ('fDolbySurround', BOOL),
        ]

        KSAC3_BIT_STREAM_MODE._fields_ = [
            ('BitStreamMode', LONG),
        ]
        KSAC3_SERVICE_MAIN_AUDIO = 0
        KSAC3_SERVICE_NO_DIALOG = 1
        KSAC3_SERVICE_VISUALLY_IMPAIRED = 2
        KSAC3_SERVICE_HEARING_IMPAIRED = 3
        KSAC3_SERVICE_DIALOG_ONLY = 4
        KSAC3_SERVICE_COMMENTARY = 5
        KSAC3_SERVICE_EMERGENCY_FLASH = 6
        KSAC3_SERVICE_VOICE_OVER = 7


        KSAC3_DIALOGUE_LEVEL._fields_ = [
            ('DialogueLevel', ULONG),
        ]

        KSAC3_ROOM_TYPE._fields_ = [
            ('fLargeRoom', BOOL),
        ]

        from pyWinAPI.shared.mmreg_h import * # NOQA

        # New formats enabled by CEA 861 specifciation
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_DOLBY_AC3_SPDIF)
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL = DEFINE_GUIDSTRUCT(
            "00000092-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_WMASPDIF)
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO = DEFINE_GUIDSTRUCT(
            "00000164-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DTS = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_DTS)
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DTS = DEFINE_GUIDSTRUCT(
            "00000008-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DTS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DTS)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1 = (
            0x00000003,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1 = DEFINE_GUIDSTRUCT(
            "00000003-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2 = (
            0x00000004,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2 = DEFINE_GUIDSTRUCT(
            "00000004-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3 = (
            0x00000005,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3 = DEFINE_GUIDSTRUCT(
            "00000005-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_AAC = (
            0x00000006,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_AAC = DEFINE_GUIDSTRUCT(
            "00000006-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_AAC = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_AAC)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC = (
            0x00000008,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC = DEFINE_GUIDSTRUCT(
            "00000008-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO = (
            0x00000009,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO = DEFINE_GUIDSTRUCT(
            "00000009-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS = (
            0x0000000A,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS = DEFINE_GUIDSTRUCT(
            "0000000a-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS = (
            0x0000010A,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS = DEFINE_GUIDSTRUCT(
            "0000010a-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD = (
            0x0000000B,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD = DEFINE_GUIDSTRUCT(
            "0000000b-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP = (
            0x0000000C,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP = DEFINE_GUIDSTRUCT(
            "0000000c-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20 = (
            0x0000010C,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20 = DEFINE_GUIDSTRUCT(
            "0000010c-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21 = (
            0x0000030C,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21 = DEFINE_GUIDSTRUCT(
            "0000030c-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_IEC61937_DST = (
            0x0000000D,
            0x0CEA,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DST = DEFINE_GUIDSTRUCT(
            "0000000d-0cea-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IEC61937_DST = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IEC61937_DST)
        )

        # MP3
        STATIC_KSDATAFORMAT_SUBTYPE_MPEGLAYER3 = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_MPEGLAYER3)
        )
        KSDATAFORMAT_SUBTYPE_MPEGLAYER3 = DEFINE_GUIDSTRUCT(
            "00000055-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_MPEGLAYER3 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEGLAYER3)
        )

        # AAC
        STATIC_KSDATAFORMAT_SUBTYPE_MPEG_HEAAC = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_MPEG_HEAAC)
        )
        KSDATAFORMAT_SUBTYPE_MPEG_HEAAC = DEFINE_GUIDSTRUCT(
            "00001610-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_MPEG_HEAAC = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MPEG_HEAAC)
        )

        # WMA STD
        STATIC_KSDATAFORMAT_SUBTYPE_WMAUDIO2 = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_WMAUDIO2)
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO2 = DEFINE_GUIDSTRUCT(
            "00000161-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO2 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_WMAUDIO2)
        )

        # WMA PRO
        STATIC_KSDATAFORMAT_SUBTYPE_WMAUDIO3 = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_WMAUDIO3)
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO3 = DEFINE_GUIDSTRUCT(
            "00000162-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO3 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_WMAUDIO3)
        )

        # WMA LOSSLESS
        STATIC_KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS = (
            DEFINE_WAVEFORMATEX_GUID(WAVE_FORMAT_WMAUDIO_LOSSLESS)
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS = DEFINE_GUIDSTRUCT(
            "00000163-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS)
        )

        if NTDDI_VERSION >= NTDDI_WINXP:
            # DTS and SDDS definitions (media subtype GUIDs)
            STATIC_KSDATAFORMAT_SUBTYPE_DTS_AUDIO = (
                0xE06D8033,
                0xDB46,
                0x11CF,
                0xB4,
                0xD1,
                0x00,
                0x80,
                0x5F,
                0x6C,
                0xBB,
                0xEA
            )
            KSDATAFORMAT_SUBTYPE_DTS_AUDIO = DEFINE_GUIDSTRUCT(
                "e06d8033-db46-11cf-b4d1-00805f6cbbea"
            )
            KSDATAFORMAT_SUBTYPE_DTS_AUDIO = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_DTS_AUDIO)
            )
            STATIC_KSDATAFORMAT_SUBTYPE_SDDS_AUDIO = (
                0xE06D8034,
                0xDB46,
                0x11CF,
                0xB4,
                0xD1,
                0x00,
                0x80,
                0x5F,
                0x6C,
                0xBB,
                0xEA
            )
            KSDATAFORMAT_SUBTYPE_SDDS_AUDIO = DEFINE_GUIDSTRUCT(
                "e06d8034-db46-11cf-b4d1-00805f6cbbea"
            )
            KSDATAFORMAT_SUBTYPE_SDDS_AUDIO = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_SDDS_AUDIO)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)


        # audio decoder output properties
        STATIC_KSPROPSETID_AudioDecoderOut = (
            0x6CA6E020,
            0x43BD,
            0x11D0,
            0xBD,
            0x6A,
            0x00,
            0x35,
            0x05,
            0xC1,
            0x03,
            0xA9
        )
        KSPROPSETID_AudioDecoderOut = DEFINE_GUIDSTRUCT(
            "6ca6e020-43bd-11d0-bd6a-003505c103a9"
        )
        KSPROPSETID_AudioDecoderOut = (
            DEFINE_GUIDNAMED(KSPROPSETID_AudioDecoderOut)
        )


        class KSPROPERTY_AUDDECOUT(ENUM):
            KSPROPERTY_AUDDECOUT_MODES = 1
            KSPROPERTY_AUDDECOUT_CUR_MODE = 2

        KSPROPERTY_AUDDECOUT_MODES = KSPROPERTY_AUDDECOUT.KSPROPERTY_AUDDECOUT_MODES
        KSPROPERTY_AUDDECOUT_CUR_MODE = KSPROPERTY_AUDDECOUT.KSPROPERTY_AUDDECOUT_CUR_MODE
        KSAUDDECOUTMODE_STEREO_ANALOG = 0x0001
        KSAUDDECOUTMODE_PCM_51 = 0x0002
        KSAUDDECOUTMODE_SPDIFF = 0x0004


        # subpicture definition
        STATIC_KSDATAFORMAT_SUBTYPE_SUBPICTURE = (
            0xE06D802D,
            0xDB46,
            0x11CF,
            0xB4,
            0xD1,
            0x00,
            0x80,
            0x5F,
            0x6C,
            0xBB,
            0xEA
        )
        KSDATAFORMAT_SUBTYPE_SUBPICTURE = DEFINE_GUIDSTRUCT(
            "e06d802d-db46-11cf-b4d1-00805f6cbbea"
        )
        KSDATAFORMAT_SUBTYPE_SUBPICTURE = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_SUBPICTURE)
        )
        STATIC_KSPROPSETID_DvdSubPic = (
            0xAC390460,
            0x43AF,
            0x11D0,
            0xBD,
            0x6A,
            0x00,
            0x35,
            0x05,
            0xC1,
            0x03,
            0xA9
        )
        KSPROPSETID_DvdSubPic = DEFINE_GUIDSTRUCT(
            "ac390460-43af-11d0-bd6a-003505c103a9"
        )
        KSPROPSETID_DvdSubPic = DEFINE_GUIDNAMED(KSPROPSETID_DvdSubPic)


        class KSPROPERTY_DVDSUBPIC(ENUM):
            KSPROPERTY_DVDSUBPIC_PALETTE = 1
            KSPROPERTY_DVDSUBPIC_HLI = 2
            KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 3

        KSPROPERTY_DVDSUBPIC_PALETTE = KSPROPERTY_DVDSUBPIC.KSPROPERTY_DVDSUBPIC_PALETTE
        KSPROPERTY_DVDSUBPIC_HLI = KSPROPERTY_DVDSUBPIC.KSPROPERTY_DVDSUBPIC_HLI
        KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = KSPROPERTY_DVDSUBPIC.KSPROPERTY_DVDSUBPIC_COMPOSIT_ON

        _KS_DVD_YCrCb._fields_ = [
            ('Reserved', UCHAR),
            ('Y', UCHAR),
            ('Cr', UCHAR),
            ('Cb', UCHAR),
        ]

        # /* The KS_DVD_YUV structure is now superseded by KS_DVD_YCrCb above
        # and is here for backward compatibility only
        _KS_DVD_YUV._fields_ = [
            ('Reserved', UCHAR),
            ('Y', UCHAR),
            ('V', UCHAR),
            ('U', UCHAR),
        ]

        _KSPROPERTY_SPPAL._fields_ = [
            ('sppal', KS_DVD_YUV * 16),
        ]

        _KS_COLCON._fields_ = [
            ('emph1col', UCHAR, 4),
            ('emph2col', UCHAR, 4),
            ('backcol', UCHAR, 4),
            ('patcol', UCHAR, 4),
            ('emph1con', UCHAR, 4),
            ('emph2con', UCHAR, 4),
            ('backcon', UCHAR, 4),
            ('patcon', UCHAR, 4),
        ]

        _KSPROPERTY_SPHLI._fields_ = [
            ('HLISS', USHORT),
            ('Reserved', USHORT),
            # start presentation time in x/90000
            ('StartPTM', ULONG),
            # end PTM in x/90000
            ('EndPTM', ULONG),
            ('StartX', USHORT),
            ('StartY', USHORT),
            ('StopX', USHORT),
            ('StopY', USHORT),
            # color contrast description (4 bytes as given in HLI)
            ('ColCon', KS_COLCON),
        ]
        KSPROPERTY_COMPOSIT_ON = BOOL
        PKSPROPERTY_COMPOSIT_ON = POINTER(BOOL)
        STATIC_KSPROPSETID_CopyProt = (
            0x0E8A0A40,
            0x6AEF,
            0x11D0,
            0x9E,
            0xD0,
            0x00,
            0xA0,
            0x24,
            0xCA,
            0x19,
            0xB3
        )
        KSPROPSETID_CopyProt = DEFINE_GUIDSTRUCT(
            "0E8A0A40-6AEF-11D0-9ED0-00A024CA19B3"
        )
        KSPROPSETID_CopyProt = DEFINE_GUIDNAMED(KSPROPSETID_CopyProt)


        class KSPROPERTY_COPYPROT(ENUM):
            KSPROPERTY_DVDCOPY_CHLG_KEY = 0x01
            KSPROPERTY_DVDCOPY_DVD_KEY1 = 2
            KSPROPERTY_DVDCOPY_DEC_KEY2 = 3
            KSPROPERTY_DVDCOPY_TITLE_KEY = 4
            KSPROPERTY_COPY_MACROVISION = 5
            KSPROPERTY_DVDCOPY_REGION = 6
            KSPROPERTY_DVDCOPY_SET_COPY_STATE = 7
            KSPROPERTY_DVDCOPY_DISC_KEY = 0x80

        KSPROPERTY_DVDCOPY_CHLG_KEY = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_CHLG_KEY
        KSPROPERTY_DVDCOPY_DVD_KEY1 = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_DVD_KEY1
        KSPROPERTY_DVDCOPY_DEC_KEY2 = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_DEC_KEY2
        KSPROPERTY_DVDCOPY_TITLE_KEY = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_TITLE_KEY
        KSPROPERTY_COPY_MACROVISION = KSPROPERTY_COPYPROT.KSPROPERTY_COPY_MACROVISION
        KSPROPERTY_DVDCOPY_REGION = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_REGION
        KSPROPERTY_DVDCOPY_SET_COPY_STATE = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_SET_COPY_STATE
        KSPROPERTY_DVDCOPY_DISC_KEY = KSPROPERTY_COPYPROT.KSPROPERTY_DVDCOPY_DISC_KEY

        _KS_DVDCOPY_CHLGKEY._fields_ = [
            ('ChlgKey', BYTE * 10),
            ('Reserved', BYTE * 2),
        ]

        _KS_DVDCOPY_BUSKEY._fields_ = [
            ('BusKey', BYTE * 5),
            ('Reserved', BYTE * 1),
        ]

        _KS_DVDCOPY_DISCKEY._fields_ = [
            ('DiscKey', BYTE * 2048),
        ]

        _KS_DVDCOPY_REGION._fields_ = [
            ('Reserved', UCHAR),
            ('RegionData', UCHAR),
            ('Reserved2', UCHAR * 2),
        ]

        _KS_DVDCOPY_TITLEKEY._fields_ = [
            ('KeyFlags', ULONG),
            ('ReservedNT', ULONG * 2),
            ('TitleKey', UCHAR * 6),
            ('Reserved', UCHAR * 2),
        ]

        _KS_COPY_MACROVISION._fields_ = [
            ('MACROVISIONLevel', ULONG),
        ]

        _KS_DVDCOPY_SET_COPY_STATE._fields_ = [
            ('DVDCopyState', ULONG),
        ]


        class KS_DVDCOPYSTATE(ENUM):
            KS_DVDCOPYSTATE_INITIALIZE = 1
            KS_DVDCOPYSTATE_INITIALIZE_TITLE = 2
            KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 3
            KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 4
            KS_DVDCOPYSTATE_DONE = 5

        KS_DVDCOPYSTATE_INITIALIZE = KS_DVDCOPYSTATE.KS_DVDCOPYSTATE_INITIALIZE
        KS_DVDCOPYSTATE_INITIALIZE_TITLE = KS_DVDCOPYSTATE.KS_DVDCOPYSTATE_INITIALIZE_TITLE
        KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = KS_DVDCOPYSTATE.KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED
        KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = KS_DVDCOPYSTATE.KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED
        KS_DVDCOPYSTATE_DONE = KS_DVDCOPYSTATE.KS_DVDCOPYSTATE_DONE


        class KS_COPY_MACROVISION_LEVEL(ENUM):
            KS_MACROVISION_DISABLED = 1
            KS_MACROVISION_LEVEL1 = 2
            KS_MACROVISION_LEVEL2 = 3
            KS_MACROVISION_LEVEL3 = 4

        PKS_COPY_MACROVISION_LEVEL = POINTER(KS_COPY_MACROVISION_LEVEL)


        KS_MACROVISION_DISABLED = KS_COPY_MACROVISION_LEVEL.KS_MACROVISION_DISABLED
        KS_MACROVISION_LEVEL1 = KS_COPY_MACROVISION_LEVEL.KS_MACROVISION_LEVEL1
        KS_MACROVISION_LEVEL2 = KS_COPY_MACROVISION_LEVEL.KS_MACROVISION_LEVEL2
        KS_MACROVISION_LEVEL3 = KS_COPY_MACROVISION_LEVEL.KS_MACROVISION_LEVEL3


        # CGMS Copy Protection Flags
        KS_DVD_CGMS_RESERVED_MASK = 0x00000078
        KS_DVD_CGMS_COPY_PROTECT_MASK = 0x00000018
        KS_DVD_CGMS_COPY_PERMITTED = 0x00000000
        KS_DVD_CGMS_COPY_ONCE = 0x00000010
        KS_DVD_CGMS_NO_COPY = 0x00000018
        KS_DVD_COPYRIGHT_MASK = 0x00000040
        KS_DVD_NOT_COPYRIGHTED = 0x00000000
        KS_DVD_COPYRIGHTED = 0x00000040
        KS_DVD_SECTOR_PROTECT_MASK = 0x00000020
        KS_DVD_SECTOR_NOT_PROTECTED = 0x00000000
        KS_DVD_SECTOR_PROTECTED = 0x00000020

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # The following MUST match the structures in WinGDI.h and AMVideo.h
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSCATEGORY_TVTUNER = (
            0xA799A800,
            0xA46D,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0x24,
            0x01,
            0xDC,
            0xD4
        )
        KSCATEGORY_TVTUNER = DEFINE_GUIDSTRUCT(
            "a799a800-a46d-11d0-a18c-00a02401dcd4"
        )
        KSCATEGORY_TVTUNER = DEFINE_GUIDNAMED(KSCATEGORY_TVTUNER)
        STATIC_KSCATEGORY_CROSSBAR = (
            0xA799A801,
            0xA46D,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0x24,
            0x01,
            0xDC,
            0xD4
        )
        KSCATEGORY_CROSSBAR = DEFINE_GUIDSTRUCT(
            "a799a801-a46d-11d0-a18c-00a02401dcd4"
        )
        KSCATEGORY_CROSSBAR = DEFINE_GUIDNAMED(KSCATEGORY_CROSSBAR)
        STATIC_KSCATEGORY_TVAUDIO = (
            0xA799A802,
            0xA46D,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0x24,
            0x01,
            0xDC,
            0xD4
        )
        KSCATEGORY_TVAUDIO = DEFINE_GUIDSTRUCT(
            "a799a802-a46d-11d0-a18c-00a02401dcd4"
        )
        KSCATEGORY_TVAUDIO = DEFINE_GUIDNAMED(KSCATEGORY_TVAUDIO)
        STATIC_KSCATEGORY_VPMUX = (
            0xA799A803,
            0xA46D,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0x24,
            0x01,
            0xDC,
            0xD4
        )
        KSCATEGORY_VPMUX = DEFINE_GUIDSTRUCT(
            "a799a803-a46d-11d0-a18c-00a02401dcd4"
        )
        KSCATEGORY_VPMUX = DEFINE_GUIDNAMED(KSCATEGORY_VPMUX)
        STATIC_KSCATEGORY_VBICODEC = (
            0x07DAD660,
            0x22F1,
            0x11D1,
            0xA9,
            0xF4,
            0x00,
            0xC0,
            0x4F,
            0xBB,
            0xDE,
            0x8F
        )
        KSCATEGORY_VBICODEC = DEFINE_GUIDSTRUCT(
            "07dad660-22f1-11d1-a9f4-00c04fbbde8f"
        )
        KSCATEGORY_VBICODEC = DEFINE_GUIDNAMED(KSCATEGORY_VBICODEC)

        # SUBTYPE_VPVideo
        STATIC_KSDATAFORMAT_SUBTYPE_VPVideo = (
            0x5A9B6A40,
            0x1A22,
            0x11D1,
            0xBA,
            0xD9,
            0x0,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSDATAFORMAT_SUBTYPE_VPVideo = DEFINE_GUIDSTRUCT(
            "5a9b6a40-1a22-11d1-bad9-00609744111a"
        )
        KSDATAFORMAT_SUBTYPE_VPVideo = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_VPVideo)
        )

        # SUBTYPE_VPVBI
        STATIC_KSDATAFORMAT_SUBTYPE_VPVBI = (
            0x5A9B6A41,
            0x1A22,
            0x11D1,
            0xBA,
            0xD9,
            0x0,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSDATAFORMAT_SUBTYPE_VPVBI = DEFINE_GUIDSTRUCT(
            "5a9b6a41-1a22-11d1-bad9-00609744111a"
        )
        KSDATAFORMAT_SUBTYPE_VPVBI = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_VPVBI)
        )

        # FORMAT_VideoInfo
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO = (
            0x05589F80,
            0xC356,
            0x11CE,
            0xBF,
            0x01,
            0x00,
            0xAA,
            0x00,
            0x55,
            0x59,
            0x5A
        )
        KSDATAFORMAT_SPECIFIER_VIDEOINFO = DEFINE_GUIDSTRUCT(
            "05589f80-c356-11ce-bf01-00aa0055595a"
        )
        KSDATAFORMAT_SPECIFIER_VIDEOINFO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_VIDEOINFO)
        )

        # FORMAT_VideoInfo2
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO2 = (
            0xF72A76A0,
            0xEB0A,
            0x11D0,
            0xAC,
            0xE4,
            0x00,
            0x00,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        KSDATAFORMAT_SPECIFIER_VIDEOINFO2 = DEFINE_GUIDSTRUCT(
            "f72a76A0-eb0a-11d0-ace4-0000c0cc16ba"
        )
        KSDATAFORMAT_SPECIFIER_VIDEOINFO2 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_VIDEOINFO2)
        )

        # FORMAT_UVCH264Video
        STATIC_KSDATAFORMAT_SPECIFIER_H264_VIDEO = (
            0x2017BE05,
            0x6629,
            0x4248,
            0xAA,
            0xED,
            0x7E,
            0x1A,
            0x47,
            0xBC,
            0x9B,
            0x9C
        )
        KSDATAFORMAT_SPECIFIER_H264_VIDEO = DEFINE_GUIDSTRUCT(
            "2017be05-6629-4248-aaed-7e1a47bc9b9c"
        )
        KSDATAFORMAT_SPECIFIER_H264_VIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_H264_VIDEO)
        )

        # FORMAT_JPEGImage
        STATIC_KSDATAFORMAT_SPECIFIER_JPEG_IMAGE = (
            0x692FA379,
            0xD3E8,
            0x4651,
            0xB5,
            0xB4,
            0xB,
            0x94,
            0xB0,
            0x13,
            0xEE,
            0xAF
        )
        KSDATAFORMAT_SPECIFIER_JPEG_IMAGE = DEFINE_GUIDSTRUCT(
            "692fa379-d3e8-4651-b5b4-0b94b013eeaf"
        )
        KSDATAFORMAT_SPECIFIER_JPEG_IMAGE = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_JPEG_IMAGE)
        )

        # FORMAT_Image
        STATIC_KSDATAFORMAT_SPECIFIER_IMAGE = (
            0x692FA379,
            0xD3E8,
            0x4651,
            0xB5,
            0xB4,
            0xB,
            0x94,
            0xB0,
            0x13,
            0xEE,
            0xAF
        )
        KSDATAFORMAT_SPECIFIER_IMAGE = DEFINE_GUIDSTRUCT(
            "692fa379-d3e8-4651-b5b4-0b94b013eeaf"
        )
        KSDATAFORMAT_SPECIFIER_IMAGE = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_IMAGE)
        )

        # MEDIATYPE_Image: same as MFMEDIATYPE_Image
        STATIC_KSDATAFORMAT_TYPE_IMAGE = (
            0x72178C23,
            0xE45B,
            0x11D5,
            0xBC,
            0x2A,
            0x00,
            0xB0,
            0xD0,
            0xF3,
            0xF4,
            0xAB
        )
        KSDATAFORMAT_TYPE_IMAGE = DEFINE_GUIDSTRUCT(
            "72178c23-e45b-11d5-bc2a-00b0d0f3f4ab"
        )
        KSDATAFORMAT_TYPE_IMAGE = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_IMAGE)

        # SUBTYPE_JPEG: same as WIC container format JPEG
        STATIC_KSDATAFORMAT_SUBTYPE_JPEG = (
            0x19E4A5AA,
            0x5662,
            0x4FC5,
            0xA0,
            0xC0,
            0x17,
            0x58,
            0x2,
            0x8E,
            0x10,
            0x57
        )
        KSDATAFORMAT_SUBTYPE_JPEG = DEFINE_GUIDSTRUCT(
            "19e4a5aa-5662-4fc5-a0c0-1758028e1057"
        )
        KSDATAFORMAT_SUBTYPE_JPEG = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_JPEG)

        # SUBTYPE_IMAGE_RGB32: same as MFVideoFormat_RGB32
        STATIC_KSDATAFORMAT_SUBTYPE_IMAGE_RGB32 = (
            0x00000016,
            0x0000,
            0x0010,
            0x80,
            0x00,
            0x00,
            0xAA,
            0x00,
            0x38,
            0x9B,
            0x71
        )
        KSDATAFORMAT_SUBTYPE_IMAGE_RGB32 = DEFINE_GUIDSTRUCT(
            "00000016-0000-0010-8000-00aa00389b71"
        )
        KSDATAFORMAT_SUBTYPE_IMAGE_RGB32 = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_IMAGE_RGB32)
        )
        if NTDDI_VERSION >= NTDDI_WIN10:
            # KSDATAFORMAT_SUBTYPE_L8:
            STATIC_KSDATAFORMAT_SUBTYPE_L8 = (
                0x00000032,
                0x0000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L8 = DEFINE_GUIDSTRUCT(
                "00000032-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L8 = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L8)

            # KSDATAFORMAT_SUBTYPE_L8_IR:
            STATIC_KSDATAFORMAT_SUBTYPE_L8_IR = (
                0x00000032,
                0x0002,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L8_IR = DEFINE_GUIDSTRUCT(
                "00000032-0002-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L8_IR = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L8_IR)
            )

            # KSDATAFORMAT_SUBTYPE_L8_CUSTOM:
            STATIC_KSDATAFORMAT_SUBTYPE_L8_CUSTOM = (
                0x00000032,
                0x8000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L8_CUSTOM = DEFINE_GUIDSTRUCT(
                "00000032-8000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L8_CUSTOM = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L8_CUSTOM)
            )

            # KSDATAFORMAT_SUBTYPE_L16:
            STATIC_KSDATAFORMAT_SUBTYPE_L16 = (
                0x00000051,
                0x0000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L16 = DEFINE_GUIDSTRUCT(
                "00000051-0000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L16 = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L16)
            )

            # KSDATAFORMAT_SUBTYPE_L16_IR:
            STATIC_KSDATAFORMAT_SUBTYPE_L16_IR = (
                0x00000051,
                0x0002,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L16_IR = DEFINE_GUIDSTRUCT(
                "00000051-0002-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L16_IR = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L16_IR)
            )

            # KSDATAFORMAT_SUBTYPE_D16:
            STATIC_KSDATAFORMAT_SUBTYPE_D16 = (
                0x00000050,
                0x0004,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_D16 = DEFINE_GUIDSTRUCT(
                "00000050-0004-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_D16 = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_D16)
            )

            # KSDATAFORMAT_SUBTYPE_L16_CUSTOM:
            STATIC_KSDATAFORMAT_SUBTYPE_L16_CUSTOM = (
                0x00000051,
                0x8000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_L16_CUSTOM = DEFINE_GUIDSTRUCT(
                "00000051-8000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_L16_CUSTOM = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_L16_CUSTOM)
            )

            # KSDATAFORMAT_SUBTYPE_MJPG_IR:
            STATIC_KSDATAFORMAT_SUBTYPE_MJPG_IR = (
                0x47504A4D,
                0x0002,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_MJPG_IR = DEFINE_GUIDSTRUCT(
                "47504a4d-0002-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_MJPG_IR = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MJPG_IR)
            )

            # KSDATAFORMAT_SUBTYPE_MJPG_DEPTH:
            STATIC_KSDATAFORMAT_SUBTYPE_MJPG_DEPTH = (
                0x47504A4D,
                0x0004,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_MJPG_DEPTH = DEFINE_GUIDSTRUCT(
                "47504a4d-0004-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_MJPG_DEPTH = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MJPG_DEPTH)
            )

            # KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM:
            STATIC_KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM = (
                0x47504A4D,
                0x8000,
                0x0010,
                0x80,
                0x00,
                0x00,
                0xAA,
                0x00,
                0x38,
                0x9B,
                0x71
            )
            KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM = DEFINE_GUIDSTRUCT(
                "47504a4d-8000-0010-8000-00aa00389b71"
            )
            KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM)
            )
        # END IF  (NTDDI_VERSION >= NTDDI_WIN10)

        # MEDIATYPE_AnalogVideo
        STATIC_KSDATAFORMAT_TYPE_ANALOGVIDEO = (
            0x0482DDE1,
            0x7817,
            0x11CF,
            0x8A,
            0x03,
            0x00,
            0xAA,
            0x00,
            0x6E,
            0xCB,
            0x65
        )
        KSDATAFORMAT_TYPE_ANALOGVIDEO = DEFINE_GUIDSTRUCT(
            "0482dde1-7817-11cf-8a03-00aa006ecb65"
        )
        KSDATAFORMAT_TYPE_ANALOGVIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_ANALOGVIDEO)
        )

        # FORMAT_AnalogVideo
        STATIC_KSDATAFORMAT_SPECIFIER_ANALOGVIDEO = (
            0x0482DDE0,
            0x7817,
            0x11CF,
            0x8A,
            0x03,
            0x00,
            0xAA,
            0x00,
            0x6E,
            0xCB,
            0x65
        )
        KSDATAFORMAT_SPECIFIER_ANALOGVIDEO = DEFINE_GUIDSTRUCT(
            "0482dde0-7817-11cf-8a03-00aa006ecb65"
        )
        KSDATAFORMAT_SPECIFIER_ANALOGVIDEO = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_ANALOGVIDEO)
        )
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            # MEDIATYPE_AnalogAudio
            STATIC_KSDATAFORMAT_TYPE_ANALOGAUDIO = (
                0x0482DEE1,
                0x7817,
                0x11CF,
                0x8A,
                0x03,
                0x00,
                0xAA,
                0x00,
                0x6E,
                0xCB,
                0x65
            )
            KSDATAFORMAT_TYPE_ANALOGAUDIO = DEFINE_GUIDSTRUCT(
                "0482DEE1-7817-11cf-8a03-00aa006ecb65"
            )
            KSDATAFORMAT_TYPE_ANALOGAUDIO = (
                DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_ANALOGAUDIO)
            )
        # END IF   XP SP2 and later (chronologically)

        # FORMAT_VBI
        STATIC_KSDATAFORMAT_SPECIFIER_VBI = (
            0xF72A76E0,
            0xEB0A,
            0x11D0,
            0xAC,
            0xE4,
            0x00,
            0x00,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        KSDATAFORMAT_SPECIFIER_VBI = DEFINE_GUIDSTRUCT(
            "f72a76e0-eb0a-11d0-ace4-0000c0cc16ba"
        )
        KSDATAFORMAT_SPECIFIER_VBI = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_VBI)
        )

        # MEDIATYPE_VBI
        STATIC_KSDATAFORMAT_TYPE_VBI = (
            0xF72A76E1,
            0xEB0A,
            0x11D0,
            0xAC,
            0xE4,
            0x00,
            0x00,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        KSDATAFORMAT_TYPE_VBI = DEFINE_GUIDSTRUCT(
            "f72a76e1-eb0a-11d0-ace4-0000c0cc16ba"
        )
        KSDATAFORMAT_TYPE_VBI = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_VBI)

        # SUBTYPE_RAW8
        STATIC_KSDATAFORMAT_SUBTYPE_RAW8 = (
            0xCA20D9A0,
            0x3E3E,
            0x11D1,
            0x9B,
            0xF9,
            0x0,
            0xC0,
            0x4F,
            0xBB,
            0xDE,
            0xBF
        )
        KSDATAFORMAT_SUBTYPE_RAW8 = DEFINE_GUIDSTRUCT(
            "ca20d9a0-3e3e-11d1-9bf9-00c04fbbdebf"
        )
        KSDATAFORMAT_SUBTYPE_RAW8 = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_RAW8)
        if NTDDI_VERSION >= NTDDI_WINXP:
            # MEDIASUBTYPE_CC
            STATIC_KSDATAFORMAT_SUBTYPE_CC = (
                0x33214CC1,
                0x11F,
                0x11D2,
                0xB4,
                0xB1,
                0x0,
                0xA0,
                0xD1,
                0x2,
                0xCF,
                0xBE
            )
            KSDATAFORMAT_SUBTYPE_CC = DEFINE_GUIDSTRUCT(
                "33214CC1-011F-11D2-B4B1-00A0D102CFBE"
            )
            KSDATAFORMAT_SUBTYPE_CC = DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_CC)
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # MEDIASUBTYPE_NABTS
        STATIC_KSDATAFORMAT_SUBTYPE_NABTS = (
            0xF72A76E2,
            0xEB0A,
            0x11D0,
            0xAC,
            0xE4,
            0x00,
            0x00,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        KSDATAFORMAT_SUBTYPE_NABTS = DEFINE_GUIDSTRUCT(
            "f72a76e2-eb0a-11d0-ace4-0000c0cc16ba"
        )
        KSDATAFORMAT_SUBTYPE_NABTS = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_NABTS)
        )

        # MEDIASUBTYPE_TELETEXT
        STATIC_KSDATAFORMAT_SUBTYPE_TELETEXT = (
            0xF72A76E3,
            0xEB0A,
            0x11D0,
            0xAC,
            0xE4,
            0x00,
            0x00,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        KSDATAFORMAT_SUBTYPE_TELETEXT = DEFINE_GUIDSTRUCT(
            "f72a76e3-eb0a-11d0-ace4-0000c0cc16ba"
        )
        KSDATAFORMAT_SUBTYPE_TELETEXT = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_TELETEXT)
        )

        # constants for the biCompression field
        KS_BI_RGB = 0L
        KS_BI_RLE8 = 1L
        KS_BI_RLE4 = 2L
        KS_BI_BITFIELDS = 3L
        KS_BI_JPEG = 4L


        # rgbq BYTE rgbBlue;
        tagKS_RGBQUAD._fields_ = [
            ('rgbGreen', BYTE),
            ('rgbRed', BYTE),
            ('rgbReserved', BYTE),
        ]

        # constants for palettes
        KS_iPALETTE_COLORS = 256        # Maximum colours in palette
        KS_iEGA_COLORS = 16        # Number colours in EGA palette
        KS_iMASK_COLORS = 3        # Maximum three components
        KS_iTRUECOLOR = 16        # Minimum true colour device
        KS_iRED = 0        # Index position for RED mask
        KS_iGREEN = 1        # Index position for GREEN mask
        KS_iBLUE = 2        # Index position for BLUE mask
        KS_iPALETTE = 8        # Maximum colour depth using a palette
        KS_iMAXBITS = 8        # Maximum bits per colour component
        KS_SIZE_EGA_PALETTE = KS_iEGA_COLORS * ctypes.sizeof(KS_RGBQUAD)
        KS_SIZE_PALETTE = KS_iPALETTE_COLORS * ctypes.sizeof(KS_RGBQUAD)
        tagKS_BITMAPINFOHEADER._fields_ = [
            ('biSize', DWORD),
            ('biWidth', LONG),
            ('biHeight', LONG),
            ('biPlanes', WORD),
            ('biBitCount', WORD),
            ('biCompression', DWORD),
            ('biSizeImage', DWORD),
            ('biXPelsPerMeter', LONG),
            ('biYPelsPerMeter', LONG),
            ('biClrUsed', DWORD),
            ('biClrImportant', DWORD),
        ]
        # Used for true colour images that also have a palette
        tag_KS_TRUECOLORINFO._fields_ = [
            ('dwBitMasks', DWORD * KS_iMASK_COLORS),
            ('bmiColors', KS_RGBQUAD * KS_iPALETTE_COLORS),
        ]


        def KS_WIDTHBYTES(bits):
            return ((bits + 31) & ~31) / 8


        def KS_DIBWIDTHBYTES(bi):
            return KS_WIDTHBYTES(bi.biWidth * bi.biBitCount)


        def KS__DIBSIZE(bi):
            return KS_DIBWIDTHBYTES(bi) * bi.biHeight


        def KS_DIBSIZE(bi):
            if bi.biHeight < 0:
                return -1 * KS__DIBSIZE(bi)
            else:
                return  KS__DIBSIZE(bi)

    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP):
        REFERENCE_TIME = LONGLONG
    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)

    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP):
        # The BITMAPINFOHEADER contains all the details about the video stream
        # such
        # as the actual image dimensions and their pixel depth. A source
        # filter may
        # also request that the sink take only a section of the video by
        # providing a
        # clipping rectangle in rcSource. In the worst case where the sink
        # filter
        # forgets to check this on connection it will simply render the whole
        # thing
        # which isn't a disaster. Ideally a sink filter will check the
        # rcSource and
        # if it doesn't support image extraction and the rectangle is not
        # empty then
        # it will reject the connection. A filter should use SetRectEmpty to
        # reset a
        # rectangle to all zeroes
        # (and IsRectEmpty to later check the rectangle).
        # The rcTarget specifies the destination rectangle for the video, for
        # most
        # source filters they will set this to all zeroes, a downstream filter
        # may
        # request that the video be placed in a particular area of the buffers
        # it
        # supplies in which case it will call QueryAccept with a non empty
        # target
        tagKS_VIDEOINFOHEADER._fields_ = [
            # The bit we really want to use
            ('rcSource', RECT),
            # Where the video should go
            ('rcTarget', RECT),
            # Approximate bit data rate
            ('dwBitRate', DWORD),
            # Bit error rate for this stream
            ('dwBitErrorRate', DWORD),
            # Average time per frame (100ns units)
            ('AvgTimePerFrame', REFERENCE_TIME),
            ('bmiHeader', KS_BITMAPINFOHEADER),
        ]

        # not not not WARNING not not not
        # DO NOT use the following structure unless you are sure that the
        # BITMAPINFOHEADER
        # has a normal biSize == (ctypes.sizeof(BITMAPINFOHEADER) not
        # not not not WARNING not not not
        # Colour palette
        class _Union_5(ctypes.Union):
            pass


        _Union_5._fields_ = [
            ('bmiColors', KS_RGBQUAD * KS_iPALETTE_COLORS),
            # True colour masks
            ('dwBitMasks', DWORD * KS_iMASK_COLORS),
            # Both of the above
            ('TrueColorInfo', KS_TRUECOLORINFO),
        ]
        tagKS_VIDEOINFO._Union_5 = _Union_5

        tagKS_VIDEOINFO._anonymous_ = (
            '_Union_5',
        )

        tagKS_VIDEOINFO._fields_ = [
            # The bit we really want to use
            ('rcSource', RECT),
            # Where the video should go
            ('rcTarget', RECT),
            # Approximate bit data rate
            ('dwBitRate', DWORD),
            # Bit error rate for this stream
            ('dwBitErrorRate', DWORD),
            # Average time per frame (100ns units)
            ('AvgTimePerFrame', REFERENCE_TIME),
            ('bmiHeader', KS_BITMAPINFOHEADER),
            ('_Union_5', tagKS_VIDEOINFO._Union_5),
        ]
        KS_SIZE_MASKS = KS_iMASK_COLORS * ctypes.sizeof(DWORD)
        KS_SIZE_PREHEADER = FIELD_OFFSET(KS_VIDEOINFOHEADER, 'bmiHeader')

        # For normal size
        # define KS_SIZE_VIDEOHEADER
        # ((ctypes.sizeof(KS_BITMAPINFOHEADER) + KS_SIZE_PREHEADER)
        # not not not for abnormal biSizes
        def KS_SIZE_VIDEOHEADER(pbmi):
            return pbmi.bmiHeader.biSize + KS_SIZE_PREHEADER
        # VBI
        # Used for NABTS, CC, Intercast, WST
        # inclusive

        tagKS_VBIINFOHEADER._fields_ = [
            ('StartLine', ULONG),
            # inclusive
            ('EndLine', ULONG),
            # Hz.
            ('SamplingFrequency', ULONG),
            # microSec * 100 from HSync LE
            ('MinLineStartTime', ULONG),
            # microSec * 100 from HSync LE
            ('MaxLineStartTime', ULONG),
            # microSec * 100 from HSync LE
            ('ActualLineStartTime', ULONG),
            # microSec * 100 from HSync LE
            ('ActualLineEndTime', ULONG),
            # KS_AnalogVideoStandard*
            ('VideoStandard', ULONG),
            ('SamplesPerLine', ULONG),
            # May be > SamplesPerLine
            ('StrideInBytes', ULONG),
            # Bytes
            ('BufferSize', ULONG),
        ]
        if NTDDI_VERSION >= NTDDI_WINXP:
            # VBI Sampling Rates
            KS_VBIDATARATE_NABTS = 5727272L
            KS_VBIDATARATE_CC = 503493L            # ~= 1/1.986125e-6
            KS_VBISAMPLINGRATE_4X_NABTS = (long)(4*KS_VBIDATARATE_NABTS)
            KS_VBISAMPLINGRATE_47X_NABTS = (long)(27000000)
            KS_VBISAMPLINGRATE_5X_NABTS = (long)(5*KS_VBIDATARATE_NABTS)
            KS_47NABTS_SCALER = (
                KS_VBISAMPLINGRATE_47X_NABTS/KS_VBIDATARATE_NABTS
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # Analog video variant - Use this when the format is FORMAT_AnalogVideo
        # rcSource defines the portion of the active video signal to use
        # rcTarget defines the destination rectangle
        # both of the above are relative to the dwActiveWidth and
        # dwActiveHeight fields
        # dwActiveWidth is currently set to 720 for all formats
        # (but could change for HDTV)
        # dwActiveHeight is 483 for NTSC and 575 for PAL/SECAM
        # (but could change for HDTV)
        # Width max is 720, height varies w/ TransmissionStd
        tagKS_AnalogVideoInfo._fields_ = [
            ('rcSource', RECT),
            # Where the video should go
            ('rcTarget', RECT),
            # Always 720 (CCIR-601 active samples per line)
            ('dwActiveWidth', DWORD),
            # 483 for NTSC, 575 for PAL/SECAM
            ('dwActiveHeight', DWORD),
            # Normal ActiveMovie units (100 nS)
            ('AvgTimePerFrame', REFERENCE_TIME),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Data packet passed on Analog video stream channel change
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        KS_TVTUNER_CHANGE_BEGIN_TUNE = 0x0001        # Starting a tuning operation
        KS_TVTUNER_CHANGE_END_TUNE = 0x0002        # Ending a tuning operation


        # KS_TVTUNER_CHANGE_*
        tagKS_TVTUNER_CHANGE_INFO._fields_ = [
            ('dwFlags', DWORD),
            ('dwCountryCode', DWORD),
            # KS_AnalogVideoStandard
            ('dwAnalogVideoStandard', DWORD),
            ('dwChannel', DWORD),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Video format blocks
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        class KS_MPEG2Level(ENUM):
            KS_MPEG2Level_Low = 1
            KS_MPEG2Level_Main = 2
            KS_MPEG2Level_High1440 = 3
            KS_MPEG2Level_High = 4

        KS_MPEG2Level_Low = KS_MPEG2Level.KS_MPEG2Level_Low
        KS_MPEG2Level_Main = KS_MPEG2Level.KS_MPEG2Level_Main
        KS_MPEG2Level_High1440 = KS_MPEG2Level.KS_MPEG2Level_High1440
        KS_MPEG2Level_High = KS_MPEG2Level.KS_MPEG2Level_High


        class KS_MPEG2Profile(ENUM):
            KS_MPEG2Profile_Simple = 1
            KS_MPEG2Profile_Main = 2
            KS_MPEG2Profile_SNRScalable = 3
            KS_MPEG2Profile_SpatiallyScalable = 4
            KS_MPEG2Profile_High = 5

        KS_MPEG2Profile_Simple = KS_MPEG2Profile.KS_MPEG2Profile_Simple
        KS_MPEG2Profile_Main = KS_MPEG2Profile.KS_MPEG2Profile_Main
        KS_MPEG2Profile_SNRScalable = KS_MPEG2Profile.KS_MPEG2Profile_SNRScalable
        KS_MPEG2Profile_SpatiallyScalable = KS_MPEG2Profile.KS_MPEG2Profile_SpatiallyScalable
        KS_MPEG2Profile_High = KS_MPEG2Profile.KS_MPEG2Profile_High
        KS_INTERLACE_IsInterlaced = 0x00000001        # if 0, other interlace bits are irrelevent
        KS_INTERLACE_1FieldPerSample = 0x00000002        # else 2 fields per media sample

        # else Field 2 is first; top field in PAL is field 1, top field in
        # NTSC is field 2?
        KS_INTERLACE_Field1First = 0x00000004
        KS_INTERLACE_UNUSED = 0x00000008
        KS_INTERLACE_FieldPatternMask = 0x00000030        # use this mask with AMINTERLACE_FieldPat*
        KS_INTERLACE_FieldPatField1Only = 0x00000000        # Data never contains a Field2
        KS_INTERLACE_FieldPatField2Only = 0x00000010        # Data never contains a Field1
        KS_INTERLACE_FieldPatBothRegular = 0x00000020        # There will be a Field2 for every Field1 (required for Weave?)
        KS_INTERLACE_FieldPatBothIrregular = 0x00000030        # Random pattern of Field1s and Field2s
        KS_INTERLACE_DisplayModeMask = 0x000000C0
        KS_INTERLACE_DisplayModeBobOnly = 0x00000000
        KS_INTERLACE_DisplayModeWeaveOnly = 0x00000040
        KS_INTERLACE_DisplayModeBobOrWeave = 0x00000080
        KS_COPYPROTECT_RestrictDuplication = 0x00000001        # duplication of this stream should be restricted
        KS_MPEG2_DoPanScan = 0x00000001        # if set, the MPEG-2 video decoder should crop output image

        # based on pan-scan vectors in picture_display_extension
        # and change the picture aspect ratio accordingly.
        KS_MPEG2_DVDLine21Field1 = 0x00000002        # if set, the MPEG-2 decoder must be able to produce an output

        # pin for DVD style closed caption data found in GOP layer of field 1
        KS_MPEG2_DVDLine21Field2 = 0x00000004        # if set, the MPEG-2 decoder must be able to produce an output

        # pin for DVD style closed caption data found in GOP layer of field 2
        KS_MPEG2_SourceIsLetterboxed = 0x00000008        # if set, indicates that black bars have been encoded in the top

        # and bottom of the video.
        KS_MPEG2_FilmCameraMode = 0x00000010        # if set, indicates "film mode" used for 625/50 content. If cleared,

        # indicates that "camera mode" was used.
        KS_MPEG2_LetterboxAnalogOut = 0x00000020        # if set and this stream is sent to an analog output, it should

        # be letterboxed. Streams sent to VGA should be letterboxed only by
        # renderers.
        KS_MPEG2_DSS_UserData = 0x00000040        # if set, the MPEG-2 decoder must process DSS style user data
        KS_MPEG2_DVB_UserData = 0x00000080        # if set, the MPEG-2 decoder must process DVB style user data
        KS_MPEG2_27MhzTimebase = 0x00000100        # if set, the PTS,DTS timestamps advance at 27MHz rather than 90KHz
        if NTDDI_VERSION >= NTDDI_WINXP:
            KS_MPEG2_WidescreenAnalogOut = 0x00000200            # if set and this stream is sent to an analog output, it should

            # be in widescreen format
            # (4x3 content should be centered on a 16x9 output).
            # Streams sent to VGA should be widescreened only by renderers.
            # Used to test if these flags are supported. Set and test for
            # AcceptMediaType.
            KS_AMCONTROL_USED = 0x00000001

            # If rejected, then you cannot use the AMCONTROL flags
            # (send 0 for dwReserved1)
            KS_AMCONTROL_PAD_TO_4x3 = 0x00000002            # if set means display the image in a 4x3 area
            KS_AMCONTROL_PAD_TO_16x9 = 0x00000004            # if set means display the image in a 16x9 area

            # if set, indicates DXVA color info is present in the upper (24)
            # bits of the dwControlFlags
            KS_AMCONTROL_COLORINFO_PRESENT = 0x00000080
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)


        # use KS_AMCONTROL_* defines, use this from now on
        class _Union_6(ctypes.Union):
            pass


        _Union_6._fields_ = [
            ('dwControlFlags', DWORD),
            # for backward compatiblity
            # (was "must be 0"; connection rejected otherwise)
            ('dwReserved1', DWORD),
        ]
        tagKS_VIDEOINFOHEADER2._Union_6 = _Union_6

        tagKS_VIDEOINFOHEADER2._anonymous_ = (
            '_Union_6',
        )

        tagKS_VIDEOINFOHEADER2._fields_ = [
            ('rcSource', RECT),
            ('rcTarget', RECT),
            ('dwBitRate', DWORD),
            ('dwBitErrorRate', DWORD),
            ('AvgTimePerFrame', REFERENCE_TIME),
            # use AMINTERLACE_* defines. Reject connection if undefined bits
            # are not 0
            ('dwInterlaceFlags', DWORD),
            # use KS_COPYPROTECT_* defines. Reject connection if undefined
            # bits are not 0
            ('dwCopyProtectFlags', DWORD),
            # X dimension of picture aspect ratio, e.g. 16 for 16x9 display
            ('dwPictAspectRatioX', DWORD),
            # Y dimension of picture aspect ratio, e.g. 9 for 16x9 display
            ('dwPictAspectRatioY', DWORD),
            ('_Union_6', tagKS_VIDEOINFOHEADER2._Union_6),
            # must be 0; reject connection otherwise
            ('dwReserved2', DWORD),
            ('bmiHeader', KS_BITMAPINFOHEADER),
        ]

        # Compatible with VIDEOINFO
        tagKS_MPEG1VIDEOINFO._fields_ = [
            ('hdr', KS_VIDEOINFOHEADER),
            # 25-bit Group of pictures time code at start of data
            ('dwStartTimeCode', DWORD),
            # Length in bytes of bSequenceHeader
            ('cbSequenceHeader', DWORD),
            # Sequence header including quantization matrices if any
            ('bSequenceHeader', BYTE * 1),
        ]
        KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 140


        def KS_SIZE_MPEG1VIDEOINFO(pv):
            return (
                FIELD_OFFSET(KS_MPEG1VIDEOINFO, 'bSequenceHeader')[0] +
                pv.cbSequenceHeader
            )


        def KS_MPEG1_SEQUENCE_INFO(pv):
            return  pv.bSequenceHeader


        tagKS_MPEGVIDEOINFO2._fields_ = [
            ('hdr', KS_VIDEOINFOHEADER2),
            # ?? not used for DVD ??
            ('dwStartTimeCode', DWORD),
            # is 0 for DVD (no sequence header)
            ('cbSequenceHeader', DWORD),
            # use enum MPEG2Profile
            ('dwProfile', DWORD),
            # use enum MPEG2Level
            ('dwLevel', DWORD),
            # use AMMPEG2_* defines. Reject connection if undefined bits are
            # not 0
            ('dwFlags', DWORD),
            # DWORD instead of Byte for alignment purposes
            ('bSequenceHeader', DWORD * 1),
        ]

        # from UVC 1.5 H.264 frame descriptor
        tagKS_H264VIDEOINFO._fields_ = [
            ('wWidth', WORD),
            ('wHeight', WORD),
            ('wSARwidth', WORD),
            ('wSARheight', WORD),
            ('wProfile', WORD),
            ('bLevelIDC', BYTE),
            ('wConstrainedToolset', WORD),
            ('bmSupportedUsages', DWORD),
            ('bmCapabilities', WORD),
            ('bmSVCCapabilities', DWORD),
            ('bmMVCCapabilities', DWORD),
            ('dwFrameInterval', DWORD),
            # from UVC 1.5 H.264 format descriptor
            ('bMaxCodecConfigDelay', BYTE),
            ('bmSupportedSliceModes', BYTE),
            ('bmSupportedSyncFrameTypes', BYTE),
            ('bResolutionScaling', BYTE),
            ('bSimulcastSupport', BYTE),
            ('bmSupportedRateControlModes', BYTE),
            ('wMaxMBperSecOneResolutionNoScalability', WORD),
            ('wMaxMBperSecTwoResolutionsNoScalability', WORD),
            ('wMaxMBperSecThreeResolutionsNoScalability', WORD),
            ('wMaxMBperSecFourResolutionsNoScalability', WORD),
            ('wMaxMBperSecOneResolutionTemporalScalability', WORD),
            ('wMaxMBperSecTwoResolutionsTemporalScalablility', WORD),
            ('wMaxMBperSecThreeResolutionsTemporalScalability', WORD),
            ('wMaxMBperSecFourResolutionsTemporalScalability', WORD),
            ('wMaxMBperSecOneResolutionTemporalQualityScalability', WORD),
            ('wMaxMBperSecTwoResolutionsTemporalQualityScalability', WORD),
            ('wMaxMBperSecThreeResolutionsTemporalQualityScalablity', WORD),
            ('wMaxMBperSecFourResolutionsTemporalQualityScalability', WORD),
            ('wMaxMBperSecOneResolutionTemporalSpatialScalability', WORD),
            ('wMaxMBperSecTwoResolutionsTemporalSpatialScalability', WORD),
            ('wMaxMBperSecThreeResolutionsTemporalSpatialScalablity', WORD),
            ('wMaxMBperSecFourResolutionsTemporalSpatialScalability', WORD),
            ('wMaxMBperSecOneResolutionFullScalability', WORD),
            ('wMaxMBperSecTwoResolutionsFullScalability', WORD),
            ('wMaxMBperSecThreeResolutionsFullScalability', WORD),
            ('wMaxMBperSecFourResolutionsFullScalability', WORD),
        ]


        def KS_SIZE_MPEGVIDEOINFO2(pv):
            return (
                FIELD_OFFSET(KS_MPEGVIDEOINFO2, 'bSequenceHeader')[0]
                + pv.cbSequenceHeader
            )


        def KS_MPEG1_SEQUENCE_INFO(pv):
            return pv.bSequenceHeader

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Audio format blocks
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # if set, the PTS,DTS timestamps advance at 27MHz rather than 90KHz
        KS_MPEGAUDIOINFO_27MhzTimebase = 0x00000001


        # use KS_MPEGAUDIOINFO_* defines. Reject connection if undefined bits
        # are not 0
        tagKS_MPEAUDIOINFO._fields_ = [
            ('dwFlags', DWORD),
            # must be 0; reject connection otherwise
            ('dwReserved1', DWORD),
            # must be 0; reject connection otherwise
            ('dwReserved2', DWORD),
            # must be 0; reject connection otherwise
            ('dwReserved3', DWORD),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Video DATAFORMATs
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        tagKS_DATAFORMAT_VIDEOINFOHEADER._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('VideoInfoHeader', KS_VIDEOINFOHEADER),
        ]

        tagKS_DATAFORMAT_VIDEOINFOHEADER2._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('VideoInfoHeader2', KS_VIDEOINFOHEADER2),
        ]

        tagKS_DATAFORMAT_MPEGVIDEOINFO2._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('MpegVideoInfoHeader2', KS_MPEGVIDEOINFO2),
        ]

        tagKS_DATAFORMAT_H264VIDEOINFO._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('H264VideoInfoHeader', KS_H264VIDEOINFO),
        ]

        tagKS_DATAFORMAT_IMAGEINFO._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('ImageInfoHeader', KS_BITMAPINFOHEADER),
        ]

        tagKS_DATAFORMAT_VIDEOINFO_PALETTE._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('VideoInfo', KS_VIDEOINFO),
        ]

        tagKS_DATAFORMAT_VBIINFOHEADER._fields_ = [
            ('DataFormat', KSDATAFORMAT),
            ('VBIInfoHeader', KS_VBIINFOHEADER),
        ]

        # will be MEDIATYPE_Video
        _KS_VIDEO_STREAM_CONFIG_CAPS._fields_ = [
            ('guid', GUID),
            # logical OR of all AnalogVideoStandards
            ('VideoStandard', ULONG),
            # the inherent size of the incoming signal
            ('InputSize', SIZE),
            # smallest rcSrc cropping rect allowed
            ('MinCroppingSize', SIZE),
            # largest rcSrc cropping rect allowed
            ('MaxCroppingSize', SIZE),
            # granularity of cropping size
            ('CropGranularityX', INT),
            ('CropGranularityY', INT),
            # alignment of cropping rect
            ('CropAlignX', INT),
            ('CropAlignY', INT),
            # smallest bitmap stream can produce
            ('MinOutputSize', SIZE),
            # largest bitmap stream can produce
            ('MaxOutputSize', SIZE),
            # granularity of output bitmap size
            ('OutputGranularityX', INT),
            ('OutputGranularityY', INT),
            # 0, no stretch, 1 pix dup, 2 interp, ...
            ('StretchTapsX', INT),
            # Describes quality of hardware scaler
            ('StretchTapsY', INT),
            ('ShrinkTapsX', INT),
            ('ShrinkTapsY', INT),
            # 100 nS units
            ('MinFrameInterval', LONGLONG),
            ('MaxFrameInterval', LONGLONG),
            ('MinBitsPerSecond', LONG),
            ('MaxBitsPerSecond', LONG),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Video DATARANGEs
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        tagKS_DATARANGE_VIDEO._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfoHeader', KS_VIDEOINFOHEADER),
        ]

        tagKS_DATARANGE_VIDEO2._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfoHeader', KS_VIDEOINFOHEADER2),
        ]

        tagKS_DATARANGE_MPEG1_VIDEO._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfoHeader', KS_MPEG1VIDEOINFO),
        ]

        tagKS_DATARANGE_MPEG2_VIDEO._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfoHeader', KS_MPEGVIDEOINFO2),
        ]

        tagKS_DATARANGE_H264_VIDEO._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfoHeader', KS_H264VIDEOINFO),
        ]

        tagKS_DATARANGE_IMAGE._fields_ = [
            ('DataRange', KSDATARANGE),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            ('ImageInfoHeader', KS_BITMAPINFOHEADER),
        ]

        tagKS_DATARANGE_VIDEO_PALETTE._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VideoInfo', KS_VIDEOINFO),
        ]

        tagKS_DATARANGE_VIDEO_VBI._fields_ = [
            ('DataRange', KSDATARANGE),
            # all samples same size?
            ('bFixedSizeSamples', BOOL),
            # all I frames?
            ('bTemporalCompression', BOOL),
            # KS_VIDEO_DESC_*
            ('StreamDescriptionFlags', DWORD),
            # KS_VIDEO_ALLOC_*
            ('MemoryAllocationFlags', DWORD),
            ('ConfigCaps', KS_VIDEO_STREAM_CONFIG_CAPS),
            # default format
            ('VBIInfoHeader', KS_VBIINFOHEADER),
        ]

        tagKS_DATARANGE_ANALOGVIDEO._fields_ = [
            ('DataRange', KSDATARANGE),
            ('AnalogVideoInfo', KS_ANALOGVIDEOINFO),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # StreamDescriptionFlags
        # These define the "purpose" of each video stream
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        KS_VIDEOSTREAM_PREVIEW = 0x0001        # Preview stream
        KS_VIDEOSTREAM_CAPTURE = 0x0002        # Capture stream
        KS_VIDEOSTREAM_VBI = 0x0010        # Field1 VBI
        KS_VIDEOSTREAM_NABTS = 0x0020        # Field1 NABTS
        KS_VIDEOSTREAM_CC = 0x0100        # Closed Captioning
        KS_VIDEOSTREAM_EDS = 0x0200        # Extended Data Services
        KS_VIDEOSTREAM_TELETEXT = 0x0400        # Field1 Teletext only
        KS_VIDEOSTREAM_STILL = 0x1000        # Still image input
        KS_VIDEOSTREAM_IS_VPE = 0x8000        # Is a VPE based stream?

        # MemoryAllocationFlags
        KS_VIDEO_ALLOC_VPE_SYSTEM = 0x0001        # VPE surface in system memory
        KS_VIDEO_ALLOC_VPE_DISPLAY = 0x0002        # VPE surface in display memory
        KS_VIDEO_ALLOC_VPE_AGP = 0x0004        # VPE surface in AGP memory
        if NTDDI_VERSION >= NTDDI_WINXP:
            # ////////////////////////////////////////////////////////////
            # Capture driver VBI property sets
            # ////////////////////////////////////////////////////////////
            # {F162C607-7B35-496f-AD7F-2DCA3B46B718}
            STATIC_KSPROPSETID_VBICAP_PROPERTIES = (
                0xF162C607,
                0x7B35,
                0x496F,
                0xAD,
                0x7F,
                0x2D,
                0xCA,
                0x3B,
                0x46,
                0xB7,
                0x18
            )
            KSPROPSETID_VBICAP_PROPERTIES = DEFINE_GUIDSTRUCT(
                "F162C607-7B35-496f-AD7F-2DCA3B46B718"
            )
            KSPROPSETID_VBICAP_PROPERTIES = (
                DEFINE_GUIDNAMED(KSPROPSETID_VBICAP_PROPERTIES)
            )


            class KSPROPERTY_VBICAP(ENUM):
                KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 0x01

            KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = KSPROPERTY_VBICAP.KSPROPERTY_VBICAP_PROPERTIES_PROTECTION

            _VBICAP_PROPERTIES_PROTECTION_S._fields_ = [
                ('Property', KSPROPERTY),
                # Index of stream
                ('StreamIndex', ULONG),
                ('Status', ULONG),
            ]
            KS_VBICAP_PROTECTION_MV_PRESENT = 0x0001
            KS_VBICAP_PROTECTION_MV_HARDWARE = 0x0002
            KS_VBICAP_PROTECTION_MV_DETECTED = 0x0004
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # *************************************************************
        # VBI Related GUIDs, structs and properties for
        # codecs(generic, cc, nabts)
        # *************************************************************
        # /////////////////////////////////////////////////////////////////////////////////////
        #
        # IP/NABTS Protocol Reserved Group IDs - Overall Range 0x800-0x8FF
        # [Decimal 2048-2079]
        # Intervening values(0-F) are used if there are multiple providers at
        # a particular tier
        # /////////////////////////////////////////////////////////////////////////////////////
        #
        # Used by individual content creators in show footage/data
        KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE = 0x800
        KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE = 0x810

        # Used by production company in finished show data
        KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE = 0x820
        KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 0x830

        # Used by broadcast syndicates in syndicated show data
        KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE = 0x840
        KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE = 0x850

        # Used by tv networks in network television data
        KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE = 0x860
        KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE = 0x870

        # Used by telvision stations in local programming data
        KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE = 0x880
        KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 0x890

        # Used by cable system in cable head-end originated data
        KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE = 0x8A0
        KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 0x8B0

        # The values between 0x8C0 - 0x8EF are reserved for future expansion
        # Used by Microsoft for Testing purposes (0x8F0 - 0x8FF)
        KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE = 0x8F0

        # ////////////////////////////////////////////////////////////
        # Stream Format FEC-corrected NABTS bundles
        # ////////////////////////////////////////////////////////////
        STATIC_KSDATAFORMAT_TYPE_NABTS = (
            0xE757BCA0,
            0x39AC,
            0x11D1,
            0xA9,
            0xF5,
            0x0,
            0xC0,
            0x4F,
            0xBB,
            0xDE,
            0x8F
        )
        KSDATAFORMAT_TYPE_NABTS = DEFINE_GUIDSTRUCT(
            "E757BCA0-39AC-11d1-A9F5-00C04FBBDE8F"
        )
        KSDATAFORMAT_TYPE_NABTS = DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_NABTS)
        STATIC_KSDATAFORMAT_SUBTYPE_NABTS_FEC = (
            0xE757BCA1,
            0x39AC,
            0x11D1,
            0xA9,
            0xF5,
            0x0,
            0xC0,
            0x4F,
            0xBB,
            0xDE,
            0x8F
        )
        KSDATAFORMAT_SUBTYPE_NABTS_FEC = DEFINE_GUIDSTRUCT(
            "E757BCA1-39AC-11d1-A9F5-00C04FBBDE8F"
        )
        KSDATAFORMAT_SUBTYPE_NABTS_FEC = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_NABTS_FEC)
        )

        # ////////////////////////////////////////////////////////////
        # NABTS Bundle data structure definition
        # ////////////////////////////////////////////////////////////
        MAX_NABTS_VBI_LINES_PER_FIELD = 11
        NABTS_LINES_PER_BUNDLE = 16
        NABTS_PAYLOAD_PER_LINE = 28
        NABTS_BYTES_PER_LINE = 36


        _NABTSFEC_BUFFER._fields_ = [
            ('dataSize', ULONG),
            ('groupID', USHORT),
            ('Reserved', USHORT),
            ('data', UCHAR * NABTS_LINES_PER_BUNDLE * NABTS_PAYLOAD_PER_LINE),
        ]

        # ////////////////////////////////////////////////////////////
        # vbi codec filtering pin properties
        # ////////////////////////////////////////////////////////////
        STATIC_KSPROPSETID_VBICodecFiltering = (
            0xCAFEB0CA,
            0x8715,
            0x11D0,
            0xBD,
            0x6A,
            0x00,
            0x35,
            0xC0,
            0xED,
            0xBA,
            0xBE
        )
        KSPROPSETID_VBICodecFiltering = DEFINE_GUIDSTRUCT(
            "cafeb0ca-8715-11d0-bd6a-0035c0edbabe"
        )
        KSPROPSETID_VBICodecFiltering = (
            DEFINE_GUIDNAMED(KSPROPSETID_VBICodecFiltering)
        )


        class KSPROPERTY_VBICODECFILTERING(ENUM):
            KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = 0x01
            KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY = 2
            KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY = 3
            KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 4
            KSPROPERTY_VBICODECFILTERING_STATISTICS = 5

        KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = KSPROPERTY_VBICODECFILTERING.KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY
        KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY = KSPROPERTY_VBICODECFILTERING.KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY
        KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY = KSPROPERTY_VBICODECFILTERING.KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY
        KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = KSPROPERTY_VBICODECFILTERING.KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY
        KSPROPERTY_VBICODECFILTERING_STATISTICS = KSPROPERTY_VBICODECFILTERING.KSPROPERTY_VBICODECFILTERING_STATISTICS

        # An array of scanline bits 0..1024(32*32)
        _VBICODECFILTERING_SCANLINES._fields_ = [
            ('DwordBitArray', DWORD * 32),
        ]

        # An array of 4096 bits (one for each NABTS GroupID)
        _VBICODECFILTERING_NABTS_SUBSTREAMS._fields_ = [
            ('SubstreamMask', DWORD * 128),
        ]

        # An array of 32 bits (see KS_CC_SUBSTREAM *)
        _VBICODECFILTERING_CC_SUBSTREAMS._fields_ = [
            ('SubstreamMask', DWORD),
        ]

        # These KS_CC_SUBSTREAM_* bitmasks are used with
        # VBICODECFILTERING_CC_SUBSTREAMS
        KS_CC_SUBSTREAM_ODD = 0x0001        # Unfiltered Field 1 Data
        KS_CC_SUBSTREAM_EVEN = 0x0002        # Unfiltered Field 2 Data
        if NTDDI_VERSION >= NTDDI_WINXP:
            # The following flags describe CC field 1 substreams:
            # CC1,CC2,TT1,TT2
            KS_CC_SUBSTREAM_FIELD1_MASK = 0x00F0
            KS_CC_SUBSTREAM_SERVICE_CC1 = 0x0010
            KS_CC_SUBSTREAM_SERVICE_CC2 = 0x0020
            KS_CC_SUBSTREAM_SERVICE_T1 = 0x0040
            KS_CC_SUBSTREAM_SERVICE_T2 = 0x0080

            # The following flags describe CC field 2 substreams:
            # CC3,CC4,TT3,TT4,XDS
            KS_CC_SUBSTREAM_FIELD2_MASK = 0x1F00
            KS_CC_SUBSTREAM_SERVICE_CC3 = 0x0100
            KS_CC_SUBSTREAM_SERVICE_CC4 = 0x0200
            KS_CC_SUBSTREAM_SERVICE_T3 = 0x0400
            KS_CC_SUBSTREAM_SERVICE_T4 = 0x0800
            KS_CC_SUBSTREAM_SERVICE_XDS = 0x1000

            # Special Note: field 1 or 2 substreams are usually on found on
            # field 1 and 2 respectively
            # If the VBI odd/even polarity is reversed, the correct filtered
            # data will still be found.
            # /////////////////////////////////////////////////////////////////
            # Hardware decoded CC stream format
            # /////////////////////////////////////////////////////////////////
            CC_MAX_HW_DECODE_LINES = 12


            _CC_BYTE_PAIR._fields_ = [
                ('Decoded', BYTE * 2),
                ('Reserved', USHORT),
            ]

            _CC_HW_FIELD._fields_ = [
                ('ScanlinesRequested', VBICODECFILTERING_SCANLINES),
                # KS_VBI_FLAG_FIELD1,2
                ('fieldFlags', ULONG),
                ('PictureNumber', LONGLONG),
                ('Lines', CC_BYTE_PAIR * CC_MAX_HW_DECODE_LINES),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # /////////////////////////////////////////////////////////////////
        # Raw NABTS stream format (TYPE_NABTS, SUBTYPE_NABTS)
        # /////////////////////////////////////////////////////////////////
        # These low-level structures are byte packed( -Zp1 )
        if not defined(PACK_PRAGMAS_NOT_SUPPORTED):
            from pyWinAPI.shared.pshpack1_h import * # NOQA
        # END IF


        _NABTS_BUFFER_LINE._fields_ = [
            ('Confidence', BYTE),
            ('Bytes', BYTE * NABTS_BYTES_PER_LINE),
        ]
        NABTS_BUFFER_PICTURENUMBER_SUPPORT = 1


        _NABTS_BUFFER._fields_ = [
            ('ScanlinesRequested', VBICODECFILTERING_SCANLINES),
            ('PictureNumber', LONGLONG),
            ('NabtsLines', NABTS_BUFFER_LINE * MAX_NABTS_VBI_LINES_PER_FIELD),
        ]
        if not defined(PACK_PRAGMAS_NOT_SUPPORTED):
            from poppack_h import * # NOQA
        # END IF


        if NTDDI_VERSION >= NTDDI_WINXP:
            # ////////////////////////////////////////////////////////////
            # WST Codec Teletext Media Sample Format
            # ////////////////////////////////////////////////////////////
            WST_TVTUNER_CHANGE_BEGIN_TUNE = 0x1000            # Starting a tuning operation
            WST_TVTUNER_CHANGE_END_TUNE = 0x2000            # Ending a tuning operation
            MAX_WST_VBI_LINES_PER_FIELD = 17
            WST_BYTES_PER_LINE = 42


            _WST_BUFFER_LINE._fields_ = [
                ('Confidence', BYTE),
                ('Bytes', BYTE * WST_BYTES_PER_LINE),
            ]

            _WST_BUFFER._fields_ = [
                ('ScanlinesRequested', VBICODECFILTERING_SCANLINES),
                ('WstLines', WST_BUFFER_LINE * MAX_WST_VBI_LINES_PER_FIELD),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)


        # Common codec statistics
        # upstream SRBs received
        _VBICODECFILTERING_STATISTICS_COMMON._fields_ = [
            ('InputSRBsProcessed', DWORD),
            # downstream SRBs sent
            ('OutputSRBsProcessed', DWORD),
            # SRBs ignored due to no requests
            ('SRBsIgnored', DWORD),
            # SRBs dropped upstream
            ('InputSRBsMissing', DWORD),
            # Output dropped because no SRB pending
            ('OutputSRBsMissing', DWORD),
            # dropped because of other failure
            ('OutputFailures', DWORD),
            # could not process due to int. failure
            ('InternalErrors', DWORD),
            # could not process due to ext. failure
            ('ExternalErrors', DWORD),
            # discontinuities received
            ('InputDiscontinuities', DWORD),
            # DSP confidence failure
            ('DSPFailures', DWORD),
            # number of received KS_TVTUNER_CHANGE_BEGIN_TUNE and
            # KS_TVTUNER_CHANGE_END_TUNE pairs.
            ('TvTunerChanges', DWORD),
            # number of received KS_VBI_FLAG_VBIINFOHEADER_CHANGE
            ('VBIHeaderChanges', DWORD),
            # Average of all DSP confidence results
            ('LineConfidenceAvg', DWORD),
            # Bytes sent downstream
            ('BytesOutput', DWORD),
        ]

        # SRBs sent/received
        _VBICODECFILTERING_STATISTICS_COMMON_PIN._fields_ = [
            ('SRBsProcessed', DWORD),
            # SRBs ignored due to filtering
            ('SRBsIgnored', DWORD),
            # SRBs not sent/received
            ('SRBsMissing', DWORD),
            # could not send/receive due to int. failure
            ('InternalErrors', DWORD),
            # could not send/receive due to ext. failure
            ('ExternalErrors', DWORD),
            # discontinuities received/sent
            ('Discontinuities', DWORD),
            # Average of all DSP confidence results for this pin
            ('LineConfidenceAvg', DWORD),
            # Bytes sent downstream
            ('BytesOutput', DWORD),
        ]


        # Codec-specific statistics - NABTS
        # Generic VBI statistics
        _VBICODECFILTERING_STATISTICS_NABTS._fields_ = [
            ('Common', VBICODECFILTERING_STATISTICS_COMMON),
            # Un-FEC-correctable lines
            ('FECBundleBadLines', DWORD),
            # Number of times FEC queue overflowed
            ('FECQueueOverflows', DWORD),
            # Lines CSUM corrected by FEC
            ('FECCorrectedLines', DWORD),
            # FEC input lines not CSUM correctable
            ('FECUncorrectableLines', DWORD),
            # Bundles received from FEC
            ('BundlesProcessed', DWORD),
            # Bundles sent to IP driver
            ('BundlesSent2IP', DWORD),
            # Lines processed and then dropped
            ('FilteredLines', DWORD),
        ]

        # Generic VBI pin statistics
        _VBICODECFILTERING_STATISTICS_NABTS_PIN._fields_ = [
            ('Common', VBICODECFILTERING_STATISTICS_COMMON_PIN),
        ]


        # Codec-specific statistics - Closed Caption
        # Generic VBI statistics
        _VBICODECFILTERING_STATISTICS_CC._fields_ = [
            ('Common', VBICODECFILTERING_STATISTICS_COMMON),
        ]

        # Generic VBI pin statistics
        _VBICODECFILTERING_STATISTICS_CC_PIN._fields_ = [
            ('Common', VBICODECFILTERING_STATISTICS_COMMON_PIN),
        ]

        if NTDDI_VERSION >= NTDDI_WINXP:
            # Codec-specific statistics - Teletext
            # Generic VBI statistics
            _VBICODECFILTERING_STATISTICS_TELETEXT._fields_ = [
                ('Common', VBICODECFILTERING_STATISTICS_COMMON),
            ]

            # Generic VBI pin statistics
            _VBICODECFILTERING_STATISTICS_TELETEXT_PIN._fields_ = [
                ('Common', VBICODECFILTERING_STATISTICS_COMMON_PIN),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # //////////////////////////////////////////////////////////////////////////
        #
        # VBI codec property
        # structures(based on KSPROPERTY_VBICODECFILTERING enum)
        # //////////////////////////////////////////////////////////////////////////
        #
        # *** Most codecs support this property
        # KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY
        # KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY,
        KSPROPERTY_VBICODECFILTERING_SCANLINES_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Scanlines', VBICODECFILTERING_SCANLINES),
        ]

        # *** NABTS codecs support this property
        # KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY,
        # KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY,
        KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Substreams', VBICODECFILTERING_NABTS_SUBSTREAMS),
        ]

        # *** Closed captioning codecs support this property
        # KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY,
        # KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY,
        KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Substreams', VBICODECFILTERING_CC_SUBSTREAMS),
        ]

        # *** Most codecs support these versions of the global and pin
        # properties
        # KSPROPERTY_VBICODECFILTERING_STATISTICS
        KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_COMMON),
        ]

        KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_COMMON_PIN),
        ]

        # *** NABTS codecs support this version of the global and pin
        # properties
        # KSPROPERTY_VBICODECFILTERING_STATISTICS
        KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_NABTS),
        ]

        KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_NABTS_PIN),
        ]

        # *** Closed captioning codecs support this version of the global and
        # pin properties
        # KSPROPERTY_VBICODECFILTERING_STATISTICS
        KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_CC),
        ]

        KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S._fields_ = [
            ('Property', KSPROPERTY),
            ('Statistics', VBICODECFILTERING_STATISTICS_CC_PIN),
        ]

        # Standard Pin Names for the video capture filter
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PINNAME_VIDEO_CAPTURE = (
            0xFB6C4281,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        STATIC_PINNAME_CAPTURE = STATIC_PINNAME_VIDEO_CAPTURE
        PINNAME_VIDEO_CAPTURE = DEFINE_GUIDSTRUCT(
            "FB6C4281-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_CAPTURE = DEFINE_GUIDNAMED(PINNAME_VIDEO_CAPTURE)
        PINNAME_CAPTURE = PINNAME_VIDEO_CAPTURE
        if NTDDI_VERSION >= NTDDI_WINXP:
            STATIC_PINNAME_VIDEO_CC_CAPTURE = (
                0x1AAD8061,
                0x12D,
                0x11D2,
                0xB4,
                0xB1,
                0x0,
                0xA0,
                0xD1,
                0x2,
                0xCF,
                0xBE
            )
            STATIC_PINNAME_CC_CAPTURE = STATIC_PINNAME_VIDEO_CC_CAPTURE
            PINNAME_VIDEO_CC_CAPTURE = DEFINE_GUIDSTRUCT(
                "1AAD8061-012D-11d2-B4B1-00A0D102CFBE"
            )
            PINNAME_VIDEO_CC_CAPTURE = (
                DEFINE_GUIDNAMED(PINNAME_VIDEO_CC_CAPTURE)
            )
            STATIC_PINNAME_VIDEO_NABTS_CAPTURE = (
                0x29703660,
                0x498A,
                0x11D2,
                0xB4,
                0xB1,
                0x0,
                0xA0,
                0xD1,
                0x2,
                0xCF,
                0xBE
            )
            STATIC_PINNAME_NABTS_CAPTURE = STATIC_PINNAME_VIDEO_NABTS_CAPTURE
            PINNAME_VIDEO_NABTS_CAPTURE = DEFINE_GUIDSTRUCT(
                "29703660-498A-11d2-B4B1-00A0D102CFBE"
            )
            PINNAME_VIDEO_NABTS_CAPTURE = (
                DEFINE_GUIDNAMED(PINNAME_VIDEO_NABTS_CAPTURE)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        STATIC_PINNAME_VIDEO_PREVIEW = (
            0xFB6C4282,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        STATIC_PINNAME_PREVIEW = STATIC_PINNAME_VIDEO_PREVIEW
        PINNAME_VIDEO_PREVIEW = DEFINE_GUIDSTRUCT(
            "FB6C4282-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_PREVIEW = DEFINE_GUIDNAMED(PINNAME_VIDEO_PREVIEW)
        PINNAME_PREVIEW = PINNAME_VIDEO_PREVIEW
        STATIC_PINNAME_VIDEO_ANALOGVIDEOIN = (
            0xFB6C4283,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_ANALOGVIDEOIN = DEFINE_GUIDSTRUCT(
            "FB6C4283-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_ANALOGVIDEOIN = (
            DEFINE_GUIDNAMED(PINNAME_VIDEO_ANALOGVIDEOIN)
        )
        STATIC_PINNAME_VIDEO_VBI = (
            0xFB6C4284,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_VBI = DEFINE_GUIDSTRUCT(
            "FB6C4284-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_VBI = DEFINE_GUIDNAMED(PINNAME_VIDEO_VBI)
        STATIC_PINNAME_VIDEO_VIDEOPORT = (
            0xFB6C4285,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_VIDEOPORT = DEFINE_GUIDSTRUCT(
            "FB6C4285-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_VIDEOPORT = DEFINE_GUIDNAMED(PINNAME_VIDEO_VIDEOPORT)
        STATIC_PINNAME_VIDEO_NABTS = (
            0xFB6C4286,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_NABTS = DEFINE_GUIDSTRUCT(
            "FB6C4286-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_NABTS = DEFINE_GUIDNAMED(PINNAME_VIDEO_NABTS)
        STATIC_PINNAME_VIDEO_EDS = (
            0xFB6C4287,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_EDS = DEFINE_GUIDSTRUCT(
            "FB6C4287-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_EDS = DEFINE_GUIDNAMED(PINNAME_VIDEO_EDS)
        STATIC_PINNAME_VIDEO_TELETEXT = (
            0xFB6C4288,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_TELETEXT = DEFINE_GUIDSTRUCT(
            "FB6C4288-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_TELETEXT = DEFINE_GUIDNAMED(PINNAME_VIDEO_TELETEXT)
        STATIC_PINNAME_VIDEO_CC = (
            0xFB6C4289,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_CC = DEFINE_GUIDSTRUCT(
            "FB6C4289-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_CC = DEFINE_GUIDNAMED(PINNAME_VIDEO_CC)
        STATIC_PINNAME_VIDEO_STILL = (
            0xFB6C428A,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_STILL = DEFINE_GUIDSTRUCT(
            "FB6C428A-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_STILL = DEFINE_GUIDNAMED(PINNAME_VIDEO_STILL)
        STATIC_PINNAME_IMAGE = (
            0x38A0CD98,
            0xD49B,
            0x4CE8,
            0xB4,
            0x8A,
            0x34,
            0x46,
            0x67,
            0xA1,
            0x78,
            0x30
        )
        PINNAME_IMAGE = DEFINE_GUIDSTRUCT(
            "38A0CD98-D49B-4ce8-B48A-344667A17830"
        )
        PINNAME_IMAGE = DEFINE_GUIDNAMED(PINNAME_IMAGE)
        STATIC_PINNAME_VIDEO_TIMECODE = (
            0xFB6C428B,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_TIMECODE = DEFINE_GUIDSTRUCT(
            "FB6C428B-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_TIMECODE = DEFINE_GUIDNAMED(PINNAME_VIDEO_TIMECODE)
        STATIC_PINNAME_VIDEO_VIDEOPORT_VBI = (
            0xFB6C428C,
            0x353,
            0x11D1,
            0x90,
            0x5F,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PINNAME_VIDEO_VIDEOPORT_VBI = DEFINE_GUIDSTRUCT(
            "FB6C428C-0353-11d1-905F-0000C0CC16BA"
        )
        PINNAME_VIDEO_VIDEOPORT_VBI = (
            DEFINE_GUIDNAMED(PINNAME_VIDEO_VIDEOPORT_VBI)
        )

        # KSPROPSETID_VIDMEM_TRANSPORT related guids, structs and enums
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Capture MemoryAllocationFlags
        class CAPTURE_MEMORY_ALLOCATION_FLAGS(ENUM):
            KS_CAPTURE_ALLOC_INVALID = 0
            KS_CAPTURE_ALLOC_SYSTEM = 0x0001
            KS_CAPTURE_ALLOC_VRAM = 0x0002
            KS_CAPTURE_ALLOC_SYSTEM_AGP = 0x0004
            KS_CAPTURE_ALLOC_VRAM_MAPPED = 0x0008
            KS_CAPTURE_ALLOC_SECURE_BUFFER = 0x0010

        PCAPTURE_MEMORY_ALLOCATION_FLAGS = POINTER(CAPTURE_MEMORY_ALLOCATION_FLAGS)


        KS_CAPTURE_ALLOC_INVALID = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_INVALID
        KS_CAPTURE_ALLOC_SYSTEM = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_SYSTEM
        KS_CAPTURE_ALLOC_VRAM = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_VRAM
        KS_CAPTURE_ALLOC_SYSTEM_AGP = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_SYSTEM_AGP
        KS_CAPTURE_ALLOC_VRAM_MAPPED = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_VRAM_MAPPED
        KS_CAPTURE_ALLOC_SECURE_BUFFER = CAPTURE_MEMORY_ALLOCATION_FLAGS.KS_CAPTURE_ALLOC_SECURE_BUFFER


        # Video memory capture KSPROPSETID
        STATIC_KSPROPSETID_VramCapture = (
            0xE73FACE3,
            0x2880,
            0x4902,
            0xB7,
            0x99,
            0x88,
            0xD0,
            0xCD,
            0x63,
            0x4E,
            0xF
        )
        KSPROPSETID_VramCapture = DEFINE_GUIDSTRUCT(
            "E73FACE3-2880-4902-B799-88D0CD634E0F"
        )
        KSPROPSETID_VramCapture = DEFINE_GUIDNAMED(KSPROPSETID_VramCapture)


        class KSPROPERTY_VIDMEM_TRANSPORT(ENUM):
            KSPROPERTY_DISPLAY_ADAPTER_GUID = 1
            KSPROPERTY_PREFERRED_CAPTURE_SURFACE = 2
            KSPROPERTY_CURRENT_CAPTURE_SURFACE = 3
            KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = 4

        KSPROPERTY_DISPLAY_ADAPTER_GUID = KSPROPERTY_VIDMEM_TRANSPORT.KSPROPERTY_DISPLAY_ADAPTER_GUID
        KSPROPERTY_PREFERRED_CAPTURE_SURFACE = KSPROPERTY_VIDMEM_TRANSPORT.KSPROPERTY_PREFERRED_CAPTURE_SURFACE
        KSPROPERTY_CURRENT_CAPTURE_SURFACE = KSPROPERTY_VIDMEM_TRANSPORT.KSPROPERTY_CURRENT_CAPTURE_SURFACE
        KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = KSPROPERTY_VIDMEM_TRANSPORT.KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS


        def DEFINE_KSPROPERTY_ITEM_DISPLAY_ADAPTER_GUID(GetHandler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_DISPLAY_ADAPTER_GUID,
                GetHandler,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(GUID),
                NULL,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_PREFERRED_CAPTURE_SURFACE(GetHandler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_PREFERRED_CAPTURE_SURFACE,
                GetHandler,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(CAPTURE_MEMORY_ALLOCATION_FLAGS),
                NULL,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_CURRENT_CAPTURE_SURFACE(GetHandler, SetHandler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_CURRENT_CAPTURE_SURFACE,
                GetHandler,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(CAPTURE_MEMORY_ALLOCATION_FLAGS),
                SetHandler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS(GetHandler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS,
                GetHandler,
                ctypes.sizeof(VRAM_SURFACE_INFO_PROPERTY_S),
                ctypes.sizeof(DWORD),
                NULL,
                NULL,
                0,
                NULL,
                NULL,
                0
            )

        # Surface info passed on to the mini driver.
        VRAM_SURFACE_INFO._fields_ = [
            ('hSurface', UINT_PTR),
            ('VramPhysicalAddress', LONGLONG),
            ('cbCaptured', DWORD),
            ('dwWidth', DWORD),
            ('dwHeight', DWORD),
            ('dwLinearSize', DWORD),
            ('lPitch', LONG),
            ('ullReserved', ULONGLONG * 16),
        ]
        VRAM_SURFACE_INFO_PROPERTY_S._fields_ = [
            ('Property', KSPROPERTY),
            ('pVramSurfaceInfo', PVRAM_SURFACE_INFO),
        ]
        # Secure buffer info passed on to the mini driver.
        SECURE_BUFFER_INFO._fields_ = [
            ('guidBufferIdentifier', GUID),
            ('cbBufferSize', DWORD),
            ('cbCaptured', DWORD),
            ('ullReserved', ULONGLONG * 16),
        ]
        # Sceanrio ID for secure buffer for camera
        STATIC_KS_SECURE_CAMERA_SCENARIO_ID = (
            0xAE53FC6E,
            0x8D89,
            0x4488,
            0x9D,
            0x2E,
            0x4D,
            0x00,
            0x87,
            0x31,
            0xC5,
            0xFD
        )
        KS_SECURE_CAMERA_SCENARIO_ID = DEFINE_GUIDSTRUCT(
            "AE53FC6E-8D89-4488-9D2E-4D008731C5FD"
        )
        KS_SECURE_CAMERA_SCENARIO_ID = (
            DEFINE_GUIDNAMED(KS_SECURE_CAMERA_SCENARIO_ID)
        )
        STATIC_KSPROPSETID_MPEG4_MediaType_Attributes = (
            0xFF6C4BFA,
            0x7A9,
            0x4C7B,
            0xA2,
            0x37,
            0x67,
            0x2F,
            0x9D,
            0x68,
            0x6,
            0x5F
        )
        KSPROPSETID_MPEG4_MediaType_Attributes = DEFINE_GUIDSTRUCT(
            "FF6C4BFA-07A9-4c7b-A237-672F9D68065F"
        )
        KSPROPSETID_MPEG4_MediaType_Attributes = (
            DEFINE_GUIDNAMED(KSPROPSETID_MPEG4_MediaType_Attributes)
        )


        class KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES(ENUM):
            KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 1

        KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES.KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX
        STATIC_KSEVENTSETID_DynamicFormatChange = (
            0x162AC456,
            0x83D7,
            0x4239,
            0x96,
            0xDF,
            0xC7,
            0x5F,
            0xFA,
            0x13,
            0x8B,
            0xC6
        )
        KSEVENTSETID_DynamicFormatChange = DEFINE_GUIDSTRUCT(
            "162AC456-83D7-4239-96DF-C75FFA138BC6"
        )
        KSEVENTSETID_DynamicFormatChange = (
            DEFINE_GUIDNAMED(KSEVENTSETID_DynamicFormatChange)
        )


        class KSEVENT_DYNAMICFORMATCHANGE(ENUM):
            KSEVENT_DYNAMIC_FORMAT_CHANGE = 0

        KSEVENT_DYNAMIC_FORMAT_CHANGE = KSEVENT_DYNAMICFORMATCHANGE.KSEVENT_DYNAMIC_FORMAT_CHANGE

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # KSSTREAM_HEADER extensions for digital video
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        KS_VIDEO_FLAG_FIELD_MASK = 0x0003        # Frame or Field (default is frame)
        KS_VIDEO_FLAG_FRAME = 0x0000        # Frame or Field (default is frame)
        KS_VIDEO_FLAG_FIELD1 = 0x0001
        KS_VIDEO_FLAG_FIELD2 = 0x0002
        KS_VIDEO_FLAG_FIELD1FIRST = 0x0004
        KS_VIDEO_FLAG_WEAVE = 0x0008
        KS_VIDEO_FLAG_IPB_MASK = 0x0030        # I, B, or P (default is I)
        KS_VIDEO_FLAG_I_FRAME = 0x0000        # I, B, or P (default is I)
        KS_VIDEO_FLAG_P_FRAME = 0x0010
        KS_VIDEO_FLAG_B_FRAME = 0x0020
        KS_VIDEO_FLAG_REPEAT_FIELD = 0x0040


        # Size of this extended header
        class _Union_7(ctypes.Union):
            pass


        _Union_7._fields_ = [
            ('lSurfacePitch', LONG),
            # Contains surface pitch a.k.a stride
            ('Reserved1', DWORD),
        ]
        tagKS_FRAME_INFO._Union_7 = _Union_7


        class _Union_8(ctypes.Union):
            pass


        class _Struct_1(ctypes.Structure):
            pass


        _Struct_1._fields_ = [
            ('Reserved3', DWORD),
            ('Reserved4', DWORD),
        ]
        _Union_8._Struct_1 = _Struct_1

        _Union_8._anonymous_ = (
            '_Struct_1',
        )

        _Union_8._fields_ = [
            ('_Struct_1', _Union_8._Struct_1),
            ('FrameCompletionNumber', ULONGLONG),
        ]
        tagKS_FRAME_INFO._Union_8 = _Union_8

        tagKS_FRAME_INFO._anonymous_ = (
            '_Union_7',
            '_Union_8',
        )

        tagKS_FRAME_INFO._fields_ = [
            ('ExtendedHeaderSize', ULONG),
            # Field1, Field2, or Frame
            ('dwFrameFlags', DWORD),
            ('PictureNumber', LONGLONG),
            ('DropCount', LONGLONG),
            # user mode DDraw handle
            ('hDirectDraw', HANDLE),
            # user mode surface handle
            ('hSurfaceHandle', HANDLE),
            # portion of surface locked
            ('DirectDrawRect', RECT),
            ('_Union_7', tagKS_FRAME_INFO._Union_7),
            ('Reserved2', DWORD),
            ('_Union_8', tagKS_FRAME_INFO._Union_8),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # KSSTREAM_HEADER extensions for VBI
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION < NTDDI_WINXP:
            KS_VBI_FLAG_FRAME = 0x0000            # Frame or Field (default is frame)
        # END IF


        KS_VBI_FLAG_FIELD1 = 0x0001
        KS_VBI_FLAG_FIELD2 = 0x0002
        if NTDDI_VERSION >= NTDDI_WINXP:
            KS_VBI_FLAG_MV_PRESENT = 0x0100
            KS_VBI_FLAG_MV_HARDWARE = 0x0200
            KS_VBI_FLAG_MV_DETECTED = 0x0400
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        KS_VBI_FLAG_TVTUNER_CHANGE = 0x0010        # TvTunerChangeInfo is valid
        KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 0x0020        # VBIInfoHeader is valid


        # Size of this extended header
        tagKS_VBI_FRAME_INFO._fields_ = [
            ('ExtendedHeaderSize', ULONG),
            # Field1, Field2, or Frame; & etc
            ('dwFrameFlags', DWORD),
            # Test only?
            ('PictureNumber', LONGLONG),
            # Test only?
            ('DropCount', LONGLONG),
            ('dwSamplingFrequency', DWORD),
            ('TvTunerChangeInfo', KS_TVTUNER_CHANGE_INFO),
            ('VBIInfoHeader', KS_VBIINFOHEADER),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Analog video formats, used with:
        # Analog Video Decoders
        # TVTuners
        # Analog Video Encoders
        # XXX_STANDARDS_SUPPORTED returns a bitmask
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        class KS_AnalogVideoStandard(ENUM):
            KS_AnalogVideo_None = 0x00000000
            KS_AnalogVideo_NTSC_M = 0x00000001
            KS_AnalogVideo_NTSC_M_J = 0x00000002
            KS_AnalogVideo_NTSC_433 = 0x00000004
            KS_AnalogVideo_PAL_B = 0x00000010
            KS_AnalogVideo_PAL_D = 0x00000020
            KS_AnalogVideo_PAL_G = 0x00000040
            KS_AnalogVideo_PAL_H = 0x00000080
            KS_AnalogVideo_PAL_I = 0x00000100
            KS_AnalogVideo_PAL_M = 0x00000200
            KS_AnalogVideo_PAL_N = 0x00000400
            KS_AnalogVideo_PAL_60 = 0x00000800
            KS_AnalogVideo_SECAM_B = 0x00001000
            KS_AnalogVideo_SECAM_D = 0x00002000
            KS_AnalogVideo_SECAM_G = 0x00004000
            KS_AnalogVideo_SECAM_H = 0x00008000
            KS_AnalogVideo_SECAM_K = 0x00010000
            KS_AnalogVideo_SECAM_K1 = 0x00020000
            KS_AnalogVideo_SECAM_L = 0x00040000
            KS_AnalogVideo_SECAM_L1 = 0x00080000
            if NTDDI_VERSION >= NTDDI_WINXP:
                KS_AnalogVideo_PAL_N_COMBO = 0x00100000
            # END IF

        KS_AnalogVideo_None = KS_AnalogVideoStandard.KS_AnalogVideo_None
        KS_AnalogVideo_NTSC_M = KS_AnalogVideoStandard.KS_AnalogVideo_NTSC_M
        KS_AnalogVideo_NTSC_M_J = KS_AnalogVideoStandard.KS_AnalogVideo_NTSC_M_J
        KS_AnalogVideo_NTSC_433 = KS_AnalogVideoStandard.KS_AnalogVideo_NTSC_433
        KS_AnalogVideo_PAL_B = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_B
        KS_AnalogVideo_PAL_D = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_D
        KS_AnalogVideo_PAL_G = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_G
        KS_AnalogVideo_PAL_H = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_H
        KS_AnalogVideo_PAL_I = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_I
        KS_AnalogVideo_PAL_M = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_M
        KS_AnalogVideo_PAL_N = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_N
        KS_AnalogVideo_PAL_60 = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_60
        KS_AnalogVideo_SECAM_B = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_B
        KS_AnalogVideo_SECAM_D = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_D
        KS_AnalogVideo_SECAM_G = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_G
        KS_AnalogVideo_SECAM_H = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_H
        KS_AnalogVideo_SECAM_K = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_K
        KS_AnalogVideo_SECAM_K1 = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_K1
        KS_AnalogVideo_SECAM_L = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_L
        KS_AnalogVideo_SECAM_L1 = KS_AnalogVideoStandard.KS_AnalogVideo_SECAM_L1
        if NTDDI_VERSION >= NTDDI_WINXP:
            KS_AnalogVideo_PAL_N_COMBO = KS_AnalogVideoStandard.KS_AnalogVideo_PAL_N_COMBO
        # END IF

        KS_AnalogVideo_NTSC_Mask = 0x00000007
        if NTDDI_VERSION >= NTDDI_WINXP:
            KS_AnalogVideo_PAL_Mask = 0x00100FF0
        else:
            KS_AnalogVideo_PAL_Mask = 0x00000FF0
        # END IF


        KS_AnalogVideo_SECAM_Mask = 0x000FF000

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Property set definitions
        # The comments show whether a given property is:
        # R : READ only
        # w : WRITE only
        # RW : READ / WRITE
        # O : Optional (return E_UNSUPPORTED if you don't handle this)
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_ALLOCATOR_CONTROL = (
            0x53171960,
            0x148E,
            0x11D2,
            0x99,
            0x79,
            0x0,
            0x0,
            0xC0,
            0xCC,
            0x16,
            0xBA
        )
        PROPSETID_ALLOCATOR_CONTROL = DEFINE_GUIDSTRUCT(
            "53171960-148E-11d2-9979-0000C0CC16BA"
        )
        PROPSETID_ALLOCATOR_CONTROL = (
            DEFINE_GUIDNAMED(PROPSETID_ALLOCATOR_CONTROL)
        )


        class KSPROPERTY_ALLOCATOR_CONTROL(ENUM):
            KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT = 1
            KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE = 2
            if NTDDI_VERSION >= NTDDI_WINXP:
                KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS = 3
                KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 4
            # END IF

        KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT = KSPROPERTY_ALLOCATOR_CONTROL.KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT
        KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE = KSPROPERTY_ALLOCATOR_CONTROL.KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE
        if NTDDI_VERSION >= NTDDI_WINXP:
            KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS = KSPROPERTY_ALLOCATOR_CONTROL.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS
            KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = KSPROPERTY_ALLOCATOR_CONTROL.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE
        # END IF

        if NTDDI_VERSION >= NTDDI_WINXP:
            # KSPROPERTY Property;
            KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S._fields_ = [
                ('CX', ULONG),
                ('CY', ULONG),
            ]

            # KSPROPERTY Property;
            KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S._fields_ = [
                ('InterleavedCapSupported', ULONG),
            ]

            # KSPROPERTY Property;
            KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S._fields_ = [
                ('InterleavedCapPossible', ULONG),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP = (
            0xC6E13360,
            0x30AC,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_VIDEOPROCAMP = DEFINE_GUIDSTRUCT(
            "C6E13360-30AC-11d0-A18C-00A0C9118956"
        )
        PROPSETID_VIDCAP_VIDEOPROCAMP = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_VIDEOPROCAMP)
        )


        class KSPROPERTY_VIDCAP_VIDEOPROCAMP(ENUM):
            KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = 1
            KSPROPERTY_VIDEOPROCAMP_CONTRAST = 2
            KSPROPERTY_VIDEOPROCAMP_HUE = 3
            KSPROPERTY_VIDEOPROCAMP_SATURATION = 4
            KSPROPERTY_VIDEOPROCAMP_SHARPNESS = 5
            KSPROPERTY_VIDEOPROCAMP_GAMMA = 6
            KSPROPERTY_VIDEOPROCAMP_COLORENABLE = 7
            KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE = 8
            KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION = 9
            if NTDDI_VERSION >= NTDDI_WINXP:
                KSPROPERTY_VIDEOPROCAMP_GAIN = 10
                if (
                    NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
                    NTDDI_VERSION >= NTDDI_WS03SP1
                ):
                    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER = 11
                    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = 12
                    KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT = 13
                    KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY = 14
                # END IF

            # END IF

        KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS
        KSPROPERTY_VIDEOPROCAMP_CONTRAST = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_CONTRAST
        KSPROPERTY_VIDEOPROCAMP_HUE = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_HUE
        KSPROPERTY_VIDEOPROCAMP_SATURATION = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_SATURATION
        KSPROPERTY_VIDEOPROCAMP_SHARPNESS = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_SHARPNESS
        KSPROPERTY_VIDEOPROCAMP_GAMMA = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_GAMMA
        KSPROPERTY_VIDEOPROCAMP_COLORENABLE = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_COLORENABLE
        KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE
        KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION
        if NTDDI_VERSION >= NTDDI_WINXP:
            KSPROPERTY_VIDEOPROCAMP_GAIN = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_GAIN
            if (
                NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
                NTDDI_VERSION >= NTDDI_WS03SP1
            ):
                KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER
                KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT
                KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT
                KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY = KSPROPERTY_VIDCAP_VIDEOPROCAMP.KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY
            # END IF
        # END IF


        KSPROPERTY_VIDEOPROCAMP_S._fields_ = [
            ('Property', KSPROPERTY),
            # Value to set or get
            ('Value', LONG),
            # KSPROPERTY_VIDEOPROCAMP_FLAGS_*
            ('Flags', ULONG),
            # KSPROPERTY_VIDEOPROCAMP_FLAGS_*
            ('Capabilities', ULONG),
        ]
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSPROPERTY_VIDEOPROCAMP_NODE_S._fields_ = [
                ('NodeProperty', KSP_NODE),
                # Value to set or get
                ('Value', LONG),
                # KSPROPERTY_VIDEOPROCAMP_FLAGS_*
                ('Flags', ULONG),
                # KSPROPERTY_VIDEOPROCAMP_FLAGS_*
                ('Capabilities', ULONG),
            ]

            KSPROPERTY_VIDEOPROCAMP_S2._fields_ = [
                ('Property', KSPROPERTY),
                ('Value1', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
                ('Value2', LONG),
            ]

            KSPROPERTY_VIDEOPROCAMP_NODE_S2._fields_ = [
                ('NodeProperty', KSP_NODE),
                ('Value1', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
                ('Value2', LONG),
            ]
        # END IF   XP SP2 and later (chronologically)

        KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO = 0x0001
        KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 0x0002

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            STATIC_PROPSETID_VIDCAP_SELECTOR = (
                0x1ABDAECA,
                0x68B6,
                0x4F83,
                0x93,
                0x71,
                0xB4,
                0x13,
                0x90,
                0x7C,
                0x7B,
                0x9F
            )
            PROPSETID_VIDCAP_SELECTOR = DEFINE_GUIDSTRUCT(
                "1ABDAECA-68B6-4F83-9371-B413907C7B9F"
            )
            PROPSETID_VIDCAP_SELECTOR = (
                DEFINE_GUIDNAMED(PROPSETID_VIDCAP_SELECTOR)
            )


            class KSPROPERTY_VIDCAP_SELECTOR(ENUM):
                KSPROPERTY_SELECTOR_SOURCE_NODE_ID = 1
                KSPROPERTY_SELECTOR_NUM_SOURCES = 2

            PKSPROPERTY_VIDCAP_SELECTOR = POINTER(KSPROPERTY_VIDCAP_SELECTOR)


            KSPROPERTY_SELECTOR_SOURCE_NODE_ID = KSPROPERTY_VIDCAP_SELECTOR.KSPROPERTY_SELECTOR_SOURCE_NODE_ID
            KSPROPERTY_SELECTOR_NUM_SOURCES = KSPROPERTY_VIDCAP_SELECTOR.KSPROPERTY_SELECTOR_NUM_SOURCES

            KSPROPERTY_SELECTOR_S._fields_ = [
                ('Property', KSPROPERTY),
                # Value to set or get
                ('Value', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
            ]

            KSPROPERTY_SELECTOR_NODE_S._fields_ = [
                ('NodeProperty', KSP_NODE),
                # Value to set or get
                ('Value', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
            ]
        # END IF   XP SP2 and later (chronologically)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_TUNER = (
            0x6A2E0605,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_TUNER = DEFINE_GUIDSTRUCT(
            "6a2e0605-28e4-11d0-a18c-00a0c9118956"
        )
        PROPSETID_TUNER = DEFINE_GUIDNAMED(PROPSETID_TUNER)


        class KSPROPERTY_TUNER(ENUM):
            KSPROPERTY_TUNER_CAPS = 1
            KSPROPERTY_TUNER_MODE_CAPS = 2
            KSPROPERTY_TUNER_MODE = 3
            KSPROPERTY_TUNER_STANDARD = 4
            KSPROPERTY_TUNER_FREQUENCY = 5
            KSPROPERTY_TUNER_INPUT = 6
            KSPROPERTY_TUNER_STATUS = 7
            KSPROPERTY_TUNER_IF_MEDIUM = 8
            KSPROPERTY_TUNER_SCAN_CAPS = 9
            KSPROPERTY_TUNER_SCAN_STATUS = 10
            KSPROPERTY_TUNER_STANDARD_MODE = 11
            KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = 12

        KSPROPERTY_TUNER_CAPS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_CAPS
        KSPROPERTY_TUNER_MODE_CAPS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_MODE_CAPS
        KSPROPERTY_TUNER_MODE = KSPROPERTY_TUNER.KSPROPERTY_TUNER_MODE
        KSPROPERTY_TUNER_STANDARD = KSPROPERTY_TUNER.KSPROPERTY_TUNER_STANDARD
        KSPROPERTY_TUNER_FREQUENCY = KSPROPERTY_TUNER.KSPROPERTY_TUNER_FREQUENCY
        KSPROPERTY_TUNER_INPUT = KSPROPERTY_TUNER.KSPROPERTY_TUNER_INPUT
        KSPROPERTY_TUNER_STATUS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_STATUS
        KSPROPERTY_TUNER_IF_MEDIUM = KSPROPERTY_TUNER.KSPROPERTY_TUNER_IF_MEDIUM
        KSPROPERTY_TUNER_SCAN_CAPS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_SCAN_CAPS
        KSPROPERTY_TUNER_SCAN_STATUS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_SCAN_STATUS
        KSPROPERTY_TUNER_STANDARD_MODE = KSPROPERTY_TUNER.KSPROPERTY_TUNER_STANDARD_MODE
        KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = KSPROPERTY_TUNER.KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS

        # Tuning support definitions and interfaces
        # Definitions
        class KSPROPERTY_TUNER_MODES(ENUM):
            KSPROPERTY_TUNER_MODE_TV = 0x0001
            KSPROPERTY_TUNER_MODE_FM_RADIO = 0x0002
            KSPROPERTY_TUNER_MODE_AM_RADIO = 0x0004
            KSPROPERTY_TUNER_MODE_DSS = 0x0008
            KSPROPERTY_TUNER_MODE_ATSC = 0x0010

        KSPROPERTY_TUNER_MODE_TV = KSPROPERTY_TUNER_MODES.KSPROPERTY_TUNER_MODE_TV
        KSPROPERTY_TUNER_MODE_FM_RADIO = KSPROPERTY_TUNER_MODES.KSPROPERTY_TUNER_MODE_FM_RADIO
        KSPROPERTY_TUNER_MODE_AM_RADIO = KSPROPERTY_TUNER_MODES.KSPROPERTY_TUNER_MODE_AM_RADIO
        KSPROPERTY_TUNER_MODE_DSS = KSPROPERTY_TUNER_MODES.KSPROPERTY_TUNER_MODE_DSS
        KSPROPERTY_TUNER_MODE_ATSC = KSPROPERTY_TUNER_MODES.KSPROPERTY_TUNER_MODE_ATSC

        # Describes how the device tunes. Only one of these flags may be set
        # in KSPROPERTY_TUNER_MODE_CAPS_S.Strategy
        # Describe how the driver should attempt to tune:
        # EXACT: just go to the frequency specified (no fine tuning)
        # FINE: (slow) do an exhaustive search for the best signal
        # COARSE: (fast) use larger frequency jumps to just determine if any
        # signal
        class KS_TUNER_TUNING_FLAGS(ENUM):
            KS_TUNER_TUNING_EXACT = 1
            KS_TUNER_TUNING_FINE = 2
            KS_TUNER_TUNING_COARSE = 3

        KS_TUNER_TUNING_EXACT = KS_TUNER_TUNING_FLAGS.KS_TUNER_TUNING_EXACT
        KS_TUNER_TUNING_FINE = KS_TUNER_TUNING_FLAGS.KS_TUNER_TUNING_FINE
        KS_TUNER_TUNING_COARSE = KS_TUNER_TUNING_FLAGS.KS_TUNER_TUNING_COARSE


        class KS_TUNER_STRATEGY(ENUM):
            KS_TUNER_STRATEGY_PLL = 0x01
            KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0x02
            KS_TUNER_STRATEGY_DRIVER_TUNES = 0x04

        KS_TUNER_STRATEGY_PLL = KS_TUNER_STRATEGY.KS_TUNER_STRATEGY_PLL
        KS_TUNER_STRATEGY_SIGNAL_STRENGTH = KS_TUNER_STRATEGY.KS_TUNER_STRATEGY_SIGNAL_STRENGTH
        KS_TUNER_STRATEGY_DRIVER_TUNES = KS_TUNER_STRATEGY.KS_TUNER_STRATEGY_DRIVER_TUNES

        # Tuning operations
        KSPROPERTY_TUNER_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # KS_PROPERTY_TUNER_MODES_*
            ('ModesSupported', ULONG),
            # GUID_NULL (no pin), or GUID
            ('VideoMedium', KSPIN_MEDIUM),
            # GUID_NULL (no pin), or GUID
            ('TVAudioMedium', KSPIN_MEDIUM),
            # GUID_NULL (no pin), or GUID
            ('RadioAudioMedium', KSPIN_MEDIUM),
        ]

        KSPROPERTY_TUNER_IF_MEDIUM_S._fields_ = [
            ('Property', KSPROPERTY),
            # GUID_NULL (no pin), or GUID
            ('IFMedium', KSPIN_MEDIUM),
        ]

        KSPROPERTY_TUNER_MODE_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # IN: KSPROPERTY_TUNER_MODE
            ('Mode', ULONG),
            # KS_AnalogVideo_* (if TV or DSS)
            ('StandardsSupported', ULONG),
            # Hz
            ('MinFrequency', ULONG),
            # Hz
            ('MaxFrequency', ULONG),
            # Hz
            ('TuningGranularity', ULONG),
            # count of inputs
            ('NumberOfInputs', ULONG),
            # milliSeconds
            ('SettlingTime', ULONG),
            # KS_TUNER_STRATEGY
            ('Strategy', ULONG),
        ]

        KSPROPERTY_TUNER_MODE_S._fields_ = [
            ('Property', KSPROPERTY),
            # IN: KSPROPERTY_TUNER_MODE
            ('Mode', ULONG),
        ]

        KSPROPERTY_TUNER_FREQUENCY_S._fields_ = [
            ('Property', KSPROPERTY),
            # Hz
            ('Frequency', ULONG),
            # Hz (last known good)
            ('LastFrequency', ULONG),
            # KS_TUNER_TUNING_FLAGS
            ('TuningFlags', ULONG),
            # DSS
            ('VideoSubChannel', ULONG),
            # DSS
            ('AudioSubChannel', ULONG),
            # VBI decoders
            ('Channel', ULONG),
            # VBI decoders
            ('Country', ULONG),
        ]

        KSPROPERTY_TUNER_STANDARD_S._fields_ = [
            ('Property', KSPROPERTY),
            # KS_AnalogVideo_*
            ('Standard', ULONG),
        ]

        KSPROPERTY_TUNER_STANDARD_MODE_S._fields_ = [
            ('Property', KSPROPERTY),
            # RW - specifies whether the driver is in auto-detect mode for the
            # signal standard
            ('AutoDetect', BOOL),
        ]

        KSPROPERTY_TUNER_INPUT_S._fields_ = [
            ('Property', KSPROPERTY),
            # 0 to (n-1) inputs
            ('InputIndex', ULONG),
        ]

        KSPROPERTY_TUNER_STATUS_S._fields_ = [
            ('Property', KSPROPERTY),
            # Hz
            ('CurrentFrequency', ULONG),
            # if Strategy.KS_TUNER_STRATEGY_PLL
            ('PLLOffset', ULONG),
            # if Stretegy.KS_TUNER_STRATEGY_SIGNAL_STRENGTH
            ('SignalStrength', ULONG),
            # TRUE if in the process of tuning
            ('Busy', ULONG),
        ]

        # Exhaustive Scanning tuner support definitions and interfaces
        # Definitions
        class _TunerDecoderLockType(ENUM):
            Tuner_LockType_None = 0x00

            # Signal is near by, not able to report exact frequency. Can be
            # returned at end of scan.
            Tuner_LockType_Within_Scan_Sensing_Range = 0x01

            # Fine tune signal lock established. Can be returned at end of
            # scan.
            Tuner_LockType_Locked = 0x02

        TunerLockType = _TunerDecoderLockType

        # Data structures returned for
        # KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S operations
        # IN -KSPROPERTY_TUNER_MODE
        TUNER_ANALOG_CAPS_S._fields_ = [
            ('Mode', ULONG),
            # KS_AnalogVideo_* (defined in KS_AnalogVideoStandard)
            ('StandardsSupported', ULONG),
            # R -Hz
            ('MinFrequency', ULONG),
            # R -Hz
            ('MaxFrequency', ULONG),
            # R -Hz
            ('TuningGranularity', ULONG),
            # R -milliSeconds
            ('SettlingTime', ULONG),
            # R -max range (Hz) in which tuner can detect presence of a signal
            ('ScanSensingRange', ULONG),
            # R -max range (Hz) in which tuner can detect actual frequency of
            # a signal
            ('FineTuneSensingRange', ULONG),
        ]

        # ...
        # More to come if new structures are needed for different network
        # types.
        STATIC_EVENTSETID_TUNER = (
            0x6A2E0606,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        EVENTSETID_TUNER = DEFINE_GUIDSTRUCT(
            "6a2e0606-28e4-11d0-a18c-00a0c9118956"
        )
        EVENTSETID_TUNER = DEFINE_GUIDNAMED(EVENTSETID_TUNER)


        class KSEVENT_TUNER(ENUM):
            KSEVENT_TUNER_CHANGED = 1
            KSEVENT_TUNER_INITIATE_SCAN = 2

        KSEVENT_TUNER_CHANGED = KSEVENT_TUNER.KSEVENT_TUNER_CHANGED
        KSEVENT_TUNER_INITIATE_SCAN = KSEVENT_TUNER.KSEVENT_TUNER_INITIATE_SCAN

        # Exhaustive Scanning operations
        # Determine if ES is possible with device
        KSPROPERTY_TUNER_SCAN_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # R
            ('fSupportsHardwareAssistedScanning', BOOL),
            # R
            ('SupportedBroadcastStandards', ULONG),
            # RW
            ('GUIDBucket', PVOID),
            # R
            ('lengthofBucket', ULONG),
        ]

        # Get specific network type capabilities structure
        # (such as TUNER_ANALOG_CAPS_S for example)
        KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # R -one of the interested GUIDs returned in
            # KSPROPERTY_TUNER_SCAN_CAPS_S
            ('NetworkType', GUID),
            # R -size of the buffer;
            ('BufferSize', ULONG),
            # RW -Buffer
            ('NetworkTunerCapabilities', PVOID),
        ]

        # Obtain current scan operation status
        KSPROPERTY_TUNER_SCAN_STATUS_S._fields_ = [
            ('Property', KSPROPERTY),
            # R -none, within scan sensing range, or locked
            ('LockStatus', TunerLockType),
            # R -current frequency
            ('CurrentFrequency', ULONG),
        ]

        # Start a scan
        KSEVENT_TUNER_INITIATE_SCAN_S._fields_ = [
            ('EventData', KSEVENTDATA),
            # W -initial frequency for the scan
            ('StartFrequency', ULONG),
            # W -final frequency for the scan
            ('EndFrequency', ULONG),
        ]

        # Kernel Streaming Video node type definitions
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            # USB Video Class Definitions
            STATIC_KSNODETYPE_VIDEO_STREAMING = (
                0xDFF229E1,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_STREAMING = DEFINE_GUIDSTRUCT(
                "DFF229E1-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_STREAMING = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_STREAMING)
            )
            STATIC_KSNODETYPE_VIDEO_INPUT_TERMINAL = (
                0xDFF229E2,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_INPUT_TERMINAL = DEFINE_GUIDSTRUCT(
                "DFF229E2-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_INPUT_TERMINAL = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_INPUT_TERMINAL)
            )
            STATIC_KSNODETYPE_VIDEO_OUTPUT_TERMINAL = (
                0xDFF229E3,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_OUTPUT_TERMINAL = DEFINE_GUIDSTRUCT(
                "DFF229E3-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_OUTPUT_TERMINAL = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_OUTPUT_TERMINAL)
            )
            STATIC_KSNODETYPE_VIDEO_SELECTOR = (
                0xDFF229E4,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_SELECTOR = DEFINE_GUIDSTRUCT(
                "DFF229E4-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_SELECTOR = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_SELECTOR)
            )
            STATIC_KSNODETYPE_VIDEO_PROCESSING = (
                0xDFF229E5,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_PROCESSING = DEFINE_GUIDSTRUCT(
                "DFF229E5-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_PROCESSING = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_PROCESSING)
            )
            STATIC_KSNODETYPE_VIDEO_CAMERA_TERMINAL = (
                0xDFF229E6,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_CAMERA_TERMINAL = DEFINE_GUIDSTRUCT(
                "DFF229E6-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_CAMERA_TERMINAL = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_CAMERA_TERMINAL)
            )
            STATIC_KSNODETYPE_VIDEO_INPUT_MTT = (
                0xDFF229E7,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_INPUT_MTT = DEFINE_GUIDSTRUCT(
                "DFF229E7-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_INPUT_MTT = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_INPUT_MTT)
            )
            STATIC_KSNODETYPE_VIDEO_OUTPUT_MTT = (
                0xDFF229E8,
                0xF70F,
                0x11D0,
                0xB9,
                0x17,
                0x00,
                0xA0,
                0xC9,
                0x22,
                0x31,
                0x96
            )
            KSNODETYPE_VIDEO_OUTPUT_MTT = DEFINE_GUIDSTRUCT(
                "DFF229E8-F70F-11D0-B917-00A0C9223196"
            )
            KSNODETYPE_VIDEO_OUTPUT_MTT = (
                DEFINE_GUIDNAMED(KSNODETYPE_VIDEO_OUTPUT_MTT)
            )
        # END IF   XP SP2 and later (chronologically)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_VIDEOENCODER = (
            0x6A2E0610,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_VIDEOENCODER = DEFINE_GUIDSTRUCT(
            "6a2e0610-28e4-11d0-a18c-00a0c9118956"
        )
        PROPSETID_VIDCAP_VIDEOENCODER = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_VIDEOENCODER)
        )


        class KSPROPERTY_VIDCAP_VIDEOENCODER(ENUM):
            KSPROPERTY_VIDEOENCODER_CAPS = 1
            KSPROPERTY_VIDEOENCODER_STANDARD = 2
            KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 3
            KSPROPERTY_VIDEOENCODER_CC_ENABLE = 4

        KSPROPERTY_VIDEOENCODER_CAPS = KSPROPERTY_VIDCAP_VIDEOENCODER.KSPROPERTY_VIDEOENCODER_CAPS
        KSPROPERTY_VIDEOENCODER_STANDARD = KSPROPERTY_VIDCAP_VIDEOENCODER.KSPROPERTY_VIDEOENCODER_STANDARD
        KSPROPERTY_VIDEOENCODER_COPYPROTECTION = KSPROPERTY_VIDCAP_VIDEOENCODER.KSPROPERTY_VIDEOENCODER_COPYPROTECTION
        KSPROPERTY_VIDEOENCODER_CC_ENABLE = KSPROPERTY_VIDCAP_VIDEOENCODER.KSPROPERTY_VIDEOENCODER_CC_ENABLE

        KSPROPERTY_VIDEOENCODER_S._fields_ = [
            ('Property', KSPROPERTY),
            # value to get or set
            ('Value', LONG),
            ('Flags', ULONG),
            ('Capabilities', ULONG),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_VIDEODECODER = (
            0xC6E13350,
            0x30AC,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_VIDEODECODER = DEFINE_GUIDSTRUCT(
            "C6E13350-30AC-11d0-A18C-00A0C9118956"
        )
        PROPSETID_VIDCAP_VIDEODECODER = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_VIDEODECODER)
        )


        class KSPROPERTY_VIDCAP_VIDEODECODER(ENUM):
            KSPROPERTY_VIDEODECODER_CAPS = 1
            KSPROPERTY_VIDEODECODER_STANDARD = 2
            KSPROPERTY_VIDEODECODER_STATUS = 3
            KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 4
            KSPROPERTY_VIDEODECODER_VCR_TIMING = 5
            KSPROPERTY_VIDEODECODER_STATUS2 = 6

        KSPROPERTY_VIDEODECODER_CAPS = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_CAPS
        KSPROPERTY_VIDEODECODER_STANDARD = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_STANDARD
        KSPROPERTY_VIDEODECODER_STATUS = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_STATUS
        KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE
        KSPROPERTY_VIDEODECODER_VCR_TIMING = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_VCR_TIMING
        KSPROPERTY_VIDEODECODER_STATUS2 = KSPROPERTY_VIDCAP_VIDEODECODER.KSPROPERTY_VIDEODECODER_STATUS2


        class KS_VIDEODECODER_FLAGS(ENUM):
            KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT = 0x0001
            KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 0x0002
            KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 0x0004

        KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT = KS_VIDEODECODER_FLAGS.KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT
        KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = KS_VIDEODECODER_FLAGS.KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING
        KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = KS_VIDEODECODER_FLAGS.KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED

        KSPROPERTY_VIDEODECODER_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # KS_AnalogVideo_*
            ('StandardsSupported', ULONG),
            # KS_VIDEODECODER_FLAGS_*
            ('Capabilities', ULONG),
            # milliseconds
            ('SettlingTime', ULONG),
            # Number of HSync Pulses per VSync
            ('HSyncPerVSync', ULONG),
        ]

        KSPROPERTY_VIDEODECODER_STATUS_S._fields_ = [
            ('Property', KSPROPERTY),
            # 525 or 625 lines detected
            ('NumberOfLines', ULONG),
            # TRUE if signal is locked
            ('SignalLocked', ULONG),
        ]

        KSPROPERTY_VIDEODECODER_STATUS2_S._fields_ = [
            ('Property', KSPROPERTY),
            # R - 525 or 625 lines detected
            ('NumberOfLines', ULONG),
            # R - TRUE if signal is locked
            ('SignalLocked', ULONG),
            # R - TRUE if a chroma signal is present
            ('ChromaLock', ULONG),
        ]

        KSPROPERTY_VIDEODECODER_S._fields_ = [
            ('Property', KSPROPERTY),
            # Get or set a value
            ('Value', ULONG),
        ]
        STATIC_EVENTSETID_VIDEODECODER = (
            0x6A2E0621,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        EVENTSETID_VIDEODECODER = DEFINE_GUIDSTRUCT(
            "6a2e0621-28e4-11d0-a18c-00a0c9118956"
        )
        EVENTSETID_VIDEODECODER = DEFINE_GUIDNAMED(EVENTSETID_VIDEODECODER)


        class KSEVENT_VIDEODECODER(ENUM):
            KSEVENT_VIDEODECODER_CHANGED = 1

        KSEVENT_VIDEODECODER_CHANGED = KSEVENT_VIDEODECODER.KSEVENT_VIDEODECODER_CHANGED

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        if NTDDI_VERSION >= NTDDI_WIN8:
            STATIC_KSEVENTSETID_CameraAsyncControl = (
                0x22A11754,
                0x9701,
                0x4088,
                0xB3,
                0x3F,
                0x6B,
                0x9C,
                0xBC,
                0x52,
                0xDF,
                0x5E
            )
            KSEVENTSETID_CameraAsyncControl = DEFINE_GUIDSTRUCT(
                "22A11754-9701-4088-B33F-6B9CBC52DF5E"
            )
            KSEVENTSETID_CameraAsyncControl = (
                DEFINE_GUIDNAMED(KSEVENTSETID_CameraAsyncControl)
            )


            class KSEVENT_CAMERACONTROL(ENUM):
                KSEVENT_CAMERACONTROL_FOCUS = 1
                KSEVENT_CAMERACONTROL_ZOOM = 2

            KSEVENT_CAMERACONTROL_FOCUS = KSEVENT_CAMERACONTROL.KSEVENT_CAMERACONTROL_FOCUS
            KSEVENT_CAMERACONTROL_ZOOM = KSEVENT_CAMERACONTROL.KSEVENT_CAMERACONTROL_ZOOM
        # END IF


        STATIC_PROPSETID_VIDCAP_CAMERACONTROL = (
            0xC6E13370,
            0x30AC,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_CAMERACONTROL = DEFINE_GUIDSTRUCT(
            "C6E13370-30AC-11d0-A18C-00A0C9118956"
        )
        PROPSETID_VIDCAP_CAMERACONTROL = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CAMERACONTROL)
        )


        class KSPROPERTY_VIDCAP_CAMERACONTROL(ENUM):
            KSPROPERTY_CAMERACONTROL_PAN = 1
            KSPROPERTY_CAMERACONTROL_TILT = 2
            KSPROPERTY_CAMERACONTROL_ROLL = 3
            KSPROPERTY_CAMERACONTROL_ZOOM = 4
            KSPROPERTY_CAMERACONTROL_EXPOSURE = 5
            KSPROPERTY_CAMERACONTROL_IRIS = 6
            KSPROPERTY_CAMERACONTROL_FOCUS = 7
            if (
                NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
                NTDDI_VERSION >= NTDDI_WS03SP1
            ):
                KSPROPERTY_CAMERACONTROL_SCANMODE = 8
                KSPROPERTY_CAMERACONTROL_PRIVACY = 9
                KSPROPERTY_CAMERACONTROL_PANTILT = 10
                KSPROPERTY_CAMERACONTROL_PAN_RELATIVE = 11
                KSPROPERTY_CAMERACONTROL_TILT_RELATIVE = 12
                KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE = 13
                KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE = 14
                KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE = 15
                KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE = 16
                KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE = 17
                KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE = 18
                KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH = 19
                KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = 20
            # END IF

        KSPROPERTY_CAMERACONTROL_PAN = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_PAN
        KSPROPERTY_CAMERACONTROL_TILT = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_TILT
        KSPROPERTY_CAMERACONTROL_ROLL = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_ROLL
        KSPROPERTY_CAMERACONTROL_ZOOM = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_ZOOM
        KSPROPERTY_CAMERACONTROL_EXPOSURE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_EXPOSURE
        KSPROPERTY_CAMERACONTROL_IRIS = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_IRIS
        KSPROPERTY_CAMERACONTROL_FOCUS = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_FOCUS

        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSPROPERTY_CAMERACONTROL_SCANMODE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_SCANMODE
            KSPROPERTY_CAMERACONTROL_PRIVACY = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_PRIVACY
            KSPROPERTY_CAMERACONTROL_PANTILT = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_PANTILT
            KSPROPERTY_CAMERACONTROL_PAN_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_PAN_RELATIVE
            KSPROPERTY_CAMERACONTROL_TILT_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_TILT_RELATIVE
            KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE
            KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE
            KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE
            KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE
            KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE
            KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE
            KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH
            KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = KSPROPERTY_VIDCAP_CAMERACONTROL.KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY
        # END IF

        if NTDDI_VERSION >= NTDDI_WIN8:
            class KS_CameraControlAsyncOperation(ENUM):
                KS_CAMERACONTROL_ASYNC_START = 0x0001
                KS_CAMERACONTROL_ASYNC_STOP = 0x0002
                KS_CAMERACONTROL_ASYNC_RESET = 0x0003

            KS_CAMERACONTROL_ASYNC_START = KS_CameraControlAsyncOperation.KS_CAMERACONTROL_ASYNC_START
            KS_CAMERACONTROL_ASYNC_STOP = KS_CameraControlAsyncOperation.KS_CAMERACONTROL_ASYNC_STOP
            KS_CAMERACONTROL_ASYNC_RESET = KS_CameraControlAsyncOperation.KS_CAMERACONTROL_ASYNC_RESET

            KSPROPERTY_CAMERACONTROL_S_EX._fields_ = [
                ('Property', KSPROPERTY),
                # value to get or set
                ('Value', LONG),
                # KSPROPERTY_CAMERACONTROL_FLAGS_*
                ('Flags', ULONG),
                # KSPROPERTY_CAMERACONTROL_FLAGS_*
                ('Capabilities', ULONG),
                ('FocusRect', RECT),
            ]
        # END IF


        KSPROPERTY_CAMERACONTROL_S._fields_ = [
            ('Property', KSPROPERTY),
            # value to get or set
            ('Value', LONG),
            # KSPROPERTY_CAMERACONTROL_FLAGS_*
            ('Flags', ULONG),
            # KSPROPERTY_CAMERACONTROL_FLAGS_*
            ('Capabilities', ULONG),
        ]
        KSPROPERTY_CAMERACONTROL_FLAGS_AUTO = 0x0001
        KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL = 0x0002
        if NTDDI_VERSION >= NTDDI_WIN8:
            KSPROPERTY_CAMERACONTROL_FLAGS_ASYNCHRONOUS = 0x0004
        # END IF


        KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0x0000
        KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 0x0010

        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSPROPERTY_CAMERACONTROL_NODE_S._fields_ = [
                ('NodeProperty', KSP_NODE),
                # value to get or set
                ('Value', LONG),
                # KSPROPERTY_CAMERACONTROL_FLAGS_*
                ('Flags', ULONG),
                # KSPROPERTY_CAMERACONTROL_FLAGS_*
                ('Capabilities', ULONG),
            ]

            KSPROPERTY_CAMERACONTROL_S2._fields_ = [
                ('Property', KSPROPERTY),
                ('Value1', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
                ('Value2', LONG),
            ]

            KSPROPERTY_CAMERACONTROL_NODE_S2._fields_ = [
                ('NodeProperty', KSP_NODE),
                ('Value1', LONG),
                ('Flags', ULONG),
                ('Capabilities', ULONG),
                ('Value2', LONG),
            ]

            KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S._fields_ = [
                ('Property', KSPROPERTY),
                ('lOcularFocalLength', LONG),
                ('lObjectiveFocalLengthMin', LONG),
                ('lObjectiveFocalLengthMax', LONG),
            ]

            KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S._fields_ = [
                ('NodeProperty', KSNODEPROPERTY),
                ('lOcularFocalLength', LONG),
                ('lObjectiveFocalLengthMin', LONG),
                ('lObjectiveFocalLengthMax', LONG),
            ]
            if NTDDI_VERSION >= NTDDI_WIN8:
                STATIC_PROPSETID_VIDCAP_CAMERACONTROL_FLASH = (
                    0x785E8F49,
                    0x63A2,
                    0x4144,
                    0xAB,
                    0x70,
                    0xFF,
                    0xB2,
                    0x78,
                    0xFA,
                    0x26,
                    0xCE
                )
                PROPSETID_VIDCAP_CAMERACONTROL_FLASH = DEFINE_GUIDSTRUCT(
                    "785E8F49-63A2-4144-AB70-FFB278FA26CE"
                )
                PROPSETID_VIDCAP_CAMERACONTROL_FLASH = (
                    DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CAMERACONTROL_FLASH )
                )


                class KSPROPERTY_CAMERACONTROL_FLASH(ENUM):
                    KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = 0

                KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = (
                    KSPROPERTY_CAMERACONTROL_FLASH.KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID
                )
                KSPROPERTY_CAMERACONTROL_FLASH_OFF = 0x00000000
                KSPROPERTY_CAMERACONTROL_FLASH_ON = 0x00000001
                KSPROPERTY_CAMERACONTROL_FLASH_AUTO = 0x00000002
                KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_AUTO = 0x00000001
                KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_MANUAL = 0x00000002


                KSPROPERTY_CAMERACONTROL_FLASH_S._fields_ = [
                    ('Flash', ULONG),
                    ('Capabilities', ULONG),
                ]
                STATIC_PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION = (
                    0x43964BD3,
                    0x7716,
                    0x404E,
                    0x8B,
                    0xE1,
                    0xD2,
                    0x99,
                    0xB2,
                    0xE,
                    0x50,
                    0xFD
                )
                PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION = DEFINE_GUIDSTRUCT(
                    "43964BD3-7716-404e-8BE1-D299B20E50FD"
                )
                PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION = (
                    DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION)
                )


                class KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE(ENUM):
                    KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = (
                        0
                    )

                KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = (
                    KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE.KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_OFF = (
                    0x00000000
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_HIGH = (
                    0x00000001
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_MEDIUM = (
                    0x00000002
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_LOW = (
                    0x00000003
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_AUTO = (
                    0x00000004
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_AUTO = (
                    0x00000001
                )
                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_MANUAL = (
                    0x00000002
                )


                KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S._fields_ = [
                    ('VideoStabilizationMode', ULONG),
                    ('Capabilities', ULONG),
                ]
                STATIC_PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = (
                    0x9D12D198,
                    0xF86C,
                    0x4FED,
                    0xB0,
                    0x23,
                    0x5D,
                    0x87,
                    0x65,
                    0x3D,
                    0xA7,
                    0x93
                )
                PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = DEFINE_GUIDSTRUCT(
                    "9D12D198-F86C-4fed-B023-5D87653DA793"
                )
                PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = (
                    DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST)
                )


                class KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST(ENUM):
                    KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = 0

                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = (
                    KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST.KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_AUTO = (
                    0x00000001
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_MANUAL = (
                    0x00000002
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_ASYNC = (
                    0x80000000
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_FOCUS = (
                    0x00000100
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_EXPOSURE = (
                    0x00000200
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_WB = (
                    0x00000400
                )
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONVERGEMODE = (
                    0x40000000
                )
                STATIC_EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = (
                    0x2FDFFC5D,
                    0xC732,
                    0x4BA6,
                    0xB5,
                    0xDF,
                    0x6B,
                    0x4D,
                    0x7F,
                    0xC8,
                    0x8B,
                    0x8B
                )
                EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = DEFINE_GUIDSTRUCT(
                    "2FDFFC5D-C732-4BA6-B5DF-6B4D7FC88B8B"
                )
                EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = (
                    DEFINE_GUIDNAMED(EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST)
                )


                class _Union_9(ctypes.Union):
                    pass


                _Union_9._fields_ = [
                    ('Capabilities', ULONG),
                    ('Configuration', ULONG),
                ]
                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S._Union_9 = _Union_9

                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S._anonymous_ = (
                    '_Union_9',
                )

                KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S._fields_ = [
                    ('FocusRect', RECT),
                    ('AutoFocusLock', BOOL),
                    ('AutoExposureLock', BOOL),
                    ('AutoWhitebalanceLock', BOOL),
                    ('_Union_9', KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S._Union_9),
                ]
                STATIC_PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY = (
                    0x9D3D7BBF,
                    0x5C6D,
                    0x4138,
                    0xBB,
                    0x0,
                    0x58,
                    0x4E,
                    0xDD,
                    0x20,
                    0xF7,
                    0xC5
                )
                PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY = DEFINE_GUIDSTRUCT(
                    "9D3D7BBF-5C6D-4138-BB00-584EDD20F7C5"
                )
                PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY = (
                    DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY)
                )


                class KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY(ENUM):
                    KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = (
                        0
                    )

                KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = (
                    KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY.KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID
                )
                KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_EXCLUSIVE_WITH_RECORD = (
                    0x00000001
                )
                KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_SEQUENCE_EXCLUSIVE_WITH_RECORD = (
                    0x00000002
                )


                KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S._fields_ = [
                    ('Capabilities', ULONG),
                    ('Reserved0', ULONG),
                ]
            # END IF


            if NTDDI_VERSION >= NTDDI_WIN8:
                class KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY(ENUM):
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE = 1
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE = 2
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE = 3
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME = 4
                    KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART = 5
                    KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES = 6
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL = 7
                    KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE = 8
                    KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE = 9
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE = 10
                    KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT = 11
                    KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE = 12
                    KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE = 13
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE = 14
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO = 15
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW = 16
                    KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION = 17
                    KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET = 18
                    if NTDDI_VERSION >= NTDDI_WINBLUE:
                        KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA = 19
                        KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY = 20
                        KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE = 21
                        KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS = 22
                        KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL = 23
                        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION = (
                            24
                        )
                        KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM = 25
                        KSPROPERTY_CAMERACONTROL_EXTENDED_MCC = 26
                        KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED = 27
                    # END IF

                    if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION = (
                            28
                        )
                        KSPROPERTY_CAMERACONTROL_EXTENDED_VFR = 29
                        KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION = 30
                        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR = 31
                        KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM = 32
                        KSPROPERTY_CAMERACONTROL_EXTENDED_OIS = 33
                        KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO = 34
                        KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE = 35
                    # END IF

                    if NTDDI_VERSION >= NTDDI_WIN10_RS1:
                        KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE = 36
                    # END IF

                    KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE = 37
                    if NTDDI_VERSION >= NTDDI_WIN10_RS3:
                        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING = (
                            38
                        )
                    # END IF

                    KSPROPERTY_CAMERACONTROL_EXTENDED_END = 39
                    KSPROPERTY_CAMERACONTROL_EXTENDED_END2 = (
                        KSPROPERTY_CAMERACONTROL_EXTENDED_END
                    )

                KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE
                KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE
                KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME
                KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART
                KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES
                KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL
                KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT
                KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE
                KSPROPERTY_CAMERACONTROL_EXTENDED_ISO = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ISO
                KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW
                KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION
                KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM
                    KSPROPERTY_CAMERACONTROL_EXTENDED_MCC = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_MCC
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED
                # END IF

                if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION
                    KSPROPERTY_CAMERACONTROL_EXTENDED_VFR = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_VFR
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION
                    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR
                    KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM
                    KSPROPERTY_CAMERACONTROL_EXTENDED_OIS = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_OIS
                    KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO
                    KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE
                # END IF

                if NTDDI_VERSION >= NTDDI_WIN10_RS1:
                    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE
                # END IF

                KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE
                if NTDDI_VERSION >= NTDDI_WIN10_RS3:
                    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING
                # END IF

                KSPROPERTY_CAMERACONTROL_EXTENDED_END = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_END
                KSPROPERTY_CAMERACONTROL_EXTENDED_END2 = KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY.KSPROPERTY_CAMERACONTROL_EXTENDED_END2
                STATIC_KSPROPERTYSETID_ExtendedCameraControl = (
                    0x1CB79112,
                    0xC0D2,
                    0x4213,
                    0x9C,
                    0xA6,
                    0xCD,
                    0x4F,
                    0xDB,
                    0x92,
                    0x79,
                    0x72
                )
                KSPROPERTYSETID_ExtendedCameraControl = DEFINE_GUIDSTRUCT(
                    "1CB79112-C0D2-4213-9CA6-CD4FDB927972"
                )
                KSPROPERTYSETID_ExtendedCameraControl = (
                    DEFINE_GUIDNAMED(KSPROPERTYSETID_ExtendedCameraControl)
                )
                STATIC_KSEVENTSETID_ExtendedCameraControl = (
                    0x571C92C9,
                    0x13A2,
                    0x47E3,
                    0xA6,
                    0x49,
                    0xD2,
                    0xA7,
                    0x78,
                    0x16,
                    0x63,
                    0x84
                )
                KSEVENTSETID_ExtendedCameraControl = DEFINE_GUIDSTRUCT(
                    "571C92C9-13A2-47E3-A649-D2A778166384"
                )
                KSEVENTSETID_ExtendedCameraControl = (
                    DEFINE_GUIDNAMED(KSEVENTSETID_ExtendedCameraControl)
                )
                KSCAMERA_EXTENDEDPROP_FILTERSCOPE = 0xFFFFFFFF
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    KSCAMERA_EXTENDEDPROP_CAPS_RESERVED = 0xFF00000000000000
                    STATIC_KSEVENTSETID_CameraEvent = (
                        0x7899B2E0,
                        0x6B43,
                        0x4964,
                        0x9D,
                        0x2A,
                        0xA2,
                        0x1F,
                        0x40,
                        0x61,
                        0xF5,
                        0x76
                    )
                    KSEVENTSETID_CameraEvent = DEFINE_GUIDSTRUCT(
                        "7899B2E0-6B43-4964-9D2A-A21F4061F576"
                    )
                    KSEVENTSETID_CameraEvent = (
                        DEFINE_GUIDNAMED(KSEVENTSETID_CameraEvent)
                    )


                    class KSEVENT_CAMERAEVENT(ENUM):
                        KSEVENT_PHOTO_SAMPLE_SCANNED = 1

                    KSEVENT_PHOTO_SAMPLE_SCANNED = KSEVENT_CAMERAEVENT.KSEVENT_PHOTO_SAMPLE_SCANNED
                # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)

                KSCAMERA_EXTENDEDPROP_CAPS_ASYNCCONTROL = 0x8000000000000000
                KSCAMERA_EXTENDEDPROP_CAPS_CANCELLABLE = 0x4000000000000000
                KSCAMERA_EXTENDEDPROP_FLAG_CANCELOPERATION = 0x8000000000000000

                # This mask represents the reserved bits for all capability
                # flags. All EXTENDEDPROP capability
                # flags defined below must NOT use the upper 8 bits.
                # Same applies to the flags.
                KSCAMERA_EXTENDEDPROP_CAPS_MASK = 0xFF00000000000000
                KSCAMERA_EXTENDEDPROP_FLAG_MASK = 0xFF00000000000000
                KSCAMERA_EXTENDEDPROP_PHOTOMODE_NORMAL = 0x0000000000000000
                KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_DISABLED = (
                    0x0000000000000000
                )
                KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_ENABLED = (
                    0x0000000000000001
                )
                KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_DISABLE = (
                    0x0000000000000000
                )
                KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_2X = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_4X = 0x0000000000000002
                KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_8X = 0x0000000000000004
                KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_16X = 0x0000000000000008
                KSCAMERA_EXTENDEDPROP_SCENEMODE_AUTO = 0x0000000000000000
                KSCAMERA_EXTENDEDPROP_SCENEMODE_MACRO = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_SCENEMODE_PORTRAIT = 0x0000000000000002
                KSCAMERA_EXTENDEDPROP_SCENEMODE_SPORT = 0x0000000000000004
                KSCAMERA_EXTENDEDPROP_SCENEMODE_SNOW = 0x0000000000000008
                KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHT = 0x0000000000000010
                KSCAMERA_EXTENDEDPROP_SCENEMODE_BEACH = 0x0000000000000020
                KSCAMERA_EXTENDEDPROP_SCENEMODE_SUNSET = 0x0000000000000040
                KSCAMERA_EXTENDEDPROP_SCENEMODE_CANDLELIGHT = (
                    0x0000000000000080
                )
                KSCAMERA_EXTENDEDPROP_SCENEMODE_LANDSCAPE = 0x0000000000000100
                KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHTPORTRAIT = (
                    0x0000000000000200
                )
                KSCAMERA_EXTENDEDPROP_SCENEMODE_BACKLIT = 0x0000000000000400
                KSCAMERA_EXTENDEDPROP_SCENEMODE_MANUAL = 0x0080000000000000
                KSCAMERA_EXTENDEDPROP_VIDEOTORCH_OFF = 0x0000000000000000
                KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON_ADJUSTABLEPOWER = (
                    0x0000000000000002
                )
                KSCAMERA_EXTENDEDPROP_FLASH_OFF = 0x0000000000000000
                KSCAMERA_EXTENDEDPROP_FLASH_ON = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_FLASH_ON_ADJUSTABLEPOWER = (
                    0x0000000000000002
                )
                KSCAMERA_EXTENDEDPROP_FLASH_AUTO = 0x0000000000000004
                KSCAMERA_EXTENDEDPROP_FLASH_AUTO_ADJUSTABLEPOWER = (
                    0x0000000000000008
                )
                KSCAMERA_EXTENDEDPROP_FLASH_REDEYEREDUCTION = (
                    0x0000000000000010
                )
                KSCAMERA_EXTENDEDPROP_FLASH_SINGLEFLASH = 0x0000000000000020
                KSCAMERA_EXTENDEDPROP_FLASH_MULTIFLASHSUPPORTED = (
                    0x0000000000000040
                )
                KSCAMERA_EXTENDEDPROP_FLASH_MODE_MASK = (
                    KSCAMERA_EXTENDEDPROP_FLASH_ON |
                    KSCAMERA_EXTENDEDPROP_FLASH_ON_ADJUSTABLEPOWER |
                    KSCAMERA_EXTENDEDPROP_FLASH_AUTO |
                    KSCAMERA_EXTENDEDPROP_FLASH_AUTO_ADJUSTABLEPOWER
                )
                KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PHOTO = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_OPTIMIZATION_VIDEO = 0x0000000000000002
                if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_DEFAULT = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_QUALITY = (
                        0x0000000000000004
                    )
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_LATENCY = (
                        0x0000000000000008
                    )
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_POWER = (
                        0x0000000000000010
                    )
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PERF_MASK = (
                        KSCAMERA_EXTENDEDPROP_OPTIMIZATION_QUALITY |
                        KSCAMERA_EXTENDEDPROP_OPTIMIZATION_LATENCY |
                        KSCAMERA_EXTENDEDPROP_OPTIMIZATION_POWER
                    )
                    KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PRIMARYUSE_MASK = (
                        KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PHOTO |
                        KSCAMERA_EXTENDEDPROP_OPTIMIZATION_VIDEO
                    )
                # END IF   (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)

                KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_AUTO = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MANUAL = 0x0000000000000002
                KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_LOCK = 0x0000000000000004

                # This combines the generic Video Proc bits shared by all
                # video proc controls.
                KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MASK = (
                    KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_AUTO |
                    KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MANUAL |
                    KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_LOCK
                )


                class KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE(ENUM):
                    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = 1
                    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET = 2

                KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE.KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE
                KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET = KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE.KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET


                class KSCAMERA_EXTENDEDPROP_WBPRESET(ENUM):
                    KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY = 1
                    KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT = 2
                    KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH = 3
                    KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = 4
                    KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN = 5
                    KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = 6

                KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY
                KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT
                KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH
                KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT
                KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN
                KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = KSCAMERA_EXTENDEDPROP_WBPRESET.KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT
                KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUS = 0x0000000000000100

                # Focus control extends the generic video proc mask by adding
                # the continous flag.
                KSCAMERA_EXTENDEDPROP_FOCUS_MODE_MASK = (
                    KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MASK |
                    KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUS
                )
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MACRO = 0x0000000000010000
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_NORMAL = 0x0000000000020000
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_FULLRANGE = (
                    0x0000000000040000
                )
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_INFINITY = 0x0000000000080000
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_HYPERFOCAL = (
                    0x0000000000100000
                )
                KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MASK = (
                    KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MACRO |
                    KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_NORMAL |
                    KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_FULLRANGE |
                    KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_INFINITY |
                    KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_HYPERFOCAL
                )
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    # Spare bits 0x200000 - 0x800000 in case of future range
                    # expansion
                    KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_INFINITY = (
                        0x0000000001000000
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_HYPERFOCAL = (
                        0x0000000002000000
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_NEAREST = (
                        0x0000000004000000
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_MASK = (
                        KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_INFINITY |
                        KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_HYPERFOCAL |
                        KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_NEAREST
                    )
                # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)

                KSCAMERA_EXTENDEDPROP_ISO_AUTO = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_ISO_50 = 0x0000000000000002
                KSCAMERA_EXTENDEDPROP_ISO_80 = 0x0000000000000004
                KSCAMERA_EXTENDEDPROP_ISO_100 = 0x0000000000000008
                KSCAMERA_EXTENDEDPROP_ISO_200 = 0x0000000000000010
                KSCAMERA_EXTENDEDPROP_ISO_400 = 0x0000000000000020
                KSCAMERA_EXTENDEDPROP_ISO_800 = 0x0000000000000040
                KSCAMERA_EXTENDEDPROP_ISO_1600 = 0x0000000000000080
                KSCAMERA_EXTENDEDPROP_ISO_3200 = 0x0000000000000100
                KSCAMERA_EXTENDEDPROP_ISO_6400 = 0x0000000000000200
                KSCAMERA_EXTENDEDPROP_ISO_12800 = 0x0000000000000400
                KSCAMERA_EXTENDEDPROP_ISO_25600 = 0x0000000000000800
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUSLOCK = (
                        0x0000000000000200
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_UNLOCK = 0x0000000000000400
                    KSCAMERA_EXTENDEDPROP_FOCUS_DRIVERFALLBACK_OFF = (
                        0x0000000000000800
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_REGIONBASED = (
                        0x0000000000001000
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUS_MODE_ADVANCED_MASK = (
                        KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUSLOCK |
                        KSCAMERA_EXTENDEDPROP_FOCUS_UNLOCK |
                        KSCAMERA_EXTENDEDPROP_FOCUS_DRIVERFALLBACK_OFF |
                        KSCAMERA_EXTENDEDPROP_FOCUS_REGIONBASED
                    )
                    KSCAMERA_EXTENDEDPROP_ISO_MANUAL = 0x0080000000000000
                    KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_ON = (
                        0x0000000000000080
                    )
                    KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_AUTO = (
                        0x0000000000000100
                    )
                    KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_MASK = (
                        KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_ON |
                        KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_AUTO
                    )
                # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)

                KSCAMERA_EXTENDEDPROP_EVCOMP_SIXTHSTEP = 0x0000000000000001
                KSCAMERA_EXTENDEDPROP_EVCOMP_QUARTERSTEP = 0x0000000000000002
                KSCAMERA_EXTENDEDPROP_EVCOMP_THIRDSTEP = 0x0000000000000004
                KSCAMERA_EXTENDEDPROP_EVCOMP_HALFSTEP = 0x0000000000000008
                KSCAMERA_EXTENDEDPROP_EVCOMP_FULLSTEP = 0x0000000000000010


                class KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS(ENUM):
                    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = 1
                    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET = 2

                KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS.KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR
                KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET = KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS.KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET

                tagKSCAMERA_EXTENDEDPROP_HEADER._fields_ = [
                    ('Version', ULONG),
                    ('PinId', ULONG),
                    ('Size', ULONG),
                    ('Result', ULONG),
                    ('Flags', ULONGLONG),
                    ('Capability', ULONGLONG),
                ]

                class Value(ctypes.Union):
                    pass

                Value._fields_ = [
                    ('dbl', DOUBLE),
                    ('ull', ULONGLONG),
                    ('ul', ULONG),
                    ('ratio', ULARGE_INTEGER),
                    ('l', LONG),
                    ('ll', LONGLONG),
                ]

                tagKSCAMERA_EXTENDEDPROP_VALUE.Value = Value
                tagKSCAMERA_EXTENDEDPROP_VALUE._fields_ = [
                    ('Value', tagKSCAMERA_EXTENDEDPROP_VALUE.Value),
                ]

                # This is the payload structure fo the Maximum video sensor
                # frame rate possible
                # based on the photo resolution being programmed on the
                # sensor. The PhotoRes fields
                # are provided by the application, the preview/capture FPS
                # fields are filled in
                # by the driver to indicate the maximum sensor frame rate.
                tagKSCAMERA_MAXVIDEOFPS_FORPHOTORES._fields_ = [
                    ('PhotoResWidth', ULONG),
                    ('PhotoResHeight', ULONG),
                    ('PreviewFPSNum', ULONG),
                    ('PreviewFPSDenom', ULONG),
                    ('CaptureFPSNum', ULONG),
                    ('CaptureFPSDenom', ULONG),
                ]
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_NONE = (
                        0x00000000
                    )
                    KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_VARIABLE = (
                        0x00000001
                    )
                # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)


                tagKSCAMERA_EXTENDEDPROP_PHOTOMODE._fields_ = [
                    ('RequestedHistoryFrames', ULONG),
                    ('MaxHistoryFrames', ULONG),
                    ('SubMode', ULONG),
                    ('Reserved', ULONG),
                ]

                tagKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING._fields_ = [
                    ('Mode', ULONG),
                    ('Min', LONG),
                    ('Max', LONG),
                    ('Step', LONG),
                    ('VideoProc', KSCAMERA_EXTENDEDPROP_VALUE),
                    ('Reserved', ULONGLONG),
                ]

                tagKSCAMERA_EXTENDEDPROP_EVCOMPENSATION._fields_ = [
                    ('Mode', ULONG),
                    ('Min', LONG),
                    ('Max', LONG),
                    ('Value', LONG),
                    ('Reserved', ULONGLONG),
                ]

                tagKSCAMERA_EXTENDEDPROP_FIELDOFVIEW._fields_ = [
                    ('NormalizedFocalLengthX', ULONG),
                    ('NormalizedFocalLengthY', ULONG),
                    ('Flag', ULONG),
                    ('Reserved', ULONG),
                ]

                tagKSCAMERA_EXTENDEDPROP_CAMERAOFFSET._fields_ = [
                    ('PitchAngle', LONG),
                    ('YawAngle', LONG),
                    ('Flag', ULONG),
                    ('Reserved', ULONG),
                ]
                if NTDDI_VERSION >= NTDDI_WINBLUE:
                    # Metadata
                    # Required alignment for metadata buffer
                    tagKSCAMERA_EXTENDEDPROP_METADATAINFO._fields_ = [
                        ('BufferAlignment', LONG),
                        # Required metadata buffer size
                        ('MaxMetadataBufferSize', ULONG),
                    ]


                    class KSCAMERA_EXTENDEDPROP_MetadataAlignment(ENUM):
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_16 = 4
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_32 = 5
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_64 = 6
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_128 = 7
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_256 = 8
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_512 = 9
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = 10
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = 11
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = 12
                        KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = 13

                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_16 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_16
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_32 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_32
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_64 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_64
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_128 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_128
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_256 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_256
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_512 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_512
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096
                    KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = KSCAMERA_EXTENDEDPROP_MetadataAlignment.KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192
                    KSCAMERA_EXTENDEDPROP_METADATA_MEMORYTYPE_MASK = (
                        0x00000000000000FF
                    )
                    KSCAMERA_EXTENDEDPROP_METADATA_SYSTEMMEMORY = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_METADATA_ALIGNMENTREQUIRED = (
                        0x0000000000000100
                    )


                    class KSCAMERA_MetadataId(ENUM):
                        MetadataId_Standard_Start = 1
                        MetadataId_PhotoConfirmation = (
                            MetadataId_Standard_Start
                        )
                        MetadataId_UsbVideoHeader = 2
                        MetadataId_CaptureStats = 3
                        MetadataId_CameraExtrinsics = 4
                        MetadataId_CameraIntrinsics = 5
                        MetadataId_FrameIllumination = 6
                        MetadataId_Standard_End = MetadataId_FrameIllumination
                        MetadataId_Custom_Start = 0x80000000

                    MetadataId_Standard_Start = KSCAMERA_MetadataId.MetadataId_Standard_Start
                    MetadataId_PhotoConfirmation = KSCAMERA_MetadataId.MetadataId_PhotoConfirmation
                    MetadataId_UsbVideoHeader = KSCAMERA_MetadataId.MetadataId_UsbVideoHeader
                    MetadataId_CaptureStats = KSCAMERA_MetadataId.MetadataId_CaptureStats
                    MetadataId_CameraExtrinsics = KSCAMERA_MetadataId.MetadataId_CameraExtrinsics
                    MetadataId_CameraIntrinsics = KSCAMERA_MetadataId.MetadataId_CameraIntrinsics
                    MetadataId_FrameIllumination = KSCAMERA_MetadataId.MetadataId_FrameIllumination
                    MetadataId_Standard_End = KSCAMERA_MetadataId.MetadataId_Standard_End
                    MetadataId_Custom_Start = KSCAMERA_MetadataId.MetadataId_Custom_Start

                    tagKSCAMERA_METADATA_ITEMHEADER._fields_ = [
                        ('MetadataId', ULONG),
                        # Size of this header + metadata payload following
                        ('Size', ULONG),
                    ]

                    tagKSCAMERA_METADATA_PHOTOCONFIRMATION._fields_ = [
                        ('Header', KSCAMERA_METADATA_ITEMHEADER),
                        ('PhotoConfirmationIndex', ULONG),
                        ('Reserved', ULONG),
                    ]

                    tagKSCAMERA_METADATA_FRAMEILLUMINATION._fields_ = [
                        ('Header', KSCAMERA_METADATA_ITEMHEADER),
                        ('Flags', ULONG),
                        ('Reserved', ULONG),
                    ]
                    KSCAMERA_METADATA_FRAMEILLUMINATION_FLAG_ON = 0x00000001


                    tagKSCAMERA_METADATA_CAPTURESTATS._fields_ = [
                        ('Header', KSCAMERA_METADATA_ITEMHEADER),
                        ('Flags', ULONG),
                        ('Reserved', ULONG),
                        ('ExposureTime', ULONGLONG),
                        ('ExposureCompensationFlags', ULONGLONG),
                        ('ExposureCompensationValue', LONG),
                        ('IsoSpeed', ULONG),
                        ('FocusState', ULONG),
                        # a.k.a Focus
                        ('LensPosition', ULONG),
                        ('WhiteBalance', ULONG),
                        ('Flash', ULONG),
                        ('FlashPower', ULONG),
                        ('ZoomFactor', ULONG),
                        ('SceneMode', ULONGLONG),
                        ('SensorFramerate', ULONGLONG),
                    ]
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURETIME = (
                        0x00000001
                    )
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURECOMPENSATION = (
                        0x00000002
                    )
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_ISOSPEED = 0x00000004
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_FOCUSSTATE = 0x00000008
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_LENSPOSITION = (
                        0x00000010
                    )
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_WHITEBALANCE = (
                        0x00000020
                    )
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASH = 0x00000040
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASHPOWER = 0x00000080
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_ZOOMFACTOR = 0x00000100
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_SCENEMODE = 0x00000200
                    KSCAMERA_METADATA_CAPTURESTATS_FLAG_SENSORFRAMERATE = (
                        0x00000400
                    )

                    # Focus Priority
                    KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_ON = 0x0000000000000001

                    # Focus State
                    class KSCAMERA_EXTENDEDPROP_FOCUSSTATE(ENUM):
                        KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = 0
                        KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST = 1
                        KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING = 2
                        KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED = 3
                        KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED = 4

                    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = KSCAMERA_EXTENDEDPROP_FOCUSSTATE.KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED
                    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST = KSCAMERA_EXTENDEDPROP_FOCUSSTATE.KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST
                    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING = KSCAMERA_EXTENDEDPROP_FOCUSSTATE.KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING
                    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED = KSCAMERA_EXTENDEDPROP_FOCUSSTATE.KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED
                    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED = KSCAMERA_EXTENDEDPROP_FOCUSSTATE.KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED

                    # Extended ROI
                    # Size of this header + all _CONFIGCAPS structures followed
                    tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER._fields_ = [
                        ('Size', ULONG),
                        # Number of _CONFIGCAPS structures followed
                        ('ConfigCapCount', ULONG),
                        ('Reserved', ULONGLONG),
                    ]

                    # ISP control ID (focus, exposure, or white balance)
                    tagKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS._fields_ = [
                        ('ControlId', ULONG),
                        # Max ROIs supported for this ISP control
                        ('MaxNumberOfROIs', ULONG),
                        # Caps for this ISP control
                        ('Capability', ULONGLONG),
                    ]

                    # Size of this header + all _ ISPCONTROL + all _RECTINFO
                    tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER._fields_ = [
                        ('Size', ULONG),
                        # Number of ISP controls. 0 indicating clear all ROIs
                        ('ControlCount', ULONG),
                        ('Reserved', ULONGLONG),
                    ]

                    # ISP control ID (focus, exposure, or white balance)
                    tagKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL._fields_ = [
                        ('ControlId', ULONG),
                        # Number of ROIs associated with this ISP control
                        ('ROICount', ULONG),
                        # Error results of the last SET operation for this ISP
                        # control
                        ('Result', ULONG),
                        ('Reserved', ULONG),
                    ]

                    # Relative coordinates on the frame that face detection is
                    # running (Q31 format)
                    tagKSCAMERA_EXTENDEDPROP_ROI_INFO._fields_ = [
                        ('Region', RECT),
                        # VIDEOPROCFLAG flags indicating the op mode for the
                        # ISP control. Default is 0 for focus
                        ('Flags', ULONGLONG),
                        # Weight of the region (0 -100)
                        ('Weight', LONG),
                        # KSCAMERA_EXTENDEDPROP_ROITYPE_FACE, if the region is
                        # a face; Unknown otherwise
                        ('RegionOfInterestType', LONG),
                    ]


                    class KSCAMERA_EXTENDEDPROP_ROITYPE(ENUM):
                        KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = 0
                        KSCAMERA_EXTENDEDPROP_ROITYPE_FACE = 1

                    KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = KSCAMERA_EXTENDEDPROP_ROITYPE.KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN
                    KSCAMERA_EXTENDEDPROP_ROITYPE_FACE = KSCAMERA_EXTENDEDPROP_ROITYPE.KSCAMERA_EXTENDEDPROP_ROITYPE_FACE

                    # Must be the first field
                    tagKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE._fields_ = [
                        ('ROIInfo', KSCAMERA_EXTENDEDPROP_ROI_INFO),
                        ('Reserved', ULONGLONG),
                    ]

                    # Must be the first field
                    tagKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE._fields_ = [
                        ('ROIInfo', KSCAMERA_EXTENDEDPROP_ROI_INFO),
                        ('Reserved', ULONGLONG),
                    ]

                    # Must be the first field
                    tagKSCAMERA_EXTENDEDPROP_ROI_FOCUS._fields_ = [
                        ('ROIInfo', KSCAMERA_EXTENDEDPROP_ROI_INFO),
                        ('Reserved', ULONGLONG),
                    ]

                    # Photo confirmation (aka still confirmation)
                    KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_ON = (
                        0x0000000000000001
                    )

                    # Per Frame Settings
                    STATIC_KSPROPERTYSETID_PerFrameSettingControl = (
                        0xF1F3E261,
                        0xDEE6,
                        0x4537,
                        0xBF,
                        0xF5,
                        0xEE,
                        0x20,
                        0x6D,
                        0xB5,
                        0x4A,
                        0xAC
                    )
                    KSPROPERTYSETID_PerFrameSettingControl = DEFINE_GUIDSTRUCT(
                        "F1F3E261-DEE6-4537-BFF5-EE206DB54AAC"
                    )
                    KSPROPERTYSETID_PerFrameSettingControl = (
                        DEFINE_GUIDNAMED(KSPROPERTYSETID_PerFrameSettingControl)
                    )


                    class KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY(ENUM):
                        KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = 0
                        KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET = 1
                        KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR = 2

                    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY.KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY
                    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET = KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY.KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET
                    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR = KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY.KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR
                    KSCAMERA_PERFRAMESETTING_AUTO = 0x0000000100000000
                    KSCAMERA_PERFRAMESETTING_MANUAL = 0x0000000200000000


                    class KSCAMERA_PERFRAMESETTING_ITEM_TYPE(ENUM):
                        KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME = 1
                        KSCAMERA_PERFRAMESETTING_ITEM_FLASH = 2
                        KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = 3
                        KSCAMERA_PERFRAMESETTING_ITEM_ISO = 4
                        KSCAMERA_PERFRAMESETTING_ITEM_FOCUS = 5
                        KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION = 6
                        KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM = 7

                    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME
                    KSCAMERA_PERFRAMESETTING_ITEM_FLASH = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_FLASH
                    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION
                    KSCAMERA_PERFRAMESETTING_ITEM_ISO = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_ISO
                    KSCAMERA_PERFRAMESETTING_ITEM_FOCUS = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_FOCUS
                    KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION
                    KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM = KSCAMERA_PERFRAMESETTING_ITEM_TYPE.KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM

                    KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER._fields_ = [
                        ('Size', ULONG),
                        # KSCAMERA_PERFRAMESETTING_ITEM_TYPE
                        ('Type', ULONG),
                        # Supported Flags
                        ('Flags', ULONGLONG),
                    ]

                    KSCAMERA_PERFRAMESETTING_CAP_HEADER._fields_ = [
                        ('Size', ULONG),
                        ('ItemCount', ULONG),
                        ('Flags', ULONGLONG),
                    ]

                    KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM._fields_ = [
                        ('Size', ULONG),
                        ('Reserved', ULONG),
                        ('Id', GUID),
                    ]

                    KSCAMERA_PERFRAMESETTING_ITEM_HEADER._fields_ = [
                        ('Size', ULONG),
                        # KSCAMERA_PERFRAMESETTING_ITEM_TYPE
                        ('Type', ULONG),
                        ('Flags', ULONGLONG),
                    ]

                    KSCAMERA_PERFRAMESETTING_FRAME_HEADER._fields_ = [
                        ('Size', ULONG),
                        ('Id', ULONG),
                        ('ItemCount', ULONG),
                        ('Reserved', ULONG),
                    ]

                    KSCAMERA_PERFRAMESETTING_HEADER._fields_ = [
                        ('Size', ULONG),
                        ('FrameCount', ULONG),
                        ('Id', GUID),
                        ('Flags', ULONGLONG),
                        ('LoopCount', ULONG),
                        ('Reserved', ULONG),
                    ]
                # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)

                if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
                    KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_ON = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_AUTO = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_VFR_OFF = 0x0000000000000000
                    KSCAMERA_EXTENDEDPROP_VFR_ON = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_ON = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_PREVIEW = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_VIDEO = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_PHOTO = (
                        0x0000000000000004
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_BLINK = (
                        0x0000000000000008
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_SMILE = (
                        0x0000000000000010
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_MASK = (
                        KSCAMERA_EXTENDEDPROP_FACEDETECTION_PREVIEW |
                        KSCAMERA_EXTENDEDPROP_FACEDETECTION_VIDEO |
                        KSCAMERA_EXTENDEDPROP_FACEDETECTION_PHOTO
                    )
                    KSCAMERA_EXTENDEDPROP_FACEDETECTION_ADVANCED_MASK = (
                        KSCAMERA_EXTENDEDPROP_FACEDETECTION_BLINK |
                        KSCAMERA_EXTENDEDPROP_FACEDETECTION_SMILE
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOHDR_OFF = 0x0000000000000000
                    KSCAMERA_EXTENDEDPROP_VIDEOHDR_ON = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_VIDEOHDR_AUTO = 0x0000000000000002
                    KSCAMERA_EXTENDEDPROP_HISTOGRAM_OFF = 0x0000000000000000
                    KSCAMERA_EXTENDEDPROP_HISTOGRAM_ON = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_OIS_OFF = 0x0000000000000000
                    KSCAMERA_EXTENDEDPROP_OIS_ON = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_OIS_AUTO = 0x0000000000000002
                    KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_OFF = (
                        0x0000000000000000
                    )
                    KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_AUTO = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_HDR = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_FNF = (
                        0x0000000000000004
                    )
                    KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_ULTRALOWLIGHT = (
                        0x0000000000000008
                    )
                    KSCAMERA_EXTENDEDPROP_ZOOM_DEFAULT = 0x0000000000000000
                    KSCAMERA_EXTENDEDPROP_ZOOM_DIRECT = 0x0000000000000001
                    KSCAMERA_EXTENDEDPROP_ZOOM_SMOOTH = 0x0000000000000002
                    KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_DISABLED = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_ALTERNATIVE_FRAME_ILLUMINATION = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_BACKGROUND_SUBTRACTION = (
                        0x0000000000000004
                    )
                    KSCAMERA_EXTENDEDPROP_SECUREMODE_DISABLED = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_SECUREMODE_ENABLED = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_AUTO = (
                        0x0000000000000001
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_OFF = (
                        0x0000000000000002
                    )
                    KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_ON = (
                        0x0000000000000004
                    )


                    _KSCAMERA_EXTENDEDPROP_PROFILE._fields_ = [
                        ('ProfileId', GUID),
                        ('Index', UINT32),
                        ('Reserved', UINT32),
                    ]
                    STATIC_KSCAMERAPROFILE_Legacy = (
                        0xB4894D81,
                        0x62B7,
                        0x4EEC,
                        0x87,
                        0x40,
                        0x80,
                        0x65,
                        0x8C,
                        0x4A,
                        0x9D,
                        0x3E
                    )
                    KSCAMERAPROFILE_Legacy = DEFINE_GUIDSTRUCT(
                        "B4894D81-62B7-4EEC-8740-80658C4A9D3E"
                    )
                    KSCAMERAPROFILE_Legacy = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_Legacy)
                    )
                    STATIC_KSCAMERAPROFILE_VideoRecording = (
                        0xA0E517E8,
                        0x8F8C,
                        0x4F6F,
                        0x9A,
                        0x57,
                        0x46,
                        0xFC,
                        0x2F,
                        0x64,
                        0x7E,
                        0xC0
                    )
                    KSCAMERAPROFILE_VideoRecording = DEFINE_GUIDSTRUCT(
                        "A0E517E8-8F8C-4F6F-9A57-46FC2F647EC0"
                    )
                    KSCAMERAPROFILE_VideoRecording = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_VideoRecording)
                    )
                    STATIC_KSCAMERAPROFILE_HighQualityPhoto = (
                        0x32440725,
                        0x961B,
                        0x4CA3,
                        0xB5,
                        0xB2,
                        0x85,
                        0x4E,
                        0x71,
                        0x9D,
                        0x9E,
                        0x1B
                    )
                    KSCAMERAPROFILE_HighQualityPhoto = DEFINE_GUIDSTRUCT(
                        "32440725-961B-4CA3-B5B2-854E719D9E1B"
                    )
                    KSCAMERAPROFILE_HighQualityPhoto = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_HighQualityPhoto)
                    )
                    STATIC_KSCAMERAPROFILE_BalancedVideoAndPhoto = (
                        0x6B52B017,
                        0x42C7,
                        0x4A21,
                        0xBF,
                        0xE3,
                        0x23,
                        0xF0,
                        0x09,
                        0x14,
                        0x98,
                        0x87
                    )
                    KSCAMERAPROFILE_BalancedVideoAndPhoto = DEFINE_GUIDSTRUCT(
                        "6B52B017-42C7-4A21-BFE3-23F009149887"
                    )
                    KSCAMERAPROFILE_BalancedVideoAndPhoto = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_BalancedVideoAndPhoto)
                    )
                    STATIC_KSCAMERAPROFILE_VideoConferencing = (
                        0xC5444A88,
                        0xE1BF,
                        0x4597,
                        0xB2,
                        0xDD,
                        0x9E,
                        0x1E,
                        0xAD,
                        0x86,
                        0x4B,
                        0xB8
                    )
                    KSCAMERAPROFILE_VideoConferencing = DEFINE_GUIDSTRUCT(
                        "C5444A88-E1BF-4597-B2DD-9E1EAD864BB8"
                    )
                    KSCAMERAPROFILE_VideoConferencing = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_VideoConferencing)
                    )
                    STATIC_KSCAMERAPROFILE_PhotoSequence = (
                        0x02399D9D,
                        0x4EE8,
                        0x49BA,
                        0xBC,
                        0x07,
                        0x5F,
                        0xF1,
                        0x56,
                        0x53,
                        0x14,
                        0x13
                    )
                    KSCAMERAPROFILE_PhotoSequence = DEFINE_GUIDSTRUCT(
                        "02399D9D-4EE8-49BA-BC07-5FF156531413"
                    )
                    KSCAMERAPROFILE_PhotoSequence = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_PhotoSequence)
                    )
                    STATIC_KSCAMERAPROFILE_FaceAuth_Mode = (
                        0x81361B22,
                        0x700B,
                        0x4546,
                        0xA2,
                        0xD4,
                        0xC5,
                        0x2E,
                        0x90,
                        0x7B,
                        0xFC,
                        0x27
                    )
                    KSCAMERAPROFILE_FaceAuth_Mode = DEFINE_GUIDSTRUCT(
                        "81361B22-700B-4546-A2D4-C52E907BFC27"
                    )
                    KSCAMERAPROFILE_FaceAuth_Mode = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_FaceAuth_Mode)
                    )
                    STATIC_KSCAMERAPROFILE_HighFrameRate = (
                        0x566E6113,
                        0x8C35,
                        0x48E7,
                        0xB8,
                        0x9F,
                        0xD2,
                        0x3F,
                        0xDC,
                        0x12,
                        0x19,
                        0xDC
                    )
                    KSCAMERAPROFILE_HighFrameRate = DEFINE_GUIDSTRUCT(
                        "566E6113-8C35-48E7-B89F-D23FDC1219DC"
                    )
                    KSCAMERAPROFILE_HighFrameRate = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_HighFrameRate)
                    )
                    STATIC_KSCAMERAPROFILE_HDRWithWCGVideo = (
                        0x4B27C336,
                        0x4924,
                        0x4989,
                        0xB9,
                        0x94,
                        0xFD,
                        0xAF,
                        0x1D,
                        0xC7,
                        0xCD,
                        0x85
                    )
                    KSCAMERAPROFILE_HDRWithWCGVideo = DEFINE_GUIDSTRUCT(
                        "4B27C336-4924-4989-B994-FDAF1DC7CD85"
                    )
                    KSCAMERAPROFILE_HDRWithWCGVideo = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_HDRWithWCGVideo)
                    )
                    STATIC_KSCAMERAPROFILE_HDRWithWCGPhoto = (
                        0x9BF6F1FF,
                        0xB555,
                        0x4625,
                        0xB3,
                        0x26,
                        0xA4,
                        0x6D,
                        0xEF,
                        0x31,
                        0x8F,
                        0xB7
                    )
                    KSCAMERAPROFILE_HDRWithWCGPhoto = DEFINE_GUIDSTRUCT(
                        "9BF6F1FF-B555-4625-B326-A46DEF318FB7"
                    )
                    KSCAMERAPROFILE_HDRWithWCGPhoto = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_HDRWithWCGPhoto)
                    )
                    STATIC_KSCAMERAPROFILE_VariablePhotoSequence = (
                        0x9FF2CB56,
                        0xE75A,
                        0x49B1,
                        0xA9,
                        0x28,
                        0x99,
                        0x85,
                        0xD5,
                        0x94,
                        0x6F,
                        0x87
                    )
                    KSCAMERAPROFILE_VariablePhotoSequence = DEFINE_GUIDSTRUCT(
                        "9FF2CB56-E75A-49B1-A928-9985D5946F87"
                    )
                    KSCAMERAPROFILE_VariablePhotoSequence = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_VariablePhotoSequence)
                    )
                    STATIC_KSCAMERAPROFILE_VideoHDR8 = (
                        0xD4F3F4EC,
                        0xBDFF,
                        0x4314,
                        0xB1,
                        0xD4,
                        0x00,
                        0x8E,
                        0x28,
                        0x1F,
                        0x74,
                        0xE7
                    )
                    KSCAMERAPROFILE_VideoHDR8 = DEFINE_GUIDSTRUCT(
                        "D4F3F4EC-BDFF-4314-B1D4-008E281F74E7"
                    )
                    KSCAMERAPROFILE_VideoHDR8 = (
                        DEFINE_GUIDNAMED(KSCAMERAPROFILE_VideoHDR8)
                    )
                    KSCAMERAPROFILE_FLAGS_VIDEOSTABLIZATION = (
                        0x0000000000000001
                    )
                    KSCAMERAPROFILE_FLAGS_VIDEOHDR = 0x0000000000000002
                    KSCAMERAPROFILE_FLAGS_PHOTOHDR = 0x0000000000000004
                    KSCAMERAPROFILE_FLAGS_FACEDETECTION = 0x0000000000000008
                    KSCAMERAPROFILE_FLAGS_VARIABLEPHOTOSEQUENCE = (
                        0x0000000000000010
                    )
                    KSCAMERAPROFILE_FLAGS_PREVIEW_RES_MUSTMATCH = (
                        0x0000000000000020
                    )
                    KSDEVICE_PROFILE_TYPE_UNKNOWN = 0x00000000
                    KSDEVICE_PROFILE_TYPE_CAMERA = 0x00000001

                    # Camera Pin Sensor output type should be in sync with
                    # MFFrameSourceTypes
                    KSCameraProfileSensorType_RGB = 0x0001
                    KSCameraProfileSensorType_Infrared = 0x0002
                    KSCameraProfileSensorType_Depth = 0x0004
                    KSCameraProfileSensorType_PoseTracking = 0x0008
                    KSCameraProfileSensorType_ImageSegmentation = 0x0010
                    KSCameraProfileSensorType_Custom = 0x0080


                    class Resolution(ctypes.Structure):
                        pass


                    Resolution._fields_ = [
                        ('X', UINT32),
                        ('Y', UINT32),
                    ]
                    _KSCAMERA_PROFILE_MEDIAINFO.Resolution = Resolution


                    class MaxFrameRate(ctypes.Structure):
                        pass


                    MaxFrameRate._fields_ = [
                        ('Numerator', UINT32),
                        ('Denominator', UINT32),
                    ]
                    _KSCAMERA_PROFILE_MEDIAINFO.MaxFrameRate = MaxFrameRate

                    _KSCAMERA_PROFILE_MEDIAINFO._fields_ = [
                        ('Resolution', _KSCAMERA_PROFILE_MEDIAINFO.Resolution),
                        ('MaxFrameRate',
                        _KSCAMERA_PROFILE_MEDIAINFO.MaxFrameRate),
                        ('Flags', ULONGLONG),
                        ('Data0', UINT32),
                        ('Data1', UINT32),
                        ('Data2', UINT32),
                        ('Data3', UINT32),
                    ]


                    class _Union_1(ctypes.Union):
                        pass


                    class _Struct_1(ctypes.Structure):
                        pass


                    _Struct_1._fields_ = [
                        ('PinIndex', USHORT),
                        ('ProfileSensorType', USHORT),
                    ]
                    _Union_1._Struct_1 = _Struct_1

                    _Union_1._anonymous_ = (
                        '_Struct_1',
                    )

                    _Union_1._fields_ = [
                        ('_Struct_1', _Union_1._Struct_1),
                        ('Reserved', UINT32),
                    ]
                    _KSCAMERA_PROFILE_PININFO._Union_1 = _Union_1

                    _KSCAMERA_PROFILE_PININFO._anonymous_ = (
                        '_Union_1',
                    )

                    _KSCAMERA_PROFILE_PININFO._fields_ = [
                        ('PinCategory', GUID),
                        ('_Union_1', _KSCAMERA_PROFILE_PININFO._Union_1),
                        ('MediaInfoCount', UINT32),
                        ('MediaInfos', PKSCAMERA_PROFILE_MEDIAINFO),
                    ]

                    _KSCAMERA_PROFILE_INFO._fields_ = [
                        ('ProfileId', GUID),
                        ('Index', UINT32),
                        ('PinCount', UINT32),
                        ('Pins', PKSCAMERA_PROFILE_PININFO),
                    ]
                    _KSCAMERA_PROFILE_CONCURRENCYINFO._fields_ = [
                        ('ReferenceGuid', GUID),
                        ('Reserved', UINT32),
                        ('ProfileCount', UINT32),
                        ('Profiles', PKSCAMERA_PROFILE_INFO),
                    ]


                    class _Union_1(ctypes.Union):
                        pass


                    class Camera(ctypes.Structure):
                        pass


                    Camera._fields_ = [
                        ('Info', KSCAMERA_PROFILE_INFO),
                        ('Reserved', UINT32),
                        ('ConcurrencyCount', UINT32),
                        ('Concurrency', PKSCAMERA_PROFILE_CONCURRENCYINFO),
                    ]
                    _Union_1.Camera = Camera

                    _Union_1._fields_ = [
                        ('Camera', _Union_1.Camera),
                    ]
                    _KSDEVICE_PROFILE_INFO._Union_1 = _Union_1

                    _KSDEVICE_PROFILE_INFO._anonymous_ = (
                        '_Union_1',
                    )

                    _KSDEVICE_PROFILE_INFO._fields_ = [
                        ('Type', UINT32),
                        ('Size', UINT32),
                        ('_Union_1', _KSDEVICE_PROFILE_INFO._Union_1),
                    ]

                # END IF   (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
            # END IF   (NTDDI_VERSION >= NTDDI_WIN8)
            _WNF_KSCAMERA_STREAMSTATE_INFO._fields_ = [
                ('ProcessId', ULONG),
                ('SessionId', ULONG),
                ('StreamState', ULONG),
                ('Reserved', ULONG),
            ]
            if not defined(__EDevCtrl__):
                __EDevCtrl__ = 1
                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == == =
                STATIC_PROPSETID_EXT_DEVICE = (
                    0xB5730A90,
                    0x1A2C,
                    0x11CF,
                    0x8C,
                    0x23,
                    0x00,
                    0xAA,
                    0x00,
                    0x6B,
                    0x68,
                    0x14
                )
                PROPSETID_EXT_DEVICE = DEFINE_GUIDSTRUCT(
                    "B5730A90-1A2C-11cf-8C23-00AA006B6814"
                )
                PROPSETID_EXT_DEVICE = DEFINE_GUIDNAMED(PROPSETID_EXT_DEVICE)


                class KSPROPERTY_EXTDEVICE(ENUM):
                    KSPROPERTY_EXTDEVICE_ID = 1
                    KSPROPERTY_EXTDEVICE_VERSION = 2
                    KSPROPERTY_EXTDEVICE_POWER_STATE = 3
                    KSPROPERTY_EXTDEVICE_PORT = 4
                    KSPROPERTY_EXTDEVICE_CAPABILITIES = 5

                KSPROPERTY_EXTDEVICE_ID = KSPROPERTY_EXTDEVICE.KSPROPERTY_EXTDEVICE_ID
                KSPROPERTY_EXTDEVICE_VERSION = KSPROPERTY_EXTDEVICE.KSPROPERTY_EXTDEVICE_VERSION
                KSPROPERTY_EXTDEVICE_POWER_STATE = KSPROPERTY_EXTDEVICE.KSPROPERTY_EXTDEVICE_POWER_STATE
                KSPROPERTY_EXTDEVICE_PORT = KSPROPERTY_EXTDEVICE.KSPROPERTY_EXTDEVICE_PORT
                KSPROPERTY_EXTDEVICE_CAPABILITIES = KSPROPERTY_EXTDEVICE.KSPROPERTY_EXTDEVICE_CAPABILITIES

                tagDEVCAPS._fields_ = [
                    ('CanRecord', LONG),
                    ('CanRecordStrobe', LONG),
                    ('HasAudio', LONG),
                    ('HasVideo', LONG),
                    ('UsesFiles', LONG),
                    ('CanSave', LONG),
                    ('DeviceType', LONG),
                    ('TCRead', LONG),
                    ('TCWrite', LONG),
                    ('CTLRead', LONG),
                    ('IndexRead', LONG),
                    ('Preroll', LONG),
                    ('Postroll', LONG),
                    ('SyncAcc', LONG),
                    ('NormRate', LONG),
                    ('CanPreview', LONG),
                    ('CanMonitorSrc', LONG),
                    ('CanTest', LONG),
                    ('VideoIn', LONG),
                    ('AudioIn', LONG),
                    ('Calibrate', LONG),
                    ('SeekType', LONG),
                    ('SimulatedHardware', LONG),
                ]

                # Device capabilities
                class u(ctypes.Union):
                    pass


                u._fields_ = [
                    ('Capabilities', DEVCAPS),
                    # 1394, USB, etc.
                    ('DevPort', ULONG),
                    # On, standby or off
                    ('PowerState', ULONG),
                    # Version
                    ('pawchString', WCHAR * MAX_PATH),
                    # Unique NodeID
                    ('NodeUniqueID', DWORD * 2),
                ]
                KSPROPERTY_EXTDEVICE_S.u = u


                KSPROPERTY_EXTDEVICE_S._fields_ = [
                    ('Property', KSPROPERTY),
                    ('u', KSPROPERTY_EXTDEVICE_S.u),
                ]

                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == == =
                STATIC_PROPSETID_EXT_TRANSPORT = (
                    0xA03CD5F0,
                    0x3045,
                    0x11CF,
                    0x8C,
                    0x44,
                    0x00,
                    0xAA,
                    0x00,
                    0x6B,
                    0x68,
                    0x14
                )
                PROPSETID_EXT_TRANSPORT = DEFINE_GUIDSTRUCT(
                    "A03CD5F0-3045-11cf-8C44-00AA006B6814"
                )
                PROPSETID_EXT_TRANSPORT = (
                    DEFINE_GUIDNAMED(PROPSETID_EXT_TRANSPORT)
                )


                class KSPROPERTY_EXTXPORT(ENUM):
                    KSPROPERTY_EXTXPORT_CAPABILITIES = 1

                    # (RW) Input signal: e.g. dvsd/NTSC/PAL, dvsl/NTSC/PAL,
                    # MPEG2-TS etc
                    KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE = 2

                    # (RW) Output signal: e.g. dvsd/NTSC/PAL, dvsl/NTSC/PAL,
                    # MPEG2-TS etc
                    KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = 3
                    KSPROPERTY_EXTXPORT_LOAD_MEDIUM = 4
                    KSPROPERTY_EXTXPORT_MEDIUM_INFO = 5
                    KSPROPERTY_EXTXPORT_STATE = 6
                    KSPROPERTY_EXTXPORT_STATE_NOTIFY = 7
                    KSPROPERTY_EXTXPORT_TIMECODE_SEARCH = 8

                    # (W) Search to a specific absolute track number (ATN) on
                    # a tape
                    KSPROPERTY_EXTXPORT_ATN_SEARCH = 9

                    # (W) Search to a specific relative time counter (RTC) on
                    # a tape
                    KSPROPERTY_EXTXPORT_RTC_SEARCH = 10
                    KSPROPERTY_RAW_AVC_CMD = 11

                KSPROPERTY_EXTXPORT_CAPABILITIES = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_CAPABILITIES
                KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE
                KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE
                KSPROPERTY_EXTXPORT_LOAD_MEDIUM = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_LOAD_MEDIUM
                KSPROPERTY_EXTXPORT_MEDIUM_INFO = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_MEDIUM_INFO
                KSPROPERTY_EXTXPORT_STATE = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_STATE
                KSPROPERTY_EXTXPORT_STATE_NOTIFY = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_STATE_NOTIFY
                KSPROPERTY_EXTXPORT_TIMECODE_SEARCH = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_TIMECODE_SEARCH
                KSPROPERTY_EXTXPORT_ATN_SEARCH = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_ATN_SEARCH
                KSPROPERTY_EXTXPORT_RTC_SEARCH = KSPROPERTY_EXTXPORT.KSPROPERTY_EXTXPORT_RTC_SEARCH
                KSPROPERTY_RAW_AVC_CMD = KSPROPERTY_EXTXPORT.KSPROPERTY_RAW_AVC_CMD

                tagTRANSPORTSTATUS._fields_ = [
                    ('Mode', LONG),
                    ('LastError', LONG),
                    ('RecordInhibit', LONG),
                    ('ServoLock', LONG),
                    ('MediaPresent', LONG),
                    ('MediaLength', LONG),
                    ('MediaSize', LONG),
                    ('MediaTrackCount', LONG),
                    ('MediaTrackLength', LONG),
                    ('MediaTrackSide', LONG),
                    ('MediaType', LONG),
                    ('LinkMode', LONG),
                    ('NotifyOn', LONG),
                ]

                tagTRANSPORTBASICPARMS._fields_ = [
                    ('TimeFormat', LONG),
                    ('TimeReference', LONG),
                    ('Superimpose', LONG),
                    ('EndStopAction', LONG),
                    ('RecordFormat', LONG),
                    ('StepFrames', LONG),
                    ('SetpField', LONG),
                    ('Preroll', LONG),
                    ('RecPreroll', LONG),
                    ('Postroll', LONG),
                    ('EditDelay', LONG),
                    ('PlayTCDelay', LONG),
                    ('RecTCDelay', LONG),
                    ('EditField', LONG),
                    ('FrameServo', LONG),
                    ('ColorFrameServo', LONG),
                    ('ServoRef', LONG),
                    ('WarnGenlock', LONG),
                    ('SetTracking', LONG),
                    ('VolumeName', TCHAR * 40),
                    ('Ballistic', LONG * 20),
                    ('Speed', LONG),
                    ('CounterFormat', LONG),
                    ('TunerChannel', LONG),
                    ('TunerNumber', LONG),
                    ('TimerEvent', LONG),
                    ('TimerStartDay', LONG),
                    ('TimerStartTime', LONG),
                    ('TimerStopDay', LONG),
                    ('TimerStopTime', LONG),
                ]

                tagTRANSPORTVIDEOPARMS._fields_ = [
                    ('OutputMode', LONG),
                    ('Input', LONG),
                ]

                tagTRANSPORTAUDIOPARMS._fields_ = [
                    ('EnableOutput', LONG),
                    ('EnableRecord', LONG),
                    ('EnableSelsync', LONG),
                    ('Input', LONG),
                    ('MonitorSource', LONG),
                ]

                MEDIUM_INFO._fields_ = [
                    ('MediaPresent', BOOL),
                    ('MediaType', ULONG),
                    ('RecordInhibit', BOOL),
                ]

                TRANSPORT_STATE._fields_ = [
                    ('Mode', ULONG),
                    ('State', ULONG),
                ]


                class u(ctypes.Union):
                    pass


                class Timecode(ctypes.Structure):
                    pass


                Timecode._fields_ = [
                    ('frame', BYTE),
                    ('second', BYTE),
                    ('minute', BYTE),
                    ('hour', BYTE),
                ]
                u.Timecode = Timecode


                class RawAVC(ctypes.Structure):
                    pass


                RawAVC._fields_ = [
                    ('PayloadSize', ULONG),
                    ('Payload', BYTE * 512),
                ]
                u.RawAVC = RawAVC


                u._fields_ = [
                    ('Capabilities', ULONG),
                    ('SignalMode', ULONG),
                    ('LoadMedium', ULONG),
                    ('MediumInfo', MEDIUM_INFO),
                    ('XPrtState', TRANSPORT_STATE),
                    ('Timecode', u.Timecode),
                    ('dwTimecode', DWORD),
                    ('dwAbsTrackNumber', DWORD),
                    ('RawAVC', u.RawAVC),
                ]
                KSPROPERTY_EXTXPORT_S.u = u


                KSPROPERTY_EXTXPORT_S._fields_ = [
                    ('Property', KSPROPERTY),
                    ('u', KSPROPERTY_EXTXPORT_S.u),
                ]


                class u(ctypes.Union):
                    pass


                class Timecode(ctypes.Structure):
                    pass


                Timecode._fields_ = [
                    ('frame', BYTE),
                    ('second', BYTE),
                    ('minute', BYTE),
                    ('hour', BYTE),
                ]
                u.Timecode = Timecode


                class RawAVC(ctypes.Structure):
                    pass


                RawAVC._fields_ = [
                    ('PayloadSize', ULONG),
                    ('Payload', BYTE * 512),
                ]
                u.RawAVC = RawAVC


                u._fields_ = [
                    ('Capabilities', ULONG),
                    ('SignalMode', ULONG),
                    ('LoadMedium', ULONG),
                    ('MediumInfo', MEDIUM_INFO),
                    ('XPrtState', TRANSPORT_STATE),
                    ('Timecode', u.Timecode),
                    ('dwTimecode', DWORD),
                    ('dwAbsTrackNumber', DWORD),
                    ('RawAVC', u.RawAVC),
                ]
                KSPROPERTY_EXTXPORT_NODE_S.u = u


                KSPROPERTY_EXTXPORT_NODE_S._fields_ = [
                    ('NodeProperty', KSP_NODE),
                    ('u', KSPROPERTY_EXTXPORT_NODE_S.u),
                ]

                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == == =
                STATIC_PROPSETID_TIMECODE_READER = (
                    0x9B496CE1,
                    0x811B,
                    0x11CF,
                    0x8C,
                    0x77,
                    0x00,
                    0xAA,
                    0x00,
                    0x6B,
                    0x68,
                    0x14
                )
                PROPSETID_TIMECODE_READER = DEFINE_GUIDSTRUCT(
                    "9B496CE1-811B-11cf-8C77-00AA006B6814"
                )
                PROPSETID_TIMECODE_READER = (
                    DEFINE_GUIDNAMED(PROPSETID_TIMECODE_READER)
                )


                class KSPROPERTY_TIMECODE(ENUM):
                    KSPROPERTY_TIMECODE_READER = 1
                    KSPROPERTY_ATN_READER = 2
                    KSPROPERTY_RTC_READER = 3

                KSPROPERTY_TIMECODE_READER = KSPROPERTY_TIMECODE.KSPROPERTY_TIMECODE_READER
                KSPROPERTY_ATN_READER = KSPROPERTY_TIMECODE.KSPROPERTY_ATN_READER
                KSPROPERTY_RTC_READER = KSPROPERTY_TIMECODE.KSPROPERTY_RTC_READER
                if not defined(TIMECODE_DEFINED):
                    TIMECODE_DEFINED = 1
                    class _Struct_1(ctypes.Structure):
                        pass


                    _Struct_1._fields_ = [
                        ('wFrameRate', WORD),
                        ('wFrameFract', WORD),
                        ('dwFrames', DWORD),
                    ]
                    _timecode._Struct_1 = _Struct_1

                    _timecode._anonymous_ = (
                        '_Struct_1',
                    )

                    _timecode._fields_ = [
                        ('_Struct_1', _timecode._Struct_1),
                        ('qw', DWORDLONG),
                    ]

                    PTIMECODE = POINTER(TIMECODE)

                    tagTIMECODE_SAMPLE._fields_ = [
                        ('qwTick', LONGLONG),
                        ('timecode', TIMECODE),
                        ('dwUser', DWORD),
                        ('dwFlags', DWORD),
                    ]

                    PTIMECODE_SAMPLE = POINTER(TIMECODE_SAMPLE)
                # END IF  TIMECODE_DEFINED


                KSPROPERTY_TIMECODE_S._fields_ = [
                    ('Property', KSPROPERTY),
                    ('TimecodeSamp', TIMECODE_SAMPLE),
                ]

                KSPROPERTY_TIMECODE_NODE_S._fields_ = [
                    ('NodeProperty', KSP_NODE),
                    ('TimecodeSamp', TIMECODE_SAMPLE),
                ]

                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == == =
                STATIC_KSEVENTSETID_EXTDEV_Command = (
                    0x109C7988,
                    0xB3CB,
                    0x11D2,
                    0xB4,
                    0x8E,
                    0x00,
                    0x60,
                    0x97,
                    0xB3,
                    0x39,
                    0x1B
                )
                KSEVENTSETID_EXTDEV_Command = DEFINE_GUIDSTRUCT(
                    "109c7988-b3cb-11d2-b48e-006097b3391b"
                )
                KSEVENTSETID_EXTDEV_Command = (
                    DEFINE_GUIDNAMED(KSEVENTSETID_EXTDEV_Command)
                )


                class KSEVENT_DEVCMD(ENUM):
                    KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY = 1
                    KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = 2
                    KSEVENT_EXTDEV_COMMAND_BUSRESET = 3
                    KSEVENT_EXTDEV_TIMECODE_UPDATE = 4
                    KSEVENT_EXTDEV_OPERATION_MODE_UPDATE = 5
                    KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE = 6
                    KSEVENT_EXTDEV_NOTIFY_REMOVAL = 7
                    KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE = 8

                KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY = KSEVENT_DEVCMD.KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY
                KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = KSEVENT_DEVCMD.KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY
                KSEVENT_EXTDEV_COMMAND_BUSRESET = KSEVENT_DEVCMD.KSEVENT_EXTDEV_COMMAND_BUSRESET
                KSEVENT_EXTDEV_TIMECODE_UPDATE = KSEVENT_DEVCMD.KSEVENT_EXTDEV_TIMECODE_UPDATE
                KSEVENT_EXTDEV_OPERATION_MODE_UPDATE = KSEVENT_DEVCMD.KSEVENT_EXTDEV_OPERATION_MODE_UPDATE
                KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE = KSEVENT_DEVCMD.KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE
                KSEVENT_EXTDEV_NOTIFY_REMOVAL = KSEVENT_DEVCMD.KSEVENT_EXTDEV_NOTIFY_REMOVAL
                KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE = KSEVENT_DEVCMD.KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE
            # END IF   __EDevCtrl__
        # END IF   XP SP2 and later (chronologically)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_CROSSBAR = (
            0x6A2E0640,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_CROSSBAR = DEFINE_GUIDSTRUCT(
            "6a2e0640-28e4-11d0-a18c-00a0c9118956"
        )
        PROPSETID_VIDCAP_CROSSBAR = DEFINE_GUIDNAMED(PROPSETID_VIDCAP_CROSSBAR)


        class KSPROPERTY_VIDCAP_CROSSBAR(ENUM):
            KSPROPERTY_CROSSBAR_CAPS = 1
            KSPROPERTY_CROSSBAR_PININFO = 2
            KSPROPERTY_CROSSBAR_CAN_ROUTE = 3
            KSPROPERTY_CROSSBAR_ROUTE = 4
            KSPROPERTY_CROSSBAR_INPUT_ACTIVE = 5

        KSPROPERTY_CROSSBAR_CAPS = KSPROPERTY_VIDCAP_CROSSBAR.KSPROPERTY_CROSSBAR_CAPS
        KSPROPERTY_CROSSBAR_PININFO = KSPROPERTY_VIDCAP_CROSSBAR.KSPROPERTY_CROSSBAR_PININFO
        KSPROPERTY_CROSSBAR_CAN_ROUTE = KSPROPERTY_VIDCAP_CROSSBAR.KSPROPERTY_CROSSBAR_CAN_ROUTE
        KSPROPERTY_CROSSBAR_ROUTE = KSPROPERTY_VIDCAP_CROSSBAR.KSPROPERTY_CROSSBAR_ROUTE
        KSPROPERTY_CROSSBAR_INPUT_ACTIVE = KSPROPERTY_VIDCAP_CROSSBAR.KSPROPERTY_CROSSBAR_INPUT_ACTIVE

        KSPROPERTY_CROSSBAR_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # the number of audio and video input pins
            ('NumberOfInputs', ULONG),
            # the number of audio and video output pins
            ('NumberOfOutputs', ULONG),
        ]

        KSPROPERTY_CROSSBAR_PININFO_S._fields_ = [
            ('Property', KSPROPERTY),
            # KSPIN_DATAFLOW_IN or KSPIN_DATAFLOW_OUT?
            ('Direction', KSPIN_DATAFLOW),
            # Which pin to return data for?
            ('Index', ULONG),
            # KS_PhysConn_Video_* or KS_PhysConn_Audio_*
            ('PinType', ULONG),
            # For video pins, this is the related audio pin
            ('RelatedPinIndex', ULONG),
            # Identifies the hardware connection
            ('Medium', KSPIN_MEDIUM),
        ]

        KSPROPERTY_CROSSBAR_ROUTE_S._fields_ = [
            ('Property', KSPROPERTY),
            # Zero based index of the input pin
            ('IndexInputPin', ULONG),
            # Zero based index of the output pin
            ('IndexOutputPin', ULONG),
            # returns non-zero on CAN_ROUTE if routing is possible
            ('CanRoute', ULONG),
        ]

        KSPROPERTY_CROSSBAR_ACTIVE_S._fields_ = [
            ('Property', KSPROPERTY),
            # W - Zero based index of the input pin
            ('IndexInputPin', ULONG),
            # R - returns whether an active signal is present on the given
            # input
            ('Active', ULONG),
        ]
        STATIC_EVENTSETID_CROSSBAR = (
            0x6A2E0641,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        EVENTSETID_CROSSBAR = DEFINE_GUIDSTRUCT(
            "6a2e0641-28e4-11d0-a18c-00a0c9118956"
        )
        EVENTSETID_CROSSBAR = DEFINE_GUIDNAMED(EVENTSETID_CROSSBAR)


        class KSEVENT_CROSSBAR(ENUM):
            KSEVENT_CROSSBAR_CHANGED = 1

        KSEVENT_CROSSBAR_CHANGED = KSEVENT_CROSSBAR.KSEVENT_CROSSBAR_CHANGED

        # The following IDs should match the AM equivalents
        class KS_PhysicalConnectorType(ENUM):
            KS_PhysConn_Video_Tuner = 1
            KS_PhysConn_Video_Composite = 2
            KS_PhysConn_Video_SVideo = 3
            KS_PhysConn_Video_RGB = 4
            KS_PhysConn_Video_YRYBY = 5
            KS_PhysConn_Video_SerialDigital = 6
            KS_PhysConn_Video_ParallelDigital = 7
            KS_PhysConn_Video_SCSI = 8
            KS_PhysConn_Video_AUX = 9
            KS_PhysConn_Video_1394 = 10
            KS_PhysConn_Video_USB = 11
            KS_PhysConn_Video_VideoDecoder = 12
            KS_PhysConn_Video_VideoEncoder = 13
            KS_PhysConn_Video_SCART = 14
            KS_PhysConn_Audio_Tuner = 4096
            KS_PhysConn_Audio_Line = 4097
            KS_PhysConn_Audio_Mic = 4098
            KS_PhysConn_Audio_AESDigital = 4099
            KS_PhysConn_Audio_SPDIFDigital = 4100
            KS_PhysConn_Audio_SCSI = 4101
            KS_PhysConn_Audio_AUX = 4102
            KS_PhysConn_Audio_1394 = 4103
            KS_PhysConn_Audio_USB = 4104
            KS_PhysConn_Audio_AudioDecoder = 4105

        KS_PhysConn_Video_Tuner = KS_PhysicalConnectorType.KS_PhysConn_Video_Tuner
        KS_PhysConn_Video_Composite = KS_PhysicalConnectorType.KS_PhysConn_Video_Composite
        KS_PhysConn_Video_SVideo = KS_PhysicalConnectorType.KS_PhysConn_Video_SVideo
        KS_PhysConn_Video_RGB = KS_PhysicalConnectorType.KS_PhysConn_Video_RGB
        KS_PhysConn_Video_YRYBY = KS_PhysicalConnectorType.KS_PhysConn_Video_YRYBY
        KS_PhysConn_Video_SerialDigital = KS_PhysicalConnectorType.KS_PhysConn_Video_SerialDigital
        KS_PhysConn_Video_ParallelDigital = KS_PhysicalConnectorType.KS_PhysConn_Video_ParallelDigital
        KS_PhysConn_Video_SCSI = KS_PhysicalConnectorType.KS_PhysConn_Video_SCSI
        KS_PhysConn_Video_AUX = KS_PhysicalConnectorType.KS_PhysConn_Video_AUX
        KS_PhysConn_Video_1394 = KS_PhysicalConnectorType.KS_PhysConn_Video_1394
        KS_PhysConn_Video_USB = KS_PhysicalConnectorType.KS_PhysConn_Video_USB
        KS_PhysConn_Video_VideoDecoder = KS_PhysicalConnectorType.KS_PhysConn_Video_VideoDecoder
        KS_PhysConn_Video_VideoEncoder = KS_PhysicalConnectorType.KS_PhysConn_Video_VideoEncoder
        KS_PhysConn_Video_SCART = KS_PhysicalConnectorType.KS_PhysConn_Video_SCART
        KS_PhysConn_Audio_Tuner = KS_PhysicalConnectorType.KS_PhysConn_Audio_Tuner
        KS_PhysConn_Audio_Line = KS_PhysicalConnectorType.KS_PhysConn_Audio_Line
        KS_PhysConn_Audio_Mic = KS_PhysicalConnectorType.KS_PhysConn_Audio_Mic
        KS_PhysConn_Audio_AESDigital = KS_PhysicalConnectorType.KS_PhysConn_Audio_AESDigital
        KS_PhysConn_Audio_SPDIFDigital = KS_PhysicalConnectorType.KS_PhysConn_Audio_SPDIFDigital
        KS_PhysConn_Audio_SCSI = KS_PhysicalConnectorType.KS_PhysConn_Audio_SCSI
        KS_PhysConn_Audio_AUX = KS_PhysicalConnectorType.KS_PhysConn_Audio_AUX
        KS_PhysConn_Audio_1394 = KS_PhysicalConnectorType.KS_PhysConn_Audio_1394
        KS_PhysConn_Audio_USB = KS_PhysicalConnectorType.KS_PhysConn_Audio_USB
        KS_PhysConn_Audio_AudioDecoder = KS_PhysicalConnectorType.KS_PhysConn_Audio_AudioDecoder

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_TVAUDIO = (
            0x6A2E0650,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_TVAUDIO = DEFINE_GUIDSTRUCT(
            "6a2e0650-28e4-11d0-a18c-00a0c9118956"
        )
        PROPSETID_VIDCAP_TVAUDIO = DEFINE_GUIDNAMED(PROPSETID_VIDCAP_TVAUDIO)


        class KSPROPERTY_VIDCAP_TVAUDIO(ENUM):
            KSPROPERTY_TVAUDIO_CAPS = 1
            KSPROPERTY_TVAUDIO_MODE = 2
            KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 3

        KSPROPERTY_TVAUDIO_CAPS = KSPROPERTY_VIDCAP_TVAUDIO.KSPROPERTY_TVAUDIO_CAPS
        KSPROPERTY_TVAUDIO_MODE = KSPROPERTY_VIDCAP_TVAUDIO.KSPROPERTY_TVAUDIO_MODE
        KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = KSPROPERTY_VIDCAP_TVAUDIO.KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES
        KS_TVAUDIO_MODE_MONO = 0x0001        # Mono
        KS_TVAUDIO_MODE_STEREO = 0x0002        # Stereo
        KS_TVAUDIO_MODE_LANG_A = 0x0010        # Primary language
        KS_TVAUDIO_MODE_LANG_B = 0x0020        # 2nd avail language
        KS_TVAUDIO_MODE_LANG_C = 0x0040        # 3rd avail language
        if NTDDI_VERSION >= NTDDI_VISTA:
            KS_TVAUDIO_PRESET_STEREO = 0x0200            # if present, stereo
            KS_TVAUDIO_PRESET_LANG_A = 0x1000            # if present, Language A
            KS_TVAUDIO_PRESET_LANG_B = 0x2000            # if present, Language B
            KS_TVAUDIO_PRESET_LANG_C = 0x4000            # if present, Language C
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA
        KSPROPERTY_TVAUDIO_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            # Bitmask of KS_TVAUDIO_MODE_*
            ('Capabilities', ULONG),
            ('InputMedium', KSPIN_MEDIUM),
            ('OutputMedium', KSPIN_MEDIUM),
        ]
        KSPROPERTY_TVAUDIO_S._fields_ = [
            ('Property', KSPROPERTY),
            # KS_TVAUDIO_MODE_*
            ('Mode', ULONG),
        ]
        STATIC_KSEVENTSETID_VIDCAP_TVAUDIO = (
            0x6A2E0651,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        KSEVENTSETID_VIDCAP_TVAUDIO = DEFINE_GUIDSTRUCT(
            "6a2e0651-28e4-11d0-a18c-00a0c9118956"
        )
        KSEVENTSETID_VIDCAP_TVAUDIO = (
            DEFINE_GUIDNAMED(KSEVENTSETID_VIDCAP_TVAUDIO)
        )


        class KSEVENT_TVAUDIO(ENUM):
            KSEVENT_TVAUDIO_CHANGED = 1

        KSEVENT_TVAUDIO_CHANGED = KSEVENT_TVAUDIO.KSEVENT_TVAUDIO_CHANGED

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_VIDEOCOMPRESSION = (
            0xC6E13343,
            0x30AC,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_VIDEOCOMPRESSION = DEFINE_GUIDSTRUCT(
            "C6E13343-30AC-11d0-A18C-00A0C9118956"
        )
        PROPSETID_VIDCAP_VIDEOCOMPRESSION = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_VIDEOCOMPRESSION)
        )


        class KSPROPERTY_VIDCAP_VIDEOCOMPRESSION(ENUM):
            KSPROPERTY_VIDEOCOMPRESSION_GETINFO = 1
            KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE = 2
            KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 3
            KSPROPERTY_VIDEOCOMPRESSION_QUALITY = 4
            KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME = 5
            KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE = 6
            KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE = 7

        KSPROPERTY_VIDEOCOMPRESSION_GETINFO = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_GETINFO
        KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE
        KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME
        KSPROPERTY_VIDEOCOMPRESSION_QUALITY = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_QUALITY
        KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME
        KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE
        KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE = KSPROPERTY_VIDCAP_VIDEOCOMPRESSION.KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE


        class KS_CompressionCaps(ENUM):
            KS_CompressionCaps_CanQuality = 1
            KS_CompressionCaps_CanCrunch = 2
            KS_CompressionCaps_CanKeyFrame = 4
            KS_CompressionCaps_CanBFrame = 8
            KS_CompressionCaps_CanWindow = 0x10

        KS_CompressionCaps_CanQuality = KS_CompressionCaps.KS_CompressionCaps_CanQuality
        KS_CompressionCaps_CanCrunch = KS_CompressionCaps.KS_CompressionCaps_CanCrunch
        KS_CompressionCaps_CanKeyFrame = KS_CompressionCaps.KS_CompressionCaps_CanKeyFrame
        KS_CompressionCaps_CanBFrame = KS_CompressionCaps.KS_CompressionCaps_CanBFrame
        KS_CompressionCaps_CanWindow = KS_CompressionCaps.KS_CompressionCaps_CanWindow
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            class KS_VideoStreamingHints(ENUM):
                KS_StreamingHint_FrameInterval = 0x0100
                KS_StreamingHint_KeyFrameRate = 0x0200
                KS_StreamingHint_PFrameRate = 0x0400
                KS_StreamingHint_CompQuality = 0x0800
                KS_StreamingHint_CompWindowSize = 0x1000

            KS_StreamingHint_FrameInterval = KS_VideoStreamingHints.KS_StreamingHint_FrameInterval
            KS_StreamingHint_KeyFrameRate = KS_VideoStreamingHints.KS_StreamingHint_KeyFrameRate
            KS_StreamingHint_PFrameRate = KS_VideoStreamingHints.KS_StreamingHint_PFrameRate
            KS_StreamingHint_CompQuality = KS_VideoStreamingHints.KS_StreamingHint_CompQuality
            KS_StreamingHint_CompWindowSize = KS_VideoStreamingHints.KS_StreamingHint_CompWindowSize
        # END IF   XP SP2 and later (chronologically)


        KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S._fields_ = [
            ('Property', KSPROPERTY),
            # zero based index of stream
            ('StreamIndex', ULONG),
            # Key frame rate
            ('DefaultKeyFrameRate', LONG),
            # Predeicted frames per Key frame
            ('DefaultPFrameRate', LONG),
            # 0 to 10000
            ('DefaultQuality', LONG),
            # How many discreet quality settings?
            ('NumberOfQualitySettings', LONG),
            # KS_CompressionCaps_*
            ('Capabilities', LONG),
        ]

        KSPROPERTY_VIDEOCOMPRESSION_S._fields_ = [
            ('Property', KSPROPERTY),
            # zero based index of stream
            ('StreamIndex', ULONG),
            # value to get or set
            ('Value', LONG),
        ]
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSPROPERTY_VIDEOCOMPRESSION_S1._fields_ = [
                ('Property', KSPROPERTY),
                # zero based index of stream
                ('StreamIndex', ULONG),
                # value to get or set
                ('Value', LONG),
                ('Flags', ULONG),
            ]
        # END IF   XP SP2 and later (chronologically)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # MEDIASUBTYPE_Overlay
        STATIC_KSDATAFORMAT_SUBTYPE_OVERLAY = (
            0xE436EB7F,
            0x524F,
            0x11CE,
            0x9F,
            0x53,
            0x00,
            0x20,
            0xAF,
            0x0B,
            0xA7,
            0x70
        )
        KSDATAFORMAT_SUBTYPE_OVERLAY = DEFINE_GUIDSTRUCT(
            "e436eb7f-524f-11ce-9f53-0020af0ba770"
        )
        KSDATAFORMAT_SUBTYPE_OVERLAY = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_OVERLAY)
        )
        STATIC_KSPROPSETID_OverlayUpdate = (
            0x490EA5CF,
            0x7681,
            0x11D1,
            0xA2,
            0x1C,
            0x00,
            0xA0,
            0xC9,
            0x22,
            0x31,
            0x96
        )
        KSPROPSETID_OverlayUpdate = DEFINE_GUIDSTRUCT(
            "490EA5CF-7681-11D1-A21C-00A0C9223196"
        )
        KSPROPSETID_OverlayUpdate = DEFINE_GUIDNAMED(KSPROPSETID_OverlayUpdate)


        class KSPROPERTY_OVERLAYUPDATE(ENUM):
            KSPROPERTY_OVERLAYUPDATE_INTERESTS = 1
            KSPROPERTY_OVERLAYUPDATE_CLIPLIST = 0x1
            KSPROPERTY_OVERLAYUPDATE_PALETTE = 0x2
            KSPROPERTY_OVERLAYUPDATE_COLORKEY = 0x4
            KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 0x8
            KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 0x10
            KSPROPERTY_OVERLAYUPDATE_COLORREF = 0x10000000

        KSPROPERTY_OVERLAYUPDATE_INTERESTS = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_INTERESTS
        KSPROPERTY_OVERLAYUPDATE_CLIPLIST = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_CLIPLIST
        KSPROPERTY_OVERLAYUPDATE_PALETTE = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_PALETTE
        KSPROPERTY_OVERLAYUPDATE_COLORKEY = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_COLORKEY
        KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION
        KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE
        KSPROPERTY_OVERLAYUPDATE_COLORREF = KSPROPERTY_OVERLAYUPDATE.KSPROPERTY_OVERLAYUPDATE_COLORREF

        KSDISPLAYCHANGE._fields_ = [
            ('PelsWidth', ULONG),
            ('PelsHeight', ULONG),
            ('BitsPerPel', ULONG),
            ('DeviceID', WCHAR * 1),
        ]


        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_INTERESTS(Handler):
            DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_INTERESTS,
                Handler,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(ULONG),
                NULL,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_PALETTE(Handler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_PALETTE,
                NULL,
                ctypes.sizeof(KSPROPERTY),
                0,
                Handler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )

        from pyWinAPI.um.strmif_h import *

        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORKEY(Handler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_COLORKEY,
                NULL,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(COLORKEY),
                Handler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )

        from pyWinAPI.shared.dciddi_h import * # NOQA

        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_CLIPLIST(Handler):
            return  DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_CLIPLIST,
                NULL,
                ctypes.sizeof(KSPROPERTY),
                2 * ctypes.sizeof(RECT) + ctypes.sizeof(RGNDATAHEADER),
                Handler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_VIDEOPOSITION(Handler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION,
                NULL,
                ctypes.sizeof(KSPROPERTY),
                2 * ctypes.sizeof(RECT),
                Handler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_DISPLAYCHANGE(Handler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE,
                NULL,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(KSDISPLAYCHANGE),
                Handler,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        def DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORREF(Handler):
            return DEFINE_KSPROPERTY_ITEM(
                KSPROPERTY_OVERLAYUPDATE_COLORREF,
                Handler,
                ctypes.sizeof(KSPROPERTY),
                ctypes.sizeof(COLORREF),
                NULL,
                NULL,
                0,
                NULL,
                NULL,
                0
            )


        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_VIDEOCONTROL = (
            0x6A2E0670,
            0x28E4,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_VIDEOCONTROL = DEFINE_GUIDSTRUCT(
            "6a2e0670-28e4-11d0-a18c-00a0c9118956"
        )
        PROPSETID_VIDCAP_VIDEOCONTROL = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_VIDEOCONTROL)
        )


        class KSPROPERTY_VIDCAP_VIDEOCONTROL(ENUM):
            KSPROPERTY_VIDEOCONTROL_CAPS = 1
            KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 2
            KSPROPERTY_VIDEOCONTROL_FRAME_RATES = 3
            KSPROPERTY_VIDEOCONTROL_MODE = 4

        KSPROPERTY_VIDEOCONTROL_CAPS = KSPROPERTY_VIDCAP_VIDEOCONTROL.KSPROPERTY_VIDEOCONTROL_CAPS
        KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = KSPROPERTY_VIDCAP_VIDEOCONTROL.KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE
        KSPROPERTY_VIDEOCONTROL_FRAME_RATES = KSPROPERTY_VIDCAP_VIDEOCONTROL.KSPROPERTY_VIDEOCONTROL_FRAME_RATES
        KSPROPERTY_VIDEOCONTROL_MODE = KSPROPERTY_VIDCAP_VIDEOCONTROL.KSPROPERTY_VIDEOCONTROL_MODE


        class KS_VideoControlFlags(ENUM):
            KS_VideoControlFlag_FlipHorizontal = 0x0001
            KS_VideoControlFlag_FlipVertical = 0x0002
            KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 0x0010
            KS_Obsolete_VideoControlFlag_Trigger = 0x0020
            KS_VideoControlFlag_ExternalTriggerEnable = 0x0004
            KS_VideoControlFlag_Trigger = 0x0008
            KS_VideoControlFlag_IndependentImagePin = 0x0040
            if NTDDI_VERSION >= NTDDI_WIN8:
                KS_VideoControlFlag_StillCapturePreviewFrame = 0x0080
                KS_VideoControlFlag_StartPhotoSequenceCapture = 0x0100
                KS_VideoControlFlag_StopPhotoSequenceCapture = 0x0200
            # END IF

        KS_VideoControlFlag_FlipHorizontal = KS_VideoControlFlags.KS_VideoControlFlag_FlipHorizontal
        KS_VideoControlFlag_FlipVertical = KS_VideoControlFlags.KS_VideoControlFlag_FlipVertical
        KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = KS_VideoControlFlags.KS_Obsolete_VideoControlFlag_ExternalTriggerEnable
        KS_Obsolete_VideoControlFlag_Trigger = KS_VideoControlFlags.KS_Obsolete_VideoControlFlag_Trigger
        KS_VideoControlFlag_ExternalTriggerEnable = KS_VideoControlFlags.KS_VideoControlFlag_ExternalTriggerEnable
        KS_VideoControlFlag_Trigger = KS_VideoControlFlags.KS_VideoControlFlag_Trigger
        KS_VideoControlFlag_IndependentImagePin = KS_VideoControlFlags.KS_VideoControlFlag_IndependentImagePin
        if NTDDI_VERSION >= NTDDI_WIN8:
            KS_VideoControlFlag_StillCapturePreviewFrame = KS_VideoControlFlags.KS_VideoControlFlag_StillCapturePreviewFrame
            KS_VideoControlFlag_StartPhotoSequenceCapture = KS_VideoControlFlags.KS_VideoControlFlag_StartPhotoSequenceCapture
            KS_VideoControlFlag_StopPhotoSequenceCapture = KS_VideoControlFlags.KS_VideoControlFlag_StopPhotoSequenceCapture
        # END IF


        KSPROPERTY_VIDEOCONTROL_CAPS_S._fields_ = [
            ('Property', KSPROPERTY),
            ('StreamIndex', ULONG),
            # KS_VideoControlFlags_*
            ('VideoControlCaps', ULONG),
        ]

        KSPROPERTY_VIDEOCONTROL_MODE_S._fields_ = [
            ('Property', KSPROPERTY),
            ('StreamIndex', ULONG),
            # KS_VideoControlFlags_*
            ('Mode', LONG),
        ]

        KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S._fields_ = [
            ('Property', KSPROPERTY),
            # Index of stream
            ('StreamIndex', ULONG),
            # Index of range
            ('RangeIndex', ULONG),
            # Size of image
            ('Dimensions', SIZE),
            # Only correct if pin is open
            ('CurrentActualFrameRate', LONGLONG),
            # Max Rate temporarily limited on USB or 1394?
            ('CurrentMaxAvailableFrameRate', LONGLONG),
        ]

        # KSPROPERTY_VIDEOCONTROL_FRAME_RATES returns a list of available
        # frame rates in 100 nS units
        KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S._fields_ = [
            ('Property', KSPROPERTY),
            # Index of stream
            ('StreamIndex', ULONG),
            # Index of range
            ('RangeIndex', ULONG),
            # Size of image
            ('Dimensions', SIZE),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_PROPSETID_VIDCAP_DROPPEDFRAMES = (
            0xC6E13344,
            0x30AC,
            0x11D0,
            0xA1,
            0x8C,
            0x00,
            0xA0,
            0xC9,
            0x11,
            0x89,
            0x56
        )
        PROPSETID_VIDCAP_DROPPEDFRAMES = DEFINE_GUIDSTRUCT(
            "C6E13344-30AC-11d0-A18C-00A0C9118956"
        )
        PROPSETID_VIDCAP_DROPPEDFRAMES = (
            DEFINE_GUIDNAMED(PROPSETID_VIDCAP_DROPPEDFRAMES)
        )


        class KSPROPERTY_VIDCAP_DROPPEDFRAMES(ENUM):
            KSPROPERTY_DROPPEDFRAMES_CURRENT = 1

        KSPROPERTY_DROPPEDFRAMES_CURRENT = KSPROPERTY_VIDCAP_DROPPEDFRAMES.KSPROPERTY_DROPPEDFRAMES_CURRENT

        KSPROPERTY_DROPPEDFRAMES_CURRENT_S._fields_ = [
            ('Property', KSPROPERTY),
            # Current Picture Number
            ('PictureNumber', LONGLONG),
            # Count of frames dropped
            ('DropCount', LONGLONG),
            # Average size of frames captured
            ('AverageFrameSize', ULONG),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # VPE
        STATIC_KSPROPSETID_VPConfig = (
            0xBC29A660,
            0x30E3,
            0x11D0,
            0x9E,
            0x69,
            0x00,
            0xC0,
            0x4F,
            0xD7,
            0xC1,
            0x5B
        )
        KSPROPSETID_VPConfig = DEFINE_GUIDSTRUCT(
            "bc29a660-30e3-11d0-9e69-00c04fd7c15b"
        )
        KSPROPSETID_VPConfig = DEFINE_GUIDNAMED(KSPROPSETID_VPConfig)
        STATIC_KSPROPSETID_VPVBIConfig = (
            0xEC529B00,
            0x1A1F,
            0x11D1,
            0xBA,
            0xD9,
            0x0,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSPROPSETID_VPVBIConfig = DEFINE_GUIDSTRUCT(
            "ec529b00-1a1f-11d1-bad9-00609744111a"
        )
        KSPROPSETID_VPVBIConfig = DEFINE_GUIDNAMED(KSPROPSETID_VPVBIConfig)

        # Both of the above property sets use the same list of properties below
        class KSPROPERTY_VPCONFIG(ENUM):
            KSPROPERTY_VPCONFIG_NUMCONNECTINFO = 1
            KSPROPERTY_VPCONFIG_GETCONNECTINFO = 2
            KSPROPERTY_VPCONFIG_SETCONNECTINFO = 3
            KSPROPERTY_VPCONFIG_VPDATAINFO = 4
            KSPROPERTY_VPCONFIG_MAXPIXELRATE = 5
            KSPROPERTY_VPCONFIG_INFORMVPINPUT = 6
            KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT = 7
            KSPROPERTY_VPCONFIG_GETVIDEOFORMAT = 8
            KSPROPERTY_VPCONFIG_SETVIDEOFORMAT = 9
            KSPROPERTY_VPCONFIG_INVERTPOLARITY = 10
            KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 11
            KSPROPERTY_VPCONFIG_SCALEFACTOR = 12
            KSPROPERTY_VPCONFIG_DDRAWHANDLE = 13
            KSPROPERTY_VPCONFIG_VIDEOPORTID = 14
            KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE = 15
            KSPROPERTY_VPCONFIG_SURFACEPARAMS = 16

        KSPROPERTY_VPCONFIG_NUMCONNECTINFO = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_NUMCONNECTINFO
        KSPROPERTY_VPCONFIG_GETCONNECTINFO = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_GETCONNECTINFO
        KSPROPERTY_VPCONFIG_SETCONNECTINFO = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_SETCONNECTINFO
        KSPROPERTY_VPCONFIG_VPDATAINFO = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_VPDATAINFO
        KSPROPERTY_VPCONFIG_MAXPIXELRATE = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_MAXPIXELRATE
        KSPROPERTY_VPCONFIG_INFORMVPINPUT = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_INFORMVPINPUT
        KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT
        KSPROPERTY_VPCONFIG_GETVIDEOFORMAT = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_GETVIDEOFORMAT
        KSPROPERTY_VPCONFIG_SETVIDEOFORMAT = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_SETVIDEOFORMAT
        KSPROPERTY_VPCONFIG_INVERTPOLARITY = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_INVERTPOLARITY
        KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY
        KSPROPERTY_VPCONFIG_SCALEFACTOR = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_SCALEFACTOR
        KSPROPERTY_VPCONFIG_DDRAWHANDLE = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_DDRAWHANDLE
        KSPROPERTY_VPCONFIG_VIDEOPORTID = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_VIDEOPORTID
        KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE
        KSPROPERTY_VPCONFIG_SURFACEPARAMS = KSPROPERTY_VPCONFIG.KSPROPERTY_VPCONFIG_SURFACEPARAMS
        if NTDDI_VERSION >= NTDDI_WINXP:
            # == == == == == == == == == == == == =
            # IBasicAudio
            STATIC_CLSID_KsIBasicAudioInterfaceHandler = (
                0xB9F8AC3E,
                0x0F71,
                0x11D2,
                0xB7,
                0x2C,
                0x00,
                0xC0,
                0x4F,
                0xB6,
                0xBD,
                0x3D
            )
            CLSID_KsIBasicAudioInterfaceHandler = DEFINE_GUIDSTRUCT(
                "b9f8ac3e-0f71-11d2-b72c-00c04fb6bd3d"
            )
            CLSID_KsIBasicAudioInterfaceHandler = (
                DEFINE_GUIDNAMED(CLSID_KsIBasicAudioInterfaceHandler)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WINXP)


        if defined(__IVPType__):
            KSVPMAXPIXELRATE._fields_ = [
                ('Size', KS_AMVPSIZE),
                ('MaxPixelsPerSecond', DWORD),
                ('Reserved', DWORD),
            ]

            KSVPSIZE_PROP._fields_ = [
                ('Property', KSPROPERTY),
                ('Size', KS_AMVPSIZE),
            ]

            KSVPSURFACEPARAMS._fields_ = [
                ('dwPitch', DWORD),
                ('dwXOrigin', DWORD),
                ('dwYOrigin', DWORD),
            ]
        else:
            if not defined(__DDRAW_INCLUDED__):
                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == ==
                # The following definitions must be in sync with DDraw.h in
                # DirectX SDK
                # == == == == == == == == == == == == == == == == == == == ==
                # == == == == == == == == == == == == == == == == ==
                # /* The FourCC code is valid.
                DDPF_FOURCC = 0x00000004
                if not defined(_DDPIXELFORMAT_DEFINED):
                    _DDPIXELFORMAT_DEFINED = 1

                    _DDPIXELFORMAT._fields_ = [
                        # size of structure
                        ('dwSize', DWORD),
                        # pixel format flags
                        ('dwFlags', DWORD),
                        # (FOURCC code)
                        ('dwFourCC', DWORD),
                        # how many bits per pixel (BD_1,2,4,8,16,24,32)
                        ('dwRGBBitCount', DWORD),
                        # how many bits per pixel (BD_4,8,16,24,32)
                        ('dwYUVBitCount', DWORD),
                        # how many bits for z buffers (BD_8,16,24,32)
                        ('dwZBufferBitDepth', DWORD),
                        # how many bits for alpha channels (BD_1,2,4,8)
                        ('dwAlphaBitDepth', DWORD),
                        # mask for red bit
                        ('dwRBitMask', DWORD),
                        # mask for Y bits
                        ('dwYBitMask', DWORD),
                        # mask for green bits
                        ('dwGBitMask', DWORD),
                        # mask for U bits
                        ('dwUBitMask', DWORD),
                        # mask for blue bits
                        ('dwBBitMask', DWORD),
                        # mask for V bits
                        ('dwVBitMask', DWORD),
                        # mask for alpha channel
                        ('dwRGBAlphaBitMask', DWORD),
                        # mask for alpha channel
                        ('dwYUVAlphaBitMask', DWORD),
                        # mask for Z channel
                        ('dwRGBZBitMask', DWORD),
                        # mask for Z channel
                        ('dwYUVZBitMask', DWORD),
                    ]
                # END IF   _DDPIXELFORMAT_DEFINED
            # END IF   not defined(__DDRAW_INCLUDED__)

            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # End of DDraw.h header info
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # The following definitions must be in sync with DVP.h in DirectX
            # SDK
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            if not defined(__DVP_INCLUDED__):
                # size of the DDVIDEOPORTCONNECT structure
                _DDVIDEOPORTCONNECT._fields_ = [
                    ('dwSize', DWORD),
                    # Width of the video port
                    ('dwPortWidth', DWORD),
                    # Description of video port connection
                    ('guidTypeID', GUID),
                    # Connection flags
                    ('dwFlags', DWORD),
                    # Reserved, set to zero.
                    ('dwReserved1', ULONG_PTR),
                ]
                DDVPTYPE_E_HREFH_VREFH = (
                    0x54F39980,
                    0xDA60,
                    0x11CF,
                    0x9B,
                    0x06,
                    0x00,
                    0xA0,
                    0xC9,
                    0x03,
                    0xA3,
                    0xB8
                )
                DDVPTYPE_E_HREFL_VREFL = (
                    0xE09C77E0,
                    0xDA60,
                    0x11CF,
                    0x9B,
                    0x06,
                    0x00,
                    0xA0,
                    0xC9,
                    0x03,
                    0xA3,
                    0xB8
                )
            # END IF   not defined(__DVP_INCLUDED__)

            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # End of DVP.h header info
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # The following definitions must be in sync with VPType.h in AM
            # 2.0 SDK
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == ==
            # pixel aspect ratios corresponding to a 720x480 NTSC image or a
            # 720x576 image
            class KS_AMPixAspectRatio(ENUM): # AMPixAspectRatio
                KS_PixAspectRatio_NTSC4x3 = 1
                KS_PixAspectRatio_NTSC16x9 = 2
                KS_PixAspectRatio_PAL4x3 = 3
                KS_PixAspectRatio_PAL16x9 = 4

            KS_PixAspectRatio_NTSC4x3 = KS_AMPixAspectRatio.KS_PixAspectRatio_NTSC4x3
            KS_PixAspectRatio_NTSC16x9 = KS_AMPixAspectRatio.KS_PixAspectRatio_NTSC16x9
            KS_PixAspectRatio_PAL4x3 = KS_AMPixAspectRatio.KS_PixAspectRatio_PAL4x3
            KS_PixAspectRatio_PAL16x9 = KS_AMPixAspectRatio.KS_PixAspectRatio_PAL16x9


            class KS_AMVP_SELECTFORMATBY(ENUM): # AMVP_SELECTFORMATBY
                KS_AMVP_DO_NOT_CARE = 1
                KS_AMVP_BEST_BANDWIDTH = 2
                KS_AMVP_INPUT_SAME_AS_OUTPUT = 3

            KS_AMVP_DO_NOT_CARE = KS_AMVP_SELECTFORMATBY.KS_AMVP_DO_NOT_CARE
            KS_AMVP_BEST_BANDWIDTH = KS_AMVP_SELECTFORMATBY.KS_AMVP_BEST_BANDWIDTH
            KS_AMVP_INPUT_SAME_AS_OUTPUT = KS_AMVP_SELECTFORMATBY.KS_AMVP_INPUT_SAME_AS_OUTPUT


            class KS_AMVP_MODE(ENUM): # AMVP_MODE
                KS_AMVP_MODE_WEAVE = 1
                KS_AMVP_MODE_BOBINTERLEAVED = 2
                KS_AMVP_MODE_BOBNONINTERLEAVED = 3
                KS_AMVP_MODE_SKIPEVEN = 4
                KS_AMVP_MODE_SKIPODD = 5

            KS_AMVP_MODE_WEAVE = KS_AMVP_MODE.KS_AMVP_MODE_WEAVE
            KS_AMVP_MODE_BOBINTERLEAVED = KS_AMVP_MODE.KS_AMVP_MODE_BOBINTERLEAVED
            KS_AMVP_MODE_BOBNONINTERLEAVED = KS_AMVP_MODE.KS_AMVP_MODE_BOBNONINTERLEAVED
            KS_AMVP_MODE_SKIPEVEN = KS_AMVP_MODE.KS_AMVP_MODE_SKIPEVEN
            KS_AMVP_MODE_SKIPODD = KS_AMVP_MODE.KS_AMVP_MODE_SKIPODD

            tagKS_AMVPDIMINFO._fields_ = [
                # [out] field width
                ('dwFieldWidth', DWORD),
                # [out] field height
                ('dwFieldHeight', DWORD),
                # [out] VBI data width
                ('dwVBIWidth', DWORD),
                # [out] VBI data height
                ('dwVBIHeight', DWORD),
                # [out] valid rect for data cropping
                ('rcValidRegion', RECT),
            ]

            tagKS_AMVPDATAINFO._fields_ = [
                # Size of the struct
                ('dwSize', DWORD),
                # Time taken by each field
                ('dwMicrosecondsPerField', DWORD),
                # Dimensional Information
                ('amvpDimInfo', KS_AMVPDIMINFO),
                # Pict aspect ratio in X dimn
                ('dwPictAspectRatioX', DWORD),
                # Pict aspect ratio in Y dimn
                ('dwPictAspectRatioY', DWORD),
                # Videoport should enable DOUBLE clocking
                ('bEnableDoubleClock', BOOL),
                # Videoport should use an external VACT signal
                ('bEnableVACT', BOOL),
                # Indicates that the signal is interlaced
                ('bDataIsInterlaced', BOOL),
                # number of halflines in the odd field
                ('lHalfLinesOdd', LONG),
                # Device inverts the polarity by default
                ('bFieldPolarityInverted', BOOL),
                # Number of lines of data in VREF
                ('dwNumLinesInVREF', DWORD),
                # number of halflines in the even field
                ('lHalfLinesEven', LONG),
                # Reserved for future use
                ('dwReserved1', DWORD),
            ]

            tagKS_AMVPSIZE._fields_ = [
                # [in] width in pixels
                ('dwWidth', DWORD),
                # [in] height in pixels
                ('dwHeight', DWORD),
            ]

            # == == == == == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == ==
            # End of VPType.h header info
            # == == == == == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == ==
            KSVPMAXPIXELRATE._fields_ = [
                ('Size', KS_AMVPSIZE),
                ('MaxPixelsPerSecond', DWORD),
                ('Reserved', DWORD),
            ]

            KSVPSIZE_PROP._fields_ = [
                ('Property', KSPROPERTY),
                ('Size', KS_AMVPSIZE),
            ]

            KSVPSURFACEPARAMS._fields_ = [
                ('dwPitch', DWORD),
                ('dwXOrigin', DWORD),
                ('dwYOrigin', DWORD),
            ]

            # END IF   not defined(__IVPType__)


        # IVPNotify event notification
        STATIC_KSEVENTSETID_VPNotify = (
            0x20C5598E,
            0xD3C8,
            0x11D0,
            0x8D,
            0xFC,
            0x00,
            0xC0,
            0x4F,
            0xD7,
            0xC0,
            0x8B
        )
        KSEVENTSETID_VPNotify = DEFINE_GUIDSTRUCT(
            "20c5598e-d3c8-11d0-8dfc-00c04fd7c08b"
        )
        KSEVENTSETID_VPNotify = DEFINE_GUIDNAMED(KSEVENTSETID_VPNotify)


        class KSEVENT_VPNOTIFY(ENUM):
            KSEVENT_VPNOTIFY_FORMATCHANGE = 1

        KSEVENT_VPNOTIFY_FORMATCHANGE = KSEVENT_VPNOTIFY.KSEVENT_VPNOTIFY_FORMATCHANGE


        # VIDCAPTOSTI event notification
        STATIC_KSEVENTSETID_VIDCAPTOSTI = (
            0xDB47DE20,
            0xF628,
            0x11D1,
            0xBA,
            0x41,
            0x0,
            0xA0,
            0xC9,
            0xD,
            0x2B,
            0x5
        )
        KSEVENTSETID_VIDCAPTOSTI = DEFINE_GUIDSTRUCT(
            "DB47DE20-F628-11d1-BA41-00A0C90D2B05"
        )
        KSEVENTSETID_VIDCAPNotify = DEFINE_GUIDNAMED(KSEVENTSETID_VIDCAPTOSTI)


        class KSEVENT_VIDCAPTOSTI(ENUM):
            KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 1
            if (
                NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
                NTDDI_VERSION >= NTDDI_WS03SP1
            ):
                KSEVENT_VIDCAP_AUTO_UPDATE = 2
                KSEVENT_VIDCAP_SEARCH = 3
            # END IF

        KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = KSEVENT_VIDCAPTOSTI.KSEVENT_VIDCAPTOSTI_EXT_TRIGGER
        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            KSEVENT_VIDCAP_AUTO_UPDATE = KSEVENT_VIDCAPTOSTI.KSEVENT_VIDCAP_AUTO_UPDATE
            KSEVENT_VIDCAP_SEARCH = KSEVENT_VIDCAPTOSTI.KSEVENT_VIDCAP_SEARCH
        # END IF

        if (
            NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
            NTDDI_VERSION >= NTDDI_WS03SP1
        ):
            # Extension Unit Properties
            class KSPROPERTY_EXTENSION_UNIT(ENUM):
                KSPROPERTY_EXTENSION_UNIT_INFO = 1
                KSPROPERTY_EXTENSION_UNIT_CONTROL = 2
                KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 0xFFFF

            PKSPROPERTY_EXTENSION_UNIT = POINTER(KSPROPERTY_EXTENSION_UNIT)


            KSPROPERTY_EXTENSION_UNIT_INFO = KSPROPERTY_EXTENSION_UNIT.KSPROPERTY_EXTENSION_UNIT_INFO
            KSPROPERTY_EXTENSION_UNIT_CONTROL = KSPROPERTY_EXTENSION_UNIT.KSPROPERTY_EXTENSION_UNIT_CONTROL
            KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = KSPROPERTY_EXTENSION_UNIT.KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH
        # END IF   XP SP2 and later (chronologically)


        # IVPVBINotify event notification
        STATIC_KSEVENTSETID_VPVBINotify = (
            0xEC529B01,
            0x1A1F,
            0x11D1,
            0xBA,
            0xD9,
            0x0,
            0x60,
            0x97,
            0x44,
            0x11,
            0x1A
        )
        KSEVENTSETID_VPVBINotify = DEFINE_GUIDSTRUCT(
            "ec529b01-1a1f-11d1-bad9-00609744111a"
        )
        KSEVENTSETID_VPVBINotify = DEFINE_GUIDNAMED(KSEVENTSETID_VPVBINotify)


        class KSEVENT_VPVBINOTIFY(ENUM):
            KSEVENT_VPVBINOTIFY_FORMATCHANGE = 1

        KSEVENT_VPVBINOTIFY_FORMATCHANGE = KSEVENT_VPVBINOTIFY.KSEVENT_VPVBINOTIFY_FORMATCHANGE


        # closed caption information
        STATIC_KSDATAFORMAT_TYPE_AUXLine21Data = (
            0x670AEA80,
            0x3A82,
            0x11D0,
            0xB7,
            0x9B,
            0x00,
            0xAA,
            0x00,
            0x37,
            0x67,
            0xA7
        )
        KSDATAFORMAT_TYPE_AUXLine21Data = DEFINE_GUIDSTRUCT(
            "670aea80-3a82-11d0-b79b-00aa003767a7"
        )
        KSDATAFORMAT_TYPE_AUXLine21Data = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_AUXLine21Data)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_Line21_BytePair = (
            0x6E8D4A22,
            0x310C,
            0x11D0,
            0xB7,
            0x9A,
            0x00,
            0xAA,
            0x00,
            0x37,
            0x67,
            0xA7
        )
        KSDATAFORMAT_SUBTYPE_Line21_BytePair = DEFINE_GUIDSTRUCT(
            "6e8d4a22-310c-11d0-b79a-00aa003767a7"
        )
        KSDATAFORMAT_SUBTYPE_Line21_BytePair = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_Line21_BytePair)
        )
        STATIC_KSDATAFORMAT_SUBTYPE_Line21_GOPPacket = (
            0x6E8D4A23,
            0x310C,
            0x11D0,
            0xB7,
            0x9A,
            0x00,
            0xAA,
            0x00,
            0x37,
            0x67,
            0xA7
        )
        KSDATAFORMAT_SUBTYPE_Line21_GOPPacket = DEFINE_GUIDSTRUCT(
            "6e8d4a23-310c-11d0-b79a-00aa003767a7"
        )
        KSDATAFORMAT_SUBTYPE_Line21_GOPPacket = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_Line21_GOPPacket)
        )


        _KSGOP_USERDATA._fields_ = [
            ('sc', ULONG),
            ('reserved1', ULONG),
            ('cFields', BYTE),
            ('l21Data', CHAR * 3),
        ]


        # DVD encrypted PACK format type definition
        STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK = (
            0xED0B916A,
            0x044D,
            0x11D1,
            0xAA,
            0x78,
            0x00,
            0xC0,
            0x4F,
            0xC3,
            0x1D,
            0x60
        )
        KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK = DEFINE_GUIDSTRUCT(
            "ed0b916a-044d-11d1-aa78-00c04fc31d60"
        )
        KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK = (
            DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK)
        )
        KS_AM_UseNewCSSKey = 0x0001

        # -------------------------------------------------------------
        # KS_AM_KSPROPSETID_TSRateChange property set definitions for time
        # stamp
        # rate changes.
        # -------------------------------------------------------------
        STATIC_KSPROPSETID_TSRateChange = (
            0xA503C5C0,
            0x1D1D,
            0x11D1,
            0xAD,
            0x80,
            0x44,
            0x45,
            0x53,
            0x54,
            0x0,
            0x0
        )
        KSPROPSETID_TSRateChange = DEFINE_GUIDSTRUCT(
            "A503C5C0-1D1D-11D1-AD80-444553540000"
        )
        KSPROPSETID_TSRateChange = DEFINE_GUIDNAMED(KSPROPSETID_TSRateChange)


        class KS_AM_PROPERTY_TS_RATE_CHANGE(ENUM):
            KS_AM_RATE_SimpleRateChange = 1
            KS_AM_RATE_ExactRateChange = 2
            KS_AM_RATE_MaxFullDataRate = 3
            KS_AM_RATE_Step = 4

        KS_AM_RATE_SimpleRateChange = KS_AM_PROPERTY_TS_RATE_CHANGE.KS_AM_RATE_SimpleRateChange
        KS_AM_RATE_ExactRateChange = KS_AM_PROPERTY_TS_RATE_CHANGE.KS_AM_RATE_ExactRateChange
        KS_AM_RATE_MaxFullDataRate = KS_AM_PROPERTY_TS_RATE_CHANGE.KS_AM_RATE_MaxFullDataRate
        KS_AM_RATE_Step = KS_AM_PROPERTY_TS_RATE_CHANGE.KS_AM_RATE_Step

        # this is the simplest mechanism to set a time stamp rate change on
        KS_AM_SimpleRateChange._fields_ = [
            # stream time at which to start this rate
            ('StartTime', REFERENCE_TIME),
            # new rate * 10000 (decimal)
            ('Rate', LONG),
        ]

        # input TS that maps to zero output TS
        KS_AM_ExactRateChange._fields_ = [
            ('OutputZeroTime', REFERENCE_TIME),
            # new rate * 10000 (decimal)
            ('Rate', LONG),
        ]

        KS_AM_MaxFullDataRate = LONG # rate * 10000 (decimal)
        KS_AM_Step = DWORD # number of frame to step

        if NTDDI_VERSION >= NTDDI_WINXPSP1:
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            # ENCODER API DEFINITIONS
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            STATIC_KSCATEGORY_ENCODER = (
                0x19689BF6,
                0xC384,
                0x48FD,
                0xAD,
                0x51,
                0x90,
                0xE5,
                0x8C,
                0x79,
                0xF7,
                0xB
            )
            KSCATEGORY_ENCODER = DEFINE_GUIDSTRUCT(
                "19689BF6-C384-48fd-AD51-90E58C79F70B"
            )
            KSCATEGORY_ENCODER = DEFINE_GUIDNAMED(KSCATEGORY_ENCODER)
            STATIC_KSCATEGORY_MULTIPLEXER = (
                0x7A5DE1D3,
                0x1A1,
                0x452C,
                0xB4,
                0x81,
                0x4F,
                0xA2,
                0xB9,
                0x62,
                0x71,
                0xE8
            )
            KSCATEGORY_MULTIPLEXER = DEFINE_GUIDSTRUCT(
                "7A5DE1D3-01A1-452c-B481-4FA2B96271E8"
            )
            KSCATEGORY_MULTIPLEXER = DEFINE_GUIDNAMED(KSCATEGORY_MULTIPLEXER)
            if not defined(__ENCODER_API_GUIDS__):
                __ENCODER_API_GUIDS__ = 1

                STATIC_ENCAPIPARAM_BITRATE = (
                    0x49CC4C43,
                    0xCA83,
                    0x4AD4,
                    0xA9,
                    0xAF,
                    0xF3,
                    0x69,
                    0x6A,
                    0xF6,
                    0x66,
                    0xDF
                )
                ENCAPIPARAM_BITRATE = DEFINE_GUIDSTRUCT(
                    "49CC4C43-CA83-4ad4-A9AF-F3696AF666DF"
                )
                ENCAPIPARAM_BITRATE = DEFINE_GUIDNAMED(ENCAPIPARAM_BITRATE)
                STATIC_ENCAPIPARAM_PEAK_BITRATE = (
                    0x703F16A9,
                    0x3D48,
                    0x44A1,
                    0xB0,
                    0x77,
                    0x1,
                    0x8D,
                    0xFF,
                    0x91,
                    0x5D,
                    0x19
                )
                ENCAPIPARAM_PEAK_BITRATE = DEFINE_GUIDSTRUCT(
                    "703F16A9-3D48-44a1-B077-018DFF915D19"
                )
                ENCAPIPARAM_PEAK_BITRATE = (
                    DEFINE_GUIDNAMED(ENCAPIPARAM_PEAK_BITRATE)
                )
                STATIC_ENCAPIPARAM_BITRATE_MODE = (
                    0xEE5FB25C,
                    0xC713,
                    0x40D1,
                    0x9D,
                    0x58,
                    0xC0,
                    0xD7,
                    0x24,
                    0x1E,
                    0x25,
                    0xF
                )
                ENCAPIPARAM_BITRATE_MODE = DEFINE_GUIDSTRUCT(
                    "EE5FB25C-C713-40d1-9D58-C0D7241E250F"
                )
                ENCAPIPARAM_BITRATE_MODE = (
                    DEFINE_GUIDNAMED(ENCAPIPARAM_BITRATE_MODE)
                )
                if (
                    NTDDI_WS03 > NTDDI_VERSION >= NTDDI_WINXPSP2 or
                    NTDDI_VERSION >= NTDDI_WS03SP1
                ):
                    STATIC_CODECAPI_CHANGELISTS = (
                        0x62B12ACF,
                        0xF6B0,
                        0x47D9,
                        0x94,
                        0x56,
                        0x96,
                        0xF2,
                        0x2C,
                        0x4E,
                        0x0B,
                        0x9D
                    )
                    CODECAPI_CHANGELISTS = DEFINE_GUIDSTRUCT(
                        "62B12ACF-F6B0-47D9-9456-96F22C4E0B9D"
                    )
                    CODECAPI_CHANGELISTS = (
                        DEFINE_GUIDNAMED(CODECAPI_CHANGELISTS )
                    )
                    STATIC_CODECAPI_VIDEO_ENCODER = (
                        0x7112E8E1,
                        0x3D03,
                        0x47EF,
                        0x8E,
                        0x60,
                        0x03,
                        0xF1,
                        0xCF,
                        0x53,
                        0x73,
                        0x01
                    )
                    CODECAPI_VIDEO_ENCODER = DEFINE_GUIDSTRUCT(
                        "7112E8E1-3D03-47EF-8E60-03F1CF537301"
                    )
                    CODECAPI_VIDEO_ENCODER = (
                        DEFINE_GUIDNAMED(CODECAPI_VIDEO_ENCODER )
                    )
                    STATIC_CODECAPI_AUDIO_ENCODER = (
                        0xB9D19A3E,
                        0xF897,
                        0x429C,
                        0xBC,
                        0x46,
                        0x81,
                        0x38,
                        0xB7,
                        0x27,
                        0x2B,
                        0x2D
                    )
                    CODECAPI_AUDIO_ENCODER = DEFINE_GUIDSTRUCT(
                        "B9D19A3E-F897-429C-BC46-8138B7272B2D"
                    )
                    CODECAPI_AUDIO_ENCODER = (
                        DEFINE_GUIDNAMED(CODECAPI_AUDIO_ENCODER )
                    )
                    STATIC_CODECAPI_SETALLDEFAULTS = (
                        0x6C5E6A7C,
                        0xACF8,
                        0x4F55,
                        0xA9,
                        0x99,
                        0x1A,
                        0x62,
                        0x81,
                        0x09,
                        0x05,
                        0x1B
                    )
                    CODECAPI_SETALLDEFAULTS = DEFINE_GUIDSTRUCT(
                        "6C5E6A7C-ACF8-4F55-A999-1A628109051B"
                    )
                    CODECAPI_SETALLDEFAULTS = (
                        DEFINE_GUIDNAMED(CODECAPI_SETALLDEFAULTS )
                    )
                    STATIC_CODECAPI_ALLSETTINGS = (
                        0x6A577E92,
                        0x83E1,
                        0x4113,
                        0xAD,
                        0xC2,
                        0x4F,
                        0xCE,
                        0xC3,
                        0x2F,
                        0x83,
                        0xA1
                    )
                    CODECAPI_ALLSETTINGS = DEFINE_GUIDSTRUCT(
                        "6A577E92-83E1-4113-ADC2-4FCEC32F83A1"
                    )
                    CODECAPI_ALLSETTINGS = (
                        DEFINE_GUIDNAMED(CODECAPI_ALLSETTINGS )
                    )
                    STATIC_CODECAPI_SUPPORTSEVENTS = (
                        0x0581AF97,
                        0x7693,
                        0x4DBD,
                        0x9D,
                        0xCA,
                        0x3F,
                        0x9E,
                        0xBD,
                        0x65,
                        0x85,
                        0xA1
                    )
                    CODECAPI_SUPPORTSEVENTS = DEFINE_GUIDSTRUCT(
                        "0581AF97-7693-4DBD-9DCA-3F9EBD6585A1"
                    )
                    CODECAPI_SUPPORTSEVENTS = (
                        DEFINE_GUIDNAMED(CODECAPI_SUPPORTSEVENTS )
                    )
                    STATIC_CODECAPI_CURRENTCHANGELIST = (
                        0x1CB14E83,
                        0x7D72,
                        0x4657,
                        0x83,
                        0xFD,
                        0x47,
                        0xA2,
                        0xC5,
                        0xB9,
                        0xD1,
                        0x3D
                    )
                    CODECAPI_CURRENTCHANGELIST = DEFINE_GUIDSTRUCT(
                        "1CB14E83-7D72-4657-83FD-47A2C5B9D13D"
                    )
                    CODECAPI_CURRENTCHANGELIST = (
                        DEFINE_GUIDNAMED(CODECAPI_CURRENTCHANGELIST )
                    )
                # END IF   XP SP2 and later (chronologically)
            # END IF   __ENCODER_API_GUIDS__

            if not defined(__ENCODER_API_DEFINES__):
                __ENCODER_API_DEFINES__ = 1

                class VIDEOENCODER_BITRATE_MODE(ENUM):
                    ConstantBitRate = 0
                    VariableBitRateAverage = 1
                    VariableBitRatePeak = 2

                ConstantBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate
                VariableBitRateAverage = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage
                VariableBitRatePeak = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak
            # END IF   __ENCODER_API_DEFINES__

            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            # JACK DESCRIPTION DEFINITIONS
            # == == == == == == == == == == == == == == == == == == == == ==
            # == == == == == == == == == == == == == == == == =
            STATIC_KSPROPSETID_Jack = (
                0x4509F757,
                0x2D46,
                0x4637,
                0x8E,
                0x62,
                0xCE,
                0x7D,
                0xB9,
                0x44,
                0xF5,
                0x7B
            )
            KSPROPSETID_Jack = DEFINE_GUIDSTRUCT(
                "4509F757-2D46-4637-8E62-CE7DB944F57B"
            )
            KSPROPSETID_Jack = DEFINE_GUIDNAMED(KSPROPSETID_Jack)

            # define new property id
            class KSPROPERTY_JACK(ENUM):
                KSPROPERTY_JACK_DESCRIPTION = 1
                KSPROPERTY_JACK_DESCRIPTION2 = 2
                KSPROPERTY_JACK_SINK_INFO = 3
                KSPROPERTY_JACK_CONTAINERID = 4

            KSPROPERTY_JACK_DESCRIPTION = KSPROPERTY_JACK.KSPROPERTY_JACK_DESCRIPTION
            KSPROPERTY_JACK_DESCRIPTION2 = KSPROPERTY_JACK.KSPROPERTY_JACK_DESCRIPTION2
            KSPROPERTY_JACK_SINK_INFO = KSPROPERTY_JACK.KSPROPERTY_JACK_SINK_INFO
            KSPROPERTY_JACK_CONTAINERID = KSPROPERTY_JACK.KSPROPERTY_JACK_CONTAINERID

            # Enums used in KSPROPERTY_JACK_INFO_STRUCT
            class EPcxConnectionType(ENUM):
                eConnTypeUnknown = 1
                eConnType3Point5mm = 2
                eConnTypeQuarter = 3
                eConnTypeAtapiInternal = 4
                eConnTypeRCA = 5
                eConnTypeOptical = 6
                eConnTypeOtherDigital = 7
                eConnTypeOtherAnalog = 8
                eConnTypeMultichannelAnalogDIN = 9
                eConnTypeXlrProfessional = 10
                eConnTypeRJ11Modem = 11
                eConnTypeCombination = 12

            eConnTypeUnknown = EPcxConnectionType.eConnTypeUnknown
            eConnType3Point5mm = EPcxConnectionType.eConnType3Point5mm
            eConnTypeQuarter = EPcxConnectionType.eConnTypeQuarter
            eConnTypeAtapiInternal = EPcxConnectionType.eConnTypeAtapiInternal
            eConnTypeRCA = EPcxConnectionType.eConnTypeRCA
            eConnTypeOptical = EPcxConnectionType.eConnTypeOptical
            eConnTypeOtherDigital = EPcxConnectionType.eConnTypeOtherDigital
            eConnTypeOtherAnalog = EPcxConnectionType.eConnTypeOtherAnalog
            eConnTypeMultichannelAnalogDIN = EPcxConnectionType.eConnTypeMultichannelAnalogDIN
            eConnTypeXlrProfessional = EPcxConnectionType.eConnTypeXlrProfessional
            eConnTypeRJ11Modem = EPcxConnectionType.eConnTypeRJ11Modem
            eConnTypeCombination = EPcxConnectionType.eConnTypeCombination


            class EPcxGeoLocation(ENUM):
                eGeoLocRear = 0x1
                eGeoLocFront = 2
                eGeoLocLeft = 3
                eGeoLocRight = 4
                eGeoLocTop = 5
                eGeoLocBottom = 6
                eGeoLocRearPanel = 7
                eGeoLocRiser = 8
                eGeoLocInsideMobileLid = 9
                eGeoLocDrivebay = 10
                eGeoLocHDMI = 11
                eGeoLocOutsideMobileLid = 12
                eGeoLocATAPI = 13
                eGeoLocNotApplicable = 14
                eGeoLocReserved6 = 15
                EPcxGeoLocation_enum_count = 16

            eGeoLocRear = EPcxGeoLocation.eGeoLocRear
            eGeoLocFront = EPcxGeoLocation.eGeoLocFront
            eGeoLocLeft = EPcxGeoLocation.eGeoLocLeft
            eGeoLocRight = EPcxGeoLocation.eGeoLocRight
            eGeoLocTop = EPcxGeoLocation.eGeoLocTop
            eGeoLocBottom = EPcxGeoLocation.eGeoLocBottom
            eGeoLocRearPanel = EPcxGeoLocation.eGeoLocRearPanel
            eGeoLocRiser = EPcxGeoLocation.eGeoLocRiser
            eGeoLocInsideMobileLid = EPcxGeoLocation.eGeoLocInsideMobileLid
            eGeoLocDrivebay = EPcxGeoLocation.eGeoLocDrivebay
            eGeoLocHDMI = EPcxGeoLocation.eGeoLocHDMI
            eGeoLocOutsideMobileLid = EPcxGeoLocation.eGeoLocOutsideMobileLid
            eGeoLocATAPI = EPcxGeoLocation.eGeoLocATAPI
            eGeoLocNotApplicable = EPcxGeoLocation.eGeoLocNotApplicable
            eGeoLocReserved6 = EPcxGeoLocation.eGeoLocReserved6
            EPcxGeoLocation_enum_count = EPcxGeoLocation.EPcxGeoLocation_enum_count
            eGeoLocReserved5 = EPcxGeoLocation.eGeoLocNotApplicable

            class EPcxGenLocation(ENUM):
                eGenLocPrimaryBox = 0
                eGenLocInternal = 1
                eGenLocSeparate = 2
                eGenLocOther = 3
                EPcxGenLocation_enum_count = 4

            eGenLocPrimaryBox = EPcxGenLocation.eGenLocPrimaryBox
            eGenLocInternal = EPcxGenLocation.eGenLocInternal
            eGenLocSeparate = EPcxGenLocation.eGenLocSeparate
            eGenLocOther = EPcxGenLocation.eGenLocOther
            EPcxGenLocation_enum_count = EPcxGenLocation.EPcxGenLocation_enum_count


            class EPxcPortConnection(ENUM):
                ePortConnJack = 0
                ePortConnIntegratedDevice = 1
                ePortConnBothIntegratedAndJack = 2
                ePortConnUnknown = 3

            ePortConnJack = EPxcPortConnection.ePortConnJack
            ePortConnIntegratedDevice = EPxcPortConnection.ePortConnIntegratedDevice
            ePortConnBothIntegratedAndJack = EPxcPortConnection.ePortConnBothIntegratedAndJack
            ePortConnUnknown = EPxcPortConnection.ePortConnUnknown

            # structure for KSPROPERTY_JACK_DESCRIPTION pin property
            KSJACK_DESCRIPTION._fields_ = [
                ('ChannelMapping', DWORD),
                # 0x00rrggbb; (NOT a COLORREF)
                ('Color', DWORD),
                ('ConnectionType', EPcxConnectionType),
                ('GeoLocation', EPcxGeoLocation),
                ('GenLocation', EPcxGenLocation),
                ('PortConnection', EPxcPortConnection),
                ('IsConnected', BOOL),
            ]


            class KSJACK_SINK_CONNECTIONTYPE(ENUM):
                KSJACK_SINK_CONNECTIONTYPE_HDMI = 0
                KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 1

            KSJACK_SINK_CONNECTIONTYPE_HDMI = KSJACK_SINK_CONNECTIONTYPE.KSJACK_SINK_CONNECTIONTYPE_HDMI
            KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = KSJACK_SINK_CONNECTIONTYPE.KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT
            MAX_SINK_DESCRIPTION_NAME_LENGTH = 32


            _tagKSJACK_SINK_INFORMATION._fields_ = [
                # Connection Type
                ('ConnType', KSJACK_SINK_CONNECTIONTYPE),
                # Sink manufacturer ID
                ('ManufacturerId', WORD),
                # Sink product ID
                ('ProductId', WORD),
                # Sink audio latency
                ('AudioLatency', WORD),
                # HDCP Support
                ('HDCPCapable', BOOL),
                # ACP Packet, ISRC1, and ISRC2 Support
                ('AICapable', BOOL),
                # Monitor/Sink name length
                ('SinkDescriptionLength', UCHAR),
                # Monitor/Sink name
                ('SinkDescription', WCHAR * MAX_SINK_DESCRIPTION_NAME_LENGTH),
                # Video port identifier
                ('PortId', LUID),
            ]
            JACKDESC2_PRESENCE_DETECT_CAPABILITY = 0x00000001
            JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = 0x00000002


            _tagKSJACK_DESCRIPTION2._fields_ = [
                # Top 16 bits: Report current device state, active, streaming,
                # idle, or hardware not ready
                ('DeviceStateInfo', DWORD),
                # Report jack capabilities such as jack presence detection
                # capability
                ('JackCapabilities', DWORD),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WINXPSP1)

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # Audio Buffer Duration
        STATIC_KSPROPSETID_AudioBufferDuration = (
            0x4E73C07F,
            0x23CC,
            0x4955,
            0xA7,
            0xEA,
            0x3D,
            0xA5,
            0x2,
            0x49,
            0x62,
            0x90
        )
        KSPROPSETID_AudioBufferDuration = DEFINE_GUIDSTRUCT(
            "4E73C07F-23CC-4955-A7EA-3DA502496290"
        )
        KSPROPSETID_AudioBufferDuration = (
            DEFINE_GUIDNAMED(KSPROPSETID_AudioBufferDuration)
        )

        # define new property id
        KSPROPERTY_AUDIO_BUFFER_DURATION = 1

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # HARDWARE AUDIO ENGINE DEFINITIONS
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSPROPSETID_AudioEngine = (
            0x3A2F82DC,
            0x886F,
            0x4BAA,
            0x9E,
            0xB4,
            0x8,
            0x2B,
            0x90,
            0x25,
            0xC5,
            0x36
        )
        KSPROPSETID_AudioEngine = DEFINE_GUIDSTRUCT(
            "3A2F82DC-886F-4BAA-9EB4-082B9025C536"
        )
        KSPROPSETID_AudioEngine = DEFINE_GUIDNAMED(KSPROPSETID_AudioEngine)


        class KSPROPERTY_AUDIOENGINE(ENUM):
            KSPROPERTY_AUDIOENGINE_LFXENABLE = 0
            KSPROPERTY_AUDIOENGINE_GFXENABLE = 1
            KSPROPERTY_AUDIOENGINE_MIXFORMAT = 2
            KSPROPERTY_AUDIOENGINE_DEVICEFORMAT = 4
            KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = 5
            KSPROPERTY_AUDIOENGINE_DESCRIPTOR = 6
            KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE = 7
            KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION = 8
            KSPROPERTY_AUDIOENGINE_VOLUMELEVEL = 9

        KSPROPERTY_AUDIOENGINE_LFXENABLE = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_LFXENABLE
        KSPROPERTY_AUDIOENGINE_GFXENABLE = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_GFXENABLE
        KSPROPERTY_AUDIOENGINE_MIXFORMAT = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_MIXFORMAT
        KSPROPERTY_AUDIOENGINE_DEVICEFORMAT = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_DEVICEFORMAT
        KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS
        KSPROPERTY_AUDIOENGINE_DESCRIPTOR = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_DESCRIPTOR
        KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE
        KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION
        KSPROPERTY_AUDIOENGINE_VOLUMELEVEL = KSPROPERTY_AUDIOENGINE.KSPROPERTY_AUDIOENGINE_VOLUMELEVEL

        _tagKSAUDIOENGINE_DESCRIPTOR._fields_ = [
            ('nHostPinId', UINT),
            ('nOffloadPinId', UINT),
            ('nLoopbackPinId', UINT),
        ]

        _tagKSAUDIOENGINE_BUFFER_SIZE_RANGE._fields_ = [
            ('MinBufferBytes', ULONG),
            ('MaxBufferBytes', ULONG),
        ]
        if not defined(_AUDIO_CURVE_TYPE_):
            _AUDIO_CURVE_TYPE_ = 1

            class AUDIO_CURVE_TYPE(ENUM):
                AUDIO_CURVE_TYPE_NONE = 0
                AUDIO_CURVE_TYPE_WINDOWS_FADE = 1

            AUDIO_CURVE_TYPE_NONE = AUDIO_CURVE_TYPE.AUDIO_CURVE_TYPE_NONE
            AUDIO_CURVE_TYPE_WINDOWS_FADE = AUDIO_CURVE_TYPE.AUDIO_CURVE_TYPE_WINDOWS_FADE
        # END IF


        _tagKSAUDIOENGINE_VOLUMELEVEL._fields_ = [
            ('TargetVolume', LONG),
            ('CurveType', AUDIO_CURVE_TYPE),
            ('CurveDuration', ULONGLONG),
        ]

        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        # AUDIO SIGNAL PROCESSING DEFINITIONS
        # == == == == == == == == == == == == == == == == == == == == == == ==
        # == == == == == == == == == == == == == == =
        STATIC_KSPROPSETID_AudioSignalProcessing = (
            0x4F67B528,
            0x30C9,
            0x40DE,
            0xB2,
            0xFB,
            0x85,
            0x9D,
            0xDD,
            0x1F,
            0x34,
            0x70
        )
        KSPROPSETID_AudioSignalProcessing = DEFINE_GUIDSTRUCT(
            "4F67B528-30C9-40DE-B2FB-859DDD1F3470"
        )
        KSPROPSETID_AudioSignalProcessing = (
            DEFINE_GUIDNAMED(KSPROPSETID_AudioSignalProcessing)
        )


        class KSPROPERTY_AUDIOSIGNALPROCESSING(ENUM):
            KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = 1

        KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = KSPROPERTY_AUDIOSIGNALPROCESSING.KSPROPERTY_AUDIOSIGNALPROCESSING_MODES
        STATIC_KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE = (
            0xE1F89EB5,
            0x5F46,
            0x419B,
            0x96,
            0x7B,
            0xFF,
            0x67,
            0x70,
            0xB9,
            0x84,
            0x1
        )
        KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE = DEFINE_GUIDSTRUCT(
            "E1F89EB5-5F46-419B-967B-FF6770B98401"
        )
        KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE = (
            DEFINE_GUIDNAMED(KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE)
        )

        # Define structure of the KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE
        # attribute
        tagKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE._fields_ = [
            ('AttributeHeader', KSATTRIBUTE),
            ('SignalProcessingMode', GUID),
        ]
        STATIC_AUDIO_SIGNALPROCESSINGMODE_DEFAULT = (
            0xC18E2F7E,
            0x933D,
            0x4965,
            0xB7,
            0xD1,
            0x1E,
            0xEF,
            0x22,
            0x8D,
            0x2A,
            0xF3
        )
        AUDIO_SIGNALPROCESSINGMODE_DEFAULT = DEFINE_GUIDSTRUCT(
            "C18E2F7E-933D-4965-B7D1-1EEF228D2AF3"
        )
        AUDIO_SIGNALPROCESSINGMODE_DEFAULT = (
            DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_DEFAULT)
        )
        STATIC_AUDIO_SIGNALPROCESSINGMODE_RAW = (
            0x9E90EA20,
            0xB493,
            0x4FD1,
            0xA1,
            0xA8,
            0x7E,
            0x13,
            0x61,
            0xA9,
            0x56,
            0xCF
        )
        AUDIO_SIGNALPROCESSINGMODE_RAW = DEFINE_GUIDSTRUCT(
            "9E90EA20-B493-4FD1-A1A8-7E1361A956CF"
        )
        AUDIO_SIGNALPROCESSINGMODE_RAW = (
            DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_RAW)
        )


        # UUIDs defined for Bluetooth Midi
        if NTDDI_VERSION >= NTDDI_WIN10_RS1:
            # Bluetooth MIDI service UUID
            STATIC_BLUETOOTHLE_MIDI_SERVICE_UUID = (
                0x03B80E5A,
                0xEDE8,
                0x4B33,
                0xA7,
                0x51,
                0x6C,
                0xE3,
                0x4E,
                0xC4,
                0xC7,
                0x00
            )
            BLUETOOTHLE_MIDI_SERVICE_UUID = DEFINE_GUIDSTRUCT(
                "03B80E5A-EDE8-4B33-A751-6CE34EC4C700"
            )
            BLUETOOTHLE_MIDI_SERVICE_UUID = (
                DEFINE_GUIDNAMED(BLUETOOTHLE_MIDI_SERVICE_UUID)
            )

            # Bluetooth MIDI IO Characteristic UUID
            STATIC_BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC = (
                0x7772E5DB,
                0x3868,
                0x4112,
                0xA1,
                0xA9,
                0xF2,
                0x66,
                0x9D,
                0x10,
                0x6B,
                0xF3
            )
            BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC = DEFINE_GUIDSTRUCT(
                "7772E5DB-3868-4112-A1A9-F2669D106BF3"
            )
            BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC = (
                DEFINE_GUIDNAMED(BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC)
            )


            # UUID for Audio Processing Object (APO) device class
            STATIC_APO_CLASS_UUID = (
                0x5989FCE8,
                0x9CD0,
                0x467D,
                0x8A,
                0x6A,
                0x54,
                0x19,
                0xE3,
                0x15,
                0x29,
                0xD4
            )
            APO_CLASS_UUID = DEFINE_GUIDSTRUCT(
                "5989fce8-9cd0-467d-8a6a-5419e31529d4"
            )
            APO_CLASS_UUID = DEFINE_GUIDNAMED(APO_CLASS_UUID)


            # UUID for audio endpoint device class
            STATIC_AUDIOENDPOINT_CLASS_UUID = (
                0xC166523C,
                0xFE0C,
                0x4A94,
                0xA5,
                0x86,
                0xF1,
                0xA8,
                0x0C,
                0xFB,
                0xBF,
                0x3E
            )
            AUDIOENDPOINT_CLASS_UUID = DEFINE_GUIDSTRUCT(
                "C166523C-FE0C-4A94-A586-F1A80CFBBF3E"
            )
            AUDIOENDPOINT_CLASS_UUID = (
                DEFINE_GUIDNAMED(AUDIOENDPOINT_CLASS_UUID)
            )
        # END IF   (NTDDI_VERSION >= NTDDI_WIN10_RS1)

        if NTDDI_VERSION >= NTDDI_WINTHRESHOLD:
            # Communications mode specifies that the application expects VoIP
            # specific signal processing at the lowest latency and the
            # hardware preferred sample rate for wideband speech
            # (such as 16 kHz).
            # For both Capture and Render.
            STATIC_AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS = (
                0x98951333,
                0xB9CD,
                0x48B1,
                0xA0,
                0xA3,
                0xFF,
                0x40,
                0x68,
                0x2D,
                0x73,
                0xF7
            )
            AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS = DEFINE_GUIDSTRUCT(
                "98951333-B9CD-48B1-A0A3-FF40682D73F7"
            )
            AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS = (
                DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS)
            )

            # Speech mode specifies that the application expects speech
            # recognition specific signal processing at the lowest latency and
            # the hardware preferred sample rate for wideband speech
            # (such as 16 kHz).
            # For Capture only.
            STATIC_AUDIO_SIGNALPROCESSINGMODE_SPEECH = (
                0xFC1CFC9B,
                0xB9D6,
                0x4CFA,
                0xB5,
                0xE0,
                0x4B,
                0xB2,
                0x16,
                0x68,
                0x78,
                0xB2
            )
            AUDIO_SIGNALPROCESSINGMODE_SPEECH = DEFINE_GUIDSTRUCT(
                "FC1CFC9B-B9D6-4CFA-B5E0-4BB2166878B2"
            )
            AUDIO_SIGNALPROCESSINGMODE_SPEECH = (
                DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_SPEECH)
            )

            # Notification Mode
            # For both render and capture.
            STATIC_AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION = (
                0x9CF2A70B,
                0xF377,
                0x403B,
                0xBD,
                0x6B,
                0x36,
                0x8,
                0x63,
                0xE0,
                0x35,
                0x5C
            )
            AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION = DEFINE_GUIDSTRUCT(
                "9CF2A70B-F377-403B-BD6B-360863E0355C"
            )
            AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION = (
                DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION)
            )

            # Media Mode specifies that the application expects post
            # processing suitable for media content if available or else the
            # same treatments as Default mode.
            # For Render only.
            STATIC_AUDIO_SIGNALPROCESSINGMODE_MEDIA = (
                0x4780004E,
                0x7133,
                0x41D8,
                0x8C,
                0x74,
                0x66,
                0x0D,
                0xAD,
                0xD2,
                0xC0,
                0xEE
            )
            AUDIO_SIGNALPROCESSINGMODE_MEDIA = DEFINE_GUIDSTRUCT(
                "4780004E-7133-41D8-8C74-660DADD2C0EE"
            )
            AUDIO_SIGNALPROCESSINGMODE_MEDIA = (
                DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_MEDIA)
            )

            # Movie Mode specifies that the application expects post
            # processing suitable for movie or video content if available or
            # else the same treatments as Default mode.
            STATIC_AUDIO_SIGNALPROCESSINGMODE_MOVIE = (
                0xB26FEB0D,
                0xEC94,
                0x477C,
                0x94,
                0x94,
                0xD1,
                0xAB,
                0x8E,
                0x75,
                0x3F,
                0x6E
            )
            AUDIO_SIGNALPROCESSINGMODE_MOVIE = DEFINE_GUIDSTRUCT(
                "B26FEB0D-EC94-477C-9494-D1AB8E753F6E"
            )
            AUDIO_SIGNALPROCESSINGMODE_MOVIE = (
                DEFINE_GUIDNAMED(AUDIO_SIGNALPROCESSINGMODE_MOVIE)
            )
        # END IF


        STATIC_AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION = (
            0x6F64ADBE,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION = DEFINE_GUIDSTRUCT(
            "6f64adbe-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION)
        )
        STATIC_AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION = (
            0x6F64ADBF,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION = DEFINE_GUIDSTRUCT(
            "6f64adbf-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION)
        )
        STATIC_AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL = (
            0x6F64ADC0,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL = DEFINE_GUIDSTRUCT(
            "6f64adc0-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL)
        )
        STATIC_AUDIO_EFFECT_TYPE_BEAMFORMING = (
            0x6F64ADC1,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_BEAMFORMING = DEFINE_GUIDSTRUCT(
            "6f64adc1-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_BEAMFORMING = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_BEAMFORMING)
        )
        STATIC_AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL = (
            0x6F64ADC2,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL = DEFINE_GUIDSTRUCT(
            "6f64adc2-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL)
        )
        STATIC_AUDIO_EFFECT_TYPE_EQUALIZER = (
            0x6F64ADC3,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_EQUALIZER = DEFINE_GUIDSTRUCT(
            "6f64adc3-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_EQUALIZER = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_EQUALIZER)
        )
        STATIC_AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER = (
            0x6F64ADC4,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER = DEFINE_GUIDSTRUCT(
            "6f64adc4-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER)
        )
        STATIC_AUDIO_EFFECT_TYPE_BASS_BOOST = (
            0x6F64ADC5,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_BASS_BOOST = DEFINE_GUIDSTRUCT(
            "6f64adc5-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_BASS_BOOST = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_BASS_BOOST)
        )
        STATIC_AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND = (
            0x6F64ADC6,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND = DEFINE_GUIDSTRUCT(
            "6f64adc6-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND)
        )
        STATIC_AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES = (
            0x6F64ADC7,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES = DEFINE_GUIDSTRUCT(
            "6f64adc7-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES)
        )
        STATIC_AUDIO_EFFECT_TYPE_SPEAKER_FILL = (
            0x6F64ADC8,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_SPEAKER_FILL = DEFINE_GUIDSTRUCT(
            "6f64adc8-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_SPEAKER_FILL = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_SPEAKER_FILL)
        )
        STATIC_AUDIO_EFFECT_TYPE_ROOM_CORRECTION = (
            0x6F64ADC9,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_ROOM_CORRECTION = DEFINE_GUIDSTRUCT(
            "6f64adc9-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_ROOM_CORRECTION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_ROOM_CORRECTION)
        )
        STATIC_AUDIO_EFFECT_TYPE_BASS_MANAGEMENT = (
            0x6F64ADCA,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_BASS_MANAGEMENT = DEFINE_GUIDSTRUCT(
            "6f64adca-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_BASS_MANAGEMENT = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_BASS_MANAGEMENT)
        )
        STATIC_AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS = (
            0x6F64ADCB,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS = DEFINE_GUIDSTRUCT(
            "6f64adcb-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS)
        )
        STATIC_AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION = (
            0x6F64ADCC,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION = DEFINE_GUIDSTRUCT(
            "6f64adcc-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION)
        )
        STATIC_AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION = (
            0x6F64ADCD,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION = DEFINE_GUIDSTRUCT(
            "6f64adcd-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION)
        )
        STATIC_AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION = (
            0x6F64ADCE,
            0x8211,
            0x11E2,
            0x8C,
            0x70,
            0x2C,
            0x27,
            0xD7,
            0xF0,
            0x01,
            0xFA
        )
        AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION = DEFINE_GUIDSTRUCT(
            "6f64adce-8211-11e2-8c70-2c27d7f001fa"
        )
        AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION = (
            DEFINE_GUIDNAMED(AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION)
        )

        if NTDDI_VERSION >= NTDDI_WIN10_RS2:
            # Interface to get audio modules information.
            STATIC_KSPROPSETID_AudioModule = (
                0xC034FDB0,
                0xFF75,
                0x47C8,
                0xAA,
                0x3C,
                0xEE,
                0x46,
                0x71,
                0x6B,
                0x50,
                0xC6
            )
            KSPROPSETID_AudioModule = DEFINE_GUIDSTRUCT(
                "C034FDB0-FF75-47C8-AA3C-EE46716B50C6"
            )
            KSPROPSETID_AudioModule = DEFINE_GUIDNAMED(KSPROPSETID_AudioModule)


            class KSPROPERTY_AUDIOMODULE(ENUM):
                KSPROPERTY_AUDIOMODULE_DESCRIPTORS = 1
                KSPROPERTY_AUDIOMODULE_COMMAND = 2
                KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = 3

            KSPROPERTY_AUDIOMODULE_DESCRIPTORS = KSPROPERTY_AUDIOMODULE.KSPROPERTY_AUDIOMODULE_DESCRIPTORS
            KSPROPERTY_AUDIOMODULE_COMMAND = KSPROPERTY_AUDIOMODULE.KSPROPERTY_AUDIOMODULE_COMMAND
            KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = KSPROPERTY_AUDIOMODULE.KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID
            AUDIOMODULE_MAX_DATA_SIZE = 64000
            AUDIOMODULE_MAX_NAME_CCH_SIZE = 128


            _KSAUDIOMODULE_DESCRIPTOR._fields_ = [
                ('ClassId', GUID),
                ('InstanceId', ULONG),
                ('VersionMajor', ULONG),
                ('VersionMinor', ULONG),
                ('Name', WCHAR * AUDIOMODULE_MAX_NAME_CCH_SIZE),
            ]

            _KSAUDIOMODULE_PROPERTY._fields_ = [
                ('Property', KSPROPERTY),
                ('ClassId', GUID),
                ('InstanceId', ULONG),
            ]


            # Audio module notification definitions.
            STATIC_KSNOTIFICATIONID_AudioModule = (
                0x9C2220F0,
                0xD9A6,
                0x4D5C,
                0xA0,
                0x36,
                0x57,
                0x38,
                0x57,
                0xFD,
                0x50,
                0xD2
            )
            KSNOTIFICATIONID_AudioModule = DEFINE_GUIDSTRUCT(
                "9C2220F0-D9A6-4D5C-A036-573857FD50D2"
            )
            KSNOTIFICATIONID_AudioModule = (
                DEFINE_GUIDNAMED(KSNOTIFICATIONID_AudioModule)
            )


            class _Union_10(ctypes.Union):
                pass


            class ProviderId(ctypes.Structure):
                pass


            ProviderId._fields_ = [
                ('DeviceId', GUID),
                ('ClassId', GUID),
                ('InstanceId', ULONG),
                ('Reserved', ULONG),
            ]
            _Union_10.ProviderId = ProviderId


            _Union_10._fields_ = [
                ('ProviderId', _Union_10.ProviderId),
                ('Alignment', LONGLONG),
            ]
            _KSAUDIOMODULE_NOTIFICATION._Union_10 = _Union_10

            _KSAUDIOMODULE_NOTIFICATION._anonymous_ = (
                '_Union_10',
            )

            _KSAUDIOMODULE_NOTIFICATION._fields_ = [
                ('_Union_10', _KSAUDIOMODULE_NOTIFICATION._Union_10),
            ]
        # END IF   (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
# END IF   not defined(_KSMEDIA_)


