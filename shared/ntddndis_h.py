import ctypes
from pyWinAPI import *
from pyWinAPI.shared.wtypes_h import *
from pyWinAPI.shared.winapifamily_h import *
from pyWinAPI.shared.sdkddkver_h import *
from pyWinAPI.shared.guiddef_h import *


_NTDDNDIS_ = None
NDIS_SUPPORT_NDIS681 = None
UM_NDIS681 = None
NDIS_SUPPORT_NDIS680 = None
UM_NDIS680 = None
NDIS_SUPPORT_NDIS670 = None
UM_NDIS670 = None
NDIS_SUPPORT_NDIS660 = None
UM_NDIS660 = None
NDIS_SUPPORT_NDIS651 = None
UM_NDIS651 = None
NDIS_SUPPORT_NDIS650 = None
UM_NDIS650 = None
NDIS_SUPPORT_NDIS640 = None
UM_NDIS640 = None
NDIS_SUPPORT_NDIS630 = None
UM_NDIS630 = None
NDIS_SUPPORT_NDIS620 = None
UM_NDIS620 = None
NDIS_SUPPORT_NDIS61 = None
UM_NDIS61 = None
NDIS_SUPPORT_NDIS6 = None
UM_NDIS60 = None
GUID_DEFINED = None
IP_EXPORT_INCLUDED = None
_NDIS_ = None
__WINDOT11_H__ = None
_NDIS_SWITCH_PORT_ID = None

class _NDIS_STATISTICS_VALUE(ctypes.Structure):
    pass


NDIS_STATISTICS_VALUE = _NDIS_STATISTICS_VALUE


class _NDIS_VAR_DATA_DESC(ctypes.Structure):
    pass


NDIS_VAR_DATA_DESC = _NDIS_VAR_DATA_DESC
PNDIS_VAR_DATA_DESC = POINTER(_NDIS_VAR_DATA_DESC)


class _NDIS_OBJECT_HEADER(ctypes.Structure):
    pass


NDIS_OBJECT_HEADER = _NDIS_OBJECT_HEADER
PNDIS_OBJECT_HEADER = POINTER(_NDIS_OBJECT_HEADER)


class _NDIS_STATISTICS_INFO(ctypes.Structure):
    pass


NDIS_STATISTICS_INFO = _NDIS_STATISTICS_INFO
PNDIS_STATISTICS_INFO = POINTER(_NDIS_STATISTICS_INFO)


class _NDIS_RSC_STATISTICS_INFO(ctypes.Structure):
    pass


NDIS_RSC_STATISTICS_INFO = _NDIS_RSC_STATISTICS_INFO
PNDIS_RSC_STATISTICS_INFO = POINTER(_NDIS_RSC_STATISTICS_INFO)


class _NDIS_INTERRUPT_MODERATION_PARAMETERS(ctypes.Structure):
    pass


NDIS_INTERRUPT_MODERATION_PARAMETERS = _NDIS_INTERRUPT_MODERATION_PARAMETERS
PNDIS_INTERRUPT_MODERATION_PARAMETERS = POINTER(_NDIS_INTERRUPT_MODERATION_PARAMETERS)


class _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES(ctypes.Structure):
    pass


NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES
PNDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = POINTER(_NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES)


class _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES(ctypes.Structure):
    pass


NDIS_PCI_DEVICE_CUSTOM_PROPERTIES = _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
PNDIS_PCI_DEVICE_CUSTOM_PROPERTIES = POINTER(_NDIS_PCI_DEVICE_CUSTOM_PROPERTIES)


class _NDIS_802_11_STATUS_INDICATION(ctypes.Structure):
    pass


NDIS_802_11_STATUS_INDICATION = _NDIS_802_11_STATUS_INDICATION
PNDIS_802_11_STATUS_INDICATION = POINTER(_NDIS_802_11_STATUS_INDICATION)


class _NDIS_802_11_AUTHENTICATION_REQUEST(ctypes.Structure):
    pass


NDIS_802_11_AUTHENTICATION_REQUEST = _NDIS_802_11_AUTHENTICATION_REQUEST
PNDIS_802_11_AUTHENTICATION_REQUEST = POINTER(_NDIS_802_11_AUTHENTICATION_REQUEST)


class _PMKID_CANDIDATE(ctypes.Structure):
    pass


PMKID_CANDIDATE = _PMKID_CANDIDATE
PPMKID_CANDIDATE = POINTER(_PMKID_CANDIDATE)


class _NDIS_802_11_PMKID_CANDIDATE_LIST(ctypes.Structure):
    pass


NDIS_802_11_PMKID_CANDIDATE_LIST = _NDIS_802_11_PMKID_CANDIDATE_LIST
PNDIS_802_11_PMKID_CANDIDATE_LIST = POINTER(_NDIS_802_11_PMKID_CANDIDATE_LIST)


class _NDIS_802_11_NETWORK_TYPE_LIST(ctypes.Structure):
    pass


NDIS_802_11_NETWORK_TYPE_LIST = _NDIS_802_11_NETWORK_TYPE_LIST
PNDIS_802_11_NETWORK_TYPE_LIST = POINTER(_NDIS_802_11_NETWORK_TYPE_LIST)


class _NDIS_802_11_CONFIGURATION_FH(ctypes.Structure):
    pass


NDIS_802_11_CONFIGURATION_FH = _NDIS_802_11_CONFIGURATION_FH
PNDIS_802_11_CONFIGURATION_FH = POINTER(_NDIS_802_11_CONFIGURATION_FH)


class _NDIS_802_11_CONFIGURATION(ctypes.Structure):
    pass


NDIS_802_11_CONFIGURATION = _NDIS_802_11_CONFIGURATION
PNDIS_802_11_CONFIGURATION = POINTER(_NDIS_802_11_CONFIGURATION)


class _NDIS_802_11_STATISTICS(ctypes.Structure):
    pass


NDIS_802_11_STATISTICS = _NDIS_802_11_STATISTICS
PNDIS_802_11_STATISTICS = POINTER(_NDIS_802_11_STATISTICS)


class _NDIS_802_11_KEY(ctypes.Structure):
    pass


NDIS_802_11_KEY = _NDIS_802_11_KEY
PNDIS_802_11_KEY = POINTER(_NDIS_802_11_KEY)


class _NDIS_802_11_REMOVE_KEY(ctypes.Structure):
    pass


NDIS_802_11_REMOVE_KEY = _NDIS_802_11_REMOVE_KEY
PNDIS_802_11_REMOVE_KEY = POINTER(_NDIS_802_11_REMOVE_KEY)


class _NDIS_802_11_WEP(ctypes.Structure):
    pass


NDIS_802_11_WEP = _NDIS_802_11_WEP
PNDIS_802_11_WEP = POINTER(_NDIS_802_11_WEP)


class _NDIS_802_11_SSID(ctypes.Structure):
    pass


NDIS_802_11_SSID = _NDIS_802_11_SSID
PNDIS_802_11_SSID = POINTER(_NDIS_802_11_SSID)


class _NDIS_WLAN_BSSID(ctypes.Structure):
    pass


NDIS_WLAN_BSSID = _NDIS_WLAN_BSSID
PNDIS_WLAN_BSSID = POINTER(_NDIS_WLAN_BSSID)


class _NDIS_802_11_BSSID_LIST(ctypes.Structure):
    pass


NDIS_802_11_BSSID_LIST = _NDIS_802_11_BSSID_LIST
PNDIS_802_11_BSSID_LIST = POINTER(_NDIS_802_11_BSSID_LIST)


class _NDIS_WLAN_BSSID_EX(ctypes.Structure):
    pass


NDIS_WLAN_BSSID_EX = _NDIS_WLAN_BSSID_EX
PNDIS_WLAN_BSSID_EX = POINTER(_NDIS_WLAN_BSSID_EX)


class _NDIS_802_11_BSSID_LIST_EX(ctypes.Structure):
    pass


NDIS_802_11_BSSID_LIST_EX = _NDIS_802_11_BSSID_LIST_EX
PNDIS_802_11_BSSID_LIST_EX = POINTER(_NDIS_802_11_BSSID_LIST_EX)


class _NDIS_802_11_FIXED_IEs(ctypes.Structure):
    pass


NDIS_802_11_FIXED_IEs = _NDIS_802_11_FIXED_IEs
PNDIS_802_11_FIXED_IEs = POINTER(_NDIS_802_11_FIXED_IEs)


class _NDIS_802_11_VARIABLE_IEs(ctypes.Structure):
    pass


NDIS_802_11_VARIABLE_IEs = _NDIS_802_11_VARIABLE_IEs
PNDIS_802_11_VARIABLE_IEs = POINTER(_NDIS_802_11_VARIABLE_IEs)


class _NDIS_802_11_AI_REQFI(ctypes.Structure):
    pass


NDIS_802_11_AI_REQFI = _NDIS_802_11_AI_REQFI
PNDIS_802_11_AI_REQFI = POINTER(_NDIS_802_11_AI_REQFI)


class _NDIS_802_11_AI_RESFI(ctypes.Structure):
    pass


NDIS_802_11_AI_RESFI = _NDIS_802_11_AI_RESFI
PNDIS_802_11_AI_RESFI = POINTER(_NDIS_802_11_AI_RESFI)


class _NDIS_802_11_ASSOCIATION_INFORMATION(ctypes.Structure):
    pass


NDIS_802_11_ASSOCIATION_INFORMATION = _NDIS_802_11_ASSOCIATION_INFORMATION
PNDIS_802_11_ASSOCIATION_INFORMATION = POINTER(_NDIS_802_11_ASSOCIATION_INFORMATION)


class _NDIS_802_11_AUTHENTICATION_EVENT(ctypes.Structure):
    pass


NDIS_802_11_AUTHENTICATION_EVENT = _NDIS_802_11_AUTHENTICATION_EVENT
PNDIS_802_11_AUTHENTICATION_EVENT = POINTER(_NDIS_802_11_AUTHENTICATION_EVENT)


class _NDIS_802_11_TEST(ctypes.Structure):
    pass


NDIS_802_11_TEST = _NDIS_802_11_TEST
PNDIS_802_11_TEST = POINTER(_NDIS_802_11_TEST)


class _BSSID_INFO(ctypes.Structure):
    pass


BSSID_INFO = _BSSID_INFO
PBSSID_INFO = POINTER(_BSSID_INFO)


class _NDIS_802_11_PMKID(ctypes.Structure):
    pass


NDIS_802_11_PMKID = _NDIS_802_11_PMKID
PNDIS_802_11_PMKID = POINTER(_NDIS_802_11_PMKID)


class _NDIS_802_11_AUTHENTICATION_ENCRYPTION(ctypes.Structure):
    pass


NDIS_802_11_AUTHENTICATION_ENCRYPTION = _NDIS_802_11_AUTHENTICATION_ENCRYPTION
PNDIS_802_11_AUTHENTICATION_ENCRYPTION = POINTER(_NDIS_802_11_AUTHENTICATION_ENCRYPTION)


class _NDIS_802_11_CAPABILITY(ctypes.Structure):
    pass


NDIS_802_11_CAPABILITY = _NDIS_802_11_CAPABILITY
PNDIS_802_11_CAPABILITY = POINTER(_NDIS_802_11_CAPABILITY)


class _NDIS_802_11_NON_BCAST_SSID_LIST(ctypes.Structure):
    pass


NDIS_802_11_NON_BCAST_SSID_LIST = _NDIS_802_11_NON_BCAST_SSID_LIST
PNDIS_802_11_NON_BCAST_SSID_LIST = POINTER(_NDIS_802_11_NON_BCAST_SSID_LIST)


class NDIS_CO_DEVICE_PROFILE(ctypes.Structure):
    pass


PNDIS_CO_DEVICE_PROFILE = POINTER(NDIS_CO_DEVICE_PROFILE)


class _OFFLOAD_ALGO_INFO(ctypes.Structure):
    pass


OFFLOAD_ALGO_INFO = _OFFLOAD_ALGO_INFO
POFFLOAD_ALGO_INFO = POINTER(_OFFLOAD_ALGO_INFO)


class _OFFLOAD_SECURITY_ASSOCIATION(ctypes.Structure):
    pass


OFFLOAD_SECURITY_ASSOCIATION = _OFFLOAD_SECURITY_ASSOCIATION
POFFLOAD_SECURITY_ASSOCIATION = POINTER(_OFFLOAD_SECURITY_ASSOCIATION)


class _OFFLOAD_IPSEC_ADD_SA(ctypes.Structure):
    pass


OFFLOAD_IPSEC_ADD_SA = _OFFLOAD_IPSEC_ADD_SA
POFFLOAD_IPSEC_ADD_SA = POINTER(_OFFLOAD_IPSEC_ADD_SA)


class _OFFLOAD_IPSEC_DELETE_SA(ctypes.Structure):
    pass


OFFLOAD_IPSEC_DELETE_SA = _OFFLOAD_IPSEC_DELETE_SA
POFFLOAD_IPSEC_DELETE_SA = POINTER(_OFFLOAD_IPSEC_DELETE_SA)


class _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY(ctypes.Structure):
    pass


OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY
POFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = POINTER(_OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY)


class _OFFLOAD_IPSEC_ADD_UDPESP_SA(ctypes.Structure):
    pass


OFFLOAD_IPSEC_ADD_UDPESP_SA = _OFFLOAD_IPSEC_ADD_UDPESP_SA
POFFLOAD_IPSEC_ADD_UDPESP_SA = POINTER(_OFFLOAD_IPSEC_ADD_UDPESP_SA)


class _OFFLOAD_IPSEC_DELETE_UDPESP_SA(ctypes.Structure):
    pass


OFFLOAD_IPSEC_DELETE_UDPESP_SA = _OFFLOAD_IPSEC_DELETE_UDPESP_SA
POFFLOAD_IPSEC_DELETE_UDPESP_SA = POINTER(_OFFLOAD_IPSEC_DELETE_UDPESP_SA)


class _TRANSPORT_HEADER_OFFSET(ctypes.Structure):
    pass


TRANSPORT_HEADER_OFFSET = _TRANSPORT_HEADER_OFFSET
PTRANSPORT_HEADER_OFFSET = POINTER(_TRANSPORT_HEADER_OFFSET)


class _NETWORK_ADDRESS(ctypes.Structure):
    pass


NETWORK_ADDRESS = _NETWORK_ADDRESS
PNETWORK_ADDRESS = POINTER(_NETWORK_ADDRESS)


class _NETWORK_ADDRESS_LIST(ctypes.Structure):
    pass


NETWORK_ADDRESS_LIST = _NETWORK_ADDRESS_LIST
PNETWORK_ADDRESS_LIST = POINTER(_NETWORK_ADDRESS_LIST)


class _NETWORK_ADDRESS_IP(ctypes.Structure):
    pass


NETWORK_ADDRESS_IP = _NETWORK_ADDRESS_IP
PNETWORK_ADDRESS_IP = POINTER(_NETWORK_ADDRESS_IP)


class _NETWORK_ADDRESS_IP6(ctypes.Structure):
    pass


NETWORK_ADDRESS_IP6 = _NETWORK_ADDRESS_IP6
PNETWORK_ADDRESS_IP6 = POINTER(_NETWORK_ADDRESS_IP6)


class _NETWORK_ADDRESS_IPX(ctypes.Structure):
    pass


NETWORK_ADDRESS_IPX = _NETWORK_ADDRESS_IPX
PNETWORK_ADDRESS_IPX = POINTER(_NETWORK_ADDRESS_IPX)


class _GEN_GET_TIME_CAPS(ctypes.Structure):
    pass


GEN_GET_TIME_CAPS = _GEN_GET_TIME_CAPS
PGEN_GET_TIME_CAPS = POINTER(_GEN_GET_TIME_CAPS)


class _GEN_GET_NETCARD_TIME(ctypes.Structure):
    pass


GEN_GET_NETCARD_TIME = _GEN_GET_NETCARD_TIME
PGEN_GET_NETCARD_TIME = POINTER(_GEN_GET_NETCARD_TIME)


class _NDIS_PM_PACKET_PATTERN(ctypes.Structure):
    pass


NDIS_PM_PACKET_PATTERN = _NDIS_PM_PACKET_PATTERN
PNDIS_PM_PACKET_PATTERN = POINTER(_NDIS_PM_PACKET_PATTERN)


class _NDIS_PM_WAKE_UP_CAPABILITIES(ctypes.Structure):
    pass


NDIS_PM_WAKE_UP_CAPABILITIES = _NDIS_PM_WAKE_UP_CAPABILITIES
PNDIS_PM_WAKE_UP_CAPABILITIES = POINTER(_NDIS_PM_WAKE_UP_CAPABILITIES)


class _NDIS_PNP_CAPABILITIES(ctypes.Structure):
    pass


NDIS_PNP_CAPABILITIES = _NDIS_PNP_CAPABILITIES
PNDIS_PNP_CAPABILITIES = POINTER(_NDIS_PNP_CAPABILITIES)


class _NDIS_WAN_PROTOCOL_CAPS(ctypes.Structure):
    pass


NDIS_WAN_PROTOCOL_CAPS = _NDIS_WAN_PROTOCOL_CAPS
PNDIS_WAN_PROTOCOL_CAPS = POINTER(_NDIS_WAN_PROTOCOL_CAPS)


class _NDIS_CO_LINK_SPEED(ctypes.Structure):
    pass


NDIS_CO_LINK_SPEED = _NDIS_CO_LINK_SPEED
PNDIS_CO_LINK_SPEED = POINTER(_NDIS_CO_LINK_SPEED)


class _NDIS_LINK_SPEED(ctypes.Structure):
    pass


NDIS_LINK_SPEED = _NDIS_LINK_SPEED
PNDIS_LINK_SPEED = POINTER(_NDIS_LINK_SPEED)


class _NDIS_GUID(ctypes.Structure):
    pass


NDIS_GUID = _NDIS_GUID
PNDIS_GUID = POINTER(_NDIS_GUID)


class _NDIS_IRDA_PACKET_INFO(ctypes.Structure):
    pass


NDIS_IRDA_PACKET_INFO = _NDIS_IRDA_PACKET_INFO
PNDIS_IRDA_PACKET_INFO = POINTER(_NDIS_IRDA_PACKET_INFO)


class _NDIS_LINK_STATE(ctypes.Structure):
    pass


NDIS_LINK_STATE = _NDIS_LINK_STATE
PNDIS_LINK_STATE = POINTER(_NDIS_LINK_STATE)


class _NDIS_LINK_PARAMETERS(ctypes.Structure):
    pass


NDIS_LINK_PARAMETERS = _NDIS_LINK_PARAMETERS
PNDIS_LINK_PARAMETERS = POINTER(_NDIS_LINK_PARAMETERS)


class _NDIS_OPER_STATE(ctypes.Structure):
    pass


NDIS_OPER_STATE = _NDIS_OPER_STATE
PNDIS_OPER_STATE = POINTER(_NDIS_OPER_STATE)


class _NDIS_IP_OPER_STATUS(ctypes.Structure):
    pass


NDIS_IP_OPER_STATUS = _NDIS_IP_OPER_STATUS
PNDIS_IP_OPER_STATUS = POINTER(_NDIS_IP_OPER_STATUS)


class _NDIS_IP_OPER_STATUS_INFO(ctypes.Structure):
    pass


NDIS_IP_OPER_STATUS_INFO = _NDIS_IP_OPER_STATUS_INFO
PNDIS_IP_OPER_STATUS_INFO = POINTER(_NDIS_IP_OPER_STATUS_INFO)


class _NDIS_IP_OPER_STATE(ctypes.Structure):
    pass


NDIS_IP_OPER_STATE = _NDIS_IP_OPER_STATE
PNDIS_IP_OPER_STATE = POINTER(_NDIS_IP_OPER_STATE)


class _NDIS_OFFLOAD_PARAMETERS(ctypes.Structure):
    pass


NDIS_OFFLOAD_PARAMETERS = _NDIS_OFFLOAD_PARAMETERS
PNDIS_OFFLOAD_PARAMETERS = POINTER(_NDIS_OFFLOAD_PARAMETERS)


class _NDIS_TCP_LARGE_SEND_OFFLOAD_V1(ctypes.Structure):
    pass


NDIS_TCP_LARGE_SEND_OFFLOAD_V1 = _NDIS_TCP_LARGE_SEND_OFFLOAD_V1
PNDIS_TCP_LARGE_SEND_OFFLOAD_V1 = POINTER(_NDIS_TCP_LARGE_SEND_OFFLOAD_V1)


class _NDIS_TCP_IP_CHECKSUM_OFFLOAD(ctypes.Structure):
    pass


NDIS_TCP_IP_CHECKSUM_OFFLOAD = _NDIS_TCP_IP_CHECKSUM_OFFLOAD
PNDIS_TCP_IP_CHECKSUM_OFFLOAD = POINTER(_NDIS_TCP_IP_CHECKSUM_OFFLOAD)


class _NDIS_IPSEC_OFFLOAD_V1(ctypes.Structure):
    pass


NDIS_IPSEC_OFFLOAD_V1 = _NDIS_IPSEC_OFFLOAD_V1
PNDIS_IPSEC_OFFLOAD_V1 = POINTER(_NDIS_IPSEC_OFFLOAD_V1)


class _NDIS_TCP_LARGE_SEND_OFFLOAD_V2(ctypes.Structure):
    pass


NDIS_TCP_LARGE_SEND_OFFLOAD_V2 = _NDIS_TCP_LARGE_SEND_OFFLOAD_V2
PNDIS_TCP_LARGE_SEND_OFFLOAD_V2 = POINTER(_NDIS_TCP_LARGE_SEND_OFFLOAD_V2)


class _NDIS_IPSEC_OFFLOAD_V2(ctypes.Structure):
    pass


NDIS_IPSEC_OFFLOAD_V2 = _NDIS_IPSEC_OFFLOAD_V2
PNDIS_IPSEC_OFFLOAD_V2 = POINTER(_NDIS_IPSEC_OFFLOAD_V2)


class _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD(ctypes.Structure):
    pass


NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD = _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD
PNDIS_TCP_RECV_SEG_COALESCE_OFFLOAD = POINTER(_NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD)


class _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD(ctypes.Structure):
    pass


NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD = _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD
PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD = POINTER(_NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD)


class _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2(ctypes.Structure):
    pass


NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 = _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2
PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 = POINTER(_NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2)


class _NDIS_RFC6877_464XLAT_OFFLOAD(ctypes.Structure):
    pass


NDIS_RFC6877_464XLAT_OFFLOAD = _NDIS_RFC6877_464XLAT_OFFLOAD
PNDIS_RFC6877_464XLAT_OFFLOAD = POINTER(_NDIS_RFC6877_464XLAT_OFFLOAD)


class _NDIS_OFFLOAD(ctypes.Structure):
    pass


NDIS_OFFLOAD = _NDIS_OFFLOAD
PNDIS_OFFLOAD = POINTER(_NDIS_OFFLOAD)


class _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1(ctypes.Structure):
    pass


NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1
PNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = POINTER(_NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1)


class _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD(ctypes.Structure):
    pass


NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD
PNDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = POINTER(_NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD)


class _NDIS_WMI_IPSEC_OFFLOAD_V1(ctypes.Structure):
    pass


NDIS_WMI_IPSEC_OFFLOAD_V1 = _NDIS_WMI_IPSEC_OFFLOAD_V1
PNDIS_WMI_IPSEC_OFFLOAD_V1 = POINTER(_NDIS_WMI_IPSEC_OFFLOAD_V1)


class _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2(ctypes.Structure):
    pass


NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2
PNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = POINTER(_NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2)


class _NDIS_WMI_OFFLOAD(ctypes.Structure):
    pass


NDIS_WMI_OFFLOAD = _NDIS_WMI_OFFLOAD
PNDIS_WMI_OFFLOAD = POINTER(_NDIS_WMI_OFFLOAD)


class _NDIS_TCP_CONNECTION_OFFLOAD(ctypes.Structure):
    pass


NDIS_TCP_CONNECTION_OFFLOAD = _NDIS_TCP_CONNECTION_OFFLOAD
PNDIS_TCP_CONNECTION_OFFLOAD = POINTER(_NDIS_TCP_CONNECTION_OFFLOAD)


class _NDIS_WMI_TCP_CONNECTION_OFFLOAD(ctypes.Structure):
    pass


NDIS_WMI_TCP_CONNECTION_OFFLOAD = _NDIS_WMI_TCP_CONNECTION_OFFLOAD
PNDIS_WMI_TCP_CONNECTION_OFFLOAD = POINTER(_NDIS_WMI_TCP_CONNECTION_OFFLOAD)


class _NDIS_PORT_AUTHENTICATION_PARAMETERS(ctypes.Structure):
    pass


NDIS_PORT_AUTHENTICATION_PARAMETERS = _NDIS_PORT_AUTHENTICATION_PARAMETERS
PNDIS_PORT_AUTHENTICATION_PARAMETERS = POINTER(_NDIS_PORT_AUTHENTICATION_PARAMETERS)


class _NDIS_WMI_METHOD_HEADER(ctypes.Structure):
    pass


NDIS_WMI_METHOD_HEADER = _NDIS_WMI_METHOD_HEADER
PNDIS_WMI_METHOD_HEADER = POINTER(_NDIS_WMI_METHOD_HEADER)


class _NDIS_WMI_SET_HEADER(ctypes.Structure):
    pass


NDIS_WMI_SET_HEADER = _NDIS_WMI_SET_HEADER
PNDIS_WMI_SET_HEADER = POINTER(_NDIS_WMI_SET_HEADER)


class _NDIS_WMI_EVENT_HEADER(ctypes.Structure):
    pass


NDIS_WMI_EVENT_HEADER = _NDIS_WMI_EVENT_HEADER
PNDIS_WMI_EVENT_HEADER = POINTER(_NDIS_WMI_EVENT_HEADER)


class _NDIS_WMI_ENUM_ADAPTER(ctypes.Structure):
    pass


NDIS_WMI_ENUM_ADAPTER = _NDIS_WMI_ENUM_ADAPTER
PNDIS_WMI_ENUM_ADAPTER = POINTER(_NDIS_WMI_ENUM_ADAPTER)


class _NDIS_HD_SPLIT_PARAMETERS(ctypes.Structure):
    pass


NDIS_HD_SPLIT_PARAMETERS = _NDIS_HD_SPLIT_PARAMETERS
PNDIS_HD_SPLIT_PARAMETERS = POINTER(_NDIS_HD_SPLIT_PARAMETERS)


class _NDIS_HD_SPLIT_CURRENT_CONFIG(ctypes.Structure):
    pass


NDIS_HD_SPLIT_CURRENT_CONFIG = _NDIS_HD_SPLIT_CURRENT_CONFIG
PNDIS_HD_SPLIT_CURRENT_CONFIG = POINTER(_NDIS_HD_SPLIT_CURRENT_CONFIG)


class NDIS_WMI_OUTPUT_INFO(ctypes.Structure):
    pass


PNDIS_WMI_OUTPUT_INFO = POINTER(NDIS_WMI_OUTPUT_INFO)


class _NDIS_PM_COUNTED_STRING(ctypes.Structure):
    pass


NDIS_PM_COUNTED_STRING = _NDIS_PM_COUNTED_STRING
PNDIS_PM_COUNTED_STRING = POINTER(_NDIS_PM_COUNTED_STRING)


class _NDIS_PM_CAPABILITIES(ctypes.Structure):
    pass


NDIS_PM_CAPABILITIES = _NDIS_PM_CAPABILITIES
PNDIS_PM_CAPABILITIES = POINTER(_NDIS_PM_CAPABILITIES)


class _NDIS_PM_PARAMETERS(ctypes.Structure):
    pass


NDIS_PM_PARAMETERS = _NDIS_PM_PARAMETERS
PNDIS_PM_PARAMETERS = POINTER(_NDIS_PM_PARAMETERS)


class _NDIS_PM_WOL_PATTERN(ctypes.Structure):
    pass


NDIS_PM_WOL_PATTERN = _NDIS_PM_WOL_PATTERN
PNDIS_PM_WOL_PATTERN = POINTER(_NDIS_PM_WOL_PATTERN)


class _NDIS_PM_PROTOCOL_OFFLOAD(ctypes.Structure):
    pass


NDIS_PM_PROTOCOL_OFFLOAD = _NDIS_PM_PROTOCOL_OFFLOAD
PNDIS_PM_PROTOCOL_OFFLOAD = POINTER(_NDIS_PM_PROTOCOL_OFFLOAD)


class _NDIS_PM_WAKE_REASON(ctypes.Structure):
    pass


NDIS_PM_WAKE_REASON = _NDIS_PM_WAKE_REASON
PNDIS_PM_WAKE_REASON = POINTER(_NDIS_PM_WAKE_REASON)


class _NDIS_PM_WAKE_PACKET(ctypes.Structure):
    pass


NDIS_PM_WAKE_PACKET = _NDIS_PM_WAKE_PACKET
PNDIS_PM_WAKE_PACKET = POINTER(_NDIS_PM_WAKE_PACKET)


class _NDIS_WMI_PM_ADMIN_CONFIG(ctypes.Structure):
    pass


NDIS_WMI_PM_ADMIN_CONFIG = _NDIS_WMI_PM_ADMIN_CONFIG
PNDIS_WMI_PM_ADMIN_CONFIG = POINTER(_NDIS_WMI_PM_ADMIN_CONFIG)


class _NDIS_WMI_PM_ACTIVE_CAPABILITIES(ctypes.Structure):
    pass


NDIS_WMI_PM_ACTIVE_CAPABILITIES = _NDIS_WMI_PM_ACTIVE_CAPABILITIES
PNDIS_WMI_PM_ACTIVE_CAPABILITIES = POINTER(_NDIS_WMI_PM_ACTIVE_CAPABILITIES)


class _NDIS_RECEIVE_FILTER_CAPABILITIES(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_CAPABILITIES = _NDIS_RECEIVE_FILTER_CAPABILITIES
PNDIS_RECEIVE_FILTER_CAPABILITIES = POINTER(_NDIS_RECEIVE_FILTER_CAPABILITIES)


class _NDIS_NIC_SWITCH_CAPABILITIES(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_CAPABILITIES = _NDIS_NIC_SWITCH_CAPABILITIES
PNDIS_NIC_SWITCH_CAPABILITIES = POINTER(_NDIS_NIC_SWITCH_CAPABILITIES)


class _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS = _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS
PNDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS = POINTER(_NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS)


class _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_FIELD_PARAMETERS = _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS
PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS = POINTER(_NDIS_RECEIVE_FILTER_FIELD_PARAMETERS)


class _NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS = _NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS
PNDIS_RECEIVE_FILTER_CLEAR_PARAMETERS = POINTER(_NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS)


class _NDIS_RECEIVE_QUEUE_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_QUEUE_PARAMETERS = _NDIS_RECEIVE_QUEUE_PARAMETERS
PNDIS_RECEIVE_QUEUE_PARAMETERS = POINTER(_NDIS_RECEIVE_QUEUE_PARAMETERS)


class _NDIS_RECEIVE_QUEUE_FREE_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_QUEUE_FREE_PARAMETERS = _NDIS_RECEIVE_QUEUE_FREE_PARAMETERS
PNDIS_RECEIVE_QUEUE_FREE_PARAMETERS = POINTER(_NDIS_RECEIVE_QUEUE_FREE_PARAMETERS)


class _NDIS_RECEIVE_QUEUE_INFO(ctypes.Structure):
    pass


NDIS_RECEIVE_QUEUE_INFO = _NDIS_RECEIVE_QUEUE_INFO
PNDIS_RECEIVE_QUEUE_INFO = POINTER(_NDIS_RECEIVE_QUEUE_INFO)


class _NDIS_RECEIVE_QUEUE_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_RECEIVE_QUEUE_INFO_ARRAY = _NDIS_RECEIVE_QUEUE_INFO_ARRAY
PNDIS_RECEIVE_QUEUE_INFO_ARRAY = POINTER(_NDIS_RECEIVE_QUEUE_INFO_ARRAY)


class _NDIS_RECEIVE_FILTER_INFO(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_INFO = _NDIS_RECEIVE_FILTER_INFO
PNDIS_RECEIVE_FILTER_INFO = POINTER(_NDIS_RECEIVE_FILTER_INFO)


class _NDIS_RECEIVE_FILTER_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_INFO_ARRAY = _NDIS_RECEIVE_FILTER_INFO_ARRAY
PNDIS_RECEIVE_FILTER_INFO_ARRAY = POINTER(_NDIS_RECEIVE_FILTER_INFO_ARRAY)


class _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS = _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS
PNDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS = POINTER(_NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS)


class _NDIS_RECEIVE_SCALE_CAPABILITIES(ctypes.Structure):
    pass


NDIS_RECEIVE_SCALE_CAPABILITIES = _NDIS_RECEIVE_SCALE_CAPABILITIES
PNDIS_RECEIVE_SCALE_CAPABILITIES = POINTER(_NDIS_RECEIVE_SCALE_CAPABILITIES)


class _NDIS_RECEIVE_SCALE_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_SCALE_PARAMETERS = _NDIS_RECEIVE_SCALE_PARAMETERS
PNDIS_RECEIVE_SCALE_PARAMETERS = POINTER(_NDIS_RECEIVE_SCALE_PARAMETERS)


class _NDIS_RECEIVE_SCALE_PARAMETERS_V2(ctypes.Structure):
    pass


NDIS_RECEIVE_SCALE_PARAMETERS_V2 = _NDIS_RECEIVE_SCALE_PARAMETERS_V2
PNDIS_RECEIVE_SCALE_PARAMETERS_V2 = POINTER(_NDIS_RECEIVE_SCALE_PARAMETERS_V2)


class _NDIS_RSS_SET_INDIRECTION_ENTRY(ctypes.Structure):
    pass


NDIS_RSS_SET_INDIRECTION_ENTRY = _NDIS_RSS_SET_INDIRECTION_ENTRY
PNDIS_RSS_SET_INDIRECTION_ENTRY = POINTER(_NDIS_RSS_SET_INDIRECTION_ENTRY)


class _NDIS_RSS_SET_INDIRECTION_ENTRIES(ctypes.Structure):
    pass


NDIS_RSS_SET_INDIRECTION_ENTRIES = _NDIS_RSS_SET_INDIRECTION_ENTRIES
PNDIS_RSS_SET_INDIRECTION_ENTRIES = POINTER(_NDIS_RSS_SET_INDIRECTION_ENTRIES)


class _NDIS_RECEIVE_HASH_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_HASH_PARAMETERS = _NDIS_RECEIVE_HASH_PARAMETERS
PNDIS_RECEIVE_HASH_PARAMETERS = POINTER(_NDIS_RECEIVE_HASH_PARAMETERS)


class _NDIS_RSS_PROCESSOR(ctypes.Structure):
    pass


NDIS_RSS_PROCESSOR = _NDIS_RSS_PROCESSOR
PNDIS_RSS_PROCESSOR = POINTER(_NDIS_RSS_PROCESSOR)


class _NDIS_RSS_PROCESSOR_INFO(ctypes.Structure):
    pass


NDIS_RSS_PROCESSOR_INFO = _NDIS_RSS_PROCESSOR_INFO
PNDIS_RSS_PROCESSOR_INFO = POINTER(_NDIS_RSS_PROCESSOR_INFO)


class _NDIS_PROCESSOR_INFO_EX(ctypes.Structure):
    pass


NDIS_PROCESSOR_INFO_EX = _NDIS_PROCESSOR_INFO_EX
PNDIS_PROCESSOR_INFO_EX = POINTER(_NDIS_PROCESSOR_INFO_EX)


class _NDIS_SYSTEM_PROCESSOR_INFO_EX(ctypes.Structure):
    pass


NDIS_SYSTEM_PROCESSOR_INFO_EX = _NDIS_SYSTEM_PROCESSOR_INFO_EX
PNDIS_SYSTEM_PROCESSOR_INFO_EX = POINTER(_NDIS_SYSTEM_PROCESSOR_INFO_EX)


class _NDIS_HYPERVISOR_INFO(ctypes.Structure):
    pass


NDIS_HYPERVISOR_INFO = _NDIS_HYPERVISOR_INFO
PNDIS_HYPERVISOR_INFO = POINTER(_NDIS_HYPERVISOR_INFO)


class _NDIS_WMI_GROUP_AFFINITY(ctypes.Structure):
    pass


NDIS_WMI_GROUP_AFFINITY = _NDIS_WMI_GROUP_AFFINITY
PNDIS_WMI_GROUP_AFFINITY = POINTER(_NDIS_WMI_GROUP_AFFINITY)


class _NDIS_WMI_RECEIVE_QUEUE_PARAMETERS(ctypes.Structure):
    pass


NDIS_WMI_RECEIVE_QUEUE_PARAMETERS = _NDIS_WMI_RECEIVE_QUEUE_PARAMETERS
PNDIS_WMI_RECEIVE_QUEUE_PARAMETERS = POINTER(_NDIS_WMI_RECEIVE_QUEUE_PARAMETERS)


class _NDIS_WMI_RECEIVE_QUEUE_INFO(ctypes.Structure):
    pass


NDIS_WMI_RECEIVE_QUEUE_INFO = _NDIS_WMI_RECEIVE_QUEUE_INFO
PNDIS_WMI_RECEIVE_QUEUE_INFO = POINTER(_NDIS_WMI_RECEIVE_QUEUE_INFO)


class _NDIS_NDK_PERFORMANCE_COUNTERS(ctypes.Structure):
    pass


NDIS_NDK_PERFORMANCE_COUNTERS = _NDIS_NDK_PERFORMANCE_COUNTERS
PNDIS_NDK_PERFORMANCE_COUNTERS = POINTER(_NDIS_NDK_PERFORMANCE_COUNTERS)


class _NDIS_NDK_CAPABILITIES(ctypes.Structure):
    pass


NDIS_NDK_CAPABILITIES = _NDIS_NDK_CAPABILITIES
PNDIS_NDK_CAPABILITIES = POINTER(_NDIS_NDK_CAPABILITIES)


class _NDK_WMI_ADAPTER_INFO(ctypes.Structure):
    pass


NDK_WMI_ADAPTER_INFO = _NDK_WMI_ADAPTER_INFO
PNDK_WMI_ADAPTER_INFO = POINTER(_NDK_WMI_ADAPTER_INFO)


class _NDIS_WMI_NDK_CAPABILITIES(ctypes.Structure):
    pass


NDIS_WMI_NDK_CAPABILITIES = _NDIS_WMI_NDK_CAPABILITIES
PNDIS_WMI_NDK_CAPABILITIES = POINTER(_NDIS_WMI_NDK_CAPABILITIES)


class _NDIS_NDK_STATISTICS_INFO(ctypes.Structure):
    pass


NDIS_NDK_STATISTICS_INFO = _NDIS_NDK_STATISTICS_INFO


class _NDIS_NDK_CONNECTION_ENTRY(ctypes.Structure):
    pass


NDIS_NDK_CONNECTION_ENTRY = _NDIS_NDK_CONNECTION_ENTRY


class _NDIS_NDK_CONNECTIONS(ctypes.Structure):
    pass


NDIS_NDK_CONNECTIONS = _NDIS_NDK_CONNECTIONS


class _NDIS_NDK_LOCAL_ENDPOINT_ENTRY(ctypes.Structure):
    pass


NDIS_NDK_LOCAL_ENDPOINT_ENTRY = _NDIS_NDK_LOCAL_ENDPOINT_ENTRY


class _NDIS_NDK_LOCAL_ENDPOINTS(ctypes.Structure):
    pass


NDIS_NDK_LOCAL_ENDPOINTS = _NDIS_NDK_LOCAL_ENDPOINTS


class _NDIS_NIC_SWITCH_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_PARAMETERS = _NDIS_NIC_SWITCH_PARAMETERS
PNDIS_NIC_SWITCH_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_PARAMETERS)


class _NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS = _NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS
PNDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS)


class _NDIS_NIC_SWITCH_INFO(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_INFO = _NDIS_NIC_SWITCH_INFO
PNDIS_NIC_SWITCH_INFO = POINTER(_NDIS_NIC_SWITCH_INFO)


class _NDIS_NIC_SWITCH_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_INFO_ARRAY = _NDIS_NIC_SWITCH_INFO_ARRAY
PNDIS_NIC_SWITCH_INFO_ARRAY = POINTER(_NDIS_NIC_SWITCH_INFO_ARRAY)


class _NDIS_NDK_REQUEST_PARAMETERS(ctypes.Structure):
    pass


NDIS_NDK_REQUEST_PARAMETERS = _NDIS_NDK_REQUEST_PARAMETERS
PNDIS_NDK_REQUEST_PARAMETERS = POINTER(_NDIS_NDK_REQUEST_PARAMETERS)


class _NDIS_NDK_RESPONSE_PARAMETERS(ctypes.Structure):
    pass


NDIS_NDK_RESPONSE_PARAMETERS = _NDIS_NDK_RESPONSE_PARAMETERS
PNDIS_NDK_RESPONSE_PARAMETERS = POINTER(_NDIS_NDK_RESPONSE_PARAMETERS)


class _NDIS_NDK_PARAMETERS(ctypes.Structure):
    pass


NDIS_NDK_PARAMETERS = _NDIS_NDK_PARAMETERS
PNDIS_NDK_PARAMETERS = POINTER(_NDIS_NDK_PARAMETERS)


class _NDIS_NIC_SWITCH_VPORT_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VPORT_PARAMETERS = _NDIS_NIC_SWITCH_VPORT_PARAMETERS
PNDIS_NIC_SWITCH_VPORT_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_VPORT_PARAMETERS)


class _NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS = _NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS
PNDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS)


class _NDIS_NIC_SWITCH_VPORT_INFO(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VPORT_INFO = _NDIS_NIC_SWITCH_VPORT_INFO
PNDIS_NIC_SWITCH_VPORT_INFO = POINTER(_NDIS_NIC_SWITCH_VPORT_INFO)


class _NDIS_NIC_SWITCH_VPORT_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VPORT_INFO_ARRAY = _NDIS_NIC_SWITCH_VPORT_INFO_ARRAY
PNDIS_NIC_SWITCH_VPORT_INFO_ARRAY = POINTER(_NDIS_NIC_SWITCH_VPORT_INFO_ARRAY)


class _NDIS_NIC_SWITCH_VF_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VF_PARAMETERS = _NDIS_NIC_SWITCH_VF_PARAMETERS
PNDIS_NIC_SWITCH_VF_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_VF_PARAMETERS)


class _NDIS_NIC_SWITCH_FREE_VF_PARAMETERS(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_FREE_VF_PARAMETERS = _NDIS_NIC_SWITCH_FREE_VF_PARAMETERS
PNDIS_NIC_SWITCH_FREE_VF_PARAMETERS = POINTER(_NDIS_NIC_SWITCH_FREE_VF_PARAMETERS)


class _NDIS_NIC_SWITCH_VF_INFO(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VF_INFO = _NDIS_NIC_SWITCH_VF_INFO
PNDIS_NIC_SWITCH_VF_INFO = POINTER(_NDIS_NIC_SWITCH_VF_INFO)


class _NDIS_NIC_SWITCH_VF_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_NIC_SWITCH_VF_INFO_ARRAY = _NDIS_NIC_SWITCH_VF_INFO_ARRAY
PNDIS_NIC_SWITCH_VF_INFO_ARRAY = POINTER(_NDIS_NIC_SWITCH_VF_INFO_ARRAY)


class _NDIS_SRIOV_CAPABILITIES(ctypes.Structure):
    pass


NDIS_SRIOV_CAPABILITIES = _NDIS_SRIOV_CAPABILITIES
PNDIS_SRIOV_CAPABILITIES = POINTER(_NDIS_SRIOV_CAPABILITIES)


class _NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS = _NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS
PNDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS = POINTER(_NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS)


class _NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS = _NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS
PNDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS = POINTER(_NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS)


class _NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS = _NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS
PNDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS = POINTER(_NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS)


class _NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS = _NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS
PNDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS = POINTER(_NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS)


class _NDIS_SRIOV_RESET_VF_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_RESET_VF_PARAMETERS = _NDIS_SRIOV_RESET_VF_PARAMETERS
PNDIS_SRIOV_RESET_VF_PARAMETERS = POINTER(_NDIS_SRIOV_RESET_VF_PARAMETERS)


class _NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS = _NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS
PNDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS = POINTER(_NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS)


class _NDIS_SRIOV_CONFIG_STATE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SRIOV_CONFIG_STATE_PARAMETERS = _NDIS_SRIOV_CONFIG_STATE_PARAMETERS
PNDIS_SRIOV_CONFIG_STATE_PARAMETERS = POINTER(_NDIS_SRIOV_CONFIG_STATE_PARAMETERS)


class _NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO = _NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO
PNDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO = POINTER(_NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO)


class _NDIS_SRIOV_PROBED_BARS_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_PROBED_BARS_INFO = _NDIS_SRIOV_PROBED_BARS_INFO
PNDIS_SRIOV_PROBED_BARS_INFO = POINTER(_NDIS_SRIOV_PROBED_BARS_INFO)


class _NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS(ctypes.Structure):
    pass


NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS = _NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS
PNDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS = POINTER(_NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS)


class _NDIS_SRIOV_BAR_RESOURCES_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_BAR_RESOURCES_INFO = _NDIS_SRIOV_BAR_RESOURCES_INFO
PNDIS_SRIOV_BAR_RESOURCES_INFO = POINTER(_NDIS_SRIOV_BAR_RESOURCES_INFO)


class _NDIS_SRIOV_PF_LUID_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_PF_LUID_INFO = _NDIS_SRIOV_PF_LUID_INFO
PNDIS_SRIOV_PF_LUID_INFO = POINTER(_NDIS_SRIOV_PF_LUID_INFO)


class _NDIS_SRIOV_VF_SERIAL_NUMBER_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_VF_SERIAL_NUMBER_INFO = _NDIS_SRIOV_VF_SERIAL_NUMBER_INFO
PNDIS_SRIOV_VF_SERIAL_NUMBER_INFO = POINTER(_NDIS_SRIOV_VF_SERIAL_NUMBER_INFO)


class _NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO = _NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO
PNDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO = POINTER(_NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO)


class _NDIS_SRIOV_OVERLYING_ADAPTER_INFO(ctypes.Structure):
    pass


NDIS_SRIOV_OVERLYING_ADAPTER_INFO = _NDIS_SRIOV_OVERLYING_ADAPTER_INFO
PNDIS_SRIOV_OVERLYING_ADAPTER_INFO = POINTER(_NDIS_SRIOV_OVERLYING_ADAPTER_INFO)


class _NDIS_ISOLATION_NAME(ctypes.Structure):
    pass


NDIS_ISOLATION_NAME = _NDIS_ISOLATION_NAME


class _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY(ctypes.Structure):
    pass


NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY = _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY
PNDIS_ROUTING_DOMAIN_ISOLATION_ENTRY = POINTER(_NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY)


class _NDIS_ROUTING_DOMAIN_ENTRY(ctypes.Structure):
    pass


NDIS_ROUTING_DOMAIN_ENTRY = _NDIS_ROUTING_DOMAIN_ENTRY
PNDIS_ROUTING_DOMAIN_ENTRY = POINTER(_NDIS_ROUTING_DOMAIN_ENTRY)


class _NDIS_ISOLATION_PARAMETERS(ctypes.Structure):
    pass


NDIS_ISOLATION_PARAMETERS = _NDIS_ISOLATION_PARAMETERS
PNDIS_ISOLATION_PARAMETERS = POINTER(_NDIS_ISOLATION_PARAMETERS)


class _NDIS_SWITCH_PORT_PROPERTY_SECURITY(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_SECURITY = _NDIS_SWITCH_PORT_PROPERTY_SECURITY
PNDIS_SWITCH_PORT_PROPERTY_SECURITY = POINTER(_NDIS_SWITCH_PORT_PROPERTY_SECURITY)


class _NDIS_SWITCH_PORT_PROPERTY_VLAN(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_VLAN = _NDIS_SWITCH_PORT_PROPERTY_VLAN
PNDIS_SWITCH_PORT_PROPERTY_VLAN = POINTER(_NDIS_SWITCH_PORT_PROPERTY_VLAN)


class _NDIS_SWITCH_PORT_PROPERTY_PROFILE(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_PROFILE = _NDIS_SWITCH_PORT_PROPERTY_PROFILE
PNDIS_SWITCH_PORT_PROPERTY_PROFILE = POINTER(_NDIS_SWITCH_PORT_PROPERTY_PROFILE)


class _NDIS_SWITCH_PORT_PROPERTY_ISOLATION(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_ISOLATION = _NDIS_SWITCH_PORT_PROPERTY_ISOLATION
PNDIS_SWITCH_PORT_PROPERTY_ISOLATION = POINTER(_NDIS_SWITCH_PORT_PROPERTY_ISOLATION)


class _NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN = _NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN
PNDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN = POINTER(_NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN)


class _NDIS_SWITCH_PORT_PROPERTY_CUSTOM(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_CUSTOM = _NDIS_SWITCH_PORT_PROPERTY_CUSTOM
PNDIS_SWITCH_PORT_PROPERTY_CUSTOM = POINTER(_NDIS_SWITCH_PORT_PROPERTY_CUSTOM)


class _NDIS_SWITCH_PORT_PROPERTY_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_PARAMETERS = _NDIS_SWITCH_PORT_PROPERTY_PARAMETERS
PNDIS_SWITCH_PORT_PROPERTY_PARAMETERS = POINTER(_NDIS_SWITCH_PORT_PROPERTY_PARAMETERS)


class _NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS = _NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS
PNDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS = POINTER(_NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS)


class _NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS = _NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS
PNDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS = POINTER(_NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS)


class _NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO = _NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO
PNDIS_SWITCH_PORT_PROPERTY_ENUM_INFO = POINTER(_NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO)


class _NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS = _NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS
PNDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS = POINTER(_NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS)


class _NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM = _NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM
PNDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM = POINTER(_NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM)


class _NDIS_SWITCH_PROPERTY_CUSTOM(ctypes.Structure):
    pass


NDIS_SWITCH_PROPERTY_CUSTOM = _NDIS_SWITCH_PROPERTY_CUSTOM
PNDIS_SWITCH_PROPERTY_CUSTOM = POINTER(_NDIS_SWITCH_PROPERTY_CUSTOM)


class _NDIS_SWITCH_PROPERTY_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PROPERTY_PARAMETERS = _NDIS_SWITCH_PROPERTY_PARAMETERS
PNDIS_SWITCH_PROPERTY_PARAMETERS = POINTER(_NDIS_SWITCH_PROPERTY_PARAMETERS)


class _NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS = _NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS
PNDIS_SWITCH_PROPERTY_DELETE_PARAMETERS = POINTER(_NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS)


class _NDIS_SWITCH_PROPERTY_ENUM_INFO(ctypes.Structure):
    pass


NDIS_SWITCH_PROPERTY_ENUM_INFO = _NDIS_SWITCH_PROPERTY_ENUM_INFO
PNDIS_SWITCH_PROPERTY_ENUM_INFO = POINTER(_NDIS_SWITCH_PROPERTY_ENUM_INFO)


class _NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS = _NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS
PNDIS_SWITCH_PROPERTY_ENUM_PARAMETERS = POINTER(_NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS)


class _NDIS_SWITCH_FEATURE_STATUS_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_FEATURE_STATUS_PARAMETERS = _NDIS_SWITCH_FEATURE_STATUS_PARAMETERS
PNDIS_SWITCH_FEATURE_STATUS_PARAMETERS = POINTER(_NDIS_SWITCH_FEATURE_STATUS_PARAMETERS)


class _NDIS_SWITCH_FEATURE_STATUS_CUSTOM(ctypes.Structure):
    pass


NDIS_SWITCH_FEATURE_STATUS_CUSTOM = _NDIS_SWITCH_FEATURE_STATUS_CUSTOM
PNDIS_SWITCH_FEATURE_STATUS_CUSTOM = POINTER(_NDIS_SWITCH_FEATURE_STATUS_CUSTOM)


class _NDIS_SWITCH_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PARAMETERS = _NDIS_SWITCH_PARAMETERS
PNDIS_SWITCH_PARAMETERS = POINTER(_NDIS_SWITCH_PARAMETERS)


class _NDIS_SWITCH_PORT_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_PARAMETERS = _NDIS_SWITCH_PORT_PARAMETERS
PNDIS_SWITCH_PORT_PARAMETERS = POINTER(_NDIS_SWITCH_PORT_PARAMETERS)


class _NDIS_SWITCH_PORT_ARRAY(ctypes.Structure):
    pass


NDIS_SWITCH_PORT_ARRAY = _NDIS_SWITCH_PORT_ARRAY
PNDIS_SWITCH_PORT_ARRAY = POINTER(_NDIS_SWITCH_PORT_ARRAY)


class _NDIS_SWITCH_NIC_PARAMETERS(ctypes.Structure):
    pass


NDIS_SWITCH_NIC_PARAMETERS = _NDIS_SWITCH_NIC_PARAMETERS
PNDIS_SWITCH_NIC_PARAMETERS = POINTER(_NDIS_SWITCH_NIC_PARAMETERS)


class _NDIS_SWITCH_NIC_ARRAY(ctypes.Structure):
    pass


NDIS_SWITCH_NIC_ARRAY = _NDIS_SWITCH_NIC_ARRAY
PNDIS_SWITCH_NIC_ARRAY = POINTER(_NDIS_SWITCH_NIC_ARRAY)


class _NDIS_SWITCH_NIC_OID_REQUEST(ctypes.Structure):
    pass


NDIS_SWITCH_NIC_OID_REQUEST = _NDIS_SWITCH_NIC_OID_REQUEST
PNDIS_SWITCH_NIC_OID_REQUEST = POINTER(_NDIS_SWITCH_NIC_OID_REQUEST)


class _NDIS_SWITCH_NIC_SAVE_STATE(ctypes.Structure):
    pass


NDIS_SWITCH_NIC_SAVE_STATE = _NDIS_SWITCH_NIC_SAVE_STATE
PNDIS_SWITCH_NIC_SAVE_STATE = POINTER(_NDIS_SWITCH_NIC_SAVE_STATE)


class _NDIS_PORT_STATE(ctypes.Structure):
    pass


NDIS_PORT_STATE = _NDIS_PORT_STATE
PNDIS_PORT_STATE = POINTER(_NDIS_PORT_STATE)


class _NDIS_PORT_CHARACTERISTICS(ctypes.Structure):
    pass


NDIS_PORT_CHARACTERISTICS = _NDIS_PORT_CHARACTERISTICS
PNDIS_PORT_CHARACTERISTICS = POINTER(_NDIS_PORT_CHARACTERISTICS)


class _NDIS_PORT(ctypes.Structure):
    pass





class _NDIS_PORT_ARRAY(ctypes.Structure):
    pass


NDIS_PORT_ARRAY = _NDIS_PORT_ARRAY
PNDIS_PORT_ARRAY = POINTER(_NDIS_PORT_ARRAY)


class _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE(ctypes.Structure):
    pass


NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE = _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE
PNDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE = POINTER(_NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE)


class _NDIS_GFP_EXACT_MATCH_PROFILE(ctypes.Structure):
    pass


NDIS_GFP_EXACT_MATCH_PROFILE = _NDIS_GFP_EXACT_MATCH_PROFILE
PNDIS_GFP_EXACT_MATCH_PROFILE = POINTER(_NDIS_GFP_EXACT_MATCH_PROFILE)


class _NDIS_GFP_ETHERNET_HEADER_FIELDS(ctypes.Structure):
    pass


NDIS_GFP_ETHERNET_HEADER_FIELDS = _NDIS_GFP_ETHERNET_HEADER_FIELDS
PNDIS_GFP_ETHERNET_HEADER_FIELDS = POINTER(_NDIS_GFP_ETHERNET_HEADER_FIELDS)


class _NDIS_GFP_HEADER_GROUP_EXACT_MATCH(ctypes.Structure):
    pass


NDIS_GFP_HEADER_GROUP_EXACT_MATCH = _NDIS_GFP_HEADER_GROUP_EXACT_MATCH
PNDIS_GFP_HEADER_GROUP_EXACT_MATCH = POINTER(_NDIS_GFP_HEADER_GROUP_EXACT_MATCH)


class _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE(ctypes.Structure):
    pass


NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE = _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE
PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE = POINTER(_NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE)


class _NDIS_GFP_WILDCARD_MATCH_PROFILE(ctypes.Structure):
    pass


NDIS_GFP_WILDCARD_MATCH_PROFILE = _NDIS_GFP_WILDCARD_MATCH_PROFILE
PNDIS_GFP_WILDCARD_MATCH_PROFILE = POINTER(_NDIS_GFP_WILDCARD_MATCH_PROFILE)


class _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH = _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH
PNDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH = POINTER(_NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH)


class _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
PNDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = POINTER(_NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH)


class _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH = _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH
PNDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH = POINTER(_NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH)


class _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
PNDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = POINTER(_NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH)


class _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH(ctypes.Union):
    pass


NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
PNDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH = POINTER(_NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH)


class _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH = _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH
PNDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH = POINTER(_NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH)


class _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH = _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH
PNDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH = POINTER(_NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH)


class _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH(ctypes.Structure):
    pass


NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH = _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH
PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH = POINTER(_NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH)


class _NDIS_PD_CAPABILITIES(ctypes.Structure):
    pass


NDIS_PD_CAPABILITIES = _NDIS_PD_CAPABILITIES


class _NDIS_PD_CONFIG(ctypes.Structure):
    pass


NDIS_PD_CONFIG = _NDIS_PD_CONFIG


class _NDIS_GFT_TABLE_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_TABLE_PARAMETERS = _NDIS_GFT_TABLE_PARAMETERS
PNDIS_GFT_TABLE_PARAMETERS = POINTER(_NDIS_GFT_TABLE_PARAMETERS)


class _NDIS_GFT_TABLE_INFO(ctypes.Structure):
    pass


NDIS_GFT_TABLE_INFO = _NDIS_GFT_TABLE_INFO
PNDIS_GFT_TABLE_INFO = POINTER(_NDIS_GFT_TABLE_INFO)


class _NDIS_GFT_TABLE_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_TABLE_INFO_ARRAY = _NDIS_GFT_TABLE_INFO_ARRAY
PNDIS_GFT_TABLE_INFO_ARRAY = POINTER(_NDIS_GFT_TABLE_INFO_ARRAY)


class _NDIS_GFT_DELETE_TABLE_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_DELETE_TABLE_PARAMETERS = _NDIS_GFT_DELETE_TABLE_PARAMETERS
PNDIS_GFT_DELETE_TABLE_PARAMETERS = POINTER(_NDIS_GFT_DELETE_TABLE_PARAMETERS)


class _NDIS_GFT_COUNTER_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_COUNTER_PARAMETERS = _NDIS_GFT_COUNTER_PARAMETERS
PNDIS_GFT_COUNTER_PARAMETERS = POINTER(_NDIS_GFT_COUNTER_PARAMETERS)


class _NDIS_GFT_FREE_COUNTER_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_FREE_COUNTER_PARAMETERS = _NDIS_GFT_FREE_COUNTER_PARAMETERS
PNDIS_GFT_FREE_COUNTER_PARAMETERS = POINTER(_NDIS_GFT_FREE_COUNTER_PARAMETERS)


class _NDIS_GFT_COUNTER_INFO(ctypes.Structure):
    pass


NDIS_GFT_COUNTER_INFO = _NDIS_GFT_COUNTER_INFO
PNDIS_GFT_COUNTER_INFO = POINTER(_NDIS_GFT_COUNTER_INFO)


class _NDIS_GFT_COUNTER_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_COUNTER_INFO_ARRAY = _NDIS_GFT_COUNTER_INFO_ARRAY
PNDIS_GFT_COUNTER_INFO_ARRAY = POINTER(_NDIS_GFT_COUNTER_INFO_ARRAY)


class _NDIS_GFT_COUNTER_VALUE(ctypes.Structure):
    pass


NDIS_GFT_COUNTER_VALUE = _NDIS_GFT_COUNTER_VALUE
PNDIS_GFT_COUNTER_VALUE = POINTER(_NDIS_GFT_COUNTER_VALUE)


class _NDIS_GFT_COUNTER_VALUE_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_COUNTER_VALUE_ARRAY = _NDIS_GFT_COUNTER_VALUE_ARRAY
PNDIS_GFT_COUNTER_VALUE_ARRAY = POINTER(_NDIS_GFT_COUNTER_VALUE_ARRAY)


class _NDIS_GFT_STATISTICS(ctypes.Structure):
    pass


NDIS_GFT_STATISTICS = _NDIS_GFT_STATISTICS
PNDIS_GFT_STATISTICS = POINTER(_NDIS_GFT_STATISTICS)


class _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE(ctypes.Structure):
    pass


NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE = _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE
PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE = POINTER(_NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE)


class _NDIS_GFT_CUSTOM_ACTION_PROFILE(ctypes.Structure):
    pass


NDIS_GFT_CUSTOM_ACTION_PROFILE = _NDIS_GFT_CUSTOM_ACTION_PROFILE
PNDIS_GFT_CUSTOM_ACTION_PROFILE = POINTER(_NDIS_GFT_CUSTOM_ACTION_PROFILE)


class _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE(ctypes.Structure):
    pass


NDIS_GFT_HEADER_TRANSPOSITION_PROFILE = _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE
PNDIS_GFT_HEADER_TRANSPOSITION_PROFILE = POINTER(_NDIS_GFT_HEADER_TRANSPOSITION_PROFILE)


class _NDIS_GFT_HEADER_GROUP_TRANSPOSITION(ctypes.Structure):
    pass


NDIS_GFT_HEADER_GROUP_TRANSPOSITION = _NDIS_GFT_HEADER_GROUP_TRANSPOSITION
PNDIS_GFT_HEADER_GROUP_TRANSPOSITION = POINTER(_NDIS_GFT_HEADER_GROUP_TRANSPOSITION)


class _NDIS_GFT_CUSTOM_ACTION(ctypes.Structure):
    pass


NDIS_GFT_CUSTOM_ACTION = _NDIS_GFT_CUSTOM_ACTION
PNDIS_GFT_CUSTOM_ACTION = POINTER(_NDIS_GFT_CUSTOM_ACTION)


class _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY(ctypes.Structure):
    pass


NDIS_GFT_EXACT_MATCH_FLOW_ENTRY = _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY
PNDIS_GFT_EXACT_MATCH_FLOW_ENTRY = POINTER(_NDIS_GFT_EXACT_MATCH_FLOW_ENTRY)


class _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY(ctypes.Structure):
    pass


NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY = _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY
PNDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY = POINTER(_NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY)


class _NDIS_GFT_PROFILE_INFO(ctypes.Structure):
    pass


NDIS_GFT_PROFILE_INFO = _NDIS_GFT_PROFILE_INFO
PNDIS_GFT_PROFILE_INFO = POINTER(_NDIS_GFT_PROFILE_INFO)


class _NDIS_GFT_PROFILE_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_PROFILE_INFO_ARRAY = _NDIS_GFT_PROFILE_INFO_ARRAY
PNDIS_GFT_PROFILE_INFO_ARRAY = POINTER(_NDIS_GFT_PROFILE_INFO_ARRAY)


class _NDIS_GFT_DELETE_PROFILE_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_DELETE_PROFILE_PARAMETERS = _NDIS_GFT_DELETE_PROFILE_PARAMETERS
PNDIS_GFT_DELETE_PROFILE_PARAMETERS = POINTER(_NDIS_GFT_DELETE_PROFILE_PARAMETERS)


class _NDIS_GFT_FLOW_ENTRY_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_FLOW_ENTRY_ARRAY = _NDIS_GFT_FLOW_ENTRY_ARRAY
PNDIS_GFT_FLOW_ENTRY_ARRAY = POINTER(_NDIS_GFT_FLOW_ENTRY_ARRAY)


class _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_FLOW_ENTRY_INFO_ARRAY = _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY
PNDIS_GFT_FLOW_ENTRY_INFO_ARRAY = POINTER(_NDIS_GFT_FLOW_ENTRY_INFO_ARRAY)


class _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER(ctypes.Structure):
    pass


NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER = _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER
PNDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER = POINTER(_NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER)


class _NDIS_GFT_FLOW_ENTRY_ID_ARRAY(ctypes.Structure):
    pass


NDIS_GFT_FLOW_ENTRY_ID_ARRAY = _NDIS_GFT_FLOW_ENTRY_ID_ARRAY
PNDIS_GFT_FLOW_ENTRY_ID_ARRAY = POINTER(_NDIS_GFT_FLOW_ENTRY_ID_ARRAY)


class _NDIS_GFT_OFFLOAD_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_OFFLOAD_PARAMETERS = _NDIS_GFT_OFFLOAD_PARAMETERS
PNDIS_GFT_OFFLOAD_PARAMETERS = POINTER(_NDIS_GFT_OFFLOAD_PARAMETERS)


class _NDIS_GFT_OFFLOAD_CAPABILITIES(ctypes.Structure):
    pass


NDIS_GFT_OFFLOAD_CAPABILITIES = _NDIS_GFT_OFFLOAD_CAPABILITIES
PNDIS_GFT_OFFLOAD_CAPABILITIES = POINTER(_NDIS_GFT_OFFLOAD_CAPABILITIES)


class _NDIS_GFT_VPORT_PARAMETERS(ctypes.Structure):
    pass


NDIS_GFT_VPORT_PARAMETERS = _NDIS_GFT_VPORT_PARAMETERS
PNDIS_GFT_VPORT_PARAMETERS = POINTER(_NDIS_GFT_VPORT_PARAMETERS)


class _NDIS_QOS_SQ_PARAMETERS(ctypes.Structure):
    pass


NDIS_QOS_SQ_PARAMETERS = _NDIS_QOS_SQ_PARAMETERS
PNDIS_QOS_SQ_PARAMETERS = POINTER(_NDIS_QOS_SQ_PARAMETERS)


class _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY(ctypes.Structure):
    pass


NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY = _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY
PNDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY = POINTER(_NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY)


class _NDIS_QOS_OFFLOAD_CAPABILITIES(ctypes.Structure):
    pass


NDIS_QOS_OFFLOAD_CAPABILITIES = _NDIS_QOS_OFFLOAD_CAPABILITIES
PNDIS_QOS_OFFLOAD_CAPABILITIES = POINTER(_NDIS_QOS_OFFLOAD_CAPABILITIES)




# /* + + BUILD Version: 0001  // Increment this if a change has global effects
# Copyright (c) Microsoft Corporation. All rights reserved. Module Name:
# ntddndis.h Abstract: This is the include file that defines constants and
# types for interfacing with network drivers. Environment: User mode or Kernel
# mode Notes: If you are writing kernel mode code, you should include <ndis.h>
# instead of including this header directly. If you are writing user mode
# code, you can declare the NDIS contract version that you are targeting.
# Available versions are: Version First available in
# ------------------------------------------------------------------ 681
# Windows 10 RS4 release 680 Windows 10 RS3 Release 670 Windows 10, version
# 1703 660 Windows 10, version 1607 / Windows Server 2016 651 Windows 10,
# version 1511 650 Windows 10, version 1507 640 Windows 8.1 / Windows Server
# 2012 R2 630 Windows 8 / Windows Server 2012 620 Windows 7 / Windows Server
# 2008 R2 61 Windows Vista SP1 / Windows Server 2008 RTM 60 Windows Vista RTM
# To declare the version, use a macro like this
# (where '630' is any version from the above table): define UM_NDIS630
# Alternatively, add the definition to your compiler's options: -DUM_NDIS630=1
# Versions are cumulative; defining 630 will automatically include 620 and
# below. There's no need to manually define them all. --
if not defined(_NTDDNDIS_):
    _NTDDNDIS_ = VOID
    if _MSC_VER > 1000:
        pass
    # END IF


    from winapifamily_h import * # NOQA
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM):
        # disable warnings
        if _MSC_VER >= 1200:
            pass
        # END IF


        if defined(__cplusplus):
            pass
        # END IF


        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            from ifdef_h import * # NOQA
            from devpkey_h import * # NOQA
            from pciprop_h import * # NOQA
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)


        # Something to identify new (RS4 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS681 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS681):
            if (defined (UM_NDIS681)):
                NDIS_SUPPORT_NDIS681 = 1
            else:
                NDIS_SUPPORT_NDIS681 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS681)


        # Something to identify new (RS3 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS680 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS680):
            if (defined (UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS680 = 1
            else:
                NDIS_SUPPORT_NDIS680 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS680)


        # Something to identify new (RS2 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS670 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS670):
            if (defined (UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS670 = 1
            else:
                NDIS_SUPPORT_NDIS670 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS670)


        # Something to identify new (Windows Server 2016 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS660 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS660):
            if (defined (UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS660 = 1
            else:
                NDIS_SUPPORT_NDIS660 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS660)


        # Something to identify new (Windows 10 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS651 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS651):
            if (defined (UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS651 = 1
            else:
                NDIS_SUPPORT_NDIS651 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS651)


        # Something to identify new (Windows 10 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS650 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS650):
            if (defined (UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS650 = 1
            else:
                NDIS_SUPPORT_NDIS650 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS650)


        # Something to identify new (Win8.1 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS640 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS640):
            if (defined (UM_NDIS640) or defined(UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS640 = 1
            else:
                NDIS_SUPPORT_NDIS640 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS640)


        # Something to identify new (Win8 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS630 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS630):
            if (defined (UM_NDIS630) or defined(UM_NDIS640) or defined(UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS630 = 1
            else:
                NDIS_SUPPORT_NDIS630 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS630)


        # Something to identify new (Win7 and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS620 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS620):
            if (defined (UM_NDIS620) or defined(UM_NDIS630) or defined(UM_NDIS640) or defined(UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS620 = 1
            else:
                NDIS_SUPPORT_NDIS620 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS620)


        # Something to identify new (LH Server and up) applications.
        # User-mode only. For drivers, NDIS_SUPPORT_NDIS61 is already
        # defined in ndismain.w.
        if not defined(NDIS_SUPPORT_NDIS61):
            if (defined (UM_NDIS61) or defined (UM_NDIS620) or defined(UM_NDIS630) or defined(UM_NDIS640) or defined(UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS61 = 1
            else:
                NDIS_SUPPORT_NDIS61 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS61)

        if not defined(NDIS_SUPPORT_NDIS6):
            if (defined(UM_NDIS60) or defined (UM_NDIS61) or defined (UM_NDIS620) or defined(UM_NDIS630) or defined(UM_NDIS640) or defined(UM_NDIS650) or defined(UM_NDIS651) or defined(UM_NDIS660) or defined(UM_NDIS670) or defined(UM_NDIS680) or defined(UM_NDIS681)):
                NDIS_SUPPORT_NDIS6 = 1
            else:
                NDIS_SUPPORT_NDIS6 = 0
            # END IF

        # END IF   not defined(NDIS_SUPPORT_NDIS6)


        # Device Name - this string is the name of the device. It is the name
        # that should be passed to NtOpenFile when accessing the device.
        DD_NDIS_DEVICE_NAME = "\\Device\\NDIS"


        # NtDeviceIoControlFile IoControlCode values for this device.
        # Warning: Remember that the low two bits of the code specify how the
        # buffers are passed to the drivernot
        def _NDIS_CONTROL_CODE(request, method):
            return (
                CTL_CODEFILE_DEVICE_PHYSICAL_NETCARD,
                request,
                method,
                FILE_ANY_ACCESS
            )
        IOCTL_NDIS_QUERY_GLOBAL_STATS = (
            _NDIS_CONTROL_CODE(0,
            METHOD_OUT_DIRECT)
        )
        IOCTL_NDIS_QUERY_ALL_STATS = _NDIS_CONTROL_CODE(1,METHOD_OUT_DIRECT)
        IOCTL_NDIS_DO_PNP_OPERATION = _NDIS_CONTROL_CODE(2,METHOD_BUFFERED)
        IOCTL_NDIS_QUERY_SELECTED_STATS = (
            _NDIS_CONTROL_CODE(3,
            METHOD_OUT_DIRECT)
        )
        IOCTL_NDIS_ENUMERATE_INTERFACES = (
            _NDIS_CONTROL_CODE(4,
            METHOD_BUFFERED)
        )
        IOCTL_NDIS_ADD_TDI_DEVICE = _NDIS_CONTROL_CODE(5,METHOD_BUFFERED)
        IOCTL_NDIS_GET_LOG_DATA = _NDIS_CONTROL_CODE(7,METHOD_OUT_DIRECT)
        IOCTL_NDIS_GET_VERSION = _NDIS_CONTROL_CODE(8,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED1 = _NDIS_CONTROL_CODE(9,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED2 = _NDIS_CONTROL_CODE(0xA,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED3 = _NDIS_CONTROL_CODE(0xB,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED4 = _NDIS_CONTROL_CODE(0xC,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED5 = CTL_CODE(
            (
            FILE_DEVICE_PHYSICAL_NETCARD,
            0xD,
            METHOD_BUFFERED,
            FILE_ANY_ACCESS,
            ),
        )
        IOCTL_NDIS_RESERVED6 = CTL_CODE(
            (
            FILE_DEVICE_PHYSICAL_NETCARD,
            0xE,
            METHOD_BUFFERED,
            FILE_WRITE_ACCESS,
            ),
        )
        IOCTL_NDIS_RESERVED7 = _NDIS_CONTROL_CODE(0xF,METHOD_OUT_DIRECT)
        IOCTL_NDIS_RESERVED8 = _NDIS_CONTROL_CODE(0x10,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED9 = _NDIS_CONTROL_CODE(0x11,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED10 = _NDIS_CONTROL_CODE(0x12,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED11 = _NDIS_CONTROL_CODE(0x13,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED12 = _NDIS_CONTROL_CODE(0x14,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED13 = _NDIS_CONTROL_CODE(0x15,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED14 = _NDIS_CONTROL_CODE(0x16,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED15 = _NDIS_CONTROL_CODE(0x17,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED16 = _NDIS_CONTROL_CODE(0x18,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED17 = _NDIS_CONTROL_CODE(0x19,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED18 = _NDIS_CONTROL_CODE(0x1A,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED19 = _NDIS_CONTROL_CODE(0x1B,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED20 = _NDIS_CONTROL_CODE(0x1C,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED21 = _NDIS_CONTROL_CODE(0x1D,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED22 = _NDIS_CONTROL_CODE(0x1E,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED23 = _NDIS_CONTROL_CODE(0x1F,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED24 = _NDIS_CONTROL_CODE(0x20,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED25 = _NDIS_CONTROL_CODE(0x21,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED26 = _NDIS_CONTROL_CODE(0x22,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED27 = _NDIS_CONTROL_CODE(0x23,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED28 = _NDIS_CONTROL_CODE(0x24,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED29 = _NDIS_CONTROL_CODE(0x25,METHOD_BUFFERED)
        IOCTL_NDIS_RESERVED30 = _NDIS_CONTROL_CODE(0x26,METHOD_BUFFERED)

        # NtDeviceIoControlFile InputBuffer/OutputBuffer record structures for
        # this device.
        # This is the type of an NDIS OID value.
        NDIS_OID = ULONG
        PNDIS_OID = POINTER(ULONG)

        # IOCTL_NDIS_QUERY_ALL_STATS returns a sequence of these, packed
        # together. This structure is unaligned because not all statistics
        # have a length that is a ULONG multiple.
        _NDIS_STATISTICS_VALUE._fields_ = [
            ('Oid', NDIS_OID),
            ('DataLength', ULONG),
            # variable length
            ('Data', UCHAR * 1),
        ]
        UNALIGNED *PNDIS_STATISTICS_VALUE = NDIS_STATISTICS_VALUE
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # typedef _Struct_size_bytes_(Length) struct _NDIS_STATISTICS_VALUE_EX
            # {
            # NDIS_OID    Oid;
            Length = CALLBACK(
                _Struct_size_bytes_,
                ,
            )
            # the length of the OID data            # the length of this instance of NDIS_STATISTICS_VALUE_EX            # variable length
            UNALIGNED *PNDIS_STATISTICS_VALUE_EX = NDIS_STATISTICS_VALUE_EX
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)
        # Structure used to define a self-contained variable data structure
        _NDIS_VAR_DATA_DESC._fields_ = [
            # of octects of data
            ('Length', USHORT),
            # of octects available
            ('MaximumLength', USHORT),
            # Offset of data relative to the descriptor
            ('Offset', ULONG_PTR),
        ]
        if not defined(GUID_DEFINED):
            from guiddef_h import * # NOQA
        # END IF   not GUID_DEFINED

        # NDIS Object Types used in NDIS_OBJECT_HEADER
        NDIS_OBJECT_TYPE_DEFAULT = 0x80        # used when object type is implicit in the API call
        NDIS_OBJECT_TYPE_MINIPORT_INIT_PARAMETERS = 0x81        # used by NDIS in NDIS_MINIPORT_INIT_PARAMETERS
        NDIS_OBJECT_TYPE_SG_DMA_DESCRIPTION = 0x83        # used by miniport drivers in NDIS_SG_DMA_DESCRIPTION
        NDIS_OBJECT_TYPE_MINIPORT_INTERRUPT = 0x84        # used by miniport drivers in NDIS_MINIPORT_INTERRUPT_EX
        NDIS_OBJECT_TYPE_DEVICE_OBJECT_ATTRIBUTES = 0x85        # used by miniport or filter drivers in NDIS_DEVICE_OBJECT_ATTRIBUTES
        NDIS_OBJECT_TYPE_BIND_PARAMETERS = 0x86        # used by NDIS in NDIS_BIND_PARAMETERS
        NDIS_OBJECT_TYPE_OPEN_PARAMETERS = 0x87        # used by protocols in NDIS_OPEN_PARAMETERS
        NDIS_OBJECT_TYPE_RSS_CAPABILITIES = 0x88        # used by miniport in NDIS_RECEIVE_SCALE_CAPABILITIES
        NDIS_OBJECT_TYPE_RSS_PARAMETERS = 0x89        # used by miniport and protocol in NDIS_RECEIVE_SCALE_PARAMETERS
        NDIS_OBJECT_TYPE_MINIPORT_DRIVER_CHARACTERISTICS = 0x8A
        NDIS_OBJECT_TYPE_FILTER_DRIVER_CHARACTERISTICS = 0x8B
        NDIS_OBJECT_TYPE_FILTER_PARTIAL_CHARACTERISTICS = 0x8C
        NDIS_OBJECT_TYPE_FILTER_ATTRIBUTES = 0x8D
        NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = 0x8E
        NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = (
            0x8F
        )
        NDIS_OBJECT_TYPE_CO_PROTOCOL_CHARACTERISTICS = 0x90
        NDIS_OBJECT_TYPE_CO_MINIPORT_CHARACTERISTICS = 0x91
        NDIS_OBJECT_TYPE_MINIPORT_PNP_CHARACTERISTICS = 0x92
        NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_CHARACTERISTICS = 0x93
        NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_CHARACTERISTICS = 0x94
        NDIS_OBJECT_TYPE_PROTOCOL_DRIVER_CHARACTERISTICS = 0x95
        NDIS_OBJECT_TYPE_REQUEST_EX = 0x96
        NDIS_OBJECT_TYPE_OID_REQUEST = 0x96
        NDIS_OBJECT_TYPE_TIMER_CHARACTERISTICS = 0x97
        NDIS_OBJECT_TYPE_STATUS_INDICATION = 0x98
        NDIS_OBJECT_TYPE_FILTER_ATTACH_PARAMETERS = 0x99
        NDIS_OBJECT_TYPE_FILTER_PAUSE_PARAMETERS = 0x9A
        NDIS_OBJECT_TYPE_FILTER_RESTART_PARAMETERS = 0x9B
        NDIS_OBJECT_TYPE_PORT_CHARACTERISTICS = 0x9C
        NDIS_OBJECT_TYPE_PORT_STATE = 0x9D
        NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES = 0x9E
        NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES = 0x9F
        NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES = 0xA0
        NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES = 0xA1
        NDIS_OBJECT_TYPE_RESTART_GENERAL_ATTRIBUTES = 0xA2
        NDIS_OBJECT_TYPE_PROTOCOL_RESTART_PARAMETERS = 0xA3
        NDIS_OBJECT_TYPE_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES = 0xA4
        NDIS_OBJECT_TYPE_CO_CALL_MANAGER_OPTIONAL_HANDLERS = 0xA5
        NDIS_OBJECT_TYPE_CO_CLIENT_OPTIONAL_HANDLERS = 0xA6
        NDIS_OBJECT_TYPE_OFFLOAD = 0xA7
        NDIS_OBJECT_TYPE_OFFLOAD_ENCAPSULATION = 0xA8
        NDIS_OBJECT_TYPE_CONFIGURATION_OBJECT = 0xA9
        NDIS_OBJECT_TYPE_DRIVER_WRAPPER_OBJECT = 0xAA
        if NDIS_SUPPORT_NDIS61:
            NDIS_OBJECT_TYPE_HD_SPLIT_ATTRIBUTES = 0xAB
        # END IF   (NDIS_SUPPORT_NDIS61)

        NDIS_OBJECT_TYPE_NSI_NETWORK_RW_STRUCT = 0xAC
        NDIS_OBJECT_TYPE_NSI_COMPARTMENT_RW_STRUCT = 0xAD
        NDIS_OBJECT_TYPE_NSI_INTERFACE_PERSIST_RW_STRUCT = 0xAE
        if NDIS_SUPPORT_NDIS61:
            NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES = 0xAF
        # END IF   (NDIS_SUPPORT_NDIS61)

        if NDIS_SUPPORT_NDIS620:
            NDIS_OBJECT_TYPE_SHARED_MEMORY_PROVIDER_CHARACTERISTICS = 0xB0
            NDIS_OBJECT_TYPE_RSS_PROCESSOR_INFO = 0xB1
        # END IF   (NDIS_SUPPORT_NDIS620)

        if NDIS_SUPPORT_NDIS630:
            NDIS_OBJECT_TYPE_NDK_PROVIDER_CHARACTERISTICS = 0xB2
            NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NDK_ATTRIBUTES = 0xB3
            NDIS_OBJECT_TYPE_MINIPORT_SS_CHARACTERISTICS = 0xB4
            NDIS_OBJECT_TYPE_QOS_CAPABILITIES = 0xB5
            NDIS_OBJECT_TYPE_QOS_PARAMETERS = 0xB6
            NDIS_OBJECT_TYPE_QOS_CLASSIFICATION_ELEMENT = 0xB7
            NDIS_OBJECT_TYPE_SWITCH_OPTIONAL_HANDLERS = 0xB8
        # END IF   (NDIS_SUPPORT_NDIS630)

        if NDIS_SUPPORT_NDIS650:
            NDIS_OBJECT_TYPE_PD_TRANSMIT_QUEUE = 0xBE
            NDIS_OBJECT_TYPE_PD_RECEIVE_QUEUE = 0xBF
        # END IF   (NDIS_SUPPORT_NDIS650)

        if NDIS_SUPPORT_NDIS650:
            NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES = 0xC5
        # END IF   (NDIS_SUPPORT_NDIS650)

        if NDIS_SUPPORT_NDIS670:
            NDIS_OBJECT_TYPE_MINIPORT_DEVICE_POWER_NOTIFICATION = 0xC6
        # END IF   (NDIS_SUPPORT_NDIS670)


        _NDIS_OBJECT_HEADER._fields_ = [
            ('Type', UCHAR),
            ('Revision', UCHAR),
            ('Size', USHORT),
        ]
        NDIS_OBJECT_REVISION_1 = 1

        # Request types used by NdisRequest; constants are added for
        # all entry points in the MAC, for those that want to create
        # their own internal requests.
        class _NDIS_REQUEST_TYPE(ENUM):
            NdisRequestQueryInformation = 1
            NdisRequestSetInformation = 2
            NdisRequestQueryStatistics = 3
            NdisRequestOpen = 4
            NdisRequestClose = 5
            NdisRequestSend = 6
            NdisRequestTransferData = 7
            NdisRequestReset = 8
            NdisRequestGeneric1 = 9
            NdisRequestGeneric2 = 10
            NdisRequestGeneric3 = 11
            NdisRequestGeneric4 = 12
                if NDIS_SUPPORT_NDIS6:
                    NdisRequestMethod = 13
                # END IF

            NDIS_REQUEST_TYPE = _NDIS_REQUEST_TYPE
            PNDIS_REQUEST_TYPE = POINTER(_NDIS_REQUEST_TYPE)
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # flags for NDIS_STATISTICS_INFO.SupportedStatistics structure
            NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_RCV = 0x00000001
            NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_RCV = 0x00000002
            NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_RCV = 0x00000004
            NDIS_STATISTICS_FLAGS_VALID_BYTES_RCV = 0x00000008
            NDIS_STATISTICS_FLAGS_VALID_RCV_DISCARDS = 0x00000010
            NDIS_STATISTICS_FLAGS_VALID_RCV_ERROR = 0x00000020
            NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_XMIT = 0x00000040
            NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_XMIT = 0x00000080
            NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_XMIT = 0x00000100
            NDIS_STATISTICS_FLAGS_VALID_BYTES_XMIT = 0x00000200
            NDIS_STATISTICS_FLAGS_VALID_XMIT_ERROR = 0x00000400
            NDIS_STATISTICS_FLAGS_VALID_XMIT_DISCARDS = 0x00008000
            NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_RCV = 0x00010000
            NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_RCV = 0x00020000
            NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_RCV = 0x00040000
            NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_XMIT = 0x00080000
            NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_XMIT = 0x00100000
            NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_XMIT = 0x00200000
            NDIS_STATISTICS_INFO_REVISION_1 = 1

            # structure used in OID_GEN_STATISTICS
            _NDIS_STATISTICS_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('SupportedStatistics', ULONG),
                # OID_GEN_RCV_ERROR + OID_GEN_RCV_NO_BUFFER =
                # OID_GEN_RCV_DISCARDS
                ('ifInDiscards', ULONG64),
                # OID_GEN_RCV_ERROR
                ('ifInErrors', ULONG64),
                # OID_GEN_BYTES_RCV = OID_GEN_DIRECTED_BYTES_RCV +
                # OID_GEN_MULTICAST_BYTES_RCV + OID_GEN_BROADCAST_BYTES_RCV
                ('ifHCInOctets', ULONG64),
                # OID_GEN_DIRECTED_FRAMES_RCV
                ('ifHCInUcastPkts', ULONG64),
                # OID_GEN_MULTICAST_FRAMES_RCV
                ('ifHCInMulticastPkts', ULONG64),
                # OID_GEN_BROADCAST_FRAMES_RCV
                ('ifHCInBroadcastPkts', ULONG64),
                # OID_GEN_BYTES_XMIT = OID_GEN_DIRECTED_BYTES_XMIT +
                # OID_GEN_MULTICAST_BYTES_XMIT + OID_GEN_BROADCAST_BYTES_XMIT
                ('ifHCOutOctets', ULONG64),
                # OID_GEN_DIRECTED_FRAMES_XMIT
                ('ifHCOutUcastPkts', ULONG64),
                # OID_GEN_MULTICAST_FRAMES_XMIT
                ('ifHCOutMulticastPkts', ULONG64),
                # OID_GEN_BROADCAST_FRAMES_XMIT
                ('ifHCOutBroadcastPkts', ULONG64),
                # OID_GEN_XMIT_ERROR
                ('ifOutErrors', ULONG64),
                # OID_GEN_XMIT_DISCARDS
                ('ifOutDiscards', ULONG64),
                # OID_GEN_DIRECTED_BYTES_RCV
                ('ifHCInUcastOctets', ULONG64),
                # OID_GEN_MULTICAST_BYTES_RCV
                ('ifHCInMulticastOctets', ULONG64),
                # OID_GEN_BROADCAST_BYTES_RCV
                ('ifHCInBroadcastOctets', ULONG64),
                # OID_GEN_DIRECTED_BYTES_XMIT
                ('ifHCOutUcastOctets', ULONG64),
                # OID_GEN_MULTICAST_BYTES_XMIT
                ('ifHCOutMulticastOctets', ULONG64),
                # OID_GEN_BROADCAST_BYTES_XMIT
                ('ifHCOutBroadcastOctets', ULONG64),
            ]
            NDIS_SIZEOF_STATISTICS_INFO_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_STATISTICS_INFO,
                ifHCOutBroadcastOctets)
            )
            if NDIS_SUPPORT_NDIS630:
                # structure used in OID_TCP_RSC_STATISTICS
                _NDIS_RSC_STATISTICS_INFO._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    # Total number of packets that were coalesced
                    ('CoalescedPkts', ULONG64),
                    # Total number of bytes that were coalesced
                    ('CoalescedOctets', ULONG64),
                    # Total number of coalescing events
                    # (i.e. packets formed from coalescing)
                    ('CoalesceEvents', ULONG64),
                    # Total number of Abort events
                    ('Aborts', ULONG64),
                ]
                NDIS_RSC_STATISTICS_REVISION_1 = 1
                NDIS_SIZEOF_RSC_STATISTICS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RSC_STATISTICS_INFO,
                    Aborts)
                )
            # END IF   (NDIS_SUPPORT_NDIS630)

            # interrupt moderation structures and definitions
            # enum value used in NDIS_INTERRUPT_MODERATION_PARAMETERS structure
            class _NDIS_INTERRUPT_MODERATION(ENUM):
                NdisInterruptModerationUnknown = 1
                NdisInterruptModerationNotSupported = 2
                NdisInterruptModerationEnabled = 3
                NdisInterruptModerationDisabled = 4

            NDIS_INTERRUPT_MODERATION = _NDIS_INTERRUPT_MODERATION
            PNDIS_INTERRUPT_MODERATION = POINTER(_NDIS_INTERRUPT_MODERATION)

            # Bits used in Flags parameter of
            # NDIS_INTERRUPT_MODERATION_PARAMETERS structure:
            NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_RESET = 0x00000001
            NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_REINITIALIZE = 0x00000002

            # structure used in OID_GEN_INTERRUPT_MODERATION
            NDIS_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = 1


            _NDIS_INTERRUPT_MODERATION_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('InterruptModeration', NDIS_INTERRUPT_MODERATION),
            ]
            NDIS_SIZEOF_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_INTERRUPT_MODERATION_PARAMETERS,
                InterruptModeration)
            )

            # structure used in OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES
            NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = 1


            _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TimeoutArrayLength', ULONG),
                ('TimeoutArray', ULONG * 1),
            ]
            NDIS_SIZEOF_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES,
                TimeoutArray)
            )

            # PCI custom properties. used in
            # OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES
            NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = 1
            if ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620):
                NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = 2
            # END IF


            _TEMP__NDIS_PCI_DEVICE_CUSTOM_PROPERTIES = [
                ('Header', NDIS_OBJECT_HEADER),
                # conventional, PCI-X, PCI-E, etc.
                ('DeviceType', UINT32),
                # PCI_DEVICE_CONVENTIONAL_xx or PCIX_MODExxx. valid only for
                # conventional and PCI-X devices
                ('CurrentSpeedAndMode', UINT32),
                # PCI_EXPRESS_MAX_PAYLOAD_SIZE, valid only for PCI-E devices
                ('CurrentPayloadSize', UINT32),
                # PCI_EXPRESS_MAX_PAYLOAD_SIZE, valid only for PCI-E devices
                ('MaxPayloadSize', UINT32),
                # PCI_EXPRESS_MAX_PAYLOAD_SIZE, valid only for PCI-E devices
                ('MaxReadRequestSize', UINT32),
                # PCI_EXPRESS_LINK_SPEED_xxx. valid only for PCI-E devices
                ('CurrentLinkSpeed', UINT32),
                # PCI_EXPRESS_LINK_WIDTH_xx. valid only for PCI-E devices
                ('CurrentLinkWidth', UINT32),
                # PCI_EXPRESS_LINK_SPEED_xxx. valid only for PCI-E devices
                ('MaxLinkSpeed', UINT32),
                # PCI_EXPRESS_LINK_WIDTH_xx. valid only for PCI-E devices
                ('MaxLinkWidth', UINT32),
            ]
            if ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620):
                    _TEMP__NDIS_PCI_DEVICE_CUSTOM_PROPERTIES += [
                    # DevProp_PciExpressDevice_Spec_Version_xx, valid for PCI
                    # -E devices
                    ('PciExpressVersion', UINT32),
                    # DevProp_PciDevice_InterruptType_xx
                    ('InterruptType', UINT32),
                    ('MaxInterruptMessages', UINT32),
                    ]
                # END IF


                    _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES._fields_ = _TEMP__NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
            NDIS_SIZEOF_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_PCI_DEVICE_CUSTOM_PROPERTIES,
                MaxLinkWidth)
            )
            if ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620):
                NDIS_SIZEOF_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PCI_DEVICE_CUSTOM_PROPERTIES,
                    MaxInterruptMessages)
                )
            # END IF

        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        # General Objects
        # Required OIDs
        OID_GEN_SUPPORTED_LIST = 0x00010101
        OID_GEN_HARDWARE_STATUS = 0x00010102
        OID_GEN_MEDIA_SUPPORTED = 0x00010103
        OID_GEN_MEDIA_IN_USE = 0x00010104
        OID_GEN_MAXIMUM_LOOKAHEAD = 0x00010105
        OID_GEN_MAXIMUM_FRAME_SIZE = 0x00010106
        OID_GEN_LINK_SPEED = 0x00010107
        OID_GEN_TRANSMIT_BUFFER_SPACE = 0x00010108
        OID_GEN_RECEIVE_BUFFER_SPACE = 0x00010109
        OID_GEN_TRANSMIT_BLOCK_SIZE = 0x0001010A
        OID_GEN_RECEIVE_BLOCK_SIZE = 0x0001010B
        OID_GEN_VENDOR_ID = 0x0001010C
        OID_GEN_VENDOR_DESCRIPTION = 0x0001010D
        OID_GEN_CURRENT_PACKET_FILTER = 0x0001010E
        OID_GEN_CURRENT_LOOKAHEAD = 0x0001010F
        OID_GEN_DRIVER_VERSION = 0x00010110
        OID_GEN_MAXIMUM_TOTAL_SIZE = 0x00010111
        OID_GEN_PROTOCOL_OPTIONS = 0x00010112
        OID_GEN_MAC_OPTIONS = 0x00010113
        OID_GEN_MEDIA_CONNECT_STATUS = 0x00010114
        OID_GEN_MAXIMUM_SEND_PACKETS = 0x00010115

        # Optional OIDs
        OID_GEN_VENDOR_DRIVER_VERSION = 0x00010116
        OID_GEN_SUPPORTED_GUIDS = 0x00010117
        OID_GEN_NETWORK_LAYER_ADDRESSES = 0x00010118        # Set only
        OID_GEN_TRANSPORT_HEADER_OFFSET = 0x00010119        # Set only
        OID_GEN_MEDIA_CAPABILITIES = 0x00010201
        OID_GEN_PHYSICAL_MEDIUM = 0x00010202
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # new optional for NDIS 6.0
            OID_GEN_RECEIVE_SCALE_CAPABILITIES = 0x00010203            # query only
            OID_GEN_RECEIVE_SCALE_PARAMETERS = 0x00010204            # query and set

            # new for NDIS 6.0. NDIS will handle on behalf of the miniports
            OID_GEN_MAC_ADDRESS = 0x00010205            # query and set
            OID_GEN_MAX_LINK_SPEED = 0x00010206            # query only
            OID_GEN_LINK_STATE = 0x00010207            # query only

            # new and required for NDIS 6 miniports
            OID_GEN_LINK_PARAMETERS = 0x00010208            # set only
            OID_GEN_INTERRUPT_MODERATION = 0x00010209            # query and set
            OID_GEN_NDIS_RESERVED_3 = 0x0001020A
            OID_GEN_NDIS_RESERVED_4 = 0x0001020B
            OID_GEN_NDIS_RESERVED_5 = 0x0001020C

            # Port related OIDs
            OID_GEN_ENUMERATE_PORTS = 0x0001020D            # query only, handled by NDIS
            OID_GEN_PORT_STATE = 0x0001020E            # query only, handled by NDIS
            OID_GEN_PORT_AUTHENTICATION_PARAMETERS = 0x0001020F            # Set only

            # optional OID for NDIS 6 miniports
            OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES = 0x00010210            # query only

            # this OID is handled by NDIS for PCI devices
            OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES = 0x00010211            # query only
            OID_GEN_NDIS_RESERVED_6 = 0x00010212
            OID_GEN_PHYSICAL_MEDIUM_EX = 0x00010213            # query only
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        if ((NTDDI_VERSION >= NTDDI_WIN10_RS3) or NDIS_SUPPORT_NDIS680):
            # RSSv2 standard OID: control scaling parameters
            OID_GEN_RECEIVE_SCALE_PARAMETERS_V2 = 0x00010214            # query and set
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10_RS3) or NDIS_SUPPORT_NDIS680)

        OID_GEN_MACHINE_NAME = 0x0001021A        # set only
        OID_GEN_RNDIS_CONFIG_PARAMETER = 0x0001021B        # Set only
        OID_GEN_VLAN_ID = 0x0001021C
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            OID_GEN_RECEIVE_HASH = 0x0001021F            # query and set
            OID_GEN_MINIPORT_RESTART_ATTRIBUTES = 0x0001021D
            if NDIS_SUPPORT_NDIS61:
                # Optional OID for header data/split
                OID_GEN_HD_SPLIT_PARAMETERS = 0x0001021E                # Set only
                OID_GEN_HD_SPLIT_CURRENT_CONFIG = 0x00010220                # Query only
            # END IF   (NDIS_SUPPORT_NDIS61)

            # the following OIDs are used in querying interfaces
            OID_GEN_PROMISCUOUS_MODE = 0x00010280            # used in querying interfaces
            OID_GEN_LAST_CHANGE = 0x00010281            # used in querying interfaces
            OID_GEN_DISCONTINUITY_TIME = 0x00010282            # used in querying interfaces
            OID_GEN_OPERATIONAL_STATUS = 0x00010283            # used in querying interfaces
            OID_GEN_XMIT_LINK_SPEED = 0x00010284            # used in querying interfaces
            OID_GEN_RCV_LINK_SPEED = 0x00010285            # used in querying interfaces
            OID_GEN_UNKNOWN_PROTOS = 0x00010286            # used in querying interfaces
            OID_GEN_INTERFACE_INFO = 0x00010287            # used in querying interfaces
            OID_GEN_ADMIN_STATUS = 0x00010288            # used in querying interfaces
            OID_GEN_ALIAS = 0x00010289            # used in querying interfaces
            OID_GEN_MEDIA_CONNECT_STATUS_EX = 0x0001028A            # used in querying interfaces
            OID_GEN_LINK_SPEED_EX = 0x0001028B            # used in querying interfaces
            OID_GEN_MEDIA_DUPLEX_STATE = 0x0001028C            # used in querying interfaces
            OID_GEN_IP_OPER_STATUS = 0x0001028D            # used in querying interfaces

            # WWAN specific oids
            OID_WWAN_DRIVER_CAPS = 0x0E010100
            OID_WWAN_DEVICE_CAPS = 0x0E010101
            OID_WWAN_READY_INFO = 0x0E010102
            OID_WWAN_RADIO_STATE = 0x0E010103
            OID_WWAN_PIN = 0x0E010104
            OID_WWAN_PIN_LIST = 0x0E010105
            OID_WWAN_HOME_PROVIDER = 0x0E010106
            OID_WWAN_PREFERRED_PROVIDERS = 0x0E010107
            OID_WWAN_VISIBLE_PROVIDERS = 0x0E010108
            OID_WWAN_REGISTER_STATE = 0x0E010109
            OID_WWAN_PACKET_SERVICE = 0x0E01010A
            OID_WWAN_SIGNAL_STATE = 0x0E01010B
            OID_WWAN_CONNECT = 0x0E01010C
            OID_WWAN_PROVISIONED_CONTEXTS = 0x0E01010D
            OID_WWAN_SERVICE_ACTIVATION = 0x0E01010E
            OID_WWAN_SMS_CONFIGURATION = 0x0E01010F
            OID_WWAN_SMS_READ = 0x0E010110
            OID_WWAN_SMS_SEND = 0x0E010111
            OID_WWAN_SMS_DELETE = 0x0E010112
            OID_WWAN_SMS_STATUS = 0x0E010113
            OID_WWAN_VENDOR_SPECIFIC = 0x0E010114
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        if ((NTDDI_VERSION >= NTDDI_WIN8) or NDIS_SUPPORT_NDIS630):
            # More WWAN specific oids
            OID_WWAN_AUTH_CHALLENGE = 0x0E010115
            OID_WWAN_ENUMERATE_DEVICE_SERVICES = 0x0E010116
            OID_WWAN_SUBSCRIBE_DEVICE_SERVICE_EVENTS = 0x0E010117
            OID_WWAN_DEVICE_SERVICE_COMMAND = 0x0E010118
            OID_WWAN_USSD = 0x0E010119
            OID_WWAN_PIN_EX = 0x0E010121
            OID_WWAN_ENUMERATE_DEVICE_SERVICE_COMMANDS = 0x0E010122
            OID_WWAN_DEVICE_SERVICE_SESSION = 0x0E010123
            OID_WWAN_DEVICE_SERVICE_SESSION_WRITE = 0x0E010124
            OID_WWAN_PREFERRED_MULTICARRIER_PROVIDERS = 0x0E010125
            OID_WWAN_CREATE_MAC = 0x0E010126
            OID_WWAN_DELETE_MAC = 0x0E010127
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN8) or NDIS_SUPPORT_NDIS630)

        if ((NTDDI_VERSION >= NTDDI_WINTHRESHOLD) or NDIS_SUPPORT_NDIS650):
            # More WWAN specific oids
            OID_WWAN_UICC_FILE_STATUS = 0x0E010128
            OID_WWAN_UICC_ACCESS_BINARY = 0x0E010129
            OID_WWAN_UICC_ACCESS_RECORD = 0x0E01012A
            OID_WWAN_PIN_EX2 = 0x0E01012B
            OID_WWAN_MBIM_VERSION = 0x0E01012C
            OID_WWAN_SYS_CAPS = 0x0E01012D
            OID_WWAN_DEVICE_CAPS_EX = 0x0E01012E
            OID_WWAN_SYS_SLOTMAPPINGS = 0x0E01012F
            OID_WWAN_SLOT_INFO_STATUS = 0x0E010130
            OID_WWAN_DEVICE_BINDINGS = 0x0E010131
            OID_WWAN_REGISTER_STATE_EX = 0x0E010132
            OID_WWAN_IMS_VOICE_STATE = 0x0E010133
            OID_WWAN_SIGNAL_STATE_EX = 0x0E010134
            OID_WWAN_LOCATION_STATE = 0x0E010135
            OID_WWAN_NITZ = 0x0E010136
            OID_WWAN_NETWORK_IDLE_HINT = 0x0E010137
        # END IF   ((NTDDI_VERSION >= NTDDI_WINTHRESHOLD) or NDIS_SUPPORT_NDIS650)

        if ((NTDDI_VERSION >= NTDDI_WIN10) or NDIS_SUPPORT_NDIS651):
            # More WWAN specific oids
            OID_WWAN_PRESHUTDOWN = 0x0E010138
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10) or NDIS_SUPPORT_NDIS651)

        if ((NTDDI_VERSION >= NTDDI_WIN10_RS1) or NDIS_SUPPORT_NDIS660):
            # More WWAN specific oids
            OID_WWAN_UICC_ATR = 0x0E010139
            OID_WWAN_UICC_OPEN_CHANNEL = 0x0E01013A
            OID_WWAN_UICC_CLOSE_CHANNEL = 0x0E01013B
            OID_WWAN_UICC_APDU = 0x0E01013C
            OID_WWAN_UICC_TERMINAL_CAPABILITY = 0x0E01013D
            OID_WWAN_PS_MEDIA_CONFIG = 0x0E01013E
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10_RS1) or NDIS_SUPPORT_NDIS660)

        if ((NTDDI_VERSION >= NTDDI_WIN10_RS2) or NDIS_SUPPORT_NDIS670):
            # More WWAN specific oids
            OID_WWAN_SAR_CONFIG = 0x0E01013F
            OID_WWAN_SAR_TRANSMISSION_STATUS = 0x0E010140
            OID_WWAN_NETWORK_BLACKLIST = 0x0E010141
            OID_WWAN_LTE_ATTACH_CONFIG = 0x0E010142
            OID_WWAN_LTE_ATTACH_STATUS = 0x0E010143
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10_RS2) or NDIS_SUPPORT_NDIS670)

        if ((NTDDI_VERSION >= NTDDI_WIN10_RS3) or NDIS_SUPPORT_NDIS680):
            # Even more WWAN specific oids
            OID_WWAN_MODEM_CONFIG_INFO = 0x0E010144
            OID_WWAN_PCO = 0x0E010145
            OID_WWAN_UICC_RESET = 0x0E010146
            OID_WWAN_DEVICE_RESET = 0x0E010147
            OID_WWAN_BASE_STATIONS_INFO = 0x0E010148
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10_RS3) or NDIS_SUPPORT_NDIS680)

        if ((NTDDI_VERSION >= NTDDI_WIN10_RS4) or NDIS_SUPPORT_NDIS680):
            # more WWAN specific oids
            # (may need to restrict to higher NDIS version such as 7.0)
            OID_WWAN_MPDP = 0x0E010149
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN10_RS4) or NDIS_SUPPORT_NDIS680)

        # Required statistics
        OID_GEN_XMIT_OK = 0x00020101
        OID_GEN_RCV_OK = 0x00020102
        OID_GEN_XMIT_ERROR = 0x00020103
        OID_GEN_RCV_ERROR = 0x00020104
        OID_GEN_RCV_NO_BUFFER = 0x00020105
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # mandatory for NDIS 6.0 and higher miniports
            OID_GEN_STATISTICS = 0x00020106
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        # Optional statistics
        OID_GEN_DIRECTED_BYTES_XMIT = 0x00020201
        OID_GEN_DIRECTED_FRAMES_XMIT = 0x00020202
        OID_GEN_MULTICAST_BYTES_XMIT = 0x00020203
        OID_GEN_MULTICAST_FRAMES_XMIT = 0x00020204
        OID_GEN_BROADCAST_BYTES_XMIT = 0x00020205
        OID_GEN_BROADCAST_FRAMES_XMIT = 0x00020206
        OID_GEN_DIRECTED_BYTES_RCV = 0x00020207
        OID_GEN_DIRECTED_FRAMES_RCV = 0x00020208
        OID_GEN_MULTICAST_BYTES_RCV = 0x00020209
        OID_GEN_MULTICAST_FRAMES_RCV = 0x0002020A
        OID_GEN_BROADCAST_BYTES_RCV = 0x0002020B
        OID_GEN_BROADCAST_FRAMES_RCV = 0x0002020C
        OID_GEN_RCV_CRC_ERROR = 0x0002020D
        OID_GEN_TRANSMIT_QUEUE_LENGTH = 0x0002020E
        OID_GEN_GET_TIME_CAPS = 0x0002020F
        OID_GEN_GET_NETCARD_TIME = 0x00020210
        OID_GEN_NETCARD_LOAD = 0x00020211
        OID_GEN_DEVICE_PROFILE = 0x00020212

        # The following are exported by NDIS itself and are only queryable.
        # the time in milliseconds a driver took to initialize.
        OID_GEN_INIT_TIME_MS = 0x00020213

        # the number of times the miniport adapter was reset
        OID_GEN_RESET_COUNTS = 0x00020214

        # the number of timer the miniport reported a media state change
        OID_GEN_MEDIA_SENSE_COUNTS = 0x00020215

        # the friendly name of the adapter
        OID_GEN_FRIENDLY_NAME = 0x00020216

        # returns miniport information such as whether the driver is
        # serialized or not
        # if it supports sending multiple packets, etc. refer to
        # NDIS_MINIPORT_XXX flags
        OID_GEN_NDIS_RESERVED_1 = 0x00020217

        # handled by NDIS to reset the test verification parameters on the
        # miniport
        OID_GEN_NDIS_RESERVED_2 = 0x00020218
        OID_GEN_NDIS_RESERVED_5 = 0x0001020C
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # more optional OIDs new for NDIS 6.0
            OID_GEN_BYTES_RCV = 0x00020219
            OID_GEN_BYTES_XMIT = 0x0002021A
            OID_GEN_RCV_DISCARDS = 0x0002021B
            OID_GEN_XMIT_DISCARDS = 0x0002021C
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        if (NTDDI_VERSION >= NTDDI_WIN8) or NDIS_SUPPORT_NDIS630:
            # Optional OIDs for NDIS 6.30
            OID_TCP_RSC_STATISTICS = 0x0002021D
            OID_GEN_NDIS_RESERVED_7 = 0x0002021E
        # END IF


        # These are connection-oriented general OIDs.
        # These replace the above OIDs for connection-oriented media.
        OID_GEN_CO_SUPPORTED_LIST = OID_GEN_SUPPORTED_LIST
        OID_GEN_CO_HARDWARE_STATUS = OID_GEN_HARDWARE_STATUS
        OID_GEN_CO_MEDIA_SUPPORTED = OID_GEN_MEDIA_SUPPORTED
        OID_GEN_CO_MEDIA_IN_USE = OID_GEN_MEDIA_IN_USE
        OID_GEN_CO_LINK_SPEED = OID_GEN_LINK_SPEED
        OID_GEN_CO_VENDOR_ID = OID_GEN_VENDOR_ID
        OID_GEN_CO_VENDOR_DESCRIPTION = OID_GEN_VENDOR_DESCRIPTION
        OID_GEN_CO_DRIVER_VERSION = OID_GEN_DRIVER_VERSION
        OID_GEN_CO_PROTOCOL_OPTIONS = OID_GEN_PROTOCOL_OPTIONS
        OID_GEN_CO_MAC_OPTIONS = OID_GEN_MAC_OPTIONS
        OID_GEN_CO_MEDIA_CONNECT_STATUS = OID_GEN_MEDIA_CONNECT_STATUS
        OID_GEN_CO_VENDOR_DRIVER_VERSION = OID_GEN_VENDOR_DRIVER_VERSION
        OID_GEN_CO_SUPPORTED_GUIDS = OID_GEN_SUPPORTED_GUIDS
        OID_GEN_CO_GET_TIME_CAPS = OID_GEN_GET_TIME_CAPS
        OID_GEN_CO_GET_NETCARD_TIME = OID_GEN_GET_NETCARD_TIME
        OID_GEN_CO_MINIMUM_LINK_SPEED = 0x00020120

        # These are connection-oriented statistics OIDs.
        OID_GEN_CO_XMIT_PDUS_OK = OID_GEN_XMIT_OK
        OID_GEN_CO_RCV_PDUS_OK = OID_GEN_RCV_OK
        OID_GEN_CO_XMIT_PDUS_ERROR = OID_GEN_XMIT_ERROR
        OID_GEN_CO_RCV_PDUS_ERROR = OID_GEN_RCV_ERROR
        OID_GEN_CO_RCV_PDUS_NO_BUFFER = OID_GEN_RCV_NO_BUFFER
        OID_GEN_CO_RCV_CRC_ERROR = OID_GEN_RCV_CRC_ERROR
        OID_GEN_CO_TRANSMIT_QUEUE_LENGTH = OID_GEN_TRANSMIT_QUEUE_LENGTH
        OID_GEN_CO_BYTES_XMIT = OID_GEN_DIRECTED_BYTES_XMIT
        OID_GEN_CO_BYTES_RCV = OID_GEN_DIRECTED_BYTES_RCV
        OID_GEN_CO_NETCARD_LOAD = OID_GEN_NETCARD_LOAD
        OID_GEN_CO_DEVICE_PROFILE = OID_GEN_DEVICE_PROFILE
        OID_GEN_CO_BYTES_XMIT_OUTSTANDING = 0x00020221

        # 802.3 Objects (Ethernet)
        OID_802_3_PERMANENT_ADDRESS = 0x01010101
        OID_802_3_CURRENT_ADDRESS = 0x01010102
        OID_802_3_MULTICAST_LIST = 0x01010103
        OID_802_3_MAXIMUM_LIST_SIZE = 0x01010104

        # This OID has been deprecated for NDIS 6 drivers.
        OID_802_3_MAC_OPTIONS = 0x01010105        # deprecated

        # This Flag has been deprecated for NDIS 6 drivers.
        NDIS_802_3_MAC_OPTION_PRIORITY = 0x00000001        # deprecated
        OID_802_3_RCV_ERROR_ALIGNMENT = 0x01020101
        OID_802_3_XMIT_ONE_COLLISION = 0x01020102
        OID_802_3_XMIT_MORE_COLLISIONS = 0x01020103
        OID_802_3_XMIT_DEFERRED = 0x01020201
        OID_802_3_XMIT_MAX_COLLISIONS = 0x01020202
        OID_802_3_RCV_OVERRUN = 0x01020203
        OID_802_3_XMIT_UNDERRUN = 0x01020204
        OID_802_3_XMIT_HEARTBEAT_FAILURE = 0x01020205
        OID_802_3_XMIT_TIMES_CRS_LOST = 0x01020206
        OID_802_3_XMIT_LATE_COLLISIONS = 0x01020207
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # new for NDIS 6
            OID_802_3_ADD_MULTICAST_ADDRESS = 0x01010208
            OID_802_3_DELETE_MULTICAST_ADDRESS = 0x01010209
        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        # 802.5 Objects (Token-Ring)
        OID_802_5_PERMANENT_ADDRESS = 0x02010101
        OID_802_5_CURRENT_ADDRESS = 0x02010102
        OID_802_5_CURRENT_FUNCTIONAL = 0x02010103
        OID_802_5_CURRENT_GROUP = 0x02010104
        OID_802_5_LAST_OPEN_STATUS = 0x02010105
        OID_802_5_CURRENT_RING_STATUS = 0x02010106
        OID_802_5_CURRENT_RING_STATE = 0x02010107
        OID_802_5_LINE_ERRORS = 0x02020101
        OID_802_5_LOST_FRAMES = 0x02020102
        OID_802_5_BURST_ERRORS = 0x02020201
        OID_802_5_AC_ERRORS = 0x02020202
        OID_802_5_ABORT_DELIMETERS = 0x02020203
        OID_802_5_FRAME_COPIED_ERRORS = 0x02020204
        OID_802_5_FREQUENCY_ERRORS = 0x02020205
        OID_802_5_TOKEN_ERRORS = 0x02020206
        OID_802_5_INTERNAL_ERRORS = 0x02020207

        # FDDI Objects
        OID_FDDI_LONG_PERMANENT_ADDR = 0x03010101
        OID_FDDI_LONG_CURRENT_ADDR = 0x03010102
        OID_FDDI_LONG_MULTICAST_LIST = 0x03010103
        OID_FDDI_LONG_MAX_LIST_SIZE = 0x03010104
        OID_FDDI_SHORT_PERMANENT_ADDR = 0x03010105
        OID_FDDI_SHORT_CURRENT_ADDR = 0x03010106
        OID_FDDI_SHORT_MULTICAST_LIST = 0x03010107
        OID_FDDI_SHORT_MAX_LIST_SIZE = 0x03010108
        OID_FDDI_ATTACHMENT_TYPE = 0x03020101
        OID_FDDI_UPSTREAM_NODE_LONG = 0x03020102
        OID_FDDI_DOWNSTREAM_NODE_LONG = 0x03020103
        OID_FDDI_FRAME_ERRORS = 0x03020104
        OID_FDDI_FRAMES_LOST = 0x03020105
        OID_FDDI_RING_MGT_STATE = 0x03020106
        OID_FDDI_LCT_FAILURES = 0x03020107
        OID_FDDI_LEM_REJECTS = 0x03020108
        OID_FDDI_LCONNECTION_STATE = 0x03020109
        OID_FDDI_SMT_STATION_ID = 0x03030201
        OID_FDDI_SMT_OP_VERSION_ID = 0x03030202
        OID_FDDI_SMT_HI_VERSION_ID = 0x03030203
        OID_FDDI_SMT_LO_VERSION_ID = 0x03030204
        OID_FDDI_SMT_MANUFACTURER_DATA = 0x03030205
        OID_FDDI_SMT_USER_DATA = 0x03030206
        OID_FDDI_SMT_MIB_VERSION_ID = 0x03030207
        OID_FDDI_SMT_MAC_CT = 0x03030208
        OID_FDDI_SMT_NON_MASTER_CT = 0x03030209
        OID_FDDI_SMT_MASTER_CT = 0x0303020A
        OID_FDDI_SMT_AVAILABLE_PATHS = 0x0303020B
        OID_FDDI_SMT_CONFIG_CAPABILITIES = 0x0303020C
        OID_FDDI_SMT_CONFIG_POLICY = 0x0303020D
        OID_FDDI_SMT_CONNECTION_POLICY = 0x0303020E
        OID_FDDI_SMT_T_NOTIFY = 0x0303020F
        OID_FDDI_SMT_STAT_RPT_POLICY = 0x03030210
        OID_FDDI_SMT_TRACE_MAX_EXPIRATION = 0x03030211
        OID_FDDI_SMT_PORT_INDEXES = 0x03030212
        OID_FDDI_SMT_MAC_INDEXES = 0x03030213
        OID_FDDI_SMT_BYPASS_PRESENT = 0x03030214
        OID_FDDI_SMT_ECM_STATE = 0x03030215
        OID_FDDI_SMT_CF_STATE = 0x03030216
        OID_FDDI_SMT_HOLD_STATE = 0x03030217
        OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = 0x03030218
        OID_FDDI_SMT_STATION_STATUS = 0x03030219
        OID_FDDI_SMT_PEER_WRAP_FLAG = 0x0303021A
        OID_FDDI_SMT_MSG_TIME_STAMP = 0x0303021B
        OID_FDDI_SMT_TRANSITION_TIME_STAMP = 0x0303021C
        OID_FDDI_SMT_SET_COUNT = 0x0303021D
        OID_FDDI_SMT_LAST_SET_STATION_ID = 0x0303021E
        OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = 0x0303021F
        OID_FDDI_MAC_BRIDGE_FUNCTIONS = 0x03030220
        OID_FDDI_MAC_T_MAX_CAPABILITY = 0x03030221
        OID_FDDI_MAC_TVX_CAPABILITY = 0x03030222
        OID_FDDI_MAC_AVAILABLE_PATHS = 0x03030223
        OID_FDDI_MAC_CURRENT_PATH = 0x03030224
        OID_FDDI_MAC_UPSTREAM_NBR = 0x03030225
        OID_FDDI_MAC_DOWNSTREAM_NBR = 0x03030226
        OID_FDDI_MAC_OLD_UPSTREAM_NBR = 0x03030227
        OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = 0x03030228
        OID_FDDI_MAC_DUP_ADDRESS_TEST = 0x03030229
        OID_FDDI_MAC_REQUESTED_PATHS = 0x0303022A
        OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = 0x0303022B
        OID_FDDI_MAC_INDEX = 0x0303022C
        OID_FDDI_MAC_SMT_ADDRESS = 0x0303022D
        OID_FDDI_MAC_LONG_GRP_ADDRESS = 0x0303022E
        OID_FDDI_MAC_SHORT_GRP_ADDRESS = 0x0303022F
        OID_FDDI_MAC_T_REQ = 0x03030230
        OID_FDDI_MAC_T_NEG = 0x03030231
        OID_FDDI_MAC_T_MAX = 0x03030232
        OID_FDDI_MAC_TVX_VALUE = 0x03030233
        OID_FDDI_MAC_T_PRI0 = 0x03030234
        OID_FDDI_MAC_T_PRI1 = 0x03030235
        OID_FDDI_MAC_T_PRI2 = 0x03030236
        OID_FDDI_MAC_T_PRI3 = 0x03030237
        OID_FDDI_MAC_T_PRI4 = 0x03030238
        OID_FDDI_MAC_T_PRI5 = 0x03030239
        OID_FDDI_MAC_T_PRI6 = 0x0303023A
        OID_FDDI_MAC_FRAME_CT = 0x0303023B
        OID_FDDI_MAC_COPIED_CT = 0x0303023C
        OID_FDDI_MAC_TRANSMIT_CT = 0x0303023D
        OID_FDDI_MAC_TOKEN_CT = 0x0303023E
        OID_FDDI_MAC_ERROR_CT = 0x0303023F
        OID_FDDI_MAC_LOST_CT = 0x03030240
        OID_FDDI_MAC_TVX_EXPIRED_CT = 0x03030241
        OID_FDDI_MAC_NOT_COPIED_CT = 0x03030242
        OID_FDDI_MAC_LATE_CT = 0x03030243
        OID_FDDI_MAC_RING_OP_CT = 0x03030244
        OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = 0x03030245
        OID_FDDI_MAC_FRAME_ERROR_RATIO = 0x03030246
        OID_FDDI_MAC_NOT_COPIED_THRESHOLD = 0x03030247
        OID_FDDI_MAC_NOT_COPIED_RATIO = 0x03030248
        OID_FDDI_MAC_RMT_STATE = 0x03030249
        OID_FDDI_MAC_DA_FLAG = 0x0303024A
        OID_FDDI_MAC_UNDA_FLAG = 0x0303024B
        OID_FDDI_MAC_FRAME_ERROR_FLAG = 0x0303024C
        OID_FDDI_MAC_NOT_COPIED_FLAG = 0x0303024D
        OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = 0x0303024E
        OID_FDDI_MAC_HARDWARE_PRESENT = 0x0303024F
        OID_FDDI_MAC_MA_UNITDATA_ENABLE = 0x03030250
        OID_FDDI_PATH_INDEX = 0x03030251
        OID_FDDI_PATH_RING_LATENCY = 0x03030252
        OID_FDDI_PATH_TRACE_STATUS = 0x03030253
        OID_FDDI_PATH_SBA_PAYLOAD = 0x03030254
        OID_FDDI_PATH_SBA_OVERHEAD = 0x03030255
        OID_FDDI_PATH_CONFIGURATION = 0x03030256
        OID_FDDI_PATH_T_R_MODE = 0x03030257
        OID_FDDI_PATH_SBA_AVAILABLE = 0x03030258
        OID_FDDI_PATH_TVX_LOWER_BOUND = 0x03030259
        OID_FDDI_PATH_T_MAX_LOWER_BOUND = 0x0303025A
        OID_FDDI_PATH_MAX_T_REQ = 0x0303025B
        OID_FDDI_PORT_MY_TYPE = 0x0303025C
        OID_FDDI_PORT_NEIGHBOR_TYPE = 0x0303025D
        OID_FDDI_PORT_CONNECTION_POLICIES = 0x0303025E
        OID_FDDI_PORT_MAC_INDICATED = 0x0303025F
        OID_FDDI_PORT_CURRENT_PATH = 0x03030260
        OID_FDDI_PORT_REQUESTED_PATHS = 0x03030261
        OID_FDDI_PORT_MAC_PLACEMENT = 0x03030262
        OID_FDDI_PORT_AVAILABLE_PATHS = 0x03030263
        OID_FDDI_PORT_MAC_LOOP_TIME = 0x03030264
        OID_FDDI_PORT_PMD_CLASS = 0x03030265
        OID_FDDI_PORT_CONNECTION_CAPABILITIES = 0x03030266
        OID_FDDI_PORT_INDEX = 0x03030267
        OID_FDDI_PORT_MAINT_LS = 0x03030268
        OID_FDDI_PORT_BS_FLAG = 0x03030269
        OID_FDDI_PORT_PC_LS = 0x0303026A
        OID_FDDI_PORT_EB_ERROR_CT = 0x0303026B
        OID_FDDI_PORT_LCT_FAIL_CT = 0x0303026C
        OID_FDDI_PORT_LER_ESTIMATE = 0x0303026D
        OID_FDDI_PORT_LEM_REJECT_CT = 0x0303026E
        OID_FDDI_PORT_LEM_CT = 0x0303026F
        OID_FDDI_PORT_LER_CUTOFF = 0x03030270
        OID_FDDI_PORT_LER_ALARM = 0x03030271
        OID_FDDI_PORT_CONNNECT_STATE = 0x03030272
        OID_FDDI_PORT_PCM_STATE = 0x03030273
        OID_FDDI_PORT_PC_WITHHOLD = 0x03030274
        OID_FDDI_PORT_LER_FLAG = 0x03030275
        OID_FDDI_PORT_HARDWARE_PRESENT = 0x03030276
        OID_FDDI_SMT_STATION_ACTION = 0x03030277
        OID_FDDI_PORT_ACTION = 0x03030278
        OID_FDDI_IF_DESCR = 0x03030279
        OID_FDDI_IF_TYPE = 0x0303027A
        OID_FDDI_IF_MTU = 0x0303027B
        OID_FDDI_IF_SPEED = 0x0303027C
        OID_FDDI_IF_PHYS_ADDRESS = 0x0303027D
        OID_FDDI_IF_ADMIN_STATUS = 0x0303027E
        OID_FDDI_IF_OPER_STATUS = 0x0303027F
        OID_FDDI_IF_LAST_CHANGE = 0x03030280
        OID_FDDI_IF_IN_OCTETS = 0x03030281
        OID_FDDI_IF_IN_UCAST_PKTS = 0x03030282
        OID_FDDI_IF_IN_NUCAST_PKTS = 0x03030283
        OID_FDDI_IF_IN_DISCARDS = 0x03030284
        OID_FDDI_IF_IN_ERRORS = 0x03030285
        OID_FDDI_IF_IN_UNKNOWN_PROTOS = 0x03030286
        OID_FDDI_IF_OUT_OCTETS = 0x03030287
        OID_FDDI_IF_OUT_UCAST_PKTS = 0x03030288
        OID_FDDI_IF_OUT_NUCAST_PKTS = 0x03030289
        OID_FDDI_IF_OUT_DISCARDS = 0x0303028A
        OID_FDDI_IF_OUT_ERRORS = 0x0303028B
        OID_FDDI_IF_OUT_QLEN = 0x0303028C
        OID_FDDI_IF_SPECIFIC = 0x0303028D

        # WAN objects
        OID_WAN_PERMANENT_ADDRESS = 0x04010101
        OID_WAN_CURRENT_ADDRESS = 0x04010102
        OID_WAN_QUALITY_OF_SERVICE = 0x04010103
        OID_WAN_PROTOCOL_TYPE = 0x04010104
        OID_WAN_MEDIUM_SUBTYPE = 0x04010105
        OID_WAN_HEADER_FORMAT = 0x04010106
        OID_WAN_GET_INFO = 0x04010107
        OID_WAN_SET_LINK_INFO = 0x04010108
        OID_WAN_GET_LINK_INFO = 0x04010109
        OID_WAN_LINE_COUNT = 0x0401010A
        OID_WAN_PROTOCOL_CAPS = 0x0401010B
        OID_WAN_GET_BRIDGE_INFO = 0x0401020A
        OID_WAN_SET_BRIDGE_INFO = 0x0401020B
        OID_WAN_GET_COMP_INFO = 0x0401020C
        OID_WAN_SET_COMP_INFO = 0x0401020D
        OID_WAN_GET_STATS_INFO = 0x0401020E

        # These are connection-oriented WAN OIDs.
        # These replace the above OIDs for CoNDIS WAN Miniports
        OID_WAN_CO_GET_INFO = 0x04010180
        OID_WAN_CO_SET_LINK_INFO = 0x04010181
        OID_WAN_CO_GET_LINK_INFO = 0x04010182
        OID_WAN_CO_GET_COMP_INFO = 0x04010280
        OID_WAN_CO_SET_COMP_INFO = 0x04010281
        OID_WAN_CO_GET_STATS_INFO = 0x04010282

        # LocalTalk objects
        OID_LTALK_CURRENT_NODE_ID = 0x05010102
        OID_LTALK_IN_BROADCASTS = 0x05020101
        OID_LTALK_IN_LENGTH_ERRORS = 0x05020102
        OID_LTALK_OUT_NO_HANDLERS = 0x05020201
        OID_LTALK_COLLISIONS = 0x05020202
        OID_LTALK_DEFERS = 0x05020203
        OID_LTALK_NO_DATA_ERRORS = 0x05020204
        OID_LTALK_RANDOM_CTS_ERRORS = 0x05020205
        OID_LTALK_FCS_ERRORS = 0x05020206

        # Arcnet objects
        OID_ARCNET_PERMANENT_ADDRESS = 0x06010101
        OID_ARCNET_CURRENT_ADDRESS = 0x06010102
        OID_ARCNET_RECONFIGURATIONS = 0x06020201

        # TAPI objects
        OID_TAPI_ACCEPT = 0x07030101
        OID_TAPI_ANSWER = 0x07030102
        OID_TAPI_CLOSE = 0x07030103
        OID_TAPI_CLOSE_CALL = 0x07030104
        OID_TAPI_CONDITIONAL_MEDIA_DETECTION = 0x07030105
        OID_TAPI_CONFIG_DIALOG = 0x07030106
        OID_TAPI_DEV_SPECIFIC = 0x07030107
        OID_TAPI_DIAL = 0x07030108
        OID_TAPI_DROP = 0x07030109
        OID_TAPI_GET_ADDRESS_CAPS = 0x0703010A
        OID_TAPI_GET_ADDRESS_ID = 0x0703010B
        OID_TAPI_GET_ADDRESS_STATUS = 0x0703010C
        OID_TAPI_GET_CALL_ADDRESS_ID = 0x0703010D
        OID_TAPI_GET_CALL_INFO = 0x0703010E
        OID_TAPI_GET_CALL_STATUS = 0x0703010F
        OID_TAPI_GET_DEV_CAPS = 0x07030110
        OID_TAPI_GET_DEV_CONFIG = 0x07030111
        OID_TAPI_GET_EXTENSION_ID = 0x07030112
        OID_TAPI_GET_ID = 0x07030113
        OID_TAPI_GET_LINE_DEV_STATUS = 0x07030114
        OID_TAPI_MAKE_CALL = 0x07030115
        OID_TAPI_NEGOTIATE_EXT_VERSION = 0x07030116
        OID_TAPI_OPEN = 0x07030117
        OID_TAPI_PROVIDER_INITIALIZE = 0x07030118
        OID_TAPI_PROVIDER_SHUTDOWN = 0x07030119
        OID_TAPI_SECURE_CALL = 0x0703011A
        OID_TAPI_SELECT_EXT_VERSION = 0x0703011B
        OID_TAPI_SEND_USER_USER_INFO = 0x0703011C
        OID_TAPI_SET_APP_SPECIFIC = 0x0703011D
        OID_TAPI_SET_CALL_PARAMS = 0x0703011E
        OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = 0x0703011F
        OID_TAPI_SET_DEV_CONFIG = 0x07030120
        OID_TAPI_SET_MEDIA_MODE = 0x07030121
        OID_TAPI_SET_STATUS_MESSAGES = 0x07030122
        OID_TAPI_GATHER_DIGITS = 0x07030123
        OID_TAPI_MONITOR_DIGITS = 0x07030124

        # ATM Connection Oriented OIDs
        OID_ATM_SUPPORTED_VC_RATES = 0x08010101
        OID_ATM_SUPPORTED_SERVICE_CATEGORY = 0x08010102
        OID_ATM_SUPPORTED_AAL_TYPES = 0x08010103
        OID_ATM_HW_CURRENT_ADDRESS = 0x08010104
        OID_ATM_MAX_ACTIVE_VCS = 0x08010105
        OID_ATM_MAX_ACTIVE_VCI_BITS = 0x08010106
        OID_ATM_MAX_ACTIVE_VPI_BITS = 0x08010107
        OID_ATM_MAX_AAL0_PACKET_SIZE = 0x08010108
        OID_ATM_MAX_AAL1_PACKET_SIZE = 0x08010109
        OID_ATM_MAX_AAL34_PACKET_SIZE = 0x0801010A
        OID_ATM_MAX_AAL5_PACKET_SIZE = 0x0801010B
        OID_ATM_SIGNALING_VPIVCI = 0x08010201
        OID_ATM_ASSIGNED_VPI = 0x08010202
        OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = 0x08010203
        OID_ATM_RELEASE_ACCESS_NET_RESOURCES = 0x08010204
        OID_ATM_ILMI_VPIVCI = 0x08010205
        OID_ATM_DIGITAL_BROADCAST_VPIVCI = 0x08010206
        OID_ATM_GET_NEAREST_FLOW = 0x08010207
        OID_ATM_ALIGNMENT_REQUIRED = 0x08010208
        OID_ATM_LECS_ADDRESS = 0x08010209
        OID_ATM_SERVICE_ADDRESS = 0x0801020A
        OID_ATM_CALL_PROCEEDING = 0x0801020B        # UNI 4.0
        OID_ATM_CALL_ALERTING = 0x0801020C        # UNI 4.0
        OID_ATM_PARTY_ALERTING = 0x0801020D        # UNI 4.0
        OID_ATM_CALL_NOTIFY = 0x0801020E        # UNI 4.0
        OID_ATM_MY_IP_NM_ADDRESS = 0x0801020F

        # ATM specific statistics OIDs.
        OID_ATM_RCV_CELLS_OK = 0x08020101
        OID_ATM_XMIT_CELLS_OK = 0x08020102
        OID_ATM_RCV_CELLS_DROPPED = 0x08020103
        OID_ATM_RCV_INVALID_VPI_VCI = 0x08020201
        OID_ATM_CELLS_HEC_ERROR = 0x08020202
        OID_ATM_RCV_REASSEMBLY_ERROR = 0x08020203

        # IEEE 802.11 OIDs
        OID_802_11_BSSID = 0x0D010101
        OID_802_11_SSID = 0x0D010102
        OID_802_11_NETWORK_TYPES_SUPPORTED = 0x0D010203
        OID_802_11_NETWORK_TYPE_IN_USE = 0x0D010204
        OID_802_11_TX_POWER_LEVEL = 0x0D010205
        OID_802_11_RSSI = 0x0D010206
        OID_802_11_RSSI_TRIGGER = 0x0D010207
        OID_802_11_INFRASTRUCTURE_MODE = 0x0D010108
        OID_802_11_FRAGMENTATION_THRESHOLD = 0x0D010209
        OID_802_11_RTS_THRESHOLD = 0x0D01020A
        OID_802_11_NUMBER_OF_ANTENNAS = 0x0D01020B
        OID_802_11_RX_ANTENNA_SELECTED = 0x0D01020C
        OID_802_11_TX_ANTENNA_SELECTED = 0x0D01020D
        OID_802_11_SUPPORTED_RATES = 0x0D01020E
        OID_802_11_DESIRED_RATES = 0x0D010210
        OID_802_11_CONFIGURATION = 0x0D010211
        OID_802_11_STATISTICS = 0x0D020212
        OID_802_11_ADD_WEP = 0x0D010113
        OID_802_11_REMOVE_WEP = 0x0D010114
        OID_802_11_DISASSOCIATE = 0x0D010115
        OID_802_11_POWER_MODE = 0x0D010216
        OID_802_11_BSSID_LIST = 0x0D010217
        OID_802_11_AUTHENTICATION_MODE = 0x0D010118
        OID_802_11_PRIVACY_FILTER = 0x0D010119
        OID_802_11_BSSID_LIST_SCAN = 0x0D01011A
        OID_802_11_WEP_STATUS = 0x0D01011B

        # Renamed to reflect better the extended set of encryption status
        OID_802_11_ENCRYPTION_STATUS = OID_802_11_WEP_STATUS
        OID_802_11_RELOAD_DEFAULTS = 0x0D01011C

        # Added to allow key mapping and default keys
        OID_802_11_ADD_KEY = 0x0D01011D
        OID_802_11_REMOVE_KEY = 0x0D01011E
        OID_802_11_ASSOCIATION_INFORMATION = 0x0D01011F
        OID_802_11_TEST = 0x0D010120
        OID_802_11_MEDIA_STREAM_MODE = 0x0D010121
        OID_802_11_CAPABILITY = 0x0D010122
        OID_802_11_PMKID = 0x0D010123
        OID_802_11_NON_BCAST_SSID_LIST = 0x0D010124
        OID_802_11_RADIO_STATUS = 0x0D010125

        # some of well known Ethernet frame types (in big endian notation)
        NDIS_ETH_TYPE_IPV4 = 0x0800        # IPV4
        NDIS_ETH_TYPE_ARP = 0x0806        # ARP
        NDIS_ETH_TYPE_IPV6 = 0x86DD        # IPV6
        NDIS_ETH_TYPE_802_1X = 0x888E        # 802.1x
        NDIS_ETH_TYPE_802_1Q = 0x8100        # 802.1p
        NDIS_ETH_TYPE_SLOW_PROTOCOL = 0x8809        # Slow protocols (LACP, etc.)
        NDIS_802_11_LENGTH_SSID = 32
        NDIS_802_11_LENGTH_RATES = 8
        NDIS_802_11_LENGTH_RATES_EX = 16

        # IEEE 802.11 Structures and definitions
        # new types for Media Specific Indications
        class _NDIS_802_11_STATUS_TYPE(ENUM):
            Ndis802_11StatusType_Authentication = 1
            Ndis802_11StatusType_MediaStreamMode = 2
            Ndis802_11StatusType_PMKID_CandidateList = 3
            Ndis802_11StatusTypeMax = 4

        NDIS_802_11_STATUS_TYPE = _NDIS_802_11_STATUS_TYPE
        PNDIS_802_11_STATUS_TYPE = POINTER(_NDIS_802_11_STATUS_TYPE)
        NDIS_802_11_MAC_ADDRESS = UCHAR * 6

        _NDIS_802_11_STATUS_INDICATION._fields_ = [
            ('StatusType', NDIS_802_11_STATUS_TYPE),
        ]

        # mask for authentication/integrity fields
        NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS = 0x0F
        NDIS_802_11_AUTH_REQUEST_REAUTH = 0x01
        NDIS_802_11_AUTH_REQUEST_KEYUPDATE = 0x02
        NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR = 0x06
        NDIS_802_11_AUTH_REQUEST_GROUP_ERROR = 0x0E


        _NDIS_802_11_AUTHENTICATION_REQUEST._fields_ = [
            # Length of structure
            ('Length', ULONG),
            ('Bssid', NDIS_802_11_MAC_ADDRESS),
            ('Flags', ULONG),
        ]

        # Added new types for PMKID Candidate lists.
        _PMKID_CANDIDATE._fields_ = [
            ('BSSID', NDIS_802_11_MAC_ADDRESS),
            ('Flags', ULONG),
        ]

        _NDIS_802_11_PMKID_CANDIDATE_LIST._fields_ = [
            # Version of the structure
            ('Version', ULONG),
            # No. of pmkid candidates
            ('NumCandidates', ULONG),
            ('CandidateList', PMKID_CANDIDATE * 1),
        ]

        # Flags for PMKID Candidate list structure
        NDIS_802_11_PMKID_CANDIDATE_PREAUTH_ENABLED = 0x01

        # Added new types for OFDM 5G and 2.4G
        class _NDIS_802_11_NETWORK_TYPE(ENUM):
            Ndis802_11FH = 1
            Ndis802_11DS = 2
            Ndis802_11OFDM5 = 3
            Ndis802_11OFDM24 = 4
            Ndis802_11Automode = 5
            Ndis802_11NetworkTypeMax = 6

        NDIS_802_11_NETWORK_TYPE = _NDIS_802_11_NETWORK_TYPE
        PNDIS_802_11_NETWORK_TYPE = POINTER(_NDIS_802_11_NETWORK_TYPE)

        _NDIS_802_11_NETWORK_TYPE_LIST._fields_ = [
            # in list below, at least 1
            ('NumberOfItems', ULONG),
            ('NetworkType', NDIS_802_11_NETWORK_TYPE * 1),
        ]


        class _NDIS_802_11_POWER_MODE(ENUM):
            Ndis802_11PowerModeCAM = 1
            Ndis802_11PowerModeMAX_PSP = 2
            Ndis802_11PowerModeFast_PSP = 3
            Ndis802_11PowerModeMax = 4

        NDIS_802_11_POWER_MODE = _NDIS_802_11_POWER_MODE
        PNDIS_802_11_POWER_MODE = POINTER(_NDIS_802_11_POWER_MODE)

        # in milliwatts
        NDIS_802_11_TX_POWER_LEVEL = ULONG

        # Received Signal Strength Indication
        # in dBm
        NDIS_802_11_RSSI = LONG

        _NDIS_802_11_CONFIGURATION_FH._fields_ = [
            # Length of structure
            ('Length', ULONG),
            # As defined by 802.11, MSB set
            ('HopPattern', ULONG),
            # to one if non-802.11
            ('HopSet', ULONG),
            # units are Kusec
            ('DwellTime', ULONG),
        ]

        _NDIS_802_11_CONFIGURATION._fields_ = [
            # Length of structure
            ('Length', ULONG),
            # units are Kusec
            ('BeaconPeriod', ULONG),
            # units are Kusec
            ('ATIMWindow', ULONG),
            # Frequency, units are kHz
            ('DSConfig', ULONG),
            ('FHConfig', NDIS_802_11_CONFIGURATION_FH),
        ]

        _NDIS_802_11_STATISTICS._fields_ = [
            # Length of structure
            ('Length', ULONG),
            ('TransmittedFragmentCount', LARGE_INTEGER),
            ('MulticastTransmittedFrameCount', LARGE_INTEGER),
            ('FailedCount', LARGE_INTEGER),
            ('RetryCount', LARGE_INTEGER),
            ('MultipleRetryCount', LARGE_INTEGER),
            ('RTSSuccessCount', LARGE_INTEGER),
            ('RTSFailureCount', LARGE_INTEGER),
            ('ACKFailureCount', LARGE_INTEGER),
            ('FrameDuplicateCount', LARGE_INTEGER),
            ('ReceivedFragmentCount', LARGE_INTEGER),
            ('MulticastReceivedFrameCount', LARGE_INTEGER),
            ('FCSErrorCount', LARGE_INTEGER),
            ('TKIPLocalMICFailures', LARGE_INTEGER),
            ('TKIPICVErrorCount', LARGE_INTEGER),
            ('TKIPCounterMeasuresInvoked', LARGE_INTEGER),
            ('TKIPReplays', LARGE_INTEGER),
            ('CCMPFormatErrors', LARGE_INTEGER),
            ('CCMPReplays', LARGE_INTEGER),
            ('CCMPDecryptErrors', LARGE_INTEGER),
            ('FourWayHandshakeFailures', LARGE_INTEGER),
            ('WEPUndecryptableCount', LARGE_INTEGER),
            ('WEPICVErrorCount', LARGE_INTEGER),
            ('DecryptSuccessCount', LARGE_INTEGER),
            ('DecryptFailureCount', LARGE_INTEGER),
        ]
        NDIS_802_11_KEY_INDEX = ULONG
        NDIS_802_11_KEY_RSC = ULONGLONG

        # Key mapping keys require a BSSID
        _NDIS_802_11_KEY._fields_ = [
            # Length of this structure
            ('Length', ULONG),
            ('KeyIndex', ULONG),
            # length of key in bytes
            ('KeyLength', ULONG),
            ('BSSID', NDIS_802_11_MAC_ADDRESS),
            ('KeyRSC', NDIS_802_11_KEY_RSC),
            # variable length depending on above field
            ('KeyMaterial', UCHAR * 1),
        ]

        _NDIS_802_11_REMOVE_KEY._fields_ = [
            # Length of this structure
            ('Length', ULONG),
            ('KeyIndex', ULONG),
            ('BSSID', NDIS_802_11_MAC_ADDRESS),
        ]

        _NDIS_802_11_WEP._fields_ = [
            # Length of this structure
            ('Length', ULONG),
            # 0 is the per-client key, 1-N are the
            ('KeyIndex', ULONG),
            # length of key in bytes
            ('KeyLength', ULONG),
            # variable length depending on above field
            ('KeyMaterial', UCHAR * 1),
        ]


        class _NDIS_802_11_NETWORK_INFRASTRUCTURE(ENUM):
            Ndis802_11IBSS = 1
            Ndis802_11Infrastructure = 2
            Ndis802_11AutoUnknown = 3
            Ndis802_11InfrastructureMax = 4

        NDIS_802_11_NETWORK_INFRASTRUCTURE = _NDIS_802_11_NETWORK_INFRASTRUCTURE
        PNDIS_802_11_NETWORK_INFRASTRUCTURE = POINTER(_NDIS_802_11_NETWORK_INFRASTRUCTURE)

        # Add new authentication modes
        class _NDIS_802_11_AUTHENTICATION_MODE(ENUM):
            Ndis802_11AuthModeOpen = 1
            Ndis802_11AuthModeShared = 2
            Ndis802_11AuthModeAutoSwitch = 3
            Ndis802_11AuthModeWPA = 4
            Ndis802_11AuthModeWPAPSK = 5
            Ndis802_11AuthModeWPANone = 6
            Ndis802_11AuthModeWPA2 = 7
            Ndis802_11AuthModeWPA2PSK = 8
            Ndis802_11AuthModeMax = 9

        NDIS_802_11_AUTHENTICATION_MODE = _NDIS_802_11_AUTHENTICATION_MODE
        PNDIS_802_11_AUTHENTICATION_MODE = POINTER(_NDIS_802_11_AUTHENTICATION_MODE)

        # Set of 8 data rates
        NDIS_802_11_RATES = UCHAR * NDIS_802_11_LENGTH_RATES

        # Set of 16 data rates
        NDIS_802_11_RATES_EX = UCHAR * NDIS_802_11_LENGTH_RATES_EX

        _NDIS_802_11_SSID._fields_ = [
            # length of SSID field below, in bytes;
            ('SsidLength', ULONG),
            # SSID information field
            ('Ssid', UCHAR * NDIS_802_11_LENGTH_SSID),
        ]

        _NDIS_WLAN_BSSID._fields_ = [
            # Length of this structure
            ('Length', ULONG),
            # BSSID
            ('MacAddress', NDIS_802_11_MAC_ADDRESS),
            ('Reserved', UCHAR * 2),
            # SSID
            ('Ssid', NDIS_802_11_SSID),
            # WEP encryption requirement
            ('Privacy', ULONG),
            # receive signal
            ('Rssi', NDIS_802_11_RSSI),
            # strength in dBm
            ('NetworkTypeInUse', NDIS_802_11_NETWORK_TYPE),
            ('Configuration', NDIS_802_11_CONFIGURATION),
            ('InfrastructureMode', NDIS_802_11_NETWORK_INFRASTRUCTURE),
            ('SupportedRates', NDIS_802_11_RATES),
        ]

        _NDIS_802_11_BSSID_LIST._fields_ = [
            # in list below, at least 1
            ('NumberOfItems', ULONG),
            ('Bssid', NDIS_WLAN_BSSID * 1),
        ]

        # Added Capabilities, IELength and IEs for each BSSID
        _NDIS_WLAN_BSSID_EX._fields_ = [
            # Length of this structure
            ('Length', ULONG),
            # BSSID
            ('MacAddress', NDIS_802_11_MAC_ADDRESS),
            ('Reserved', UCHAR * 2),
            # SSID
            ('Ssid', NDIS_802_11_SSID),
            # WEP encryption requirement
            ('Privacy', ULONG),
            # receive signal
            ('Rssi', NDIS_802_11_RSSI),
            # strength in dBm
            ('NetworkTypeInUse', NDIS_802_11_NETWORK_TYPE),
            ('Configuration', NDIS_802_11_CONFIGURATION),
            ('InfrastructureMode', NDIS_802_11_NETWORK_INFRASTRUCTURE),
            ('SupportedRates', NDIS_802_11_RATES_EX),
            ('IELength', ULONG),
            ('IEs', UCHAR * 1),
        ]

        _NDIS_802_11_BSSID_LIST_EX._fields_ = [
            # in list below, at least 1
            ('NumberOfItems', ULONG),
            ('Bssid', NDIS_WLAN_BSSID_EX * 1),
        ]

        _NDIS_802_11_FIXED_IEs._fields_ = [
            ('Timestamp', UCHAR * 8),
            ('BeaconInterval', USHORT),
            ('Capabilities', USHORT),
        ]

        _NDIS_802_11_VARIABLE_IEs._fields_ = [
            ('ElementID', UCHAR),
            # Number of bytes in data field
            ('Length', UCHAR),
            ('data', UCHAR * 1),
        ]
        NDIS_802_11_FRAGMENTATION_THRESHOLD = ULONG
        NDIS_802_11_RTS_THRESHOLD = ULONG
        NDIS_802_11_ANTENNA = ULONG


        class _NDIS_802_11_PRIVACY_FILTER(ENUM):
            Ndis802_11PrivFilterAcceptAll = 1
            Ndis802_11PrivFilter8021xWEP = 2

        NDIS_802_11_PRIVACY_FILTER = _NDIS_802_11_PRIVACY_FILTER
        PNDIS_802_11_PRIVACY_FILTER = POINTER(_NDIS_802_11_PRIVACY_FILTER)

        # Added new encryption types
        # Also aliased typedef to new name
        class _NDIS_802_11_WEP_STATUS(ENUM):
            Ndis802_11WEPEnabled = 1
            Ndis802_11Encryption1Enabled = Ndis802_11WEPEnabled
            Ndis802_11WEPDisabled = 2
            Ndis802_11EncryptionDisabled = Ndis802_11WEPDisabled
            Ndis802_11WEPKeyAbsent = 3
            Ndis802_11Encryption1KeyAbsent = Ndis802_11WEPKeyAbsent
            Ndis802_11WEPNotSupported = 4
            Ndis802_11EncryptionNotSupported = Ndis802_11WEPNotSupported
            Ndis802_11Encryption2Enabled = 5
            Ndis802_11Encryption2KeyAbsent = 6
            Ndis802_11Encryption3Enabled = 7
            Ndis802_11Encryption3KeyAbsent = 8
            NDIS_802_11_ENCRYPTION_STATUS = 9
            # ENUM ERROR: *PNDIS_802_11_ENCRYPTION_STATUS;
        NDIS_802_11_WEP_STATUS = _NDIS_802_11_WEP_STATUS
        PNDIS_802_11_WEP_STATUS = POINTER(_NDIS_802_11_WEP_STATUS)
        NDIS_802_11_ENCRYPTION_STATUS = _NDIS_802_11_WEP_STATUS
        PNDIS_802_11_ENCRYPTION_STATUS = POINTER(_NDIS_802_11_WEP_STATUS)


        class _NDIS_802_11_RELOAD_DEFAULTS(ENUM):
            Ndis802_11ReloadWEPKeys = 1

        NDIS_802_11_RELOAD_DEFAULTS = _NDIS_802_11_RELOAD_DEFAULTS
        PNDIS_802_11_RELOAD_DEFAULTS = POINTER(_NDIS_802_11_RELOAD_DEFAULTS)
        NDIS_802_11_AI_REQFI_CAPABILITIES = 1
        NDIS_802_11_AI_REQFI_LISTENINTERVAL = 2
        NDIS_802_11_AI_REQFI_CURRENTAPADDRESS = 4
        NDIS_802_11_AI_RESFI_CAPABILITIES = 1
        NDIS_802_11_AI_RESFI_STATUSCODE = 2
        NDIS_802_11_AI_RESFI_ASSOCIATIONID = 4


        _NDIS_802_11_AI_REQFI._fields_ = [
            ('Capabilities', USHORT),
            ('ListenInterval', USHORT),
            ('CurrentAPAddress', NDIS_802_11_MAC_ADDRESS),
        ]

        _NDIS_802_11_AI_RESFI._fields_ = [
            ('Capabilities', USHORT),
            ('StatusCode', USHORT),
            ('AssociationId', USHORT),
        ]

        _NDIS_802_11_ASSOCIATION_INFORMATION._fields_ = [
            ('Length', ULONG),
            ('AvailableRequestFixedIEs', USHORT),
            ('RequestFixedIEs', NDIS_802_11_AI_REQFI),
            ('RequestIELength', ULONG),
            ('OffsetRequestIEs', ULONG),
            ('AvailableResponseFixedIEs', USHORT),
            ('ResponseFixedIEs', NDIS_802_11_AI_RESFI),
            ('ResponseIELength', ULONG),
            ('OffsetResponseIEs', ULONG),
        ]

        _NDIS_802_11_AUTHENTICATION_EVENT._fields_ = [
            ('Status', NDIS_802_11_STATUS_INDICATION),
            ('Request', NDIS_802_11_AUTHENTICATION_REQUEST * 1),
        ]


        class _Union_1(ctypes.Union):
            pass


        _Union_1._fields_ = [
            ('AuthenticationEvent', NDIS_802_11_AUTHENTICATION_EVENT),
            ('RssiTrigger', NDIS_802_11_RSSI),
        ]
        _NDIS_802_11_TEST._Union_1 = _Union_1

        _NDIS_802_11_TEST._anonymous_ = (
            '_Union_1',
        )

        _NDIS_802_11_TEST._fields_ = [
            ('Length', ULONG),
            ('Type', ULONG),
            ('_Union_1', _NDIS_802_11_TEST._Union_1),
        ]

        # 802.11 Media stream constraints, associated with
        # OID_802_11_MEDIA_STREAM_MODE
        class _NDIS_802_11_MEDIA_STREAM_MODE(ENUM):
            Ndis802_11MediaStreamOff = 1
            Ndis802_11MediaStreamOn = 2

        NDIS_802_11_MEDIA_STREAM_MODE = _NDIS_802_11_MEDIA_STREAM_MODE
        PNDIS_802_11_MEDIA_STREAM_MODE = POINTER(_NDIS_802_11_MEDIA_STREAM_MODE)

        # PMKID Structures
        NDIS_802_11_PMKID_VALUE = UCHAR * 16

        _BSSID_INFO._fields_ = [
            ('BSSID', NDIS_802_11_MAC_ADDRESS),
            ('PMKID', NDIS_802_11_PMKID_VALUE),
        ]

        _NDIS_802_11_PMKID._fields_ = [
            ('Length', ULONG),
            ('BSSIDInfoCount', ULONG),
            ('BSSIDInfo', BSSID_INFO * 1),
        ]

        _NDIS_802_11_AUTHENTICATION_ENCRYPTION._fields_ = [
            ('AuthModeSupported', NDIS_802_11_AUTHENTICATION_MODE),
            ('EncryptStatusSupported', NDIS_802_11_ENCRYPTION_STATUS),
        ]

        _NDIS_802_11_CAPABILITY._fields_ = [
            ('Length', ULONG),
            ('Version', ULONG),
            ('NoOfPMKIDs', ULONG),
            ('NoOfAuthEncryptPairsSupported', ULONG),
            ('AuthenticationEncryptionSupported', NDIS_802_11_AUTHENTICATION_ENCRYPTION * 1),
        ]

        _NDIS_802_11_NON_BCAST_SSID_LIST._fields_ = [
            ('NumberOfItems', ULONG),
            ('Non_Bcast_Ssid', NDIS_802_11_SSID * 1),
        ]

        # for OID_802_11_RADIO_STATUS
        class _NDIS_802_11_RADIO_STATUS(ENUM):
            Ndis802_11RadioStatusOn = 1
            Ndis802_11RadioStatusHardwareOff = 2
            Ndis802_11RadioStatusSoftwareOff = 3
            Ndis802_11RadioStatusHardwareSoftwareOff = 4
            Ndis802_11RadioStatusMax = 5
            NDIS_802_11_RADIO_STATUS = 6
            # ENUM ERROR: *PNDIS_802_11_RADIO_STATUS;
        NDIS_802_11_RADIO_STATUS = _NDIS_802_11_RADIO_STATUS
        PNDIS_802_11_RADIO_STATUS = POINTER(_NDIS_802_11_RADIO_STATUS)

        # IRDA objects
        OID_IRDA_RECEIVING = 0x0A010100
        OID_IRDA_TURNAROUND_TIME = 0x0A010101
        OID_IRDA_SUPPORTED_SPEEDS = 0x0A010102
        OID_IRDA_LINK_SPEED = 0x0A010103
        OID_IRDA_MEDIA_BUSY = 0x0A010104
        OID_IRDA_EXTRA_RCV_BOFS = 0x0A010200
        OID_IRDA_RATE_SNIFF = 0x0A010201
        OID_IRDA_UNICAST_LIST = 0x0A010202
        OID_IRDA_MAX_UNICAST_LIST_SIZE = 0x0A010203
        OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = 0x0A010204
        OID_IRDA_MAX_SEND_WINDOW_SIZE = 0x0A010205
        OID_IRDA_RESERVED1 = 0x0A01020A        # The range between OID_IRDA_RESERVED1
        OID_IRDA_RESERVED2 = 0x0A01020F        # and OID_IRDA_RESERVED2 is reserved

        # IEEE1394 mandatory general OIDs.
        OID_1394_LOCAL_NODE_INFO = 0x0C010101
        OID_1394_VC_INFO = 0x0C010102

        # The following OIDs are not specific to a media.
        # These are objects for Connection-oriented media call-managers.
        OID_CO_ADD_PVC = 0xFE000001
        OID_CO_DELETE_PVC = 0xFE000002
        OID_CO_GET_CALL_INFORMATION = 0xFE000003
        OID_CO_ADD_ADDRESS = 0xFE000004
        OID_CO_DELETE_ADDRESS = 0xFE000005
        OID_CO_GET_ADDRESSES = 0xFE000006
        OID_CO_ADDRESS_CHANGE = 0xFE000007
        OID_CO_SIGNALING_ENABLED = 0xFE000008
        OID_CO_SIGNALING_DISABLED = 0xFE000009
        OID_CO_AF_CLOSE = 0xFE00000A

        # Objects for call-managers and MCMs that support TAPI access.
        OID_CO_TAPI_CM_CAPS = 0xFE001001
        OID_CO_TAPI_LINE_CAPS = 0xFE001002
        OID_CO_TAPI_ADDRESS_CAPS = 0xFE001003
        OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = 0xFE001004
        OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = 0xFE001005
        OID_CO_TAPI_TRANSLATE_TAPI_SAP = 0xFE001006
        OID_CO_TAPI_GET_CALL_DIAGNOSTICS = 0xFE001007
        OID_CO_TAPI_REPORT_DIGITS = 0xFE001008
        OID_CO_TAPI_DONT_REPORT_DIGITS = 0xFE001009

        # PnP and PM OIDs
        OID_PNP_CAPABILITIES = 0xFD010100
        OID_PNP_SET_POWER = 0xFD010101
        OID_PNP_QUERY_POWER = 0xFD010102
        OID_PNP_ADD_WAKE_UP_PATTERN = 0xFD010103
        OID_PNP_REMOVE_WAKE_UP_PATTERN = 0xFD010104
        OID_PNP_WAKE_UP_PATTERN_LIST = 0xFD010105
        OID_PNP_ENABLE_WAKE_UP = 0xFD010106

        # PnP/PM Statistics (Optional).
        OID_PNP_WAKE_UP_OK = 0xFD020200
        OID_PNP_WAKE_UP_ERROR = 0xFD020201
        if ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620):
            # new power management OIDs for NDIS 6.20 drivers
            OID_PM_CURRENT_CAPABILITIES = 0xFD010107
            OID_PM_HARDWARE_CAPABILITIES = 0xFD010108
            OID_PM_PARAMETERS = 0xFD010109
            OID_PM_ADD_WOL_PATTERN = 0xFD01010A
            OID_PM_REMOVE_WOL_PATTERN = 0xFD01010B
            OID_PM_WOL_PATTERN_LIST = 0xFD01010C
            OID_PM_ADD_PROTOCOL_OFFLOAD = 0xFD01010D
            OID_PM_GET_PROTOCOL_OFFLOAD = 0xFD01010E
            OID_PM_REMOVE_PROTOCOL_OFFLOAD = 0xFD01010F
            OID_PM_PROTOCOL_OFFLOAD_LIST = 0xFD010110
            OID_PM_RESERVED_1 = 0xFD010111

            # new NDIS 6.20 OIDs for generic packet filtering
            OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES = 0x00010221            # query only
            OID_RECEIVE_FILTER_GLOBAL_PARAMETERS = 0x00010222            # query only
            OID_RECEIVE_FILTER_ALLOCATE_QUEUE = 0x00010223            # method only
            OID_RECEIVE_FILTER_FREE_QUEUE = 0x00010224            # set only
            OID_RECEIVE_FILTER_ENUM_QUEUES = 0x00010225            # query only
            OID_RECEIVE_FILTER_QUEUE_PARAMETERS = 0x00010226            # method and set
            OID_RECEIVE_FILTER_SET_FILTER = 0x00010227            # method only
            OID_RECEIVE_FILTER_CLEAR_FILTER = 0x00010228            # set only
            OID_RECEIVE_FILTER_ENUM_FILTERS = 0x00010229            # method only
            OID_RECEIVE_FILTER_PARAMETERS = 0x0001022A            # method only
            OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE = 0x0001022B            # method only
            OID_RECEIVE_FILTER_CURRENT_CAPABILITIES = 0x0001022D            # query only
            OID_NIC_SWITCH_HARDWARE_CAPABILITIES = 0x0001022E            # query only
            OID_NIC_SWITCH_CURRENT_CAPABILITIES = 0x0001022F            # query only
            if NDIS_SUPPORT_NDIS630:
                OID_RECEIVE_FILTER_MOVE_FILTER = 0x00010230                # set only
            # END IF   (NDIS_SUPPORT_NDIS630)

            OID_VLAN_RESERVED1 = 0x00010231
            OID_VLAN_RESERVED2 = 0x00010232
            OID_VLAN_RESERVED3 = 0x00010233
            OID_VLAN_RESERVED4 = 0x00010234
            if NDIS_SUPPORT_NDIS630:
                OID_PACKET_COALESCING_FILTER_MATCH_COUNT = 0x00010235                # query only
            # END IF   (NDIS_SUPPORT_NDIS630)
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620)

        if ((NTDDI_VERSION >= NTDDI_WIN8) or NDIS_SUPPORT_NDIS630):
            # OIDs used for SRIOV and NIC switch
            OID_NIC_SWITCH_CREATE_SWITCH = 0x00010237            # method only
            OID_NIC_SWITCH_PARAMETERS = 0x00010238            # method and set only
            OID_NIC_SWITCH_DELETE_SWITCH = 0x00010239            # set only
            OID_NIC_SWITCH_ENUM_SWITCHES = 0x00010240            # query only
            OID_NIC_SWITCH_CREATE_VPORT = 0x00010241            # method only
            OID_NIC_SWITCH_VPORT_PARAMETERS = 0x00010242            # query and set only
            OID_NIC_SWITCH_ENUM_VPORTS = 0x00010243            # method only
            OID_NIC_SWITCH_DELETE_VPORT = 0x00010244            # set only
            OID_NIC_SWITCH_ALLOCATE_VF = 0x00010245            # method only
            OID_NIC_SWITCH_FREE_VF = 0x00010246            # set only
            OID_NIC_SWITCH_VF_PARAMETERS = 0x00010247            # method only
            OID_NIC_SWITCH_ENUM_VFS = 0x00010248            # method only
            OID_SRIOV_HARDWARE_CAPABILITIES = 0x00010249            # query only
            OID_SRIOV_CURRENT_CAPABILITIES = 0x00010250            # query only
            OID_SRIOV_READ_VF_CONFIG_SPACE = 0x00010251            # method only
            OID_SRIOV_WRITE_VF_CONFIG_SPACE = 0x00010252            # set only
            OID_SRIOV_READ_VF_CONFIG_BLOCK = 0x00010253            # method only
            OID_SRIOV_WRITE_VF_CONFIG_BLOCK = 0x00010254            # set only
            OID_SRIOV_RESET_VF = 0x00010255            # set only
            OID_SRIOV_SET_VF_POWER_STATE = 0x00010256            # set only
            OID_SRIOV_VF_VENDOR_DEVICE_ID = 0x00010257            # method only
            OID_SRIOV_PROBED_BARS = 0x00010258            # query only
            OID_SRIOV_BAR_RESOURCES = 0x00010259            # method only
            OID_SRIOV_PF_LUID = 0x00010260            # query only

            # These OIDs are applicable to the VF only
            OID_SRIOV_CONFIG_STATE = 0x00010261            # set only
            OID_SRIOV_VF_SERIAL_NUMBER = 0x00010262            # query only
            if NDIS_SUPPORT_NDIS670:
                OID_SRIOV_OVERLYING_ADAPTER_INFO = 0x00010268                # set only
            # END IF  (NDIS_SUPPORT_NDIS670)

            OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK = 0x00010269            # method only

            # OID's used for Hyper-V extensible switch
            OID_SWITCH_PROPERTY_ADD = 0x00010263            # set only
            OID_SWITCH_PROPERTY_UPDATE = 0x00010264            # set only
            OID_SWITCH_PROPERTY_DELETE = 0x00010265            # set only
            OID_SWITCH_PROPERTY_ENUM = 0x00010266            # method only
            OID_SWITCH_FEATURE_STATUS_QUERY = 0x00010267            # method only
            OID_SWITCH_NIC_REQUEST = 0x00010270            # method only
            OID_SWITCH_PORT_PROPERTY_ADD = 0x00010271            # set only
            OID_SWITCH_PORT_PROPERTY_UPDATE = 0x00010272            # set only
            OID_SWITCH_PORT_PROPERTY_DELETE = 0x00010273            # set only
            OID_SWITCH_PORT_PROPERTY_ENUM = 0x00010274            # method only
            OID_SWITCH_PARAMETERS = 0x00010275            # query only
            OID_SWITCH_PORT_ARRAY = 0x00010276            # query only
            OID_SWITCH_NIC_ARRAY = 0x00010277            # query only
            OID_SWITCH_PORT_CREATE = 0x00010278            # set only
            OID_SWITCH_PORT_DELETE = 0x00010279            # set only
            OID_SWITCH_NIC_CREATE = 0x0001027A            # set only
            OID_SWITCH_NIC_CONNECT = 0x0001027B            # set only
            OID_SWITCH_NIC_DISCONNECT = 0x0001027C            # set only
            OID_SWITCH_NIC_DELETE = 0x0001027D            # set only
            OID_SWITCH_PORT_FEATURE_STATUS_QUERY = 0x0001027E            # method only
            OID_SWITCH_PORT_TEARDOWN = 0x0001027F            # set only
            OID_SWITCH_NIC_SAVE = 0x00010290            # method only
            OID_SWITCH_NIC_SAVE_COMPLETE = 0x00010291            # set only
            OID_SWITCH_NIC_RESTORE = 0x00010292            # set only
            OID_SWITCH_NIC_RESTORE_COMPLETE = 0x00010293            # set only
            OID_SWITCH_NIC_UPDATED = 0x00010294            # set only
            OID_SWITCH_PORT_UPDATED = 0x00010295            # set only
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN8) or NDIS_SUPPORT_NDIS630)

        if NDIS_SUPPORT_NDIS650:
            OID_SWITCH_NIC_DIRECT_REQUEST = 0x00010296            # method only
            OID_SWITCH_NIC_SUSPEND = 0x00010297            # set only
            OID_SWITCH_NIC_RESUME = 0x00010298            # set only
        # END IF  (NDIS_SUPPORT_NDIS650)

        if (NTDDI_VERSION >= NTDDI_WIN10_RS3) or (NDIS_SUPPORT_NDIS680):
            # OIDs issued at source node when a suspended LM for a NIC is
            # starting and
            # when it it is finished.
            OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_STARTED = 0x00010299            # set only
            OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_FINISHED = 0x0001029A            # set only

            # RSSv2 direct OID: move an array of indirection table entries
            OID_GEN_RSS_SET_INDIRECTION_TABLE_ENTRIES = 0x000102C0            # method only
        # END IF   (NTDDI_VERSION >= NTDDI_WIN10_RS3) or (NDIS_SUPPORT_NDIS680)

        if (NTDDI_VERSION >= NTDDI_WINBLUE)  or (NDIS_SUPPORT_NDIS640):
            OID_GEN_ISOLATION_PARAMETERS = 0x00010300            # query only
        # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE)  or (NDIS_SUPPORT_NDIS640)

        if NDIS_SUPPORT_NDIS650:
            OID_GFT_HARDWARE_CAPABILITIES = 0x00010401            # query only
            OID_GFT_CURRENT_CAPABILITIES = 0x00010402            # query only
            OID_GFT_GLOBAL_PARAMETERS = 0x00010403            # query and set
            OID_GFT_CREATE_TABLE = 0x00010404            # method only
            OID_GFT_DELETE_TABLE = 0x00010405            # set only
            OID_GFT_ENUM_TABLES = 0x00010406            # query only
            OID_GFT_ALLOCATE_COUNTERS = 0x00010407            # method only
            OID_GFT_FREE_COUNTERS = 0x00010408            # method only
            OID_GFT_ENUM_COUNTERS = 0x00010409            # method
            OID_GFT_COUNTER_VALUES = 0x0001040A            # direct OID. method
            OID_GFT_STATISTICS = 0x0001040B            # query only, direct OID
            OID_GFT_ADD_FLOW_ENTRIES = 0x0001040C            # method only, direct OID
            OID_GFT_DELETE_FLOW_ENTRIES = 0x0001040D            # method only, direct OID
            OID_GFT_ENUM_FLOW_ENTRIES = 0x0001040E            # method only
            OID_GFT_ACTIVATE_FLOW_ENTRIES = 0x0001040F            # set only, direct OID
            OID_GFT_DEACTIVATE_FLOW_ENTRIES = 0x00010410            # set only, direct OID
            OID_GFT_FLOW_ENTRY_PARAMETERS = 0x00010411            # method only, direct OID
            OID_GFT_EXACT_MATCH_PROFILE = 0x00010412            # method
            OID_GFT_HEADER_TRANSPOSITION_PROFILE = 0x00010413            # method
            OID_GFT_WILDCARD_MATCH_PROFILE = 0x00010414            # method
            OID_GFT_ENUM_PROFILES = 0x00010415            # query only
            OID_GFT_DELETE_PROFILE = 0x00010416            # set only
            OID_GFT_VPORT_PARAMETERS = 0x00010417            # query and set
            OID_GFT_CREATE_LOGICAL_VPORT = 0x00010418            # method
            OID_GFT_DELETE_LOGICAL_VPORT = 0x00010419            # set
            OID_GFT_ENUM_LOGICAL_VPORTS = 0x0001041A            # query
            OID_QOS_OFFLOAD_HARDWARE_CAPABILITIES = 0x00010601            # query only
            OID_QOS_OFFLOAD_CURRENT_CAPABILITIES = 0x00010602            # query only
            OID_QOS_OFFLOAD_CREATE_SQ = 0x00010603            # method only
            OID_QOS_OFFLOAD_DELETE_SQ = 0x00010604            # method only
            OID_QOS_OFFLOAD_UPDATE_SQ = 0x00010605            # method only
            OID_QOS_OFFLOAD_ENUM_SQS = 0x00010606            # method only
            OID_PD_OPEN_PROVIDER = 0x00010501            # method
            OID_PD_CLOSE_PROVIDER = 0x00010502            # set only
            OID_PD_QUERY_CURRENT_CONFIG = 0x00010503            # query
        # END IF   (NDIS_SUPPORT_NDIS650)

        # The following bits are defined for OID_PNP_ENABLE_WAKE_UP
        NDIS_PNP_WAKE_UP_MAGIC_PACKET = 0x00000001
        NDIS_PNP_WAKE_UP_PATTERN_MATCH = 0x00000002
        NDIS_PNP_WAKE_UP_LINK_CHANGE = 0x00000004

        # TCP/IP OIDs
        OID_TCP_TASK_OFFLOAD = 0xFC010201
        OID_TCP_TASK_IPSEC_ADD_SA = 0xFC010202
        OID_TCP_TASK_IPSEC_DELETE_SA = 0xFC010203
        OID_TCP_SAN_SUPPORT = 0xFC010204
        OID_TCP_TASK_IPSEC_ADD_UDPESP_SA = 0xFC010205
        OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA = 0xFC010206
        OID_TCP4_OFFLOAD_STATS = 0xFC010207
        OID_TCP6_OFFLOAD_STATS = 0xFC010208
        OID_IP4_OFFLOAD_STATS = 0xFC010209
        OID_IP6_OFFLOAD_STATS = 0xFC01020A

        # new offload OIDs for NDIS 6
        OID_TCP_OFFLOAD_CURRENT_CONFIG = 0xFC01020B        # query only, handled by NDIS
        OID_TCP_OFFLOAD_PARAMETERS = 0xFC01020C        # set only
        OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES = 0xFC01020D        # query only
        OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG = 0xFC01020E        # query only
        OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES = 0xFC01020F        # query only
        OID_OFFLOAD_ENCAPSULATION = 0x0101010A
        if NDIS_SUPPORT_NDIS61:
            # IPsec Task offload V2 OIDs
            OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA = 0xFC030202
            OID_TCP_TASK_IPSEC_OFFLOAD_V2_DELETE_SA = 0xFC030203
            OID_TCP_TASK_IPSEC_OFFLOAD_V2_UPDATE_SA = 0xFC030204
        # END IF   (NDIS_SUPPORT_NDIS61)

        if NDIS_SUPPORT_NDIS630:
            OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA_EX = 0xFC030205
        # END IF   (NDIS_SUPPORT_NDIS630)

        # Defines for FFP, obsolete
        OID_FFP_SUPPORT = 0xFC010210
        OID_FFP_FLUSH = 0xFC010211
        OID_FFP_CONTROL = 0xFC010212
        OID_FFP_PARAMS = 0xFC010213
        OID_FFP_DATA = 0xFC010214
        OID_FFP_DRIVER_STATS = 0xFC020210
        OID_FFP_ADAPTER_STATS = 0xFC020211

        # TCP Connection offload OID
        OID_TCP_CONNECTION_OFFLOAD_PARAMETERS = 0xFC030201
        if ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620):
            # New Tunnel driver direct OIDs for NDIS 6.20
            OID_TUNNEL_INTERFACE_SET_OID = 0x0F010106
            OID_TUNNEL_INTERFACE_RELEASE_OID = 0x0F010107
        # END IF   ((NTDDI_VERSION >= NTDDI_WIN7) or NDIS_SUPPORT_NDIS620)

        # Defines for QOS
        OID_QOS_RESERVED1 = 0xFB010100
        OID_QOS_RESERVED2 = 0xFB010101
        OID_QOS_RESERVED3 = 0xFB010102
        OID_QOS_RESERVED4 = 0xFB010103
        OID_QOS_RESERVED5 = 0xFB010104
        OID_QOS_RESERVED6 = 0xFB010105
        OID_QOS_RESERVED7 = 0xFB010106
        OID_QOS_RESERVED8 = 0xFB010107
        OID_QOS_RESERVED9 = 0xFB010108
        OID_QOS_RESERVED10 = 0xFB010109
        OID_QOS_RESERVED11 = 0xFB01010A
        OID_QOS_RESERVED12 = 0xFB01010B
        OID_QOS_RESERVED13 = 0xFB01010C
        OID_QOS_RESERVED14 = 0xFB01010D
        OID_QOS_RESERVED15 = 0xFB01010E
        OID_QOS_RESERVED16 = 0xFB01010F
        OID_QOS_RESERVED17 = 0xFB010110
        OID_QOS_RESERVED18 = 0xFB010111
        OID_QOS_RESERVED19 = 0xFB010112
        OID_QOS_RESERVED20 = 0xFB010113
        if ((NTDDI_VERSION >= NTDDI_WINTHRESHOLD) or NDIS_SUPPORT_NDIS650):
            # OIDs reserved for Xbox accessories
            OID_XBOX_ACC_RESERVED0 = 0xFA000000

            # OIDs 0xFA000000 through 0xFAFFFFFF are reserved
            # define OID_XBOX_ACC_RESERVED_LAST   0xFAFFFFFF        # END IF   THRESHOLD
        # NDIS Proxy OID_GEN_CO_DEVICE_PROFILE structure. The optional OID and
        # this structure is a generic means of describing a CO device's
        # capabilities, and is used by the NDIS Proxy to construct a TAPI
        # device
        # capabilities structure.
        NDIS_CO_DEVICE_PROFILE._fields_ = [
            # e.g. 'GigabitATMNet'
            ('DeviceDescription', NDIS_VAR_DATA_DESC),
            # special features
            ('DevSpecificInfo', NDIS_VAR_DATA_DESC),
            # reserved in NT5
            ('ulTAPISupplementaryPassThru', ULONG),
            ('ulAddressModes', ULONG),
            ('ulNumAddresses', ULONG),
            ('ulBearerModes', ULONG),
            # bytes per second
            ('ulMaxTxRate', ULONG),
            # bytes per second
            ('ulMinTxRate', ULONG),
            # bytes per second
            ('ulMaxRxRate', ULONG),
            # bytes per second
            ('ulMinRxRate', ULONG),
            ('ulMediaModes', ULONG),
            # Tone/digit generation and recognition capabilities
            ('ulGenerateToneModes', ULONG),
            ('ulGenerateToneMaxNumFreq', ULONG),
            ('ulGenerateDigitModes', ULONG),
            ('ulMonitorToneMaxNumFreq', ULONG),
            ('ulMonitorToneMaxNumEntries', ULONG),
            ('ulMonitorDigitModes', ULONG),
            # milliseconds
            ('ulGatherDigitsMinTimeout', ULONG),
            # milliseconds
            ('ulGatherDigitsMaxTimeout', ULONG),
            # Misc. capabilities
            ('ulDevCapFlags', ULONG),
            # (This * ulMinRate) = total bandwidth (which may equal ulMaxRate)
            ('ulMaxNumActiveCalls', ULONG),
            # Effect of answering a new call when an
            ('ulAnswerMode', ULONG),
            # bytes
            ('ulUUIAcceptSize', ULONG),
            # bytes
            ('ulUUIAnswerSize', ULONG),
            # bytes
            ('ulUUIMakeCallSize', ULONG),
            # bytes
            ('ulUUIDropSize', ULONG),
            # bytes
            ('ulUUISendUserUserInfoSize', ULONG),
            # bytes
            ('ulUUICallInfoSize', ULONG),
        ]

        # Structures for TCP IPsec.
        if not defined(IP_EXPORT_INCLUDED):
            IPAddr = ULONG
            IPMask = ULONG
        # END IF


        SPI_TYPE = ULONG


        class _OFFLOAD_OPERATION_E(ENUM):
            AUTHENTICATE = 1
            ENCRYPT = 2
            # ENUM ERROR: OFFLOAD_OPERATION_E;
        OFFLOAD_OPERATION_E = _OFFLOAD_OPERATION_E

        _OFFLOAD_ALGO_INFO._fields_ = [
            ('algoIdentifier', ULONG),
            ('algoKeylen', ULONG),
            ('algoRounds', ULONG),
        ]


        class _OFFLOAD_CONF_ALGO(ENUM):
            OFFLOAD_IPSEC_CONF_NONE = 1
            OFFLOAD_IPSEC_CONF_DES = 2
            OFFLOAD_IPSEC_CONF_RESERVED = 3
            OFFLOAD_IPSEC_CONF_3_DES = 4
            OFFLOAD_IPSEC_CONF_MAX = 5
            # ENUM ERROR: OFFLOAD_CONF_ALGO;
        OFFLOAD_CONF_ALGO = _OFFLOAD_CONF_ALGO


        class _OFFLOAD_INTEGRITY_ALGO(ENUM):
            OFFLOAD_IPSEC_INTEGRITY_NONE = 1
            OFFLOAD_IPSEC_INTEGRITY_MD5 = 2
            OFFLOAD_IPSEC_INTEGRITY_SHA = 3
            OFFLOAD_IPSEC_INTEGRITY_MAX = 4
            # ENUM ERROR: OFFLOAD_INTEGRITY_ALGO;
        OFFLOAD_INTEGRITY_ALGO = _OFFLOAD_INTEGRITY_ALGO

        _OFFLOAD_SECURITY_ASSOCIATION._fields_ = [
            ('Operation', OFFLOAD_OPERATION_E),
            ('SPI', SPI_TYPE),
            ('IntegrityAlgo', OFFLOAD_ALGO_INFO),
            ('ConfAlgo', OFFLOAD_ALGO_INFO),
            ('Reserved', OFFLOAD_ALGO_INFO),
        ]
        OFFLOAD_MAX_SAS = 3
        OFFLOAD_INBOUND_SA = 0x0001
        OFFLOAD_OUTBOUND_SA = 0x0002


        _OFFLOAD_IPSEC_ADD_SA._fields_ = [
            ('SrcAddr', IPAddr),
            ('SrcMask', IPMask),
            ('DestAddr', IPAddr),
            ('DestMask', IPMask),
            ('Protocol', ULONG),
            ('SrcPort', USHORT),
            ('DestPort', USHORT),
            ('SrcTunnelAddr', IPAddr),
            ('DestTunnelAddr', IPAddr),
            ('Flags', USHORT),
            ('NumSAs', SHORT),
            ('SecAssoc', OFFLOAD_SECURITY_ASSOCIATION * OFFLOAD_MAX_SAS),
            ('OffloadHandle', HANDLE),
            ('KeyLen', ULONG),
            ('KeyMat', UCHAR * 1),
        ]

        _OFFLOAD_IPSEC_DELETE_SA._fields_ = [
            ('OffloadHandle', HANDLE),
        ]


        class _UDP_ENCAP_TYPE(ENUM):
            OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 1
            OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 2

        UDP_ENCAP_TYPE = _UDP_ENCAP_TYPE
        PUDP_ENCAP_TYPE = POINTER(_UDP_ENCAP_TYPE)

        _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY._fields_ = [
            ('UdpEncapType', UDP_ENCAP_TYPE),
            ('DstEncapPort', USHORT),
        ]

        _OFFLOAD_IPSEC_ADD_UDPESP_SA._fields_ = [
            ('SrcAddr', IPAddr),
            ('SrcMask', IPMask),
            ('DstAddr', IPAddr),
            ('DstMask', IPMask),
            ('Protocol', ULONG),
            ('SrcPort', USHORT),
            ('DstPort', USHORT),
            ('SrcTunnelAddr', IPAddr),
            ('DstTunnelAddr', IPAddr),
            ('Flags', USHORT),
            ('NumSAs', SHORT),
            ('SecAssoc', OFFLOAD_SECURITY_ASSOCIATION * OFFLOAD_MAX_SAS),
            ('OffloadHandle', HANDLE),
            ('EncapTypeEntry', OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY),
            ('EncapTypeEntryOffldHandle', HANDLE),
            ('KeyLen', ULONG),
            ('KeyMat', UCHAR * 1),
        ]

        _OFFLOAD_IPSEC_DELETE_UDPESP_SA._fields_ = [
            ('OffloadHandle', HANDLE),
            ('EncapTypeEntryOffldHandle', HANDLE),
        ]

        # Type to go with OID_GEN_VLAN_ID: the least significant 12 bits are
        # used as the VLAN ID (VID) per IEEE 802.1Q. Higher order bits are
        # reserved and must be set to 0.
        NDIS_VLAN_ID = ULONG

        # Medium the Ndis Driver is running on
        # (OID_GEN_MEDIA_SUPPORTED/ OID_GEN_MEDIA_IN_USE).
        class _NDIS_MEDIUM(ENUM):
            NdisMedium802_3 = 1
            NdisMedium802_5 = 2
            NdisMediumFddi = 3
            NdisMediumWan = 4
            NdisMediumLocalTalk = 5
            NdisMediumDix = 6
            NdisMediumArcnetRaw = 7
            NdisMediumArcnet878_2 = 8
            NdisMediumAtm = 9
            NdisMediumWirelessWan = 10
            NdisMediumIrda = 11
            NdisMediumBpc = 12
            NdisMediumCoWan = 13
            NdisMedium1394 = 14
            NdisMediumInfiniBand = 15
            if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
                NdisMediumTunnel = 16
                NdisMediumNative802_11 = 17
                NdisMediumLoopback = 18
            # END IF

            if NTDDI_VERSION >= NTDDI_WIN7:
                NdisMediumWiMAX = 19
                NdisMediumIP = 20
            # END IF

            NdisMediumMax = 21

        NDIS_MEDIUM = _NDIS_MEDIUM
        PNDIS_MEDIUM = POINTER(_NDIS_MEDIUM)

        # Physical Medium Type definitions. Used with OID_GEN_PHYSICAL_MEDIUM.
        class _NDIS_PHYSICAL_MEDIUM(ENUM):
            NdisPhysicalMediumUnspecified = 1
            NdisPhysicalMediumWirelessLan = 2
            NdisPhysicalMediumCableModem = 3
            NdisPhysicalMediumPhoneLine = 4
            NdisPhysicalMediumPowerLine = 5
            NdisPhysicalMediumDSL = 6
            NdisPhysicalMediumFibreChannel = 7
            NdisPhysicalMedium1394 = 8
            NdisPhysicalMediumWirelessWan = 9
            NdisPhysicalMediumNative802_11 = 10
            NdisPhysicalMediumBluetooth = 11
            NdisPhysicalMediumInfiniband = 12
            NdisPhysicalMediumWiMax = 13
            NdisPhysicalMediumUWB = 14
            NdisPhysicalMedium802_3 = 15
            NdisPhysicalMedium802_5 = 16
            NdisPhysicalMediumIrda = 17
            NdisPhysicalMediumWiredWAN = 18
            NdisPhysicalMediumWiredCoWan = 19
            NdisPhysicalMediumOther = 20
            NdisPhysicalMediumNative802_15_4 = 21
            NdisPhysicalMediumMax = 22

        NDIS_PHYSICAL_MEDIUM = _NDIS_PHYSICAL_MEDIUM
        PNDIS_PHYSICAL_MEDIUM = POINTER(_NDIS_PHYSICAL_MEDIUM)

        # Protocol types supported by ndis. These values need to be consistent
        # with ADDRESS_TYPE_XXX defined in TDI.H
        NDIS_PROTOCOL_ID_DEFAULT = 0x00
        NDIS_PROTOCOL_ID_TCP_IP = 0x02
        NDIS_PROTOCOL_ID_IP6 = 0x03
        NDIS_PROTOCOL_ID_IPX = 0x06
        NDIS_PROTOCOL_ID_NBF = 0x07
        NDIS_PROTOCOL_ID_MAX = 0x0F
        NDIS_PROTOCOL_ID_MASK = 0x0F

        # The following is used with OID_GEN_TRANSPORT_HEADER_OFFSET to
        # indicate the length of the layer-2 header
        # for packets sent by a particular protocol.
        _TRANSPORT_HEADER_OFFSET._fields_ = [
            # The protocol that is sending this OID
            # (NDIS_PROTOCOL_ID_XXX above)
            ('ProtocolType', USHORT),
            # The header offset
            ('HeaderOffset', USHORT),
        ]

        # The structures below need to be consistent with TRANSPORT_ADDRESS
        # structures in TDI.H
        _NETWORK_ADDRESS._fields_ = [
            # length in bytes of Address[] in this
            ('AddressLength', USHORT),
            # type of this address (NDIS_PROTOCOL_ID_XXX above)
            ('AddressType', USHORT),
            # actually AddressLength bytes long
            ('Address', UCHAR * 1),
        ]

        # The following is used with OID_GEN_NETWORK_LAYER_ADDRESSES to set
        # network layer addresses on an interface
        _NETWORK_ADDRESS_LIST._fields_ = [
            # number of addresses following
            ('AddressCount', LONG),
            # type of this address (NDIS_PROTOCOL_ID_XXX above)
            ('AddressType', USHORT),
            # actually AddressCount elements long
            ('Address', NETWORK_ADDRESS * 1),
        ]

        # IP address - This must remain consistent with TDI_ADDRESS_IP in tdi.h
        _NETWORK_ADDRESS_IP._fields_ = [
            ('sin_port', USHORT),
            ('in_addr', ULONG),
            ('sin_zero', UCHAR * 8),
        ]
        NETWORK_ADDRESS_LENGTH_IP = ctypes.sizeof (NETWORK_ADDRESS_IP
        # IPv6 address - This must remain consistent with TDI_ADDRESS_IP6 in
        # tdi.h
        _NETWORK_ADDRESS_IP6._fields_ = [
            ('sin6_port', USHORT),
            ('sin6_flowinfo', ULONG),
            ('sin6_addr', USHORT * 8),
            ('sin6_scope_id', ULONG),
        ]
        NETWORK_ADDRESS_LENGTH_IP6 = ctypes.sizeof (NETWORK_ADDRESS_IP6
        # IPX address - This must remain consistent with TDI_ADDRESS_IPX in
        # tdi.h.
        _NETWORK_ADDRESS_IPX._fields_ = [
            ('NetworkAddress', ULONG),
            ('NodeAddress', UCHAR * 6),
            ('Socket', USHORT),
        ]
        NETWORK_ADDRESS_LENGTH_IPX = ctypes.sizeof (NETWORK_ADDRESS_IPX
        # Hardware status codes (OID_GEN_HARDWARE_STATUS).
        class _NDIS_HARDWARE_STATUS(ENUM):
            NdisHardwareStatusReady = 1
            NdisHardwareStatusInitializing = 2
            NdisHardwareStatusReset = 3
            NdisHardwareStatusClosing = 4
            NdisHardwareStatusNotReady = 5

        NDIS_HARDWARE_STATUS = _NDIS_HARDWARE_STATUS
        PNDIS_HARDWARE_STATUS = POINTER(_NDIS_HARDWARE_STATUS)

        # this is the type passed in the OID_GEN_GET_TIME_CAPS request
        _GEN_GET_TIME_CAPS._fields_ = [
            # Bits defined below
            ('Flags', ULONG),
            ('ClockPrecision', ULONG),
        ]
        READABLE_LOCAL_CLOCK = 0x00000001
        CLOCK_NETWORK_DERIVED = 0x00000002
        CLOCK_PRECISION = 0x00000004
        RECEIVE_TIME_INDICATION_CAPABLE = 0x00000008
        TIMED_SEND_CAPABLE = 0x00000010
        TIME_STAMP_CAPABLE = 0x00000020

        # this is the type passed in the OID_GEN_GET_NETCARD_TIME request
        _GEN_GET_NETCARD_TIME._fields_ = [
            ('ReadTime', ULONGLONG),
        ]

        # NDIS PnP routines and definitions.
        _NDIS_PM_PACKET_PATTERN._fields_ = [
            # Importance of the given pattern.
            ('Priority', ULONG),
            # Context information for transports.
            ('Reserved', ULONG),
            # Size in bytes of the pattern mask.
            ('MaskSize', ULONG),
            # Offset from beginning of this
            ('PatternOffset', ULONG),
            # Size in bytes of the pattern.
            ('PatternSize', ULONG),
            # Flags (TBD).
            ('PatternFlags', ULONG),
        ]

        # The following structure defines the device power states.
        class _NDIS_DEVICE_POWER_STATE(ENUM):
            NdisDeviceStateUnspecified = 0
            NdisDeviceStateD0 = 1
            NdisDeviceStateD1 = 2
            NdisDeviceStateD2 = 3
            NdisDeviceStateD3 = 4
            NdisDeviceStateMaximum = 5

        NDIS_DEVICE_POWER_STATE = _NDIS_DEVICE_POWER_STATE
        PNDIS_DEVICE_POWER_STATE = POINTER(_NDIS_DEVICE_POWER_STATE)

        # The following structure defines the wake-up capabilities of the
        # device.
        _NDIS_PM_WAKE_UP_CAPABILITIES._fields_ = [
            ('MinMagicPacketWakeUp', NDIS_DEVICE_POWER_STATE),
            ('MinPatternWakeUp', NDIS_DEVICE_POWER_STATE),
            ('MinLinkChangeWakeUp', NDIS_DEVICE_POWER_STATE),
        ]

        # the following flags define the -enabled- wake-up capabilities of the
        # device
        # passed in the Flags field of NDIS_PNP_CAPABILITIES structure
        NDIS_DEVICE_WAKE_UP_ENABLE = 0x00000001
        NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = 0x00000002
        NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = 0x00000004

        # This structure defines general PnP capabilities of the miniport
        # driver.
        _NDIS_PNP_CAPABILITIES._fields_ = [
            ('Flags', ULONG),
            ('WakeUpCapabilities', NDIS_PM_WAKE_UP_CAPABILITIES),
        ]

        # Defines the attachment types for FDDI (OID_FDDI_ATTACHMENT_TYPE).
        class _NDIS_FDDI_ATTACHMENT_TYPE(ENUM):
            NdisFddiTypeIsolated = 1
            NdisFddiTypeLocalA = 2
            NdisFddiTypeLocalB = 3
            NdisFddiTypeLocalAB = 4
            NdisFddiTypeLocalS = 5
            NdisFddiTypeWrapA = 6
            NdisFddiTypeWrapB = 7
            NdisFddiTypeWrapAB = 8
            NdisFddiTypeWrapS = 9
            NdisFddiTypeCWrapA = 10
            NdisFddiTypeCWrapB = 11
            NdisFddiTypeCWrapS = 12
            NdisFddiTypeThrough = 13

        NDIS_FDDI_ATTACHMENT_TYPE = _NDIS_FDDI_ATTACHMENT_TYPE
        PNDIS_FDDI_ATTACHMENT_TYPE = POINTER(_NDIS_FDDI_ATTACHMENT_TYPE)

        # Defines the ring management states for FDDI
        # (OID_FDDI_RING_MGT_STATE).
        class _NDIS_FDDI_RING_MGT_STATE(ENUM):
            NdisFddiRingIsolated = 1
            NdisFddiRingNonOperational = 2
            NdisFddiRingOperational = 3
            NdisFddiRingDetect = 4
            NdisFddiRingNonOperationalDup = 5
            NdisFddiRingOperationalDup = 6
            NdisFddiRingDirected = 7
            NdisFddiRingTrace = 8

        NDIS_FDDI_RING_MGT_STATE = _NDIS_FDDI_RING_MGT_STATE
        PNDIS_FDDI_RING_MGT_STATE = POINTER(_NDIS_FDDI_RING_MGT_STATE)

        # Defines the Lconnection state for FDDI (OID_FDDI_LCONNECTION_STATE).
        class _NDIS_FDDI_LCONNECTION_STATE(ENUM):
            NdisFddiStateOff = 1
            NdisFddiStateBreak = 2
            NdisFddiStateTrace = 3
            NdisFddiStateConnect = 4
            NdisFddiStateNext = 5
            NdisFddiStateSignal = 6
            NdisFddiStateJoin = 7
            NdisFddiStateVerify = 8
            NdisFddiStateActive = 9
            NdisFddiStateMaintenance = 10

        NDIS_FDDI_LCONNECTION_STATE = _NDIS_FDDI_LCONNECTION_STATE
        PNDIS_FDDI_LCONNECTION_STATE = POINTER(_NDIS_FDDI_LCONNECTION_STATE)

        # Defines the medium subtypes for WAN medium (OID_WAN_MEDIUM_SUBTYPE).
        # Sub-medium used only by connection-oriented WAN devices
        # i.e. NdisMediumWan, NdisMediumCoWan.
        class _NDIS_WAN_MEDIUM_SUBTYPE(ENUM):
            NdisWanMediumHub = 1
            NdisWanMediumX_25 = 2
            NdisWanMediumIsdn = 3
            NdisWanMediumSerial = 4
            NdisWanMediumFrameRelay = 5
            NdisWanMediumAtm = 6
            NdisWanMediumSonet = 7
            NdisWanMediumSW56K = 8
            NdisWanMediumPPTP = 9
            NdisWanMediumL2TP = 10
            NdisWanMediumIrda = 11
            NdisWanMediumParallel = 12
            NdisWanMediumPppoe = 13
            if NTDDI_VERSION >= NTDDI_VISTA:
                NdisWanMediumSSTP = 14
                NdisWanMediumAgileVPN = 15
            # END IF

            if NTDDI_VERSION >= NTDDI_WINBLUE:
                NdisWanMediumGre = 16
            # END IF

            NdisWanMediumSubTypeMax = 17

        NDIS_WAN_MEDIUM_SUBTYPE = _NDIS_WAN_MEDIUM_SUBTYPE
        PNDIS_WAN_MEDIUM_SUBTYPE = POINTER(_NDIS_WAN_MEDIUM_SUBTYPE)

        # Defines the header format for WAN medium (OID_WAN_HEADER_FORMAT).
        class _NDIS_WAN_HEADER_FORMAT(ENUM):
            NdisWanHeaderNative = 1
            NdisWanHeaderEthernet = 2

        NDIS_WAN_HEADER_FORMAT = _NDIS_WAN_HEADER_FORMAT
        PNDIS_WAN_HEADER_FORMAT = POINTER(_NDIS_WAN_HEADER_FORMAT)

        # Defines the line quality on a WAN line (OID_WAN_QUALITY_OF_SERVICE).
        class _NDIS_WAN_QUALITY(ENUM):
            NdisWanRaw = 1
            NdisWanErrorControl = 2
            NdisWanReliable = 3

        NDIS_WAN_QUALITY = _NDIS_WAN_QUALITY
        PNDIS_WAN_QUALITY = POINTER(_NDIS_WAN_QUALITY)

        # Defines a protocol's WAN specific capabilities
        # (OID_WAN_PROTOCOL_CAPS).
        _NDIS_WAN_PROTOCOL_CAPS._fields_ = [
            ('Flags', ULONG),
            ('Reserved', ULONG),
        ]

        # Flags used in NDIS_WAN_PROTOCOL_CAPS
        WAN_PROTOCOL_KEEPS_STATS = 0x00000001

        # Defines the state of a token-ring adapter
        # (OID_802_5_CURRENT_RING_STATE).
        class _NDIS_802_5_RING_STATE(ENUM):
            NdisRingStateOpened = 1
            NdisRingStateClosed = 2
            NdisRingStateOpening = 3
            NdisRingStateClosing = 4
            NdisRingStateOpenFailure = 5
            NdisRingStateRingFailure = 6

        NDIS_802_5_RING_STATE = _NDIS_802_5_RING_STATE
        PNDIS_802_5_RING_STATE = POINTER(_NDIS_802_5_RING_STATE)

        # Defines the state of the LAN media
        class _NDIS_MEDIA_STATE(ENUM):
            NdisMediaStateConnected = 1
            NdisMediaStateDisconnected = 2

        NDIS_MEDIA_STATE = _NDIS_MEDIA_STATE
        PNDIS_MEDIA_STATE = POINTER(_NDIS_MEDIA_STATE)

        # The following is set on a per-packet basis as OOB data with
        # NdisClass802_3Priority
        # 0-7 priority levels
        Priority_802_3 = ULONG

        # The following structure is used to query OID_GEN_CO_LINK_SPEED and
        # OID_GEN_CO_MINIMUM_LINK_SPEED. The first OID will return the current
        # link speed of the adapter. The second will return the minimum link
        # speed
        # the adapter is capable of.
        _NDIS_CO_LINK_SPEED._fields_ = [
            ('Outbound', ULONG),
            ('Inbound', ULONG),
        ]
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # The following structure is used in OID_GEN_LINK_SPEED_EX for
            # interfaces
            # and is expressed in bits per second.
            _NDIS_LINK_SPEED._fields_ = [
                ('XmitLinkSpeed', ULONG64),
                ('RcvLinkSpeed', ULONG64),
            ]

            # miniports or interfaces that do not know their current link speed
            # can report NDIS_LINK_SPEED_UNKNOWN == ((ULONG64)-1)
            NDIS_LINK_SPEED_UNKNOWN = NET_IF_LINK_SPEED_UNKNOWN
        # END IF


        if not defined(_NDIS_):
            # typedef _Return_type_success_(return >= 0) INT NDIS_STATUS, *PNDIS_STATUS;
            0 = >=(
                _Return_type_success_,
            )


        # END IF


        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # Native 802.11 Definitions
            if not defined(__WINDOT11_H__):
                from windot11_h import * # NOQA
            # END IF

        # END IF   (NTDDI_VERSION >= NTDDI_VISTA)

        # Structure to be used for OID_GEN_SUPPORTED_GUIDS.
        # This structure describes an OID to GUID mapping.
        # Or a Status to GUID mapping.
        # When ndis receives a request for a give GUID it will
        # query the miniport with the supplied OID.
        class _Union_2(ctypes.Union):
            pass


        _Union_2._fields_ = [
            ('Oid', NDIS_OID),
            ('Status', NDIS_STATUS),
        ]
        _NDIS_GUID._Union_2 = _Union_2

        _NDIS_GUID._anonymous_ = (
            '_Union_2',
        )

        _NDIS_GUID._fields_ = [
            ('Guid', GUID),
            ('_Union_2', _NDIS_GUID._Union_2),
            # Size of the data element. If the GUID
            ('Size', ULONG),
            # This is -1 for strings.
            ('Flags', ULONG),
        ]
        fNDIS_GUID_TO_OID = 0x00000001
        fNDIS_GUID_TO_STATUS = 0x00000002
        fNDIS_GUID_ANSI_STRING = 0x00000004
        fNDIS_GUID_UNICODE_STRING = 0x00000008
        fNDIS_GUID_ARRAY = 0x00000010
        fNDIS_GUID_ALLOW_READ = 0x00000020
        fNDIS_GUID_ALLOW_WRITE = 0x00000040
        fNDIS_GUID_METHOD = 0x00000080
        fNDIS_GUID_NDIS_RESERVED = 0x00000100
        fNDIS_GUID_SUPPORT_COMMON_HEADER = 0x00000200

        # Ndis Packet Filter Bits (OID_GEN_CURRENT_PACKET_FILTER).
        NDIS_PACKET_TYPE_DIRECTED = 0x00000001
        NDIS_PACKET_TYPE_MULTICAST = 0x00000002
        NDIS_PACKET_TYPE_ALL_MULTICAST = 0x00000004
        NDIS_PACKET_TYPE_BROADCAST = 0x00000008
        NDIS_PACKET_TYPE_SOURCE_ROUTING = 0x00000010
        NDIS_PACKET_TYPE_PROMISCUOUS = 0x00000020
        NDIS_PACKET_TYPE_SMT = 0x00000040
        NDIS_PACKET_TYPE_ALL_LOCAL = 0x00000080
        NDIS_PACKET_TYPE_GROUP = 0x00001000
        NDIS_PACKET_TYPE_ALL_FUNCTIONAL = 0x00002000
        NDIS_PACKET_TYPE_FUNCTIONAL = 0x00004000
        NDIS_PACKET_TYPE_MAC_FRAME = 0x00008000
        NDIS_PACKET_TYPE_NO_LOCAL = 0x00010000

        # Ndis Token-Ring Ring Status Codes (OID_802_5_CURRENT_RING_STATUS).
        NDIS_RING_SIGNAL_LOSS = 0x00008000
        NDIS_RING_HARD_ERROR = 0x00004000
        NDIS_RING_SOFT_ERROR = 0x00002000
        NDIS_RING_TRANSMIT_BEACON = 0x00001000
        NDIS_RING_LOBE_WIRE_FAULT = 0x00000800
        NDIS_RING_AUTO_REMOVAL_ERROR = 0x00000400
        NDIS_RING_REMOVE_RECEIVED = 0x00000200
        NDIS_RING_COUNTER_OVERFLOW = 0x00000100
        NDIS_RING_SINGLE_STATION = 0x00000080
        NDIS_RING_RING_RECOVERY = 0x00000040

        # Ndis protocol option bits (OID_GEN_PROTOCOL_OPTIONS).
        NDIS_PROT_OPTION_ESTIMATED_LENGTH = 0x00000001
        NDIS_PROT_OPTION_NO_LOOPBACK = 0x00000002
        NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = 0x00000004
        NDIS_PROT_OPTION_SEND_RESTRICTED = 0x00000008

        # Ndis MAC option bits (OID_GEN_MAC_OPTIONS).
        NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = 0x00000001
        NDIS_MAC_OPTION_RECEIVE_SERIALIZED = 0x00000002
        NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = 0x00000004
        NDIS_MAC_OPTION_NO_LOOPBACK = 0x00000008

        # This flag has been deprecated. Deserialized drivers are
        # full duplex drivers
        NDIS_MAC_OPTION_FULL_DUPLEX = 0x00000010        # deprecated
        NDIS_MAC_OPTION_EOTX_INDICATION = 0x00000020
        NDIS_MAC_OPTION_8021P_PRIORITY = 0x00000040
        NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = 0x00000080
        NDIS_MAC_OPTION_RECEIVE_AT_DPC = 0x00000100
        NDIS_MAC_OPTION_8021Q_VLAN = 0x00000200
        NDIS_MAC_OPTION_RESERVED = 0x80000000

        # NDIS media capabilities bits (OID_GEN_MEDIA_CAPABILITIES).
        NDIS_MEDIA_CAP_TRANSMIT = 0x00000001        # Supports sending data
        NDIS_MEDIA_CAP_RECEIVE = 0x00000002        # Supports receiving data

        # NDIS MAC option bits for OID_GEN_CO_MAC_OPTIONS.
        NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = 0x00000001

        # The following is set on a per-packet basis as OOB data with
        # NdisClassIrdaPacketInfo
        # This is the per-packet info specified on a per-packet basis
        _NDIS_IRDA_PACKET_INFO._fields_ = [
            ('ExtraBOFs', ULONG),
            ('MinTurnAroundTime', ULONG),
        ]
        if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
            # The following macro is used to build a NET_LUID
            def NDIS_MAKE_NET_LUID(_pNetLuid, _IfType, _NetLuidIndex):
                _pNetLuid.Info.IfType = _IfType
                _pNetLuid.Info.NetLuidIndex = _NetLuidIndex
                _pNetLuid.Info.Reserved = 0
                
            NDIS_IF_MAX_STRING_SIZE = IF_MAX_STRING_SIZE
            NDIS_IF_COUNTED_STRING = IF_COUNTED_STRING
            PNDIS_IF_COUNTED_STRING = POINTER(IF_COUNTED_STRING)
            NDIS_MAX_PHYS_ADDRESS_LENGTH = IF_MAX_PHYS_ADDRESS_LENGTH
            NDIS_IF_PHYSICAL_ADDRESS = IF_PHYSICAL_ADDRESS
            PNDIS_IF_PHYSICAL_ADDRESS = POINTER(IF_PHYSICAL_ADDRESS)

            # NDIS_MEDIA_CONNECT_STATE enum type is used in
            # OID_GEN_MEDIA_CONNECT_STATUS_EX
            NDIS_MEDIA_CONNECT_STATE = NET_IF_MEDIA_CONNECT_STATE
            PNDIS_MEDIA_CONNECT_STATE = POINTER(NET_IF_MEDIA_CONNECT_STATE)

            # NET_IF_MEDIA_DUPLEX_STATE enum type is used in
            # OID_GEN_MEDIA_DUPLEX_STATE
            NDIS_MEDIA_DUPLEX_STATE = NET_IF_MEDIA_DUPLEX_STATE
            PNDIS_MEDIA_DUPLEX_STATE = POINTER(NET_IF_MEDIA_DUPLEX_STATE)


            class _NDIS_SUPPORTED_PAUSE_FUNCTIONS(ENUM):
                NdisPauseFunctionsUnsupported = 1
                NdisPauseFunctionsSendOnly = 2
                NdisPauseFunctionsReceiveOnly = 3
                NdisPauseFunctionsSendAndReceive = 4
                NdisPauseFunctionsUnknown = 5

            NDIS_SUPPORTED_PAUSE_FUNCTIONS = _NDIS_SUPPORTED_PAUSE_FUNCTIONS
            PNDIS_SUPPORTED_PAUSE_FUNCTIONS = POINTER(_NDIS_SUPPORTED_PAUSE_FUNCTIONS)
            NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = 0x00000001
            NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = 0x00000002
            NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = 0x00000004
            NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = 0x00000008

            # structure used in NDIS_STATUS_LINK_STATE and OID_GEN_LINK_STATE
            NDIS_LINK_STATE_REVISION_1 = 1


            _NDIS_LINK_STATE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('MediaConnectState', NDIS_MEDIA_CONNECT_STATE),
                ('MediaDuplexState', NDIS_MEDIA_DUPLEX_STATE),
                ('XmitLinkSpeed', ULONG64),
                ('RcvLinkSpeed', ULONG64),
                ('PauseFunctions', NDIS_SUPPORTED_PAUSE_FUNCTIONS),
                ('AutoNegotiationFlags', ULONG),
            ]
            NDIS_SIZEOF_LINK_STATE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_LINK_STATE,
                AutoNegotiationFlags)
            )

            # the following structure is used in OID_GEN_LINK_PARAMETERS
            NDIS_LINK_PARAMETERS_REVISION_1 = 1


            _NDIS_LINK_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('MediaDuplexState', NDIS_MEDIA_DUPLEX_STATE),
                ('XmitLinkSpeed', ULONG64),
                ('RcvLinkSpeed', ULONG64),
                ('PauseFunctions', NDIS_SUPPORTED_PAUSE_FUNCTIONS),
                ('AutoNegotiationFlags', ULONG),
            ]
            NDIS_SIZEOF_LINK_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_LINK_PARAMETERS,
                AutoNegotiationFlags)
            )

            # structure used in NDIS_STATUS_LINK_STATE and OID_GEN_LINK_STATE
            NDIS_OPER_STATE_REVISION_1 = 1


            _NDIS_OPER_STATE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('OperationalStatus', NET_IF_OPER_STATUS),
                ('OperationalStatusFlags', ULONG),
            ]
            NDIS_SIZEOF_OPER_STATE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_OPER_STATE,
                OperationalStatusFlags)
            )

            # Structure used in OID_GEN_IP_OPER_STATUS.
            _NDIS_IP_OPER_STATUS._fields_ = [
                ('AddressFamily', ULONG),
                ('OperationalStatus', NET_IF_OPER_STATUS),
                ('OperationalStatusFlags', ULONG),
            ]

            # Don't change the value for this macro definition.
            MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED = 32
            NDIS_IP_OPER_STATUS_INFO_REVISION_1 = 1


            _NDIS_IP_OPER_STATUS_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('NumberofAddressFamiliesReturned', ULONG),
                ('IpOperationalStatus', NDIS_IP_OPER_STATUS * MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED),
            ]
            NDIS_SIZEOF_IP_OPER_STATUS_INFO_REVISION_1 = (
                FIELD_OFFSET(NDIS_IP_OPER_STATUS_INFO, 'IpOperationalStatus') +
                MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED * (ctypes.sizeof(NDIS_IP_OPER_STATUS)
            )
            # structure used in NDIS_STATUS_IP_OPER_STATUS
            NDIS_IP_OPER_STATE_REVISION_1 = 1
            _NDIS_IP_OPER_STATE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('IpOperationalStatus', NDIS_IP_OPER_STATUS),
            ]
            NDIS_SIZEOF_IP_OPER_STATE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_IP_OPER_STATE,
                IpOperationalStatus)
            )
            # These defines and structures are used with
            # OID_TCP_OFFLOAD_PARAMETERS
            NDIS_OFFLOAD_PARAMETERS_NO_CHANGE = 0
            # values used in IPv4Checksum, TCPIPv4Checksum, UDPIPv4Checksum
            # TCPIPv6Checksum and UDPIPv6Checksum
            NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED = 1
            NDIS_OFFLOAD_PARAMETERS_TX_ENABLED_RX_DISABLED = 2
            NDIS_OFFLOAD_PARAMETERS_RX_ENABLED_TX_DISABLED = 3
            NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED = 4
            # values used in LsoV1
            NDIS_OFFLOAD_PARAMETERS_LSOV1_DISABLED = 1
            NDIS_OFFLOAD_PARAMETERS_LSOV1_ENABLED = 2
            # values used in IPsecV1
            NDIS_OFFLOAD_PARAMETERS_IPSECV1_DISABLED = 1
            NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_ENABLED = 2
            NDIS_OFFLOAD_PARAMETERS_IPSECV1_ESP_ENABLED = 3
            NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_AND_ESP_ENABLED = 4
            # values used in LsoV2
            NDIS_OFFLOAD_PARAMETERS_LSOV2_DISABLED = 1
            NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED = 2
            if NDIS_SUPPORT_NDIS61:
                # values used in IPsecV2 and IPsecV2IPv4
                NDIS_OFFLOAD_PARAMETERS_IPSECV2_DISABLED = 1
                NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_ENABLED = 2
                NDIS_OFFLOAD_PARAMETERS_IPSECV2_ESP_ENABLED = 3
                NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_AND_ESP_ENABLED = 4
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED = 1
                NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED = 2

                # Flags used in EncapsulationTypes field of
                # NDIS_OFFLOAD_PARAMETERS
                NDIS_ENCAPSULATION_TYPE_GRE_MAC = 0x00000001
                if NDIS_SUPPORT_NDIS650:
                    NDIS_ENCAPSULATION_TYPE_VXLAN = 0x00000002
                # END IF   (NDIS_SUPPORT_NDIS650)
            # END IF   (NDIS_SUPPORT_NDIS630)

            # values used in TcpConnectionIPv4 and TcpConnectionIPv6 fields
            # of NDIS_OFFLOAD_PARAMETERS
            NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_DISABLED = 1
            NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_ENABLED = 2

            # Used in OID_TCP_OFFLOAD_PARAMETERS for setting
            # the offload parameters of a NIC
            NDIS_OFFLOAD_PARAMETERS_REVISION_1 = 1
            if NDIS_SUPPORT_NDIS61:
                NDIS_OFFLOAD_PARAMETERS_REVISION_2 = 2
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_OFFLOAD_PARAMETERS_REVISION_3 = 3
            # END IF   (NDIS_SUPPORT_NDIS630)

            if NDIS_SUPPORT_NDIS650:
                NDIS_OFFLOAD_PARAMETERS_REVISION_4 = 4
            # END IF   (NDIS_SUPPORT_NDIS650)

            # Bits used in Flags parameter of NDIS_OFFLOAD_PARAMETERS
            # structure:
            if NDIS_SUPPORT_NDIS630:
                NDIS_OFFLOAD_PARAMETERS_SKIP_REGISTRY_UPDATE = 0x00000001
            # END IF   (NDIS_SUPPORT_NDIS630)


        if NDIS_SUPPORT_NDIS630:
                class _Struct_1(ctypes.Structure):
                    pass


                _Struct_1._fields_ = [
                    ('RscIPv4', UCHAR),
                    ('RscIPv6', UCHAR),
                ]
                _NDIS_OFFLOAD_PARAMETERS._Struct_1 = _Struct_1


                class _Struct_2(ctypes.Structure):
                    pass


                _Struct_2._fields_ = [
                    ('EncapsulatedPacketTaskOffload', UCHAR),
                    ('EncapsulationTypes', UCHAR),
                ]
                _NDIS_OFFLOAD_PARAMETERS._Struct_2 = _Struct_2

        if NDIS_SUPPORT_NDIS650:
                class _ENCAPSULATION_PROTOCOL_PARAMETERS(ctypes.Union):
                    pass


                class _VXLAN_PARAMETERS(ctypes.Structure):
                    pass


                _VXLAN_PARAMETERS._fields_ = [
                    ('VxlanUDPPortNumber', USHORT),
                ]
                VxlanParameters = _VXLAN_PARAMETERS
                _ENCAPSULATION_PROTOCOL_PARAMETERS.VxlanParameters = VxlanParameters


                _ENCAPSULATION_PROTOCOL_PARAMETERS._fields_ = [
                    ('VxlanParameters', _ENCAPSULATION_PROTOCOL_PARAMETERS.VxlanParameters),
                    ('Value', ULONG),
                ]
                EncapsulationProtocolParameters = _ENCAPSULATION_PROTOCOL_PARAMETERS
                _NDIS_OFFLOAD_PARAMETERS.EncapsulationProtocolParameters = EncapsulationProtocolParameters

            _NDIS_OFFLOAD_PARAMETERS._anonymous_ = (
                '_Struct_1',
                '_Struct_2',
            )

            _TEMP__NDIS_OFFLOAD_PARAMETERS = [
                ('Header', NDIS_OBJECT_HEADER),
                ('IPv4Checksum', UCHAR),
                ('TCPIPv4Checksum', UCHAR),
                ('UDPIPv4Checksum', UCHAR),
                ('TCPIPv6Checksum', UCHAR),
                ('UDPIPv6Checksum', UCHAR),
                ('LsoV1', UCHAR),
                ('IPsecV1', UCHAR),
                ('LsoV2IPv4', UCHAR),
                ('LsoV2IPv6', UCHAR),
                ('TcpConnectionIPv4', UCHAR),
                ('TcpConnectionIPv6', UCHAR),
                ('Flags', ULONG),
            ]
            if NDIS_SUPPORT_NDIS61:
                    _TEMP__NDIS_OFFLOAD_PARAMETERS += [
                    ('IPsecV2', UCHAR),
                    ('IPsecV2IPv4', UCHAR),
                    ]
                # END IF   (NDIS_SUPPORT_NDIS61)


                    ]
                    if NDIS_SUPPORT_NDIS630:
                            _TEMP__NDIS_OFFLOAD_PARAMETERS += [
                    ('_Struct_1', _NDIS_OFFLOAD_PARAMETERS._Struct_1),
                    ('_Struct_2', _NDIS_OFFLOAD_PARAMETERS._Struct_2),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS630)


                            ]
                            if NDIS_SUPPORT_NDIS650:
                                    _TEMP__NDIS_OFFLOAD_PARAMETERS += [
                    ('EncapsulationProtocolParameters', _NDIS_OFFLOAD_PARAMETERS.EncapsulationProtocolParameters),
                                    ]
                                # END IF   (NDIS_SUPPORT_NDIS650)


                                    _NDIS_OFFLOAD_PARAMETERS._fields_ = _TEMP__NDIS_OFFLOAD_PARAMETERS
            NDIS_SIZEOF_OFFLOAD_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD_PARAMETERS,
                Flags)
            )
            if NDIS_SUPPORT_NDIS61:
                NDIS_SIZEOF_OFFLOAD_PARAMETERS_REVISION_2 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD_PARAMETERS,
                    IPsecV2IPv4)
                )
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_SIZEOF_OFFLOAD_PARAMETERS_REVISION_3 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD_PARAMETERS,
                    EncapsulationTypes)
                )
            # END IF   (NDIS_SUPPORT_NDIS630)

            if NDIS_SUPPORT_NDIS650:
                NDIS_SIZEOF_OFFLOAD_PARAMETERS_REVISION_4 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD_PARAMETERS,
                    EncapsulationProtocolParameters)
                )
            # END IF   (NDIS_SUPPORT_NDIS650)

            NDIS_OFFLOAD_NOT_SUPPORTED = 0
            NDIS_OFFLOAD_SUPPORTED = 1
            NDIS_OFFLOAD_SET_NO_CHANGE = 0
            NDIS_OFFLOAD_SET_ON = 1
            NDIS_OFFLOAD_SET_OFF = 2

            # Encapsulation types that are used during offload in query and set
            NDIS_ENCAPSULATION_NOT_SUPPORTED = 0x00000000
            NDIS_ENCAPSULATION_NULL = 0x00000001
            NDIS_ENCAPSULATION_IEEE_802_3 = 0x00000002
            NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q = 0x00000004
            NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q_IN_OOB = 0x00000008
            NDIS_ENCAPSULATION_IEEE_LLC_SNAP_ROUTED = 0x00000010

            # Describes the large send offload version 1 capabilities
            # or configuration of the NIC. Used in NDIS_OFFLOAD structure
            class IPv4(ctypes.Structure):
                pass


            IPv4._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
                ('TcpOptions', ULONG, 2),
                ('IpOptions', ULONG, 2),
            ]
            _NDIS_TCP_LARGE_SEND_OFFLOAD_V1.IPv4 = IPv4


            _NDIS_TCP_LARGE_SEND_OFFLOAD_V1._fields_ = [
                ('IPv4', _NDIS_TCP_LARGE_SEND_OFFLOAD_V1.IPv4),
            ]

            # Describes the checksum task offload capabilities or configuration
            # of the NIC. used in NDIS_OFFLOAD structure
            class IPv4Transmit(ctypes.Structure):
                pass


            IPv4Transmit._fields_ = [
                ('Encapsulation', ULONG),
                ('IpOptionsSupported', ULONG, 2),
                ('TcpOptionsSupported', ULONG, 2),
                ('TcpChecksum', ULONG, 2),
                ('UdpChecksum', ULONG, 2),
                ('IpChecksum', ULONG, 2),
            ]
            _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv4Transmit = IPv4Transmit


            class IPv4Receive(ctypes.Structure):
                pass


            IPv4Receive._fields_ = [
                ('Encapsulation', ULONG),
                ('IpOptionsSupported', ULONG, 2),
                ('TcpOptionsSupported', ULONG, 2),
                ('TcpChecksum', ULONG, 2),
                ('UdpChecksum', ULONG, 2),
                ('IpChecksum', ULONG, 2),
            ]
            _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv4Receive = IPv4Receive


            class IPv6Transmit(ctypes.Structure):
                pass


            IPv6Transmit._fields_ = [
                ('Encapsulation', ULONG),
                ('IpExtensionHeadersSupported', ULONG, 2),
                ('TcpOptionsSupported', ULONG, 2),
                ('TcpChecksum', ULONG, 2),
                ('UdpChecksum', ULONG, 2),
            ]
            _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv6Transmit = IPv6Transmit


            class IPv6Receive(ctypes.Structure):
                pass


            IPv6Receive._fields_ = [
                ('Encapsulation', ULONG),
                ('IpExtensionHeadersSupported', ULONG, 2),
                ('TcpOptionsSupported', ULONG, 2),
                ('TcpChecksum', ULONG, 2),
                ('UdpChecksum', ULONG, 2),
            ]
            _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv6Receive = IPv6Receive


            _NDIS_TCP_IP_CHECKSUM_OFFLOAD._fields_ = [
                ('IPv4Transmit', _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv4Transmit),
                ('IPv4Receive', _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv4Receive),
                ('IPv6Transmit', _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv6Transmit),
                ('IPv6Receive', _NDIS_TCP_IP_CHECKSUM_OFFLOAD.IPv6Receive),
            ]

            # Describes the IPsec task offload version 1 capabilities
            # or configuration of the NIC. Used in NDIS_OFFLOAD structure
            class Supported(ctypes.Structure):
                pass


            Supported._fields_ = [
                ('Encapsulation', ULONG),
                ('AhEspCombined', ULONG),
                ('TransportTunnelCombined', ULONG),
                ('IPv4Options', ULONG),
                ('Flags', ULONG),
            ]
            _NDIS_IPSEC_OFFLOAD_V1.Supported = Supported


            class IPv4AH(ctypes.Structure):
                pass


            IPv4AH._fields_ = [
                ('Md5', ULONG, 2),
                ('Sha_1', ULONG, 2),
                ('Transport', ULONG, 2),
                ('Tunnel', ULONG, 2),
                ('Send', ULONG, 2),
                ('Receive', ULONG, 2),
            ]
            _NDIS_IPSEC_OFFLOAD_V1.IPv4AH = IPv4AH


            class IPv4ESP(ctypes.Structure):
                pass


            IPv4ESP._fields_ = [
                ('Des', ULONG, 2),
                ('Reserved', ULONG, 2),
                ('TripleDes', ULONG, 2),
                ('NullEsp', ULONG, 2),
                ('Transport', ULONG, 2),
                ('Tunnel', ULONG, 2),
                ('Send', ULONG, 2),
                ('Receive', ULONG, 2),
            ]
            _NDIS_IPSEC_OFFLOAD_V1.IPv4ESP = IPv4ESP


            _NDIS_IPSEC_OFFLOAD_V1._fields_ = [
                ('Supported', _NDIS_IPSEC_OFFLOAD_V1.Supported),
                ('IPv4AH', _NDIS_IPSEC_OFFLOAD_V1.IPv4AH),
                ('IPv4ESP', _NDIS_IPSEC_OFFLOAD_V1.IPv4ESP),
            ]

            # Describes the large send offload version 2 capabilities
            # or configuration of the NIC. Used in NDIS_OFFLOAD structure
            class IPv4(ctypes.Structure):
                pass


            IPv4._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
            ]
            _NDIS_TCP_LARGE_SEND_OFFLOAD_V2.IPv4 = IPv4


            class IPv6(ctypes.Structure):
                pass


            IPv6._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
                ('IpExtensionHeadersSupported', ULONG, 2),
                ('TcpOptionsSupported', ULONG, 2),
            ]
            _NDIS_TCP_LARGE_SEND_OFFLOAD_V2.IPv6 = IPv6


            _NDIS_TCP_LARGE_SEND_OFFLOAD_V2._fields_ = [
                ('IPv4', _NDIS_TCP_LARGE_SEND_OFFLOAD_V2.IPv4),
                ('IPv6', _NDIS_TCP_LARGE_SEND_OFFLOAD_V2.IPv6),
            ]
            if NDIS_SUPPORT_NDIS61:
                # Structures for IPSec Task Offload V2.
                # IPsec Algorithms for Authentication used in
                # AuthenticationAlgorithms field
                # of NDIS_IPSEC_OFFLOAD_V2 structure
                IPSEC_OFFLOAD_V2_AUTHENTICATION_MD5 = 0x00000001
                IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_1 = 0x00000002
                IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_256 = 0x00000004
                IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_128 = 0x00000008
                IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_192 = 0x00000010
                IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_256 = 0x00000020

                # IPsec Algorithms for Encryption used in EncryptionAlgorithms
                # field of
                # NDIS_IPSEC_OFFLOAD_V2 structure
                IPSEC_OFFLOAD_V2_ENCRYPTION_NONE = 0x00000001
                IPSEC_OFFLOAD_V2_ENCRYPTION_DES_CBC = 0x00000002
                IPSEC_OFFLOAD_V2_ENCRYPTION_3_DES_CBC = 0x00000004
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_128 = 0x00000008
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_192 = 0x00000010
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_256 = 0x00000020
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_128 = 0x00000040
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_192 = 0x00000080
                IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_256 = 0x00000100

                # IPsec offload V2 capabilities used in NDIS_OFFLOAD
                _NDIS_IPSEC_OFFLOAD_V2._fields_ = [
                    # MAC encap types supported
                    ('Encapsulation', ULONG),
                    # IPv6 Supported
                    ('IPv6Supported', BOOLEAN),
                    # Supports offload of packets with IPv4 options
                    ('IPv4Options', BOOLEAN),
                    # Supports offload of packets with non IPsec Extension
                    # headers
                    ('IPv6NonIPsecExtensionHeaders', BOOLEAN),
                    ('Ah', BOOLEAN),
                    ('Esp', BOOLEAN),
                    ('AhEspCombined', BOOLEAN),
                    ('Transport', BOOLEAN),
                    ('Tunnel', BOOLEAN),
                    ('TransportTunnelCombined', BOOLEAN),
                    ('LsoSupported', BOOLEAN),
                    ('ExtendedSequenceNumbers', BOOLEAN),
                    ('UdpEsp', ULONG),
                    # Bit Mask of Authentication Algorithms
                    ('AuthenticationAlgorithms', ULONG),
                    # Bit Mask of Encryption Algorithms
                    ('EncryptionAlgorithms', ULONG),
                    # Number of SAs that can be offloaded
                    ('SaOffloadCapacity', ULONG),
                ]
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                class IPv4(ctypes.Structure):
                    pass


                IPv4._fields_ = [
                    ('Enabled', BOOLEAN),
                ]
                _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD.IPv4 = IPv4


                class IPv6(ctypes.Structure):
                    pass


                IPv6._fields_ = [
                    ('Enabled', BOOLEAN),
                ]
                _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD.IPv6 = IPv6


                _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD._fields_ = [
                    ('IPv4', _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD.IPv4),
                    ('IPv6', _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD.IPv6),
                ]
                NDIS_TCP_RECV_SEG_COALESC_OFFLOAD_REVISION_1 = 1
                NDIS_SIZEOF_TCP_RECV_SEG_COALESC_OFFLOAD_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD,
                    IPv6.Enabled)
                )
                NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_NOT_SUPPORTED = (
                    0x00000000
                )
                NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV4 = 0x00000001
                NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV4 = 0x00000002
                NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV6 = 0x00000004
                NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV6 = 0x00000008


                _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD._fields_ = [
                    ('TransmitChecksumOffloadSupported', ULONG, 4),
                    ('ReceiveChecksumOffloadSupported', ULONG, 4),
                    ('LsoV2Supported', ULONG, 4),
                    ('RssSupported', ULONG, 4),
                    ('VmqSupported', ULONG, 4),
                    ('MaxHeaderSizeSupported', ULONG),
                ]
                NDIS_SIZEOF_ENCAPSULATED_PACKET_TASK_OFFLOAD_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD( NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD,
                    MaxHeaderSizeSupported)
                )
            # END IF   (NDIS_SUPPORT_NDIS630)


            if NDIS_SUPPORT_NDIS650:
                class _ENCAPSULATION_PROTOCOL_INFO(ctypes.Union):
                    pass


                class _VXLAN_INFO(ctypes.Structure):
                    pass


                _VXLAN_INFO._fields_ = [
                    ('VxlanUDPPortNumber', USHORT),
                    ('VxlanUDPPortNumberConfigurable', USHORT, 1),
                ]
                VxlanInfo = _VXLAN_INFO
                _ENCAPSULATION_PROTOCOL_INFO.VxlanInfo = VxlanInfo


                _ENCAPSULATION_PROTOCOL_INFO._fields_ = [
                    ('VxlanInfo', _ENCAPSULATION_PROTOCOL_INFO.VxlanInfo),
                    ('Value', ULONG),
                ]
                EncapsulationProtocolInfo = _ENCAPSULATION_PROTOCOL_INFO
                _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2.EncapsulationProtocolInfo = EncapsulationProtocolInfo


                _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2._fields_ = [
                    ('TransmitChecksumOffloadSupported', ULONG, 4),
                    ('ReceiveChecksumOffloadSupported', ULONG, 4),
                    ('LsoV2Supported', ULONG, 4),
                    ('RssSupported', ULONG, 4),
                    ('VmqSupported', ULONG, 4),
                    ('Reserved', ULONG, 12),
                    ('MaxHeaderSizeSupported', ULONG),
                    ('EncapsulationProtocolInfo', _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2.EncapsulationProtocolInfo),
                    ('Reserved1', ULONG),
                    ('Reserved2', ULONG),
                ]
            # END IF   (NDIS_SUPPORT_NDIS650)

            if NDIS_SUPPORT_NDIS670:
                class _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS(ENUM):
                    NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0
                    NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED = 1
                    NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED = 2
                    NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND = 3

                NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS = _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS

                _NDIS_RFC6877_464XLAT_OFFLOAD._fields_ = [
                    ('XlatOffload', NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS),
                    # Reserved, always 0
                    ('Flags', ULONG),
                ]
            # END IF   (NDIS_SUPPORT_NDIS670)

            # flags used in Flags field of NDIS_OFFLOAD structure
            NDIS_OFFLOAD_FLAGS_GROUP_CHECKSUM_CAPABILITIES = 0x00000001
            if NDIS_SUPPORT_NDIS630:
                IPSEC_OFFLOAD_V2_AND_TCP_CHECKSUM_COEXISTENCE = 0x00000002
                IPSEC_OFFLOAD_V2_AND_UDP_CHECKSUM_COEXISTENCE = 0x00000004
            # END IF   (NDIS_SUPPORT_NDIS630)

            # Describes TCP/IP task offload capabilities or configuration
            # of the NIC. Used in OID_TCP_OFFLOAD_CURRENT_CONFIG
            # and OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES
            NDIS_OFFLOAD_REVISION_1 = 1
            if NDIS_SUPPORT_NDIS61:
                NDIS_OFFLOAD_REVISION_2 = 2
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_OFFLOAD_REVISION_3 = 3
            # END IF   (NDIS_SUPPORT_NDIS630)

            if NDIS_SUPPORT_NDIS650:
                NDIS_OFFLOAD_REVISION_4 = 4
            # END IF   (NDIS_SUPPORT_NDIS650)

            if NDIS_SUPPORT_NDIS670:
                NDIS_OFFLOAD_REVISION_5 = 5
            # END IF   (NDIS_SUPPORT_NDIS670)


            _TEMP__NDIS_OFFLOAD = [
                ('Header', NDIS_OBJECT_HEADER),
                # Checksum Offload information
                ('Checksum', NDIS_TCP_IP_CHECKSUM_OFFLOAD),
                # Large Send Offload information
                ('LsoV1', NDIS_TCP_LARGE_SEND_OFFLOAD_V1),
                # IPsec Offload Information
                ('IPsecV1', NDIS_IPSEC_OFFLOAD_V1),
                # Large Send Offload version 2Information
                ('LsoV2', NDIS_TCP_LARGE_SEND_OFFLOAD_V2),
                ('Flags', ULONG),
            ]
            if NDIS_SUPPORT_NDIS61:
                    _TEMP__NDIS_OFFLOAD += [
                    # IPsec offload V2
                    ('IPsecV2', NDIS_IPSEC_OFFLOAD_V2),
                    ]
                # END IF   (NDIS_SUPPORT_NDIS61)


                    ]
                    if NDIS_SUPPORT_NDIS630:
                            _TEMP__NDIS_OFFLOAD += [
                    # Receive Segment Coalescing information
                    ('Rsc', NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD),
                    # NVGRE Encapsulated packet task offload information
                    ('EncapsulatedPacketTaskOffloadGre', NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS630)


                            ]
                            if NDIS_SUPPORT_NDIS650:
                                    _TEMP__NDIS_OFFLOAD += [
                    # VXLAN Encapsulated packet task offload information
                    ('EncapsulatedPacketTaskOffloadVxlan', NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2),
                    # Enabled encapsulation types for Encapsulated packet task
                    # offload
                    ('EncapsulationTypes', UCHAR),
                                    ]
                                # END IF   (NDIS_SUPPORT_NDIS650)


                                    ]
                                    if NDIS_SUPPORT_NDIS670:
                                            _TEMP__NDIS_OFFLOAD += [
                    # 464XLAT hardward offload information.
                    ('Rfc6877Xlat', NDIS_RFC6877_464XLAT_OFFLOAD),
                                            ]
                                        # END IF   (NDIS_SUPPORT_NDIS670)


                                            _NDIS_OFFLOAD._fields_ = _TEMP__NDIS_OFFLOAD
            NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD,
                Flags)
            )
            if NDIS_SUPPORT_NDIS61:
                NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_2 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD,
                    IPsecV2)
                )
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_3 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD,
                    EncapsulatedPacketTaskOffloadGre)
                )
            # END IF   (NDIS_SUPPORT_NDIS630)

            if NDIS_SUPPORT_NDIS650:
                NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_4 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD,
                    EncapsulationTypes)
                )
            # END IF   (NDIS_SUPPORT_NDIS650)

            if NDIS_SUPPORT_NDIS670:
                NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_5 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_OFFLOAD,
                    Rfc6877Xlat)
                )
            # END IF   (NDIS_SUPPORT_NDIS670)

            # The following data structures are used with offload related WMI
            # guids. NDIS will trnaslate these data structures to those used
            # in OID and status indications
            class IPv4(ctypes.Structure):
                pass


            IPv4._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
                ('TcpOptions', ULONG),
                ('IpOptions', ULONG),
            ]
            _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1.IPv4 = IPv4


            _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1._fields_ = [
                ('IPv4', _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1.IPv4),
            ]


            class IPv4Transmit(ctypes.Structure):
                pass


            IPv4Transmit._fields_ = [
                ('Encapsulation', ULONG),
                ('IpOptionsSupported', ULONG),
                ('TcpOptionsSupported', ULONG),
                ('TcpChecksum', ULONG),
                ('UdpChecksum', ULONG),
                ('IpChecksum', ULONG),
            ]
            _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv4Transmit = IPv4Transmit


            class IPv4Receive(ctypes.Structure):
                pass


            IPv4Receive._fields_ = [
                ('Encapsulation', ULONG),
                ('IpOptionsSupported', ULONG),
                ('TcpOptionsSupported', ULONG),
                ('TcpChecksum', ULONG),
                ('UdpChecksum', ULONG),
                ('IpChecksum', ULONG),
            ]
            _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv4Receive = IPv4Receive


            class IPv6Transmit(ctypes.Structure):
                pass


            IPv6Transmit._fields_ = [
                ('Encapsulation', ULONG),
                ('IpExtensionHeadersSupported', ULONG),
                ('TcpOptionsSupported', ULONG),
                ('TcpChecksum', ULONG),
                ('UdpChecksum', ULONG),
            ]
            _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv6Transmit = IPv6Transmit


            class IPv6Receive(ctypes.Structure):
                pass


            IPv6Receive._fields_ = [
                ('Encapsulation', ULONG),
                ('IpExtensionHeadersSupported', ULONG),
                ('TcpOptionsSupported', ULONG),
                ('TcpChecksum', ULONG),
                ('UdpChecksum', ULONG),
            ]
            _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv6Receive = IPv6Receive


            _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD._fields_ = [
                ('IPv4Transmit', _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv4Transmit),
                ('IPv4Receive', _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv4Receive),
                ('IPv6Transmit', _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv6Transmit),
                ('IPv6Receive', _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD.IPv6Receive),
            ]


            class Supported(ctypes.Structure):
                pass


            Supported._fields_ = [
                ('Encapsulation', ULONG),
                ('AhEspCombined', ULONG),
                ('TransportTunnelCombined', ULONG),
                ('IPv4Options', ULONG),
                ('Flags', ULONG),
            ]
            _NDIS_WMI_IPSEC_OFFLOAD_V1.Supported = Supported


            class IPv4AH(ctypes.Structure):
                pass


            IPv4AH._fields_ = [
                ('Md5', ULONG),
                ('Sha_1', ULONG),
                ('Transport', ULONG),
                ('Tunnel', ULONG),
                ('Send', ULONG),
                ('Receive', ULONG),
            ]
            _NDIS_WMI_IPSEC_OFFLOAD_V1.IPv4AH = IPv4AH


            class IPv4ESP(ctypes.Structure):
                pass


            IPv4ESP._fields_ = [
                ('Des', ULONG),
                ('Reserved', ULONG),
                ('TripleDes', ULONG),
                ('NullEsp', ULONG),
                ('Transport', ULONG),
                ('Tunnel', ULONG),
                ('Send', ULONG),
                ('Receive', ULONG),
            ]
            _NDIS_WMI_IPSEC_OFFLOAD_V1.IPv4ESP = IPv4ESP


            _NDIS_WMI_IPSEC_OFFLOAD_V1._fields_ = [
                ('Supported', _NDIS_WMI_IPSEC_OFFLOAD_V1.Supported),
                ('IPv4AH', _NDIS_WMI_IPSEC_OFFLOAD_V1.IPv4AH),
                ('IPv4ESP', _NDIS_WMI_IPSEC_OFFLOAD_V1.IPv4ESP),
            ]


            class IPv4(ctypes.Structure):
                pass


            IPv4._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
            ]
            _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2.IPv4 = IPv4


            class IPv6(ctypes.Structure):
                pass


            IPv6._fields_ = [
                ('Encapsulation', ULONG),
                ('MaxOffLoadSize', ULONG),
                ('MinSegmentCount', ULONG),
                ('IpExtensionHeadersSupported', ULONG),
                ('TcpOptionsSupported', ULONG),
            ]
            _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2.IPv6 = IPv6


            _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2._fields_ = [
                ('IPv4', _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2.IPv4),
                ('IPv6', _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2.IPv6),
            ]

            _TEMP__NDIS_WMI_OFFLOAD = [
                # Header.Revision = NDIS_OFFLOAD_REVISION_1;
                ('Header', NDIS_OBJECT_HEADER),
                # Checksum Offload information
                ('Checksum', NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD),
                # Large Send Offload information
                ('LsoV1', NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1),
                # IPsec Offload Information
                ('IPsecV1', NDIS_WMI_IPSEC_OFFLOAD_V1),
                # Large Send Offload version 2 Information
                ('LsoV2', NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2),
                ('Flags', ULONG),
            ]
            if NDIS_SUPPORT_NDIS61:
                    _TEMP__NDIS_WMI_OFFLOAD += [
                    # IPsec offload version 2 information
                    ('IPsecV2', NDIS_IPSEC_OFFLOAD_V2),
                    ]
                # END IF   (NDIS_SUPPORT_NDIS61)


                    ]
                    if NDIS_SUPPORT_NDIS630:
                            _TEMP__NDIS_WMI_OFFLOAD += [
                    # Recieve Segment Coalescing information
                    ('Rsc', NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD),
                    # GRE Encapsulated packet task offload information
                    ('EncapsulatedPacketTaskOffloadGre', NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS630)


                            _NDIS_WMI_OFFLOAD._fields_ = _TEMP__NDIS_WMI_OFFLOAD
            NDIS_SIZEOF_NDIS_WMI_OFFLOAD_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_OFFLOAD,
                Flags)
            )
            if NDIS_SUPPORT_NDIS61:
                NDIS_SIZEOF_NDIS_WMI_OFFLOAD_REVISION_2 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_OFFLOAD,
                    IPsecV2)
                )
            # END IF   (NDIS_SUPPORT_NDIS61)

            if NDIS_SUPPORT_NDIS630:
                NDIS_SIZEOF_NDIS_WMI_OFFLOAD_REVISION_3 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_OFFLOAD,
                    EncapsulatedPacketTaskOffloadGre)
                )
            # END IF   (NDIS_SUPPORT_NDIS630)

            # Describes TCP connection offload capabilities or configuration
            # of the NIC. Used in OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG,
            # OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES and
            # NDIS_STATUS_OFFLOAD_RESUME
            NDIS_TCP_CONNECTION_OFFLOAD_REVISION_1 = 1
            if NDIS_SUPPORT_NDIS61:
                NDIS_TCP_CONNECTION_OFFLOAD_REVISION_2 = 2
            # END IF   (NDIS_SUPPORT_NDIS61)


            _TEMP__NDIS_TCP_CONNECTION_OFFLOAD = [
                # Header.Size = (ctypes.sizeof(NDIS_TCP_CONNECTION_OFFLOAD);
                ('Header', NDIS_OBJECT_HEADER),
                ('Encapsulation', ULONG),
                ('SupportIPv4', ULONG, 2),
                ('SupportIPv6', ULONG, 2),
                ('SupportIPv6ExtensionHeaders', ULONG, 2),
                ('SupportSack', ULONG, 2),
            ]
            if NDIS_SUPPORT_NDIS61:
                    _TEMP__NDIS_TCP_CONNECTION_OFFLOAD += [
                    ('CongestionAlgorithm', ULONG, 4),
                    ]
                # END IF   (NDIS_SUPPORT_NDIS61)


                    _TEMP__NDIS_TCP_CONNECTION_OFFLOAD += [
                ('TcpConnectionOffloadCapacity', ULONG),
                ('Flags', ULONG),
                    ]
                    _NDIS_TCP_CONNECTION_OFFLOAD._fields_ = _TEMP__NDIS_TCP_CONNECTION_OFFLOAD
            NDIS_SIZEOF_TCP_CONNECTION_OFFLOAD_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_TCP_CONNECTION_OFFLOAD,
                Flags)
            )
            if NDIS_SUPPORT_NDIS61:
                NDIS_SIZEOF_TCP_CONNECTION_OFFLOAD_REVISION_2 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_TCP_CONNECTION_OFFLOAD,
                    Flags)
                )
            # END IF   (NDIS_SUPPORT_NDIS61)


            _NDIS_WMI_TCP_CONNECTION_OFFLOAD._fields_ = [
                # Header.Size = (ctypes.sizeof(NDIS_TCP_CONNECTION_OFFLOAD);
                ('Header', NDIS_OBJECT_HEADER),
                ('Encapsulation', ULONG),
                ('SupportIPv4', ULONG),
                ('SupportIPv6', ULONG),
                ('SupportIPv6ExtensionHeaders', ULONG),
                ('SupportSack', ULONG),
                ('TcpConnectionOffloadCapacity', ULONG),
                ('Flags', ULONG),
            ]
            NDIS_SIZEOF_WMI_TCP_CONNECTION_OFFLOAD_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_TCP_CONNECTION_OFFLOAD,
                Flags)
            )
            NDIS_MAXIMUM_PORTS = 0x1000000
            # definitions for NDIS PORTs
            NDIS_PORT_NUMBER = ULONG
            PNDIS_PORT_NUMBER = POINTER(ULONG)
            # port related data structures
            NDIS_DEFAULT_PORT_NUMBER = (NDIS_PORT_NUMBER)0
            # NDIS_PORT_TYPE defines the application of a port
            class _NDIS_PORT_TYPE(ENUM):
                NdisPortTypeUndefined = 1
                NdisPortTypeBridge = 2
                NdisPortTypeRasConnection = 3
                NdisPortType8021xSupplicant = 4
                if NDIS_SUPPORT_NDIS630:
                    NdisPortTypeNdisImPlatform = 5
                # END IF

                NdisPortTypeMax = 6

            NDIS_PORT_TYPE = _NDIS_PORT_TYPE
            PNDIS_PORT_TYPE = POINTER(_NDIS_PORT_TYPE)

            # NDIS_PORT_AUTHENTICATION_STATE defines the authentication state
            # of a port
            # on a particular data path
            class _NDIS_PORT_AUTHORIZATION_STATE(ENUM):
                NdisPortAuthorizationUnknown = 1
                NdisPortAuthorized = 2
                NdisPortUnauthorized = 3
                NdisPortReauthorizing = 4

            NDIS_PORT_AUTHORIZATION_STATE = _NDIS_PORT_AUTHORIZATION_STATE
            PNDIS_PORT_AUTHORIZATION_STATE = POINTER(_NDIS_PORT_AUTHORIZATION_STATE)

            # NDIS_PORT_CONTROL_STATE specifies if a port is "controlled"
            # i.e. if it needs authentication, on a particular data path
            class _NDIS_PORT_CONTROL_STATE(ENUM):
                NdisPortControlStateUnknown = 1
                NdisPortControlStateControlled = 2
                NdisPortControlStateUncontrolled = 3

            NDIS_PORT_CONTROL_STATE = _NDIS_PORT_CONTROL_STATE
            PNDIS_PORT_CONTROL_STATE = POINTER(_NDIS_PORT_CONTROL_STATE)

            # Legacy spelling errors
            NDIS_PORT_CONTROLL_STATE = NDIS_PORT_CONTROL_STATE
            PNDIS_PORT_CONTROLL_STATE = PNDIS_PORT_CONTROL_STATE

            # NDIS_PORT_PARAMETERS is used in OID_GEN_PORT_PARAMETERS set OID
            NDIS_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = 1


            _NDIS_PORT_AUTHENTICATION_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('SendControlState', NDIS_PORT_CONTROL_STATE),
                ('RcvControlState', NDIS_PORT_CONTROL_STATE),
                ('SendAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
                ('RcvAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
            ]
            NDIS_SIZEOF_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_PORT_AUTHENTICATION_PARAMETERS,
                RcvAuthorizationState)
            )


            class _NDIS_NETWORK_CHANGE_TYPE(ENUM):
                NdisPossibleNetworkChange = 1
                NdisDefinitelyNetworkChange = 2
                NdisNetworkChangeFromMediaConnect = 3
                NdisNetworkChangeMax = 4

            NDIS_NETWORK_CHANGE_TYPE = _NDIS_NETWORK_CHANGE_TYPE
            PNDIS_NETWORK_CHANGE_TYPE = POINTER(_NDIS_NETWORK_CHANGE_TYPE)
            NDIS_WMI_DEFAULT_METHOD_ID = 1
            NDIS_WMI_OBJECT_TYPE_SET = 0x01
            NDIS_WMI_OBJECT_TYPE_METHOD = 0x02
            NDIS_WMI_OBJECT_TYPE_EVENT = 0x03
            NDIS_WMI_OBJECT_TYPE_ENUM_ADAPTER = 0x04
            NDIS_WMI_OBJECT_TYPE_OUTPUT_INFO = 0x05
            NDIS_WMI_METHOD_HEADER_REVISION_1 = 1


            _NDIS_WMI_METHOD_HEADER._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('PortNumber', NDIS_PORT_NUMBER),
                ('NetLuid', NET_LUID),
                ('RequestId', ULONG64),
                ('Timeout', ULONG),
                ('Padding', UCHAR * 4),
            ]
            NDIS_SIZEOF_WMI_METHOD_HEADER_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_METHOD_HEADER,
                Padding)
            )
            NDIS_WMI_SET_HEADER_REVISION_1 = 1


            _NDIS_WMI_SET_HEADER._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('PortNumber', NDIS_PORT_NUMBER),
                ('NetLuid', NET_LUID),
                ('RequestId', ULONG64),
                ('Timeout', ULONG),
                ('Padding', UCHAR * 4),
            ]
            NDIS_SIZEOF_WMI_SET_HEADER_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_SET_HEADER,
                Padding)
            )
            NDIS_WMI_EVENT_HEADER_REVISION_1 = 1


            _NDIS_WMI_EVENT_HEADER._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('IfIndex', NET_IFINDEX),
                ('NetLuid', NET_LUID),
                ('RequestId', ULONG64),
                ('PortNumber', NDIS_PORT_NUMBER),
                ('DeviceNameLength', ULONG),
                ('DeviceNameOffset', ULONG),
                ('Padding', UCHAR * 4),
            ]
            NDIS_SIZEOF_WMI_EVENT_HEADER_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_EVENT_HEADER,
                Padding)
            )
            NDIS_WMI_ENUM_ADAPTER_REVISION_1 = 1


            _NDIS_WMI_ENUM_ADAPTER._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('IfIndex', NET_IFINDEX),
                ('NetLuid', NET_LUID),
                ('DeviceNameLength', USHORT),
                ('DeviceName', CHAR * 1),
            ]
            NDIS_SIZEOF_WMI_ENUM_ADAPTER_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_ENUM_ADAPTER,
                DeviceName)
            )

            # Flags used in standardized keyword *NdisDeviceType
            NDIS_DEVICE_TYPE_ENDPOINT = 0x00000001
            if NDIS_SUPPORT_NDIS61:
                # Structure and defines for
                # OID_GEN_HD_SPLIT_PARAMETERS
                NDIS_HD_SPLIT_PARAMETERS_REVISION_1 = 1


                _NDIS_HD_SPLIT_PARAMETERS._fields_ = [
                    # Header.Size = (ctypes.sizeof(NDIS_HD_SPLIT_PARAMETERS);
                    ('Header', NDIS_OBJECT_HEADER),
                    ('HDSplitCombineFlags', ULONG),
                ]
                NDIS_SIZEOF_HD_SPLIT_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_HD_SPLIT_PARAMETERS,
                    HDSplitCombineFlags)
                )
                # Flags used in NDIS_HD_SPLIT_PARAMETERS.HDSplitCombineFlags
                # and NDIS_HD_SPLIT_CURRENT_CONFIG.HDSplitCombineFlags
                NDIS_HD_SPLIT_COMBINE_ALL_HEADERS = 0x00000001
                # Structure and defines for
                # OID_GEN_HD_SPLIT_CURRENT_CONFIG
                NDIS_HD_SPLIT_CURRENT_CONFIG_REVISION_1 = 1
                _NDIS_HD_SPLIT_CURRENT_CONFIG._fields_ = [
                    # Header.Size =
                    # (ctypes.sizeof(NDIS_HD_SPLIT_CURRENT_CONFIG);
                    ('Header', NDIS_OBJECT_HEADER),
                    ('HardwareCapabilities', ULONG),
                    ('CurrentCapabilities', ULONG),
                    ('HDSplitFlags', ULONG),
                    ('HDSplitCombineFlags', ULONG),
                    ('BackfillSize', ULONG),
                    ('MaxHeaderSize', ULONG),
                ]
                NDIS_SIZEOF_HD_SPLIT_CURRENT_CONFIG_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_HD_SPLIT_CURRENT_CONFIG,
                    MaxHeaderSize)
                )
                # Flags used in NDIS_HD_SPLIT_ATTRIBUTES.HardwareCapabilities
                # and NDIS_HD_SPLIT_ATTRIBUTES.CurrentCapabilities. They are
                # also
                # used in NDIS_HD_SPLIT_CURRENT_CONFIG.HardwareCapabilities
                # and NDIS_HD_SPLIT_CURRENT_CONFIG.CurrentCapabilities.
                NDIS_HD_SPLIT_CAPS_SUPPORTS_HEADER_DATA_SPLIT = 0x00000001
                NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV4_OPTIONS = 0x00000002
                NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV6_EXTENSION_HEADERS = 0x00000004
                NDIS_HD_SPLIT_CAPS_SUPPORTS_TCP_OPTIONS = 0x00000008
                # Flags used in NDIS_HD_SPLIT_ATTRIBUTES.HDSplitFlags and
                # NDIS_HD_SPLIT_CURRENT_CONFIG.HDSplitFlags
                NDIS_HD_SPLIT_ENABLE_HEADER_DATA_SPLIT = 0x00000001
            # END IF   (NDIS_SUPPORT_NDIS61)
            NDIS_WMI_OUTPUT_INFO_REVISION_1 = 1;
            NDIS_WMI_OUTPUT_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('SupportedRevision', UCHAR),
                ('DataOffset', ULONG),
            ]
            NDIS_SIZEOF_WMI_OUTPUT_INFO_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_OUTPUT_INFO,
                DataOffset)
            )
            if NDIS_SUPPORT_NDIS620:
                # NDIS 6.20 power management
                # Flags used in NDIS_PM_CAPABILITIES struct
                # Flags for NDIS_PM_CAPABILITIES.SupportedWoLPacketPatterns
                # field
                NDIS_PM_WOL_BITMAP_PATTERN_SUPPORTED = 0x00000001
                NDIS_PM_WOL_MAGIC_PACKET_SUPPORTED = 0x00000002
                NDIS_PM_WOL_IPV4_TCP_SYN_SUPPORTED = 0x00000004
                NDIS_PM_WOL_IPV6_TCP_SYN_SUPPORTED = 0x00000008
                NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_SUPPORTED = 0x00000200
                NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_SUPPORTED = 0x00000800
                NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_SUPPORTED = 0x00010000


                # Flags for NDIS_PM_CAPABILITIES.SupportedProtocolOffloads
                # field
                NDIS_PM_PROTOCOL_OFFLOAD_ARP_SUPPORTED = 0x00000001
                NDIS_PM_PROTOCOL_OFFLOAD_NS_SUPPORTED = 0x00000002
                NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_SUPPORTED = 0x00000080


                # Flags for NDIS_PM_CAPABILITIES.SupportedWakeUpEvents field
                # to advertise media-agnostic wake capabilities
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_WAKE_ON_MEDIA_CONNECT_SUPPORTED = 0x00000001
                    NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_SUPPORTED = 0x00000002
                # END IF   (NDIS_SUPPORT_NDIS630)


                # Flags for NDIS_PM_CAPABILITIES.MediaSpecificWakeUpEvents
                # field
                # to advertise media-specific wake capabilities for an adapter
                # with physical media type NdisPhysicalMediumNative802_11
                if NDIS_SUPPORT_NDIS630:
                    NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_SUPPORTED = 0x00000001
                    NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_SUPPORTED = (
                        0x00000002
                    )
                    NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_SUPPORTED = (
                        0x00000004
                    )
                    NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_SUPPORTED = (
                        0x00000008
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)


                # Flags for NDIS_PM_CAPABILITIES.MediaSpecificWakeUpEvents
                # field
                # to advertise media-specific wake capabilities for an adapter
                # with physical media type NdisPhysicalMediumWirelessWan
                if NDIS_SUPPORT_NDIS630:
                    NDIS_WWAN_WAKE_ON_REGISTER_STATE_SUPPORTED = 0x00000001
                    NDIS_WWAN_WAKE_ON_SMS_RECEIVE_SUPPORTED = 0x00000002
                    NDIS_WWAN_WAKE_ON_USSD_RECEIVE_SUPPORTED = 0x00000004
                    NDIS_WWAN_WAKE_ON_PACKET_STATE_SUPPORTED = 0x00000008
                    NDIS_WWAN_WAKE_ON_UICC_CHANGE_SUPPORTED = 0x00000010
                # END IF   (NDIS_SUPPORT_NDIS630)


                # Flags for NDIS_PM_CAPABILITIES.Flags
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_WAKE_PACKET_INDICATION_SUPPORTED = 0x00000001
                    NDIS_PM_SELECTIVE_SUSPEND_SUPPORTED = 0x00000002
                # END IF   (NDIS_SUPPORT_NDIS630)


                # Flags used in NDIS_PM_PARAMETERS struct
                # Flags for NDIS_PM_PARAMETERS.EnabledWoLPacketPatterns field
                NDIS_PM_WOL_BITMAP_PATTERN_ENABLED = 0x00000001
                NDIS_PM_WOL_MAGIC_PACKET_ENABLED = 0x00000002
                NDIS_PM_WOL_IPV4_TCP_SYN_ENABLED = 0x00000004
                NDIS_PM_WOL_IPV6_TCP_SYN_ENABLED = 0x00000008
                NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_ENABLED = 0x00000200
                NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_ENABLED = 0x00000800
                NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_ENABLED = 0x00010000

                # Flags for NDIS_PM_PARAMETERS.EnabledProtocolOffloads field
                NDIS_PM_PROTOCOL_OFFLOAD_ARP_ENABLED = 0x00000001
                NDIS_PM_PROTOCOL_OFFLOAD_NS_ENABLED = 0x00000002
                NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_ENABLED = 0x00000080

                # Flags for NDIS_PM_PARAMETERS.WakeUpFlags field
                NDIS_PM_WAKE_ON_LINK_CHANGE_ENABLED = 0x00000001
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_ENABLED = 0x00000002
                    NDIS_PM_SELECTIVE_SUSPEND_ENABLED = 0x00000010
                # END IF   (NDIS_SUPPORT_NDIS630)

                # Flags for NDIS_PM_PARAMETERS.MediaSpecificWakeUpEvents field
                # when miniport's physical media type is
                # NdisPhysicalMediumNative802_11
                if NDIS_SUPPORT_NDIS630:
                    NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_ENABLED = 0x00000001
                    NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_ENABLED = 0x00000002
                    NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_ENABLED = 0x00000004
                    NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_ENABLED = (
                        0x00000008
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # Flags for NDIS_PM_PARAMETERS.MediaSpecificWakeUpEvents field
                # when miniport's physical media type is
                # NdisPhysicalMediumWirelessWan
                if NDIS_SUPPORT_NDIS630:
                    NDIS_WWAN_WAKE_ON_REGISTER_STATE_ENABLED = 0x00000001
                    NDIS_WWAN_WAKE_ON_SMS_RECEIVE_ENABLED = 0x00000002
                    NDIS_WWAN_WAKE_ON_USSD_RECEIVE_ENABLED = 0x00000004
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS650:
                    NDIS_WWAN_WAKE_ON_PACKET_STATE_ENABLED = 0x00000008
                    NDIS_WWAN_WAKE_ON_UICC_CHANGE_ENABLED = 0x00000010
                # END IF   (NDIS_SUPPORT_NDIS650)

                # Values used in Priority field of NDIS_PM_WOL_PATTERN
                NDIS_PM_WOL_PRIORITY_LOWEST = 0xFFFFFFFF
                NDIS_PM_WOL_PRIORITY_NORMAL = 0x10000000
                NDIS_PM_WOL_PRIORITY_HIGHEST = 0x00000001

                # Values used in Priority field of NDIS_PM_PROTOCOL_OFFLOAD
                NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_LOWEST = 0xFFFFFFFF
                NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_NORMAL = 0x10000000
                NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_HIGHEST = 0x00000001

                # enum type for wake on lan patterns based on packet type
                # used in WoLPacketType field of NDIS_PM_WOL_PATTERN structure
                class _NDIS_PM_WOL_PACKET(ENUM):
                    NdisPMWoLPacketUnspecified = 1
                    NdisPMWoLPacketBitmapPattern = 2
                    NdisPMWoLPacketMagicPacket = 3
                    NdisPMWoLPacketIPv4TcpSyn = 4
                    NdisPMWoLPacketIPv6TcpSyn = 5
                    NdisPMWoLPacketEapolRequestIdMessage = 6
                    NdisPMWoLPacketMaximum = 7

                NDIS_PM_WOL_PACKET = _NDIS_PM_WOL_PACKET
                PNDIS_PM_WOL_PACKET = POINTER(_NDIS_PM_WOL_PACKET)

                # enum types for offloaded protocols used in
                # ProtocolOffloadType
                # field of NDIS_PM_PROTOCOL_OFFLOAD structure
                class _NDIS_PM_PROTOCOL_OFFLOAD_TYPE(ENUM):
                    NdisPMProtocolOffloadIdUnspecified = 1
                    NdisPMProtocolOffloadIdIPv4ARP = 2
                    NdisPMProtocolOffloadIdIPv6NS = 3
                    NdisPMProtocolOffload80211RSNRekey = 4
                    NdisPMProtocolOffloadIdMaximum = 5

                NDIS_PM_PROTOCOL_OFFLOAD_TYPE = _NDIS_PM_PROTOCOL_OFFLOAD_TYPE
                PNDIS_PM_PROTOCOL_OFFLOAD_TYPE = POINTER(_NDIS_PM_PROTOCOL_OFFLOAD_TYPE)

                # Limited size string used in NSID power management structures
                NDIS_PM_MAX_STRING_SIZE = 64


                _NDIS_PM_COUNTED_STRING._fields_ = [
                    # in -Bytes-
                    ('Length', USHORT),
                    ('String', WCHAR * NDIS_PM_MAX_STRING_SIZE + 1),
                ]

                # NDIS_PM_CAPABILITIES structure is used in
                # PowerManagementCapabilitiesEx field of
                # NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES and
                # NDIS_BIND_PARAMETERS
                NDIS_PM_CAPABILITIES_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_CAPABILITIES_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                _TEMP__NDIS_PM_CAPABILITIES = [
                    # Header.Size =
                    # NDIS_SIZEOF_NDIS_PM_CAPABILITIES_REVISION_2;
                    ('Header', NDIS_OBJECT_HEADER),
                    # NDIS_PM_XXX_SUPPORTED flags
                    ('Flags', ULONG),
                    # NDIS_PM_WOL_XXX_SUPPORTED flags
                    ('SupportedWoLPacketPatterns', ULONG),
                    ('NumTotalWoLPatterns', ULONG),
                    # maximum bytes that can be compared against a pattern
                    ('MaxWoLPatternSize', ULONG),
                    # strting from MAC header, how many bytes in the packet
                    # can be examined
                    ('MaxWoLPatternOffset', ULONG),
                    # how many bytes of WOL packet can be saved to a buffer
                    # and indicated up
                    ('MaxWoLPacketSaveBuffer', ULONG),
                    # NDIS_PM_PROTOCOL_OFFLOAD_XXX_SUPPORTED flags
                    ('SupportedProtocolOffloads', ULONG),
                    ('NumArpOffloadIPv4Addresses', ULONG),
                    ('NumNSOffloadIPv6Addresses', ULONG),
                    ('MinMagicPacketWakeUp', NDIS_DEVICE_POWER_STATE),
                    ('MinPatternWakeUp', NDIS_DEVICE_POWER_STATE),
                    ('MinLinkChangeWakeUp', NDIS_DEVICE_POWER_STATE),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_PM_CAPABILITIES += [
                        # NDIS_PM_WAKE_ON_XXX_SUPPORTED flags
                        ('SupportedWakeUpEvents', ULONG),
                        # NDIS_{WLAN | WWAN}_WAKE_ON_XXX_SUPPORTED flags
                        ('MediaSpecificWakeUpEvents', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_PM_CAPABILITIES._fields_ = _TEMP__NDIS_PM_CAPABILITIES
                NDIS_SIZEOF_NDIS_PM_CAPABILITIES_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_CAPABILITIES,
                    MinLinkChangeWakeUp)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_NDIS_PM_CAPABILITIES_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_CAPABILITIES,
                        MediaSpecificWakeUpEvents)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # NDIS_PM_PARAMETERS structure is used in OID_PM_PARAMETERS
                # for quering and
                # updating currently enabled power management hardware
                # capabilities.
                NDIS_PM_PARAMETERS_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_PARAMETERS_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                _TEMP__NDIS_PM_PARAMETERS = [
                    # Header.Size = NDIS_SIZEOF_NDIS_PM_PARAMETERS_REVISION_2;
                    ('Header', NDIS_OBJECT_HEADER),
                    # NDIS_PM_WOL_XXX_ENABLED flags
                    ('EnabledWoLPacketPatterns', ULONG),
                    # NDIS_PM_PROTOCOL_OFFLOAD_XXX_ENABLED flags
                    ('EnabledProtocolOffloads', ULONG),
                    # NDIS_PM_WAKE_ON_XXX_ENABLED flags
                    ('WakeUpFlags', ULONG),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_PM_PARAMETERS += [
                        # NDIS_{WLAN | WWAN}_WAKE_ON_XXX_ENABLED flags
                        ('MediaSpecificWakeUpEvents', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_PM_PARAMETERS._fields_ = _TEMP__NDIS_PM_PARAMETERS
                NDIS_SIZEOF_NDIS_PM_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_PARAMETERS,
                    WakeUpFlags)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_NDIS_PM_PARAMETERS_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_PARAMETERS,
                        MediaSpecificWakeUpEvents)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # Used in _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS
                # When the following flag is set, the packet must be encrypted.
                EAPOL_REQUEST_ID_WOL_FLAG_MUST_ENCRYPT = 0x00000001

                # Pattern IDs above this number are treated as pre-assigned
                NDIS_PM_MAX_PATTERN_ID = 0x0000FFFF

                # This value is used in the Flags field of the
                # NDIS_PM_WOL_PATTERN structure
                # It indicates that the a pre-assigned ID is used
                NDIS_PM_PRIVATE_PATTERN_ID = 0x00000001

                # structure used in OID_PM_ADD_WOL_PATTERN and
                # OID_PM_WOL_PATTERN_LIST
                NDIS_PM_WOL_PATTERN_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_PM_WOL_PATTERN_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                class _WOL_PATTERN(ctypes.Union):
                    pass


                class _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS(ctypes.Structure):
                    pass


                _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                    # IPv4 source address
                    ('IPv4SourceAddress', UCHAR * 4),
                    # IPv4 destination address
                    ('IPv4DestAddress', UCHAR * 4),
                    # TCP source port
                    ('TCPSourcePortNumber', USHORT),
                    # TCP destination port
                    ('TCPDestPortNumber', USHORT),
                ]
                IPv4TcpSynParameters = _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS
                _WOL_PATTERN.IPv4TcpSynParameters = IPv4TcpSynParameters


                class _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS(ctypes.Structure):
                    pass


                _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                    # source IPv6 address
                    ('IPv6SourceAddress', UCHAR * 16),
                    # destination IPv6 address
                    ('IPv6DestAddress', UCHAR * 16),
                    # source TCP port
                    ('TCPSourcePortNumber', USHORT),
                    # destination TCP port
                    ('TCPDestPortNumber', USHORT),
                ]
                IPv6TcpSynParameters = _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS
                _WOL_PATTERN.IPv6TcpSynParameters = IPv6TcpSynParameters


                class _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS(ctypes.Structure):
                    pass


                _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                ]
                EapolRequestIdMessageParameters = _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS
                _WOL_PATTERN.EapolRequestIdMessageParameters = EapolRequestIdMessageParameters


                class _WOL_BITMAP_PATTERN(ctypes.Structure):
                    pass


                _WOL_BITMAP_PATTERN._fields_ = [
                    ('Flags', ULONG),
                    # offset for mask buffer from the beginning of
                    # NDIS_PM_WOL_PATTERN structure
                    ('MaskOffset', ULONG),
                    # Mask size
                    ('MaskSize', ULONG),
                    # offset for pattern buffer from the beginning of
                    # NDIS_PM_WOL_PATTERN structure
                    ('PatternOffset', ULONG),
                    # pattern size
                    ('PatternSize', ULONG),
                ]
                WoLBitMapPattern = _WOL_BITMAP_PATTERN
                _WOL_PATTERN.WoLBitMapPattern = WoLBitMapPattern


                _WOL_PATTERN._fields_ = [
                    # IPv4 TCP SYN information
                    ('IPv4TcpSynParameters', _WOL_PATTERN.IPv4TcpSynParameters),
                    # IPv6 TCP SYN information
                    ('IPv6TcpSynParameters', _WOL_PATTERN.IPv6TcpSynParameters),
                    # 802.1X EAPOL request identity message parameters
                    ('EapolRequestIdMessageParameters', _WOL_PATTERN.EapolRequestIdMessageParameters),
                    ('WoLBitMapPattern', _WOL_PATTERN.WoLBitMapPattern),
                ]
                WoLPattern = _WOL_PATTERN
                _NDIS_PM_WOL_PATTERN.WoLPattern = WoLPattern


                _NDIS_PM_WOL_PATTERN._fields_ = [
                    # Header.Size = NDIS_SIZEOF_NDIS_PM_WOL_PATTERN_REVISION_2;
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('Priority', ULONG),
                    ('WoLPacketType', NDIS_PM_WOL_PACKET),
                    ('FriendlyName', NDIS_PM_COUNTED_STRING),
                    # Pattern ID set by NDIS
                    ('PatternId', ULONG),
                    ('NextWoLPatternOffset', ULONG),
                    ('WoLPattern', _NDIS_PM_WOL_PATTERN.WoLPattern),
                ]
                NDIS_SIZEOF_NDIS_PM_WOL_PATTERN_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_WOL_PATTERN,
                    WoLPattern)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_NDIS_PM_WOL_PATTERN_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_WOL_PATTERN,
                        WoLPattern)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # 802.11 RSN handshake values
                # Used in DOT11_RSN_REKEY_PARAMETERS structure
                DOT11_RSN_KEK_LENGTH = 16
                DOT11_RSN_KCK_LENGTH = 16

                # structure is used in OID_PM_ADD_PROTOCOL_OFFLOAD and
                # OID_PM_PROTOCOL_OFFLOAD_LIST OID requests
                NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = 1


                class _PROTOCOL_OFFLOAD_PARAMETERS(ctypes.Union):
                    pass


                class _IPV4_ARP_PARAMETERS(ctypes.Structure):
                    pass


                _IPV4_ARP_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                    # source IPv4 address (optional)
                    ('RemoteIPv4Address', UCHAR * 4),
                    # destination IPv4 address
                    ('HostIPv4Address', UCHAR * 4),
                    # MAC address
                    ('MacAddress', UCHAR * 6),
                ]
                IPv4ARPParameters = _IPV4_ARP_PARAMETERS
                _PROTOCOL_OFFLOAD_PARAMETERS.IPv4ARPParameters = IPv4ARPParameters


                class _IPV6_NS_PARAMETERS(ctypes.Structure):
                    pass


                _IPV6_NS_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                    # source IPv6 address (optional)
                    ('RemoteIPv6Address', UCHAR * 16),
                    # solicited node IPv6 address
                    ('SolicitedNodeIPv6Address', UCHAR * 16),
                    # MAC address
                    ('MacAddress', UCHAR * 6),
                    # An array of local IPv6 addesses
                    ('TargetIPv6Addresses', (UCHAR * 2)(UCHAR * 16)),
                ]
                IPv6NSParameters = _IPV6_NS_PARAMETERS
                _PROTOCOL_OFFLOAD_PARAMETERS.IPv6NSParameters = IPv6NSParameters


                class _DOT11_RSN_REKEY_PARAMETERS(ctypes.Structure):
                    pass


                _DOT11_RSN_REKEY_PARAMETERS._fields_ = [
                    ('Flags', ULONG),
                    ('KCK', UCHAR * DOT11_RSN_KCK_LENGTH),
                    ('KEK', UCHAR * DOT11_RSN_KEK_LENGTH),
                    ('KeyReplayCounter', ULONGLONG),
                ]
                Dot11RSNRekeyParameters = _DOT11_RSN_REKEY_PARAMETERS
                _PROTOCOL_OFFLOAD_PARAMETERS.Dot11RSNRekeyParameters = Dot11RSNRekeyParameters


                _PROTOCOL_OFFLOAD_PARAMETERS._fields_ = [
                    # IPv4 ARP
                    ('IPv4ARPParameters', _PROTOCOL_OFFLOAD_PARAMETERS.IPv4ARPParameters),
                    # the solicited node IPv6 address
                    ('IPv6NSParameters', _PROTOCOL_OFFLOAD_PARAMETERS.IPv6NSParameters),
                    # 802.11 RSN handshake
                    ('Dot11RSNRekeyParameters', _PROTOCOL_OFFLOAD_PARAMETERS.Dot11RSNRekeyParameters),
                ]
                ProtocolOffloadParameters = _PROTOCOL_OFFLOAD_PARAMETERS
                _NDIS_PM_PROTOCOL_OFFLOAD.ProtocolOffloadParameters = ProtocolOffloadParameters


                _NDIS_PM_PROTOCOL_OFFLOAD._fields_ = [
                    # Header.Size =
                    # NDIS_SIZEOF_NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1;
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('Priority', ULONG),
                    ('ProtocolOffloadType', NDIS_PM_PROTOCOL_OFFLOAD_TYPE),
                    ('FriendlyName', NDIS_PM_COUNTED_STRING),
                    # offloaded protocol ID set by NDIS
                    ('ProtocolOffloadId', ULONG),
                    ('NextProtocolOffloadOffset', ULONG),
                    ('ProtocolOffloadParameters', _NDIS_PM_PROTOCOL_OFFLOAD.ProtocolOffloadParameters),
                ]
                NDIS_SIZEOF_NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_PROTOCOL_OFFLOAD,
                    ProtocolOffloadParameters)
                )

                if NDIS_SUPPORT_NDIS630:
                    class _NDIS_PM_WAKE_REASON_TYPE(ENUM):
                        NdisWakeReasonUnspecified = 0x0000
                        NdisWakeReasonPacket = 0x0001
                        NdisWakeReasonMediaDisconnect = 0x0002
                        NdisWakeReasonMediaConnect = 0x0003
                        NdisWakeReasonWlanNLODiscovery = 0x1000
                        NdisWakeReasonWlanAPAssociationLost = 0x1001
                        NdisWakeReasonWlanGTKHandshakeError = 0x1002
                        NdisWakeReasonWlan4WayHandshakeRequest = 0x1003
                        NdisWakeReasonWwanRegisterState = 0x2000
                        NdisWakeReasonWwanSMSReceive = 0x2001
                        NdisWakeReasonWwanUSSDReceive = 0x2002

                    NDIS_PM_WAKE_REASON_TYPE = _NDIS_PM_WAKE_REASON_TYPE
                    PNDIS_PM_WAKE_REASON_TYPE = POINTER(_NDIS_PM_WAKE_REASON_TYPE)

                    # NDIS_PM_WAKE_REASON struct is used with
                    # the NDIS_STATUS_PM_WAKE_REASON status indication
                    NDIS_PM_WAKE_REASON_REVISION_1 = 1


                    _NDIS_PM_WAKE_REASON._fields_ = [
                        # Header.Size = NDIS_SIZEOF_PM_WAKE_REASON_REVISION_1;
                        ('Header', NDIS_OBJECT_HEADER),
                        # Reserved
                        ('Flags', ULONG),
                        ('WakeReason', NDIS_PM_WAKE_REASON_TYPE),
                        ('InfoBufferOffset', ULONG),
                        ('InfoBufferSize', ULONG),
                    ]
                    NDIS_SIZEOF_PM_WAKE_REASON_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_WAKE_REASON,
                        InfoBufferSize)
                    )

                    # NDIS_PM_WAKE_PACKET struct is used within
                    # NDIS_PM_WAKE_REASON's
                    # InfoBuffer, if the WakeReason is NdisWakeReasonPacket
                    NDIS_PM_WAKE_PACKET_REVISION_1 = 1


                    _NDIS_PM_WAKE_PACKET._fields_ = [
                        # Header.Size = NDIS_SIZEOF_PM_WAKE_PACKET_REVISION_1;
                        ('Header', NDIS_OBJECT_HEADER),
                        # Reserved
                        ('Flags', ULONG),
                        # ID of a corresponding wake pattern
                        ('PatternId', ULONG),
                        # Pattern name filled by NDIS
                        ('PatternFriendlyName', NDIS_PM_COUNTED_STRING),
                        ('OriginalPacketSize', ULONG),
                        ('SavedPacketSize', ULONG),
                        ('SavedPacketOffset', ULONG),
                    ]
                    NDIS_SIZEOF_PM_WAKE_PACKET_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_PM_WAKE_PACKET,
                        SavedPacketOffset)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # enum values used in NDIS_WMI_PM_ADMIN_CONFIG structure
                class _NDIS_PM_ADMIN_CONFIG_STATE(ENUM):
                    NdisPMAdminConfigUnspecified = 0
                    NdisPMAdminConfigDisabled = 1
                    NdisPMAdminConfigEnabled = 2

                NDIS_PM_ADMIN_CONFIG_STATE = _NDIS_PM_ADMIN_CONFIG_STATE
                PNDIS_PM_ADMIN_CONFIG_STATE = POINTER(_NDIS_PM_ADMIN_CONFIG_STATE)

                # NDIS_WMI_PM_ADMIN_CONFIG struct is used with
                # GUID_NDIS_PM_ADMIN_CONFIG WMI method
                NDIS_WMI_PM_ADMIN_CONFIG_REVISION_1 = 1


                _NDIS_WMI_PM_ADMIN_CONFIG._fields_ = [
                    # Header.Size = NDIS_SIZEOF_WMI_PM_ADMIN_CONFIG_REVISION_1;
                    ('Header', NDIS_OBJECT_HEADER),
                    ('WakeOnPattern', NDIS_PM_ADMIN_CONFIG_STATE),
                    ('WakeOnMagicPacket', NDIS_PM_ADMIN_CONFIG_STATE),
                    ('DeviceSleepOnDisconnect', NDIS_PM_ADMIN_CONFIG_STATE),
                    ('PMARPOffload', NDIS_PM_ADMIN_CONFIG_STATE),
                    ('PMNSOffload', NDIS_PM_ADMIN_CONFIG_STATE),
                    ('PMWiFiRekeyOffload', NDIS_PM_ADMIN_CONFIG_STATE),
                ]
                NDIS_SIZEOF_WMI_PM_ADMIN_CONFIG_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_PM_ADMIN_CONFIG,
                    PMWiFiRekeyOffload)
                )

                # enum values used in NDIS_WMI_PM_ACTIVE_CAPABILITIES structure
                class _NDIS_PM_CAPABILITY_STATE(ENUM):
                    NdisPMAdminConfigUnsupported = 0
                    NdisPMAdminConfigInactive = 1
                    NdisPMAdminConfigActive = 2

                NDIS_PM_CAPABILITY_STATE = _NDIS_PM_CAPABILITY_STATE
                PNDIS_PM_CAPABILITY_STATE = POINTER(_NDIS_PM_CAPABILITY_STATE)

                # NDIS_WMI_PM_ACTIVE_CAPABILITIES struct is used with
                # GUID_NDIS_PM_ACTIVE_CAPABILITIES WMI method
                NDIS_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1 = 1


                _NDIS_WMI_PM_ACTIVE_CAPABILITIES._fields_ = [
                    # Header.Size =
                    # NDIS_SIZEOF_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1;
                    ('Header', NDIS_OBJECT_HEADER),
                    ('WakeOnPattern', NDIS_PM_CAPABILITY_STATE),
                    ('WakeOnMagicPacket', NDIS_PM_CAPABILITY_STATE),
                    ('DeviceSleepOnDisconnect', NDIS_PM_CAPABILITY_STATE),
                    ('PMARPOffload', NDIS_PM_CAPABILITY_STATE),
                    ('PMNSOffload', NDIS_PM_CAPABILITY_STATE),
                    ('PMWiFiRekeyOffload', NDIS_PM_CAPABILITY_STATE),
                ]
                NDIS_SIZEOF_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_PM_ACTIVE_CAPABILITIES,
                    PMWiFiRekeyOffload)
                )

                # receive filter data structures and definitions
                # used in SupportedHeaders field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_MAC_HEADER_SUPPORTED = 0x00000001
                NDIS_RECEIVE_FILTER_IPV4_HEADER_SUPPORTED = 0x00000002
                NDIS_RECEIVE_FILTER_IPV6_HEADER_SUPPORTED = 0x00000004
                NDIS_RECEIVE_FILTER_ARP_HEADER_SUPPORTED = 0x00000008
                NDIS_RECEIVE_FILTER_UDP_HEADER_SUPPORTED = 0x00000010

                # used in SupportedMacHeaderFields field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_MAC_HEADER_DEST_ADDR_SUPPORTED = 0x00000001
                NDIS_RECEIVE_FILTER_MAC_HEADER_SOURCE_ADDR_SUPPORTED = (
                    0x00000002
                )
                NDIS_RECEIVE_FILTER_MAC_HEADER_PROTOCOL_SUPPORTED = 0x00000004
                NDIS_RECEIVE_FILTER_MAC_HEADER_VLAN_ID_SUPPORTED = 0x00000008
                NDIS_RECEIVE_FILTER_MAC_HEADER_PRIORITY_SUPPORTED = 0x00000010
                NDIS_RECEIVE_FILTER_MAC_HEADER_PACKET_TYPE_SUPPORTED = (
                    0x00000020
                )

                # used in SupportedARPHeaderFields field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_ARP_HEADER_OPERATION_SUPPORTED = 0x00000001
                NDIS_RECEIVE_FILTER_ARP_HEADER_SPA_SUPPORTED = 0x00000002
                NDIS_RECEIVE_FILTER_ARP_HEADER_TPA_SUPPORTED = 0x00000004

                # used in SupportedIPv4HeaderFields field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_IPV4_HEADER_PROTOCOL_SUPPORTED = 0x00000001

                # used in SupportedIPv6HeaderFields field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_IPV6_HEADER_PROTOCOL_SUPPORTED = 0x00000001

                # used in SupportedUdpHeaderFields field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_UDP_HEADER_DEST_PORT_SUPPORTED = 0x00000001

                # used in SupportedFilterTests field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_EQUAL_SUPPORTED = (
                    0x00000001
                )
                NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_MASK_EQUAL_SUPPORTED = (
                    0x00000002
                )
                NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_NOT_EQUAL_SUPPORTED = (
                    0x00000004
                )

                # used in SupportedQueueProperties field of
                # NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_MSI_X_SUPPORTED = 0x00000001
                NDIS_RECEIVE_FILTER_VM_QUEUE_SUPPORTED = 0x00000002
                NDIS_RECEIVE_FILTER_LOOKAHEAD_SPLIT_SUPPORTED = 0x00000004
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_SUPPORTED = (
                        0x00000008
                    )
                    NDIS_RECEIVE_FILTER_INTERRUPT_VECTOR_COALESCING_SUPPORTED = (
                        0x00000010
                    )
                    NDIS_RECEIVE_FILTER_IMPLAT_MIN_OF_QUEUES_MODE = 0x00000040
                    NDIS_RECEIVE_FILTER_IMPLAT_SUM_OF_QUEUES_MODE = 0x00000080
                    NDIS_RECEIVE_FILTER_PACKET_COALESCING_SUPPORTED_ON_DEFAULT_QUEUE = (
                        0x00000100
                    )

                    # This flag has been deprecated
                    NDIS_RECEIVE_FILTER_ANY_VLAN_SUPPORTED = 0x00000020                    # deprecated
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS680:
                    NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_FOR_DEFAULT_QUEUE_SUPPORTED = (
                        0x00000040
                    )
                # END IF   (NDIS_SUPPORT_NDIS680)

                # The following bits are used in EnabledFilterTypes field of
                # NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS structure and
                # EnabledFilterTypes field of NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_VMQ_FILTERS_ENABLED = 0x00000001
                NDIS_RECEIVE_FILTER_PACKET_COALESCING_FILTERS_ENABLED = (
                    0x00000002
                )

                # The following bits are used in EnabledQueueTypes field of
                # NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS structure and
                # EnabledQueueTypes field of NDIS_RECEIVE_FILTER_CAPABILITIES
                # structure
                NDIS_RECEIVE_FILTER_VM_QUEUES_ENABLED = 0x00000001

                # Data structures for advertising generic filtering
                # capabilities
                # in ReceiveFilterCapabilities field of
                # NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
                # structure, OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES and
                # OID_RECEIVE_FILTER_CURRENT_CAPABILITIES query OIDs. This
                # structure is also
                # used in NDIS_STATUS_RECEIVE_FILTER_CURRENT_CAPABILITIES and
                # NDIS_STATUS_RECEIVE_FILTER_HARDWARE_CAPABILITIES structure
                NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                _TEMP__NDIS_RECEIVE_FILTER_CAPABILITIES = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('EnabledFilterTypes', ULONG),
                    ('EnabledQueueTypes', ULONG),
                    ('NumQueues', ULONG),
                    ('SupportedQueueProperties', ULONG),
                    ('SupportedFilterTests', ULONG),
                    ('SupportedHeaders', ULONG),
                    ('SupportedMacHeaderFields', ULONG),
                    ('MaxMacHeaderFilters', ULONG),
                    ('MaxQueueGroups', ULONG),
                    ('MaxQueuesPerQueueGroup', ULONG),
                    ('MinLookaheadSplitSize', ULONG),
                    ('MaxLookaheadSplitSize', ULONG),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_RECEIVE_FILTER_CAPABILITIES += [
                        ('SupportedARPHeaderFields', ULONG),
                        ('SupportedIPv4HeaderFields', ULONG),
                        ('SupportedIPv6HeaderFields', ULONG),
                        ('SupportedUdpHeaderFields', ULONG),
                        ('MaxFieldTestsPerPacketCoalescingFilter', ULONG),
                        ('MaxPacketCoalescingFilters', ULONG),
                        ('NdisReserved', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_RECEIVE_FILTER_CAPABILITIES._fields_ = _TEMP__NDIS_RECEIVE_FILTER_CAPABILITIES
                NDIS_SIZEOF_RECEIVE_FILTER_CAPABILITIES_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_CAPABILITIES,
                    MaxLookaheadSplitSize)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_FILTER_CAPABILITIES_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_CAPABILITIES,
                        NdisReserved)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS630:
                    # used in NicSwitchCapabilities field of
                    # NDIS_NIC_SWITCH_CAPABILITIES
                    # structure
                    NDIS_NIC_SWITCH_CAPS_VLAN_SUPPORTED = 0x00000001
                    NDIS_NIC_SWITCH_CAPS_PER_VPORT_INTERRUPT_MODERATION_SUPPORTED = (
                        0x00000002
                    )
                    NDIS_NIC_SWITCH_CAPS_ASYMMETRIC_QUEUE_PAIRS_FOR_NONDEFAULT_VPORT_SUPPORTED = (
                        0x00000004
                    )
                    NDIS_NIC_SWITCH_CAPS_VF_RSS_SUPPORTED = 0x00000008
                    NDIS_NIC_SWITCH_CAPS_SINGLE_VPORT_POOL = 0x00000010
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_NIC_SWITCH_CAPS_RSS_PARAMETERS_PER_PF_VPORT_SUPPORTED = (
                            0x00000020
                        )
                    # END IF   (NDIS_SUPPORT_NDIS650)

                    if NDIS_SUPPORT_NDIS660:
                        NDIS_NIC_SWITCH_CAPS_NIC_SWITCH_WITHOUT_IOV_SUPPORTED = (
                            0x00000040
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_ON_PF_VPORTS_SUPPORTED = (
                            0x00000080
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED = (
                            0x00000100
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED = (
                            0x00000200
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED = (
                            0x00000400
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED = (
                            0x00000800
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SIZE_RESTRICTED = (
                            0x00001000
                        )
                        NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_MASK = (
                            NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED | 
                            NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED | 
                            NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED | 
                            NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED
                        )
                    # END IF   (NDIS_SUPPORT_NDIS660)
                # END IF   (NDIS_SUPPORT_NDIS630)

                # Data structure for advertising the NIC Switch capabilities
                # Used in HardwareNicSwitchCapabilities and
                # CurrentNicSwitchCapabilities
                # fields of NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES,
                # OID_NIC_SWITCH_HARDWARE_CAPABILITIES and
                # OID_NIC_SWITCH_CURRENT_CAPABILITIES. Also used
                # in NicSwitchCapabilities field of NDIS_BIND_PARAMETERS and
                # NDIS_FILTER_ATTACH_PARAMETERS structure
                # Also used in NDIS_STATUS_NIC_SWITCH_CURRENT_CAPABILITIES and
                # NDIS_STATUS_NIC_SWITCH_HARDWARE_CAPABILITIES
                NDIS_NIC_SWITCH_CAPABILITIES_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_NIC_SWITCH_CAPABILITIES_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS660:
                    NDIS_NIC_SWITCH_CAPABILITIES_REVISION_3 = 3
                # END IF   (NDIS_SUPPORT_NDIS660)


                _TEMP__NDIS_NIC_SWITCH_CAPABILITIES = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('NdisReserved1', ULONG),
                    ('NumTotalMacAddresses', ULONG),
                    ('NumMacAddressesPerPort', ULONG),
                    ('NumVlansPerPort', ULONG),
                    ('NdisReserved2', ULONG),
                    ('NdisReserved3', ULONG),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_NIC_SWITCH_CAPABILITIES += [
                        ('NicSwitchCapabilities', ULONG),
                        ('MaxNumSwitches', ULONG),
                        ('MaxNumVPorts', ULONG),
                        ('NdisReserved4', ULONG),
                        ('MaxNumVFs', ULONG),
                        ('MaxNumQueuePairs', ULONG),
                        ('NdisReserved5', ULONG),
                        ('NdisReserved6', ULONG),
                        ('NdisReserved7', ULONG),
                        ('MaxNumQueuePairsPerNonDefaultVPort', ULONG),
                        ('NdisReserved8', ULONG),
                        ('NdisReserved9', ULONG),
                        ('NdisReserved10', ULONG),
                        ('NdisReserved11', ULONG),
                        ('NdisReserved12', ULONG),
                        ('MaxNumMacAddresses', ULONG),
                        ('NdisReserved13', ULONG),
                        ('NdisReserved14', ULONG),
                        ('NdisReserved15', ULONG),
                        ('NdisReserved16', ULONG),
                        ('NdisReserved17', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        ]
                        if NDIS_SUPPORT_NDIS660:
                                _TEMP__NDIS_NIC_SWITCH_CAPABILITIES += [
                        ('MaxNumRssCapableNonDefaultPFVPorts', ULONG),
                        ('NumberOfIndirectionTableEntriesForDefaultVPort', ULONG),
                        ('NumberOfIndirectionTableEntriesPerNonDefaultPFVPort', ULONG),
                        ('MaxNumQueuePairsForDefaultVPort', ULONG),
                                ]
                            # END IF   (NDIS_SUPPORT_NDIS660)


                                _NDIS_NIC_SWITCH_CAPABILITIES._fields_ = _TEMP__NDIS_NIC_SWITCH_CAPABILITIES
                NDIS_SIZEOF_NIC_SWITCH_CAPABILITIES_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_CAPABILITIES,
                    NdisReserved3)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_NIC_SWITCH_CAPABILITIES_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_CAPABILITIES,
                        NdisReserved17)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS660:
                    NDIS_SIZEOF_NIC_SWITCH_CAPABILITIES_REVISION_3 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_CAPABILITIES,
                        MaxNumQueuePairsForDefaultVPort)
                    )
                # END IF   (NDIS_SUPPORT_NDIS660)

                # NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS is used in
                # OID_RECEIVE_FILTER_GLOBAL_PARAMETERS query OID
                # in order to query particular aspects
                # of receive filtering for a miniport adapter
                NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS_REVISION_1 = 1


                _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('EnabledFilterTypes', ULONG),
                    ('EnabledQueueTypes', ULONG),
                ]
                NDIS_SIZEOF_RECEIVE_FILTER_GLOBAL_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS,
                    EnabledQueueTypes)
                )
                NDIS_RECEIVE_QUEUE_ID = ULONG
                PNDIS_RECEIVE_QUEUE_ID = POINTER(ULONG)
                NDIS_RECEIVE_QUEUE_GROUP_ID = ULONG
                PNDIS_RECEIVE_QUEUE_GROUP_ID = POINTER(ULONG)
                NDIS_DEFAULT_RECEIVE_QUEUE_ID = 0
                NDIS_DEFAULT_RECEIVE_QUEUE_GROUP_ID = 0
                NDIS_DEFAULT_RECEIVE_FILTER_ID = 0
                NDIS_RECEIVE_FILTER_ID = ULONG
                PNDIS_RECEIVE_FILTER_ID = POINTER(ULONG)


                class _NDIS_RECEIVE_FILTER_TYPE(ENUM):
                    NdisReceiveFilterTypeUndefined = 1
                    NdisReceiveFilterTypeVMQueue = 2
                    NdisReceiveFilterTypePacketCoalescing = 3
                    NdisReceiveFilterTypeMaximum = 4

                NDIS_RECEIVE_FILTER_TYPE = _NDIS_RECEIVE_FILTER_TYPE
                PNDIS_RECEIVE_FILTER_TYPE = POINTER(_NDIS_RECEIVE_FILTER_TYPE)


                class _NDIS_FRAME_HEADER(ENUM):
                    NdisFrameHeaderUndefined = 1
                    NdisFrameHeaderMac = 2
                    NdisFrameHeaderArp = 3
                    NdisFrameHeaderIPv4 = 4
                    NdisFrameHeaderIPv6 = 5
                    NdisFrameHeaderUdp = 6
                    NdisFrameHeaderMaximum = 7

                NDIS_FRAME_HEADER = _NDIS_FRAME_HEADER
                PNDIS_FRAME_HEADER = POINTER(_NDIS_FRAME_HEADER)


                class _NDIS_MAC_HEADER_FIELD(ENUM):
                    NdisMacHeaderFieldUndefined = 1
                    NdisMacHeaderFieldDestinationAddress = 2
                    NdisMacHeaderFieldSourceAddress = 3
                    NdisMacHeaderFieldProtocol = 4
                    NdisMacHeaderFieldVlanId = 5
                    NdisMacHeaderFieldPriority = 6
                    NdisMacHeaderFieldPacketType = 7
                    NdisMacHeaderFieldMaximum = 8

                NDIS_MAC_HEADER_FIELD = _NDIS_MAC_HEADER_FIELD
                PNDIS_MAC_HEADER_FIELD = POINTER(_NDIS_MAC_HEADER_FIELD)


                class _NDIS_MAC_PACKET_TYPE(ENUM):
                    NdisMacPacketTypeUndefined = 0
                    NdisMacPacketTypeUnicast = 1
                    NdisMacPacketTypeMulticast = 2
                    NdisMacPacketTypeBroadcast = 3
                    NdisMacPacketTypeMaximum = 4

                NDIS_MAC_PACKET_TYPE = _NDIS_MAC_PACKET_TYPE
                PNDIS_MAC_PACKET_TYPE = POINTER(_NDIS_MAC_PACKET_TYPE)


                class _NDIS_ARP_HEADER_FIELD(ENUM):
                    NdisARPHeaderFieldUndefined = 1
                    NdisARPHeaderFieldOperation = 2
                    NdisARPHeaderFieldSPA = 3
                    NdisARPHeaderFieldTPA = 4
                    NdisARPHeaderFieldMaximum = 5

                NDIS_ARP_HEADER_FIELD = _NDIS_ARP_HEADER_FIELD
                PNDIS_ARP_HEADER_FIELD = POINTER(_NDIS_ARP_HEADER_FIELD)


                class _NDIS_IPV4_HEADER_FIELD(ENUM):
                    NdisIPv4HeaderFieldUndefined = 1
                    NdisIPv4HeaderFieldProtocol = 2
                    NdisIPv4HeaderFieldMaximum = 3

                NDIS_IPV4_HEADER_FIELD = _NDIS_IPV4_HEADER_FIELD
                PNDIS_IPV4_HEADER_FIELD = POINTER(_NDIS_IPV4_HEADER_FIELD)


                class _NDIS_IPV6_HEADER_FIELD(ENUM):
                    NdisIPv6HeaderFieldUndefined = 1
                    NdisIPv6HeaderFieldProtocol = 2
                    NdisIPv6HeaderFieldMaximum = 3

                NDIS_IPV6_HEADER_FIELD = _NDIS_IPV6_HEADER_FIELD
                PNDIS_IPV6_HEADER_FIELD = POINTER(_NDIS_IPV6_HEADER_FIELD)


                class _NDIS_UDP_HEADER_FIELD(ENUM):
                    NdisUdpHeaderFieldUndefined = 1
                    NdisUdpHeaderFieldDestinationPort = 2
                    NdisUdpHeaderFieldMaximum = 3

                NDIS_UDP_HEADER_FIELD = _NDIS_UDP_HEADER_FIELD
                PNDIS_UDP_HEADER_FIELD = POINTER(_NDIS_UDP_HEADER_FIELD)


                class _NDIS_RECEIVE_FILTER_TEST(ENUM):
                    NdisReceiveFilterTestUndefined = 1
                    NdisReceiveFilterTestEqual = 2
                    NdisReceiveFilterTestMaskEqual = 3
                    NdisReceiveFilterTestNotEqual = 4
                    NdisReceiveFilterTestMaximum = 5

                NDIS_RECEIVE_FILTER_TEST = _NDIS_RECEIVE_FILTER_TEST
                PNDIS_RECEIVE_FILTER_TEST = POINTER(_NDIS_RECEIVE_FILTER_TEST)

                # Flags used in NDIS_RECEIVE_FILTER_FIELD_PARAMETERS.Flags
                # field
                NDIS_RECEIVE_FILTER_FIELD_MAC_HEADER_VLAN_UNTAGGED_OR_ZERO = (
                    0x00000001
                )

                # NDIS_RECEIVE_FILTER_FIELD_PARAMETERS is used in
                # NDIS_RECEIVE_FILTER_PARAMETERS structure
                NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('FrameHeader', NDIS_FRAME_HEADER),
                    ('ReceiveFilterTest', NDIS_RECEIVE_FILTER_TEST),
                    ('_HEADER_FIELD NDIS_MAC_HEADER_FIELD       MacHeaderField', union),
                    ('ArpHeaderField', NDIS_ARP_HEADER_FIELD),
                    ('IPv4HeaderField', NDIS_IPV4_HEADER_FIELD),
                    ('IPv6HeaderField', NDIS_IPV6_HEADER_FIELD),
                    ('UdpHeaderField', NDIS_UDP_HEADER_FIELD),
                    ('_FIELD_VALUE UCHAR               FieldByteValue', union),
                    ('FieldShortValue', USHORT),
                    ('FieldLongValue', ULONG),
                    ('FieldLong64Value', ULONG64),
                    ('FieldByteArrayValue', UCHAR * 16),
                    # used when test operation is MaskEqual
                    ('_RESULT_VALUE UCHAR               ResultByteValue', union),
                    ('ResultShortValue', USHORT),
                    ('ResultLongValue', ULONG),
                    ('ResultLong64Value', ULONG64),
                    ('ResultByteArrayValue', UCHAR * 16),
                ]
                NDIS_SIZEOF_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_FIELD_PARAMETERS,
                    ResultValue)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_FIELD_PARAMETERS,
                        ResultValue)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                NDIS_NIC_SWITCH_ID = ULONG
                PNDIS_NIC_SWITCH_ID = POINTER(ULONG)
                if NDIS_SUPPORT_NDIS630:
                    NDIS_NIC_SWITCH_VPORT_ID = ULONG
                    PNDIS_NIC_SWITCH_VPORT_ID = POINTER(ULONG)
                # END IF   (NDIS_SUPPORT_NDIS630)

                # Flags used in NDIS_RECEIVE_FILTER_PARAMETERS.Flags field
                NDIS_RECEIVE_FILTER_FLAGS_RESERVED = 0x00000001
                NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION_GRE = 0x00000002
                if NDIS_SUPPORT_NDIS650:
                    # NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION replaces the
                    # use of
                    # NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION_GRE as a
                    # generic flag to indicate
                    # an inner MAC receive filter for encapsulated packet task
                    # offloads.
                    NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION = 0x00000002
                # END IF   (NDIS_SUPPORT_NDIS650)

                # NDIS_RECEIVE_FILTER_PARAMETERS is used in
                # OID_RECEIVE_FILTER_PARAMETERS and
                # OID_RECEIVE_FILTER_SET_FILTER
                NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)

                # _When_(FieldParametersArrayNumElements == 0, _Struct_size_bytes_((ctypes.sizeof(NDIS_RECEIVE_FILTER_PARAMETERS)))
                # _When_(FieldParametersArrayNumElements > 0, _Struct_size_bytes_(FieldParametersArrayOffset  + FieldParametersArrayNumElements*FieldParametersArrayElementSize))
                # struct _NDIS_RECEIVE_FILTER_PARAMETERS
                # {
                # _In_    NDIS_OBJECT_HEADER                     Header;
                0 = ==(
                    _When_,
                    >,
                    +,
                    struct,
                    ,
                )
                ULONG                                  Flags = _In_
                NDIS_RECEIVE_FILTER_TYPE               FilterType = _In_
                NDIS_RECEIVE_QUEUE_ID                  QueueId = _In_
                NDIS_RECEIVE_FILTER_ID                 FilterId = _Inout_
                # from the beginning of this structure
                ULONG                                  FieldParametersArrayOffset = _In_
                ULONG                                  FieldParametersArrayNumElements = _In_
                ULONG                                  FieldParametersArrayElementSize = _In_
                ULONG                                  RequestedFilterIdBitCount = _In_
                if NDIS_SUPPORT_NDIS630:
                # #if (NDIS_SUPPORT_NDIS630)
                # _In_    ULONG                                  MaxCoalescingDelay; // valid only for a packet coalescing filter
                NDIS_SUPPORT_NDIS630 = CALLBACK(
                    #if,
                    ,
                )


                    NDIS_NIC_SWITCH_VPORT_ID               VPortId = _In_
                # END IF   (NDIS_SUPPORT_NDIS630)

                PNDIS_RECEIVE_FILTER_PARAMETERS = POINTER(}NDIS_RECEIVE_FILTER_PARAMETERS,)
                NDIS_SIZEOF_RECEIVE_FILTER_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_PARAMETERS,
                    RequestedFilterIdBitCount)
                
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_FILTER_PARAMETERS_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_PARAMETERS,
                        VPortId)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS is used in
                # OID_RECEIVE_FILTER_CLEAR_FILTER
                NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS_REVISION_1 = 1


                _NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                    ('FilterId', NDIS_RECEIVE_FILTER_ID),
                ]
                NDIS_SIZEOF_RECEIVE_FILTER_CLEAR_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS,
                    FilterId)
                )

                # enum value used in QueueType field of
                # NDIS_RECEIVE_QUEUE_PARAMETERS structure
                class _NDIS_RECEIVE_QUEUE_TYPE(ENUM):
                    NdisReceiveQueueTypeUnspecified = 1
                    NdisReceiveQueueTypeVMQueue = 2
                    NdisReceiveQueueTypeMaximum = 3

                NDIS_RECEIVE_QUEUE_TYPE = _NDIS_RECEIVE_QUEUE_TYPE
                PNDIS_RECEIVE_QUEUE_TYPE = POINTER(_NDIS_RECEIVE_QUEUE_TYPE)

                # bits used in Flags field of NDIS_RECEIVE_QUEUE_PARAMETERS in
                # OID_RECEIVE_FILTER_ALLOCATE_QUEUE
                # and OID_RECEIVE_FILTER_QUEUE_PARAMETERS -query- OID
                NDIS_RECEIVE_QUEUE_PARAMETERS_PER_QUEUE_RECEIVE_INDICATION = (
                    0x00000001
                )
                NDIS_RECEIVE_QUEUE_PARAMETERS_LOOKAHEAD_SPLIT_REQUIRED = (
                    0x00000002
                )

                # bits used in Flags field of NDIS_RECEIVE_QUEUE_PARAMETERS in
                # OID_RECEIVE_FILTER_QUEUE_PARAMETERS -set- OID
                NDIS_RECEIVE_QUEUE_PARAMETERS_FLAGS_CHANGED = 0x00010000
                NDIS_RECEIVE_QUEUE_PARAMETERS_PROCESSOR_AFFINITY_CHANGED = (
                    0x00020000
                )
                NDIS_RECEIVE_QUEUE_PARAMETERS_SUGGESTED_RECV_BUFFER_NUMBERS_CHANGED = (
                    0x00040000
                )
                NDIS_RECEIVE_QUEUE_PARAMETERS_NAME_CHANGED = 0x00080000
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_QUEUE_PARAMETERS_INTERRUPT_COALESCING_DOMAIN_ID_CHANGED = (
                        0x00100000
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS650:
                    NDIS_RECEIVE_QUEUE_PARAMETERS_QOS_SQ_ID_CHANGED = (
                        0x00200000
                    )
                # END IF  (NDIS_SUPPORT_NDIS650)

                NDIS_RECEIVE_QUEUE_PARAMETERS_CHANGE_MASK = 0xFFFF0000
                NDIS_QUEUE_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_QUEUE_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_VM_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_VM_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_VM_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                PNDIS_VM_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_PORT_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_PORT_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_PORT_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_PORT_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_NIC_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_NIC_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_NIC_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_NIC_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_SWITCH_EXTENSION_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                PNDIS_SWITCH_EXTENSION_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                NDIS_VENDOR_NAME = NDIS_IF_COUNTED_STRING
                PNDIS_VENDOR_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                if NDIS_SUPPORT_NDIS650:
                    NDIS_QOS_SQ_ID = ULONG
                    PNDIS_QOS_SQ_ID = POINTER(ULONG)
                # END IF  (NDIS_SUPPORT_NDIS650)

                # NDIS_RECEIVE_QUEUE_PARAMETERS is used in
                # OID_RECEIVE_FILTER_ALLOCATE_QUEUE and
                # OID_RECEIVE_FILTER_QUEUE_PARAMETERS.
                # This structure is also used in
                # NDIS_STATUS_RECEIVE_FILTER_QUEUE_PARAMETERS
                # status indication
                NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS650:
                    NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_3 = 3
                # END IF   (NDIS_SUPPORT_NDIS650)


                _TEMP__NDIS_RECEIVE_QUEUE_PARAMETERS = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('QueueType', NDIS_RECEIVE_QUEUE_TYPE),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                    ('QueueGroupId', NDIS_RECEIVE_QUEUE_GROUP_ID),
                    ('ProcessorAffinity', GROUP_AFFINITY),
                    ('NumSuggestedReceiveBuffers', ULONG),
                    ('MSIXTableEntry', ULONG),
                    ('LookaheadSize', ULONG),
                    ('VmName', NDIS_VM_NAME),
                    ('QueueName', NDIS_QUEUE_NAME),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_RECEIVE_QUEUE_PARAMETERS += [
                        ('PortId', ULONG),
                        ('InterruptCoalescingDomainId', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        ]
                        if NDIS_SUPPORT_NDIS650:
                                _TEMP__NDIS_RECEIVE_QUEUE_PARAMETERS += [
                        ('QosSqId', NDIS_QOS_SQ_ID),
                                ]
                            # END IF   (NDIS_SUPPORT_NDIS650)


                                _NDIS_RECEIVE_QUEUE_PARAMETERS._fields_ = _TEMP__NDIS_RECEIVE_QUEUE_PARAMETERS
                NDIS_SIZEOF_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_PARAMETERS,
                    QueueName)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_QUEUE_PARAMETERS_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_PARAMETERS,
                        InterruptCoalescingDomainId)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS650:
                    NDIS_SIZEOF_RECEIVE_QUEUE_PARAMETERS_REVISION_3 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_PARAMETERS,
                        QosSqId)
                    )
                # END IF   (NDIS_SUPPORT_NDIS650)

                # NDIS_RECEIVE_QUEUE_FREE_PARAMETERS is used in
                # OID_RECEIVE_FILTER_FREE_QUEUE
                NDIS_RECEIVE_QUEUE_FREE_PARAMETERS_REVISION_1 = 1


                _NDIS_RECEIVE_QUEUE_FREE_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                ]
                NDIS_SIZEOF_RECEIVE_QUEUE_FREE_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_FREE_PARAMETERS,
                    QueueId)
                )

                # the following enum type is used in NDIS_RECEIVE_QUEUE_STATE
                # and NDIS_RECEIVE_QUEUE_INFO
                class _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE(ENUM):
                    NdisReceiveQueueOperationalStateUndefined = 1
                    NdisReceiveQueueOperationalStateRunning = 2
                    NdisReceiveQueueOperationalStatePaused = 3
                    NdisReceiveQueueOperationalStateDmaStopped = 4
                    NdisReceiveQueueOperationalStateMaximum = 5

                NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE = _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE
                PNDIS_RECEIVE_QUEUE_OPERATIONAL_STATE = POINTER(_NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE)

                # NDIS_RECEIVE_QUEUE_INFO is used with
                # NDIS_RECEIVE_QUEUE_INFO_ARRAY
                # in OID_RECEIVE_FILTER_ENUM_QUEUES that enumerates receive
                # queues
                # on a miniport or open
                NDIS_RECEIVE_QUEUE_INFO_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_QUEUE_INFO_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)


                _TEMP__NDIS_RECEIVE_QUEUE_INFO = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('QueueType', NDIS_RECEIVE_QUEUE_TYPE),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                    ('QueueGroupId', NDIS_RECEIVE_QUEUE_GROUP_ID),
                    ('QueueState', NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE),
                    ('ProcessorAffinity', GROUP_AFFINITY),
                    ('NumSuggestedReceiveBuffers', ULONG),
                    ('MSIXTableEntry', ULONG),
                    ('LookaheadSize', ULONG),
                    ('VmName', NDIS_VM_NAME),
                    ('QueueName', NDIS_QUEUE_NAME),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_RECEIVE_QUEUE_INFO += [
                        ('NumFilters', ULONG),
                        ('InterruptCoalescingDomainId', ULONG),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_RECEIVE_QUEUE_INFO._fields_ = _TEMP__NDIS_RECEIVE_QUEUE_INFO
                NDIS_SIZEOF_RECEIVE_QUEUE_INFO_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_INFO,
                    QueueName)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_QUEUE_INFO_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_INFO,
                        InterruptCoalescingDomainId)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # NDIS_RECEIVE_QUEUE_INFO_ARRAY is used in
                # OID_RECEIVE_FILTER_ENUM_QUEUES
                # that enumerates receive queues on a miniport or open. Each
                # element in the
                # array is an NDIS_RECEIVE_QUEUE_INFO structure
                NDIS_RECEIVE_QUEUE_INFO_ARRAY_REVISION_1 = 1


                _NDIS_RECEIVE_QUEUE_INFO_ARRAY._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('FirstElementOffset', ULONG),
                    ('NumElements', ULONG),
                    ('ElementSize', ULONG),
                ]
                NDIS_SIZEOF_RECEIVE_QUEUE_INFO_ARRAY_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_INFO_ARRAY,
                    ElementSize)
                )

                # NDIS_RECEIVE_FILTER_INFO is used with
                # NDIS_RECEIVE_FILTER_INFO_ARRAY
                # in OID_RECEIVE_FILTER_ENUM_FILTERS that enumerates receive
                # filters on a queue
                NDIS_RECEIVE_FILTER_INFO_REVISION_1 = 1


                _NDIS_RECEIVE_FILTER_INFO._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('FilterType', NDIS_RECEIVE_FILTER_TYPE),
                    ('FilterId', NDIS_RECEIVE_FILTER_ID),
                ]
                NDIS_SIZEOF_RECEIVE_FILTER_INFO_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_INFO,
                    FilterId)
                )

                # NDIS_RECEIVE_FILTER_INFO_ARRAY is used in
                # OID_RECEIVE_FILTER_ENUM_FILTERS
                # that enumerates receive filters on a queue or a VPort. Each
                # element in the array
                # is an NDIS_RECEIVE_FILTER_INFO structure
                NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)

                # flags used in NDIS_RECEIVE_FILTER_INFO_ARRAY to specify
                # whether
                # QueueId or VPortId is specified
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_FILTER_INFO_ARRAY_VPORT_ID_SPECIFIED = (
                        0x00000001
                    )
                # END IF


                _TEMP__NDIS_RECEIVE_FILTER_INFO_ARRAY = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                    ('FirstElementOffset', ULONG),
                    ('NumElements', ULONG),
                    ('ElementSize', ULONG),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_RECEIVE_FILTER_INFO_ARRAY += [
                        ('Flags', ULONG),
                        ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_RECEIVE_FILTER_INFO_ARRAY._fields_ = _TEMP__NDIS_RECEIVE_FILTER_INFO_ARRAY
                NDIS_SIZEOF_RECEIVE_FILTER_INFO_ARRAY_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_INFO_ARRAY,
                    ElementSize)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_FILTER_INFO_ARRAY_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_INFO_ARRAY,
                        VPortId)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                # NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS is used
                # in OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE OID.
                NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS_REVISION_1 = (
                    1
                )


                _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('Flags', ULONG),
                    ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                    ('CompletionStatus', NDIS_STATUS),
                ]
                NDIS_SIZEOF_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS,
                    CompletionStatus)
                )

                # NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY is used in
                # OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE OID request.
                # Each element in array is an
                # NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS
                # structure.
                NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY_REVISION_1 = 1

                # _When_(NumElements >= 1,
                # _Struct_size_bytes_(FirstElementOffset + NumElements*ElementSize))
                # _When_(NumElements == 0,
                # _Struct_size_bytes_((ctypes.sizeof(NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY)))
                # struct _NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY
                # {
                # NDIS_OBJECT_HEADER                          Header;
                1 = >=(
                    _When_,
                    +,
                    ==,
                    struct,
                    ,
                )
                Flags = ULONG
                # offset to an array of NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS
                FirstElementOffset = ULONG
                NumElements = ULONG
                ElementSize = ULONG
                PNDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY = POINTER(}NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY,)
                NDIS_SIZEOF_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY,
                    ElementSize)
                )
            # END IF   #if (NDIS_SUPPORT_NDIS620)
            if ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6):
                NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS630:
                    NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_2 = 2
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS660:
                    NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_3 = 3
                # END IF   (NDIS_SUPPORT_NDIS660)

                # What kind of hash field type the miniport can support.
                # Important, the defined values for NDIS_RSS_CAPS_HASH_TYPE
                # must allow for
                # matching the NDIS_HASH_TYPE_MASK. Referrence the
                # NDIS_HASH_TYPE_MASK
                # for more info.
                NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV4 = 0x00000100
                NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6 = 0x00000200
                NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6_EX = 0x00000400
                if NDIS_SUPPORT_NDIS680:
                    NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV4 = 0x00000800
                    NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV6 = 0x00001000
                    NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV6_EX = 0x00002000
                # END IF   (NDIS_SUPPORT_NDIS680)

                # What kind the receive scale capabilities the miniport can
                # support, miniport drivers return
                # some of these flags as CapabilitiesFlags in a structure
                # _NDIS_RECEIVE_SCALE_CAPABILITIES
                # when they get a query about theire receive side scale
                # capabilities.
                NDIS_RSS_CAPS_MESSAGE_SIGNALED_INTERRUPTS = 0x01000000
                NDIS_RSS_CAPS_CLASSIFICATION_AT_ISR = 0x02000000
                NDIS_RSS_CAPS_CLASSIFICATION_AT_DPC = 0x04000000
                if NDIS_SUPPORT_NDIS620:
                    NDIS_RSS_CAPS_USING_MSI_X = 0x08000000
                # END IF


                if NDIS_SUPPORT_NDIS630:
                    NDIS_RSS_CAPS_RSS_AVAILABLE_ON_PORTS = 0x10000000
                    NDIS_RSS_CAPS_SUPPORTS_MSI_X = 0x20000000
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS680:
                    NDIS_RSS_CAPS_SUPPORTS_INDEPENDENT_ENTRY_MOVE = 0x40000000
                # END IF   (NDIS_SUPPORT_NDIS680)

                # Typedef to use as flags holder to correlate to the
                # NDIS_RSS_CAPS_ prefixed flags above.
                NDIS_RSS_CAPS_FLAGS = ULONG

                # the following structure defines the Receive scale
                # capabilities of the miniport
                _TEMP__NDIS_RECEIVE_SCALE_CAPABILITIES = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('CapabilitiesFlags', NDIS_RSS_CAPS_FLAGS),
                    ('NumberOfInterruptMessages', ULONG),
                    ('NumberOfReceiveQueues', ULONG),
                ]
                if NDIS_SUPPORT_NDIS630:
                        _TEMP__NDIS_RECEIVE_SCALE_CAPABILITIES += [
                        ('NumberOfIndirectionTableEntries', USHORT),
                        ]
                    # END IF   (NDIS_SUPPORT_NDIS630)


                        _NDIS_RECEIVE_SCALE_CAPABILITIES._fields_ = _TEMP__NDIS_RECEIVE_SCALE_CAPABILITIES
                NDIS_SIZEOF_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_CAPABILITIES,
                    NumberOfReceiveQueues)
                )
                if NDIS_SUPPORT_NDIS630:
                    NDIS_SIZEOF_RECEIVE_SCALE_CAPABILITIES_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_CAPABILITIES,
                        NumberOfIndirectionTableEntries)
                    )
                # END IF   (NDIS_SUPPORT_NDIS630)

                if NDIS_SUPPORT_NDIS660:
                    NDIS_SIZEOF_RECEIVE_SCALE_CAPABILITIES_REVISION_3 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_CAPABILITIES,
                        NumberOfIndirectionTableEntries)
                    )
                # END IF   (NDIS_SUPPORT_NDIS660)

                # What hash functions does NDIS support
                NdisHashFunctionToeplitz = 0x00000001                # supported hash function 1 -- Main RSS hash function
                NdisHashFunctionReserved1 = 0x00000002                # supported hash function 2
                NdisHashFunctionReserved2 = 0x00000004                # supported hash function 3
                NdisHashFunctionReserved3 = 0x00000008                # supported hash function 4
                NDIS_HASH_FUNCTION_MASK = 0x000000FF
                NDIS_HASH_TYPE_MASK = 0x00FFFF00
                

                def NDIS_RSS_HASH_FUNC_FROM_HASH_INFO(_HashInfo):
                    return _HashInfo & NDIS_HASH_FUNCTION_MASK
                

                def NDIS_RSS_HASH_TYPE_FROM_HASH_INFO(_HashInfo):
                    return _HashInfo & NDIS_HASH_TYPE_MASK
                

                def NDIS_RSS_HASH_INFO_FROM_TYPE_AND_FUNC(_HashType, _HashFunction):
                    return _HashType(|(_HashFunction))

                # What kind of hash field type the protocol asks the miniport
                # to do
                NDIS_HASH_IPV4 = 0x00000100
                NDIS_HASH_TCP_IPV4 = 0x00000200
                NDIS_HASH_IPV6 = 0x00000400
                NDIS_HASH_IPV6_EX = 0x00000800
                NDIS_HASH_TCP_IPV6 = 0x00001000
                NDIS_HASH_TCP_IPV6_EX = 0x00002000
                if NDIS_SUPPORT_NDIS680:
                    NDIS_HASH_UDP_IPV4 = 0x00004000
                    NDIS_HASH_UDP_IPV6 = 0x00008000
                    NDIS_HASH_UDP_IPV6_EX = 0x00010000
                # END IF   (NDIS_SUPPORT_NDIS680)

                # Typedef to use as flags holder to correlate to the NDIS_HAS_
                # prefixed flags above.
                NDIS_HASH_FLAGS = ULONG

                # Flags to denote the parameters that are kept unmodified.
                NDIS_RSS_PARAM_FLAG_BASE_CPU_UNCHANGED = 0x0001
                NDIS_RSS_PARAM_FLAG_HASH_INFO_UNCHANGED = 0x0002
                NDIS_RSS_PARAM_FLAG_ITABLE_UNCHANGED = 0x0004
                NDIS_RSS_PARAM_FLAG_HASH_KEY_UNCHANGED = 0x0008
                NDIS_RSS_PARAM_FLAG_DISABLE_RSS = 0x0010
                if NDIS_SUPPORT_NDIS660:
                    NDIS_RSS_PARAM_FLAG_DEFAULT_PROCESSOR_UNCHANGED = 0x0020
                # END IF   NDIS_SUPPORT_NDIS660

                NDIS_RSS_INDIRECTION_TABLE_SIZE_REVISION_1 = 128
                NDIS_RSS_HASH_SECRET_KEY_SIZE_REVISION_1 = 40

                # used in OID_GEN_RECEIVE_SCALE_PARAMETERS
                NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_1 = 1
                if NDIS_SUPPORT_NDIS620:
                    NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_2 = 2
                # END IF


                if NDIS_SUPPORT_NDIS660:
                    NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_3 = 3
                # END IF


                _TEMP__NDIS_RECEIVE_SCALE_PARAMETERS = [
                    ('Header', NDIS_OBJECT_HEADER),
                    # Qualifies the rest of the information.
                    ('Flags', USHORT),
                    # The base CPU number to do receive processing. not used.
                    ('BaseCpuNumber', USHORT),
                    # This describes the hash function and type being enabled.
                    ('HashInformation', ULONG),
                    # The size of indirection table array.
                    ('IndirectionTableSize', USHORT),
                    # The offset of the indirection table from the beginning
                    # of this structure.
                    ('IndirectionTableOffset', ULONG),
                    # The size of the secret key.
                    ('HashSecretKeySize', USHORT),
                    # The offset of the secret key from the beginning of this
                    # structure.
                    ('HashSecretKeyOffset', ULONG),
                ]
                if NDIS_SUPPORT_NDIS620:
                        _TEMP__NDIS_RECEIVE_SCALE_PARAMETERS += [
                        ('ProcessorMasksOffset', ULONG),
                        # Array of type GROUP_AFFINITY representing procs used
                        # in the indirection table
                        ('NumberOfProcessorMasks', ULONG),
                        ('ProcessorMasksEntrySize', ULONG),
                        ]
                    # END IF


                        ]
                        if NDIS_SUPPORT_NDIS660:
                                _TEMP__NDIS_RECEIVE_SCALE_PARAMETERS += [
                        # Specifies default RSS processor.
                        ('DefaultProcessorNumber', PROCESSOR_NUMBER),
                                ]
                            # END IF


                                _NDIS_RECEIVE_SCALE_PARAMETERS._fields_ = _TEMP__NDIS_RECEIVE_SCALE_PARAMETERS
                NDIS_SIZEOF_RECEIVE_SCALE_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_PARAMETERS,
                    HashSecretKeyOffset)
                )

                # Maximum indirection table and private key sizes for revision
                # 1
                NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_1 = 128
                NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_1 = 40
                if NDIS_SUPPORT_NDIS620:
                    NDIS_SIZEOF_RECEIVE_SCALE_PARAMETERS_REVISION_2 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_PARAMETERS,
                        ProcessorMasksEntrySize)
                    )

                    # Maximum indirection table and private key sizes for
                    # revision 2
                    NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_2 = (
                        128*(ctypes.sizeof(PROCESSOR_NUMBER)
                    )
                    NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_2 = 40
                # END IF
                if NDIS_SUPPORT_NDIS660:
                    NDIS_SIZEOF_RECEIVE_SCALE_PARAMETERS_REVISION_3 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_PARAMETERS,
                        DefaultProcessorNumber)
                    )

                    # Maximum indirection table and private key sizes for
                    # revision 3
                    NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_3 = (
                        128*(ctypes.sizeof(PROCESSOR_NUMBER)
                    )
                    NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_3 = 40
                # END IF
                if NDIS_SUPPORT_NDIS680:
                    # Parameter structure used with
                    # OID_GEN_RECEIVE_SCALE_PARAMETERS_V2
                    NDIS_RECEIVE_SCALE_PARAMETERS_V2_REVISION_1 = 1
                    NDIS_RECEIVE_SCALE_PARAM_ENABLE_RSS = 0x00000001
                    NDIS_RECEIVE_SCALE_PARAM_HASH_INFO_CHANGED = 0x00000002
                    NDIS_RECEIVE_SCALE_PARAM_HASH_KEY_CHANGED = 0x00000004
                    NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_QUEUES_CHANGED = (
                        0x00000008
                    )
                    NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_ENTRIES_CHANGED = (
                        0x00000010
                    )


                    _NDIS_RECEIVE_SCALE_PARAMETERS_V2._fields_ = [
                        # Header.Size =
                        # (ctypes.sizeof(NDIS_RECEIVE_SCALE_PARAMETERS_V2);
                        ('Header', NDIS_OBJECT_HEADER),
                        # Qualifies the rest of the information.
                        ('Flags', ULONG),
                        # This describes the hash function and type being
                        # enabled.
                        ('HashInformation', ULONG),
                        # The size of the secret key.
                        ('HashSecretKeySize', ULONG),
                        # The offset of the secret key from the beginning of
                        # this structure.
                        ('HashSecretKeyOffset', ULONG),
                        # Number of queues
                        ('NumberOfQueues', ULONG),
                        # Number of entries in indirection table. Must be
                        # power of two.
                        ('NumberOfIndirectionTableEntries', ULONG),
                    ]
                    NDIS_SIZEOF_RECEIVE_SCALE_PARAMETERS_V2_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_SCALE_PARAMETERS_V2,
                        NumberOfIndirectionTableEntries)
                    )
                    # Flag which tells that NDIS_RSS_SET_INDIRECTION_ENTRY is
                    # referring to
                    # "Primary Processor" of the scaling entity (e.g. VPort).
                    # IndirectionTableIndex is not used.
                    NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_PRIMARY_PROCESSOR = (
                        0x00000001
                    )
                    # Flag which tells that NDIS_RSS_SET_INDIRECTION_ENTRY is
                    # referring to
                    # "Default Processor" of the scaling entity (e.g. VPort).
                    # IndirectionTableIndex is not used.
                    NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_DEFAULT_PROCESSOR = (
                        0x00000002
                    )
                    # Command to set a single indirection table entry.
                    _NDIS_RSS_SET_INDIRECTION_ENTRY._fields_ = [
                        # Nic Switch where VPort is residing
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        # VPort idintifier
                        ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                        # Qualifies the information in this structure.
                        ('Flags', ULONG),
                        # Indirection table entry which is being moved.
                        ('IndirectionTableIndex', USHORT),
                        # Target processor number
                        ('TargetProcessorNumber', PROCESSOR_NUMBER),
                        # Result of the set operation described by this entry.
                        ('EntryStatus', NDIS_STATUS),
                    ]
                    NDIS_SIZEOF_RSS_SET_INDIRECTION_ENTRY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RSS_SET_INDIRECTION_ENTRY,
                        EntryStatus)
                    )
                    # This structure is a parameter for synchronous direct
                    # OID_GEN_RSS_SET_INDIRECTION_TABLE_ENTRIES.
                    NDIS_RSS_SET_INDIRECTION_ENTRIES_REVISION_1 = 1
                    _NDIS_RSS_SET_INDIRECTION_ENTRIES._fields_ = [
                        # Header.Size =
                        # (ctypes.sizeof(NDIS_RSS_SET_INDIRECTION_ENTRIES);
                        ('Header', NDIS_OBJECT_HEADER),
                        # Qualifies the rest of the information, as well as
                        # array processing policy
                        ('Flags', ULONG),
                        # during array traversal.
                        ('RssEntrySize', ULONG),
                        # this structure.
                        ('RssEntryTableOffset', ULONG),
                        # The number of NDIS_RSS_SET_INDIRECTION_ENTRY
                        # elements in the array.
                        ('NumberOfRssEntries', ULONG),
                    ]
                    NDIS_SIZEOF_RSS_SET_INDIRECTION_ENTRIES_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RSS_SET_INDIRECTION_ENTRIES,
                        NumberOfRssEntries)
                    )
                # END IF   NDIS_SUPPORT_NDIS680
                # Used in OID_GEN_RECEIVE_HASH
                NDIS_RECEIVE_HASH_FLAG_ENABLE_HASH = 0x00000001
                NDIS_RECEIVE_HASH_FLAG_HASH_INFO_UNCHANGED = 0x00000002
                NDIS_RECEIVE_HASH_FLAG_HASH_KEY_UNCHANGED = 0x00000004
                NDIS_RECEIVE_HASH_PARAMETERS_REVISION_1 = 1
                _NDIS_RECEIVE_HASH_PARAMETERS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    # Qualifies the rest of the information.
                    ('Flags', ULONG),
                    # This describes the hash function and type being enabled.
                    ('HashInformation', ULONG),
                    # The size of the secret key.
                    ('HashSecretKeySize', USHORT),
                    # The offset of the secret key from the beginning of this
                    # structure.
                    ('HashSecretKeyOffset', ULONG),
                ]
                NDIS_SIZEOF_RECEIVE_HASH_PARAMETERS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_HASH_PARAMETERS,
                    HashSecretKeyOffset)
                )


                class _NDIS_PROCESSOR_VENDOR(ENUM):
                    NdisProcessorVendorUnknown = 1
                    NdisProcessorVendorGenuinIntel = 2
                    NdisProcessorVendorGenuineIntel = (
                        NdisProcessorVendorGenuinIntel
                    )
                    NdisProcessorVendorAuthenticAMD = 3

                NDIS_PROCESSOR_VENDOR = _NDIS_PROCESSOR_VENDOR
                PNDIS_PROCESSOR_VENDOR = POINTER(_NDIS_PROCESSOR_VENDOR)
                if NDIS_SUPPORT_NDIS620:
                    # Used in the RssProcessorArray in NDIS_RSS_PROCESSOR_INFO
                    _NDIS_RSS_PROCESSOR._fields_ = [
                        ('ProcNum', PROCESSOR_NUMBER),
                        ('PreferenceIndex', USHORT),
                        ('Reserved', USHORT),
                    ]
                    NDIS_SIZEOF_RSS_PROCESSOR_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RSS_PROCESSOR,
                        PreferenceIndex)
                    )
                    NDIS_RSS_PROCESSOR_INFO_REVISION_1 = 1
                    if NDIS_SUPPORT_NDIS630:
                        NDIS_RSS_PROCESSOR_INFO_REVISION_2 = 2


                        class _NDIS_RSS_PROFILE(ENUM):
                            NdisRssProfileClosest = 1
                            NdisRssProfileClosestStatic = 2
                            NdisRssProfileNuma = 3
                            NdisRssProfileNumaStatic = 4
                            NdisRssProfileConservative = 5
                            NdisRssProfileMaximum = 6

                        NDIS_RSS_PROFILE = _NDIS_RSS_PROFILE
                        PNDIS_RSS_PROFILE = POINTER(_NDIS_RSS_PROFILE)
                    # END IF   (NDIS_SUPPORT_NDIS630)

                    # Used in NdisGetRssProcessorInformation API and
                    # OID_IMPLAT_RSS_PROCESSOR_INFO
                    _TEMP__NDIS_RSS_PROCESSOR_INFO = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('RssBaseProcessor', PROCESSOR_NUMBER),
                        ('MaxNumRssProcessors', ULONG),
                        ('PreferredNumaNode', USHORT),
                        # |
                        ('RssProcessorArrayOffset', ULONG),
                        # | Array of NDIS_RSS_PROCESSOR
                        ('RssProcessorCount', ULONG),
                        # |
                        ('RssProcessorEntrySize', ULONG),
                    ]
                    if NDIS_SUPPORT_NDIS630:
                            _TEMP__NDIS_RSS_PROCESSOR_INFO += [
                            ('RssMaxProcessor', PROCESSOR_NUMBER),
                            ('RssProfile', NDIS_RSS_PROFILE),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS630)


                            _NDIS_RSS_PROCESSOR_INFO._fields_ = _TEMP__NDIS_RSS_PROCESSOR_INFO
                    NDIS_SIZEOF_RSS_PROCESSOR_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RSS_PROCESSOR_INFO,
                        RssProcessorEntrySize)
                    )
                    if NDIS_SUPPORT_NDIS630:
                        NDIS_SIZEOF_RSS_PROCESSOR_INFO_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_RSS_PROCESSOR_INFO,
                            RssProfile)
                        )
                    # END IF   (NDIS_SUPPORT_NDIS630)

                    # Used in ProcessorInfo array in
                    # NDIS_SYSTEM_PROCESSOR_INFO_EX
                    _NDIS_PROCESSOR_INFO_EX._fields_ = [
                        ('ProcNum', PROCESSOR_NUMBER),
                        ('SocketId', ULONG),
                        ('CoreId', ULONG),
                        ('HyperThreadId', ULONG),
                        ('NodeId', USHORT),
                        ('NodeDistance', USHORT),
                    ]
                    NDIS_SYSTEM_PROCESSOR_INFO_EX_REVISION_1 = 1

                    # Used in NdisGetProcessorInformationEx API
                    _NDIS_SYSTEM_PROCESSOR_INFO_EX._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('ProcessorVendor', NDIS_PROCESSOR_VENDOR),
                        ('NumSockets', ULONG),
                        ('NumCores', ULONG),
                        ('NumCoresPerSocket', ULONG),
                        ('MaxHyperThreadingProcsPerCore', ULONG),
                        # |
                        ('ProcessorInfoOffset', ULONG),
                        # | Array of NDIS_PROCESSOR_INFO_EX
                        ('NumberOfProcessors', ULONG),
                        # |
                        ('ProcessorInfoEntrySize', ULONG),
                    ]
                    NDIS_SIZEOF_SYSTEM_PROCESSOR_INFO_EX_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SYSTEM_PROCESSOR_INFO_EX,
                        ProcessorInfoEntrySize)
                    )

                    # Enum to identify Hypervisor Parition type
                    # Used in NDIS_HYPERVISOR_INFO.PartitionType
                    class _NDIS_HYPERVISOR_PARTITION_TYPE(ENUM):
                        NdisHypervisorPartitionTypeUnknown = 1
                        NdisHypervisorPartitionTypeMsHvParent = 2
                        NdisHypervisorPartitionMsHvChild = 3
                        NdisHypervisorPartitionTypeMax = 4

                    NDIS_HYPERVISOR_PARTITION_TYPE = _NDIS_HYPERVISOR_PARTITION_TYPE
                    PNDIS_HYPERVISOR_PARTITION_TYPE = POINTER(_NDIS_HYPERVISOR_PARTITION_TYPE)

                    # Flags used in NDIS_HYPERVISOR_INFO.Flags field
                    NDIS_HYPERVISOR_INFO_FLAG_HYPERVISOR_PRESENT = 0x00000001
                    NDIS_HYPERVISOR_INFO_REVISION_1 = 1

                    # Structure used to return Hypervisor related information
                    # in NdisGetHypervisorInfo API
                    _NDIS_HYPERVISOR_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PartitionType', NDIS_HYPERVISOR_PARTITION_TYPE),
                    ]
                    NDIS_SIZEOF_HYPERVISOR_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_HYPERVISOR_INFO,
                        PartitionType)
                    )

                    # The following data structures are used with Receive
                    # Queue related WMI
                    # guids. NDIS will translate these data structures to
                    # those used
                    # in OIDs
                    _NDIS_WMI_GROUP_AFFINITY._fields_ = [
                        ('Mask', ULONG64),
                        ('Group', USHORT),
                        ('Reserved', USHORT * 3),
                    ]

                    # NDIS_WMI_RECEIVE_QUEUE_PARAMETERS is used in
                    # GUID_NDIS_RECEIVE_FILTER_QUEUE_PARAMETERS
                    NDIS_WMI_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = 1


                    _NDIS_WMI_RECEIVE_QUEUE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('QueueType', NDIS_RECEIVE_QUEUE_TYPE),
                        ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                        ('QueueGroupId', NDIS_RECEIVE_QUEUE_GROUP_ID),
                        ('ProcessorAffinity', NDIS_WMI_GROUP_AFFINITY),
                        ('NumSuggestedReceiveBuffers', ULONG),
                        ('MSIXTableEntry', ULONG),
                        ('LookaheadSize', ULONG),
                        ('VmName', NDIS_VM_NAME),
                        ('QueueName', NDIS_QUEUE_NAME),
                    ]
                    NDIS_SIZEOF_WMI_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_RECEIVE_QUEUE_PARAMETERS,
                        QueueName)
                    )

                    # NDIS_WMI_RECEIVE_QUEUE_INFO is used in
                    # GUID_NDIS_RECEIVE_FILTER_ENUM_QUEUES
                    NDIS_WMI_RECEIVE_QUEUE_INFO_REVISION_1 = 1


                    _NDIS_WMI_RECEIVE_QUEUE_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('QueueType', NDIS_RECEIVE_QUEUE_TYPE),
                        ('QueueId', NDIS_RECEIVE_QUEUE_ID),
                        ('QueueGroupId', NDIS_RECEIVE_QUEUE_GROUP_ID),
                        ('QueueState', NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE),
                        ('ProcessorAffinity', NDIS_WMI_GROUP_AFFINITY),
                        ('NumSuggestedReceiveBuffers', ULONG),
                        ('MSIXTableEntry', ULONG),
                        ('LookaheadSize', ULONG),
                        ('VmName', NDIS_VM_NAME),
                        ('QueueName', NDIS_QUEUE_NAME),
                    ]
                    NDIS_SIZEOF_WMI_RECEIVE_QUEUE_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_WMI_RECEIVE_QUEUE_INFO,
                        QueueName)
                    )
                # END IF   NDIS_SUPPORT_NDIS620

                if NDIS_SUPPORT_NDIS630:
                    # Interfaces for supporting SRIOV and NIC embedded switch
                    from ndkinfo_h import * # NOQA

                    # NetworkDirect performance counters structure for PCW
                    # support. The fields
                    # (and their order) in this structure must always match
                    # the corresponding
                    # information in the NDIS PCW manifest.
                    # If this structure is changed, then the
                    # NDIS_NDK_STATISTICS_INFO structure
                    # revision must also be updated accordingly since this
                    # structure is embedded in
                    # NDIS_NDK_STATISTICS_INFO.
                    _NDIS_NDK_PERFORMANCE_COUNTERS._fields_ = [
                        # 0
                        ('Connect', ULONG64),
                        # 1
                        ('Accept', ULONG64),
                        # 2
                        ('ConnectFailure', ULONG64),
                        # 3
                        ('ConnectionError', ULONG64),
                        # 4
                        ('ActiveConnection', ULONG64),
                        # 5
                        ('Reserved01', ULONG64),
                        # 6
                        ('Reserved02', ULONG64),
                        # 7
                        ('Reserved03', ULONG64),
                        # 8
                        ('Reserved04', ULONG64),
                        # 9
                        ('Reserved05', ULONG64),
                        # 10
                        ('Reserved06', ULONG64),
                        # 11
                        ('Reserved07', ULONG64),
                        # 12
                        ('Reserved08', ULONG64),
                        # 13
                        ('Reserved09', ULONG64),
                        # 14
                        ('Reserved10', ULONG64),
                        # 15
                        ('Reserved11', ULONG64),
                        # 16
                        ('Reserved12', ULONG64),
                        # 17
                        ('Reserved13', ULONG64),
                        # 18
                        ('Reserved14', ULONG64),
                        # 19
                        ('Reserved15', ULONG64),
                        # 20
                        ('Reserved16', ULONG64),
                        # 21
                        ('Reserved17', ULONG64),
                        # 22
                        ('Reserved18', ULONG64),
                        # 23
                        ('Reserved19', ULONG64),
                        # 24
                        ('Reserved20', ULONG64),
                        # 25
                        ('CQError', ULONG64),
                        # 26
                        ('RDMAInOctets', ULONG64),
                        # 27
                        ('RDMAOutOctets', ULONG64),
                        # 28
                        ('RDMAInFrames', ULONG64),
                        # 29
                        ('RDMAOutFrames', ULONG64),
                    ]
                    

                    def NDIS_NDK_PERFORMANCE_COUNTER_MASK(CounterFieldName):
                    # DEFINE ERROR 4: #define NDIS_NDK_PERFORMANCE_COUNTER_MASK(CounterFieldName) (1ui64 << (FIELD_OFFSET(NDIS_NDK_PERFORMANCE_COUNTERS, CounterFieldName) / (ctypes.sizeof(ULONG64)))
                        pass
                    NDIS_NDK_CAPABILITIES_REVISION_1 = 1
                    _NDIS_NDK_CAPABILITIES._fields_ = [
                        # Header.Size = (ctypes.sizeof(NDIS_NDK_CAPABILITIES);
                        ('Header', NDIS_OBJECT_HEADER),
                        # reserved, must be set to 0
                        ('Flags', ULONG),
                        # Maximum number of queue pairs supported by the
                        # adapter
                        ('MaxQpCount', ULONG),
                        # Maximum number of completion queues supported by the
                        # adapter
                        ('MaxCqCount', ULONG),
                        # Maximum number of memory regions supported by the
                        # adapter
                        ('MaxMrCount', ULONG),
                        # Maximum number of protection domains supported by
                        # the adapter
                        ('MaxPdCount', ULONG),
                        # which is indicated by the
                        # NdkInfo.MaxInboundReadLimit field.
                        ('MaxInboundReadLimit', ULONG),
                        # which is indicated by the
                        # NdkInfo.MaxOutboundReadLimit field.
                        ('MaxOutboundReadLimit', ULONG),
                        # Maximum number of memory windows supported by the
                        # adapter
                        ('MaxMwCount', ULONG),
                        # If this field is 0, adapter does not support shared
                        # receive queues.
                        ('MaxSrqCount', ULONG),
                        # counter which it cannot support.
                        ('MissingCounterMask', ULONG64),
                        # limits that are relevant for an individual NDKPI
                        # client (in contrast to system-wide limits).
                        ('NdkInfo', POINTER(NDK_ADAPTER_INFO)),
                    ]
                    NDIS_SIZEOF_NDK_CAPABILITIES_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NDK_CAPABILITIES,
                        NdkInfo)
                    )
                    OID_NDK_SET_STATE = 0xFC040201
                    OID_NDK_STATISTICS = 0xFC040202
                    OID_NDK_CONNECTIONS = 0xFC040203
                    OID_NDK_LOCAL_ENDPOINTS = 0xFC040204
                    # Embedded output structure for GUID_NDIS_NDK_CAPABILITIES
                    _NDK_WMI_ADAPTER_INFO._fields_ = [
                        ('Version', NDK_VERSION),
                        ('VendorId', UINT32),
                        ('DeviceId', UINT32),
                        ('MaxRegistrationSize', ULONGLONG),
                        ('MaxWindowSize', ULONGLONG),
                        ('FRMRPageCount', ULONG),
                        ('MaxInitiatorRequestSge', ULONG),
                        ('MaxReceiveRequestSge', ULONG),
                        ('MaxReadRequestSge', ULONG),
                        ('MaxTransferLength', ULONG),
                        ('MaxInlineDataSize', ULONG),
                        ('MaxInboundReadLimit', ULONG),
                        ('MaxOutboundReadLimit', ULONG),
                        ('MaxReceiveQueueDepth', ULONG),
                        ('MaxInitiatorQueueDepth', ULONG),
                        ('MaxSrqDepth', ULONG),
                        ('MaxCqDepth', ULONG),
                        ('LargeRequestThreshold', ULONG),
                        ('MaxCallerData', ULONG),
                        ('MaxCalleeData', ULONG),
                        ('AdapterFlags', ULONG),
                    ]
                    # Output structure for GUID_NDIS_NDK_CAPABILITIES
                    _NDIS_WMI_NDK_CAPABILITIES._fields_ = [
                        ('MaxQpCount', ULONG),
                        ('MaxCqCount', ULONG),
                        ('MaxMrCount', ULONG),
                        ('MaxPdCount', ULONG),
                        ('MaxInboundReadLimit', ULONG),
                        ('MaxOutboundReadLimit', ULONG),
                        ('MaxMwCount', ULONG),
                        ('MaxSrqCount', ULONG),
                        ('MissingCounterMask', ULONG64),
                        ('NdkInfo', NDK_WMI_ADAPTER_INFO),
                    ]
                    # Query ND capabilities of an NDK adapter
                    GUID_NDIS_NDK_CAPABILITIES = DEFINE_GUID(
                        0x7969BA4D,
                        0xDD80,
                        0x4BC7,
                        0xB3,
                        0xE6,
                        0x68,
                        0x04,
                        0x39,
                        0x97,
                        0xE5,
                        0x19
                    )
                    # Query/set ND enabled/disabled state of an NDK adapter
                    GUID_NDIS_NDK_STATE = DEFINE_GUID(
                        0x530C69C9,
                        0x2F51,
                        0x49DE,
                        0xA1,
                        0xAF,
                        0x08,
                        0x8D,
                        0x54,
                        0xFF,
                        0xA4,
                        0x74
                    )
                    # Structure returned for an OID_NDK_STATISTICS request
                    NDIS_NDK_STATISTICS_INFO_REVISION_1 = 1
                    _NDIS_NDK_STATISTICS_INFO._fields_ = [
                        # Header.Size =
                        # NDIS_SIZEOF_NDK_STATISTICS_INFO_REVISION_1;
                        ('Header', NDIS_OBJECT_HEADER),
                        # reserved, must be set to 0
                        ('Flags', ULONG),
                        ('CounterSet', NDIS_NDK_PERFORMANCE_COUNTERS),
                    ]
                    NDIS_SIZEOF_NDK_STATISTICS_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NDK_STATISTICS_INFO,
                        CounterSet)
                    )
                    from ws2def_h import * # NOQA
                    from ws2ipdef_h import * # NOQA
                    # Local IP address and port
                    _NDIS_NDK_CONNECTION_ENTRY._fields_ = [
                        ('Local', SOCKADDR_INET),
                        # Remote IP address and port
                        ('Remote', SOCKADDR_INET),
                        # TRUE if NDSPI (user-mode) connection, FALSE if NDKPI
                        # (kernel-mode)
                        ('UserModeOwner', BOOLEAN),
                        # Process ID for NDSPI (user-mode) connection
                        ('OwnerPid', ULONG),
                    ]
                    # Structure returned for an OID_NDK_CONNECTIONS request.
                    # This structure is variable-sized based on the actual
                    # number of connections being returned.
                    # The actual size of the connection array
                    # (as element count) is indicated by the Count field.
                    # If the RDMA technology for the NDK provider requires the
                    # provider to map ND connections
                    # to TCP connections, then the NDK provider must also
                    # report the underlying TCP connection
                    # 4-tuple for each ND connection as follows: set the
                    # NDConnectionsMappedtoTCPConnections
                    # field to TRUE, and use two consecutive entries for each
                    # ND connection where the first entry
                    # contains the ND addressing information
                    # (local & remote IP address/ND port number) and
                    # the immediate next entry contains the corresponding TCP
                    # connection's addressing
                    # information (local & remote IP address/TCP port number).
                    # Fields other than addressing
                    # information (UserModeOwner, OwnerPid) must be set only
                    # in the first entry, and left
                    # untouched in the next entry. So, entries at index 0, 2,
                    # 4, ... will contain ND addressing info (plus
                    # properly filled-in other
                    # fields) and entries at index 1, 3, 5, ... will contain TCP addressing info
                    # 
                    # (where other fields are left untouched) when
                    # NDConnectionsMappedtoTCPConnections is set to TRUE.
                    NDIS_NDK_CONNECTIONS_REVISION_1 = 1
                    _NDIS_NDK_CONNECTIONS._fields_ = [
                        # Header.Size =
                        # (USHORT)min(MAXUSHORT, NDIS_SIZEOF_NDK_CONNECTIONS_REVISION_1(n));
                        # 
                        ('Header', NDIS_OBJECT_HEADER),
                        # reserved, must be set to 0
                        ('Flags', ULONG),
                        ('Count', ULONG),
                        ('NDConnectionsMappedtoTCPConnections', BOOLEAN),
                        ('Connections', NDIS_NDK_CONNECTION_ENTRY * 1),
                    ]
                    def NDIS_SIZEOF_NDK_CONNECTIONS_REVISION_1(n):
                        return FIELD_OFFSETNDIS_NDK_CONNECTIONS, Connections[n]
                    # Local IP address and port
                    _NDIS_NDK_LOCAL_ENDPOINT_ENTRY._fields_ = [
                        ('Local', SOCKADDR_INET),
                        # TRUE if NDSPI (user-mode) listener, FALSE if NDKPI
                        # (kernel-mode)
                        ('UserModeOwner', BOOLEAN),
                        # TRUE if a listener, FALSE if a SharedEndpoint
                        # (used for connections)
                        ('Listener', BOOLEAN),
                        # Process ID for NDSPI (user-mode) local endpoint
                        ('OwnerPid', ULONG),
                    ]
                    # Structure returned for an OID_NDK_LOCAL_ENDPOINTS
                    # request.
                    # This structure is variable-sized based on the actual
                    # number of local endpoints being returned.
                    # The actual size of the local endpoint array
                    # (as element count) is indicated by the Count field.
                    # If the RDMA technology for the NDK provider requires the
                    # provider to map ND local endpoints
                    # to TCP local endpoints, then the NDK provider must also
                    # report the underlying TCP local endpoint
                    # for each ND local endpoint as follows: set the
                    # NDLocalEndpointsMappedtoTCPLocalEndpoints
                    # field to TRUE, and use two consecutive entries for each
                    # ND local endpoint where the first entry
                    # contains the ND addressing information
                    # (local IP address/ND port number) and
                    # the immediate next entry contains the corresponding TCP
                    # local endpoint's addressing
                    # information (local IP address/TCP port number). Fields
                    # other than addressing
                    # information (UserModeOwner, Listener, OwnerPid) must be
                    # set only in the first entry, and left
                    # untouched in the next entry. So, entries at index 0, 2,
                    # 4, ... will contain ND addressing info (plus
                    # properly filled-in other
                    # fields) and entries at index 1, 3, 5, ... will contain TCP addressing info
                    # 
                    # (where other fields are left untouched) when
                    # NDLocalEndpointsMappedtoTCPLocalEndpoints is set to TRUE.
                    NDIS_NDK_LOCAL_ENDPOINTS_REVISION_1 = 1
                    _NDIS_NDK_LOCAL_ENDPOINTS._fields_ = [
                        # Header.Size =
                        # (USHORT)min(MAXUSHORT, NDIS_SIZEOF_NDK_LOCAL_ENDPOINTS_REVISION_1(n));
                        # 
                        ('Header', NDIS_OBJECT_HEADER),
                        # reserved, must be set to 0
                        ('Flags', ULONG),
                        ('Count', ULONG),
                        ('NDLocalEndpointsMappedtoTCPLocalEndpoints', BOOLEAN),
                        ('LocalEndpoints', NDIS_NDK_LOCAL_ENDPOINT_ENTRY * 1),
                    ]
                    def NDIS_SIZEOF_NDK_LOCAL_ENDPOINTS_REVISION_1(n):
                        return (
                            FIELD_OFFSETNDIS_NDK_LOCAL_ENDPOINTS,
                            LocalEndpoints[n]
                        )
                    # Quality of Service (QoS) OIDs
                    OID_QOS_HARDWARE_CAPABILITIES = 0xFC050001                    # query only
                    OID_QOS_CURRENT_CAPABILITIES = 0xFC050002                    # query only
                    OID_QOS_PARAMETERS = 0xFC050003                    # method only
                    OID_QOS_OPERATIONAL_PARAMETERS = 0xFC050004                    # query only
                    OID_QOS_REMOTE_PARAMETERS = 0xFC050005                    # query only
                    NDIS_QOS_MAXIMUM_PRIORITIES = 8
                    NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES = 8
                    # The following bits are used in
                    # NDIS_QOS_CAPABILITIES.Flags field.
                    NDIS_QOS_CAPABILITIES_STRICT_TSA_SUPPORTED = 0x00000001
                    NDIS_QOS_CAPABILITIES_MACSEC_BYPASS_SUPPORTED = 0x00000002
                    NDIS_QOS_CAPABILITIES_CEE_DCBX_SUPPORTED = 0x00000004
                    NDIS_QOS_CAPABILITIES_IEEE_DCBX_SUPPORTED = 0x00000008
                    NDIS_QOS_CAPABILITIES_REVISION_1 = 1
                    # NDIS_QOS_CAPABILITIES is used as the return result of
                    # the OID_QOS_CURRENT_CAPABILITIES
                    # and OID_QOS_HARDWARE_CAPABILITIES OID queries. It is
                    # also specified as the
                    # HardwareQosCapabilities and CurrentQosCapabilities
                    # fields in the
                    # NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
                    # structure.
                    # typedef _Struct_size_bytes_(Header.Size) struct _NDIS_QOS_CAPABILITIES
                    # {
                    # 
                    # // Header.Type = NDIS_OBJECT_TYPE_QOS_CAPABILITIES
                    # // Header.Revision = NDIS_QOS_CAPABILITIES_REVISION_1
                    # // Header.Size = NDIS_SIZEOF_QOS_CAPABILITIES_REVISION_1
                    # 
                    # _In_ NDIS_OBJECT_HEADER Header;
                    Header.Size = CALLBACK(
                        _Struct_size_bytes_,
                        NDIS_OBJECT_HEADER,
                    )
                    NDIS_SIZEOF_QOS_CAPABILITIES_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_CAPABILITIES,
                        MaxNumPfcEnabledTrafficClasses)
                    )
                    # The following bits are used in
                    # NDIS_QOS_CLASSIFICATION_ELEMENT.Flags field.
                    NDIS_QOS_CLASSIFICATION_SET_BY_MINIPORT_MASK = 0xFF000000                    # Mask of flags set by miniport only
                    NDIS_QOS_CLASSIFICATION_ENFORCED_BY_MINIPORT = 0x01000000                    # Set by miniport
                    # The following values are used in
                    # NDIS_QOS_CLASSIFICATION_ELEMENT.ConditionSelector field.
                    NDIS_QOS_CONDITION_RESERVED = 0x0
                    NDIS_QOS_CONDITION_DEFAULT = 0x1
                    NDIS_QOS_CONDITION_TCP_PORT = 0x2
                    NDIS_QOS_CONDITION_UDP_PORT = 0x3
                    NDIS_QOS_CONDITION_TCP_OR_UDP_PORT = 0x4
                    NDIS_QOS_CONDITION_ETHERTYPE = 0x5
                    NDIS_QOS_CONDITION_NETDIRECT_PORT = 0x6
                    NDIS_QOS_CONDITION_MAXIMUM = 0x7
                    # The following values are used in
                    # NDIS_QOS_CLASSIFICATION_ELEMENT.ActionSelector field.
                    NDIS_QOS_ACTION_PRIORITY = 0x0                    # 802.1p priority tagging
                    NDIS_QOS_ACTION_MAXIMUM = 0x1
                    NDIS_QOS_CLASSIFICATION_ELEMENT_REVISION_1 = 1
                    # NDIS_QOS_CLASSIFICATION_ELEMENT elements are specified by
                    # NDIS_QOS_PARAMETERS.FirstClassificationElementOffset.
                    # typedef _Struct_size_bytes_(Header.Size) struct _NDIS_QOS_CLASSIFICATION_ELEMENT
                    # {
                    # 
                    # // Header.Type = NDIS_OBJECT_TYPE_QOS_CLASSIFICATION_ELEMENT
                    # // Header.Revision = NDIS_QOS_CLASSIFICATION_ELEMENT_REVISION_1
                    # // Header.Size = NDIS_SIZEOF_QOS_CLASSIFICATION_ELEMENT_REVISION_1
                    # 
                    # _In_    NDIS_OBJECT_HEADER  Header;
                    Header.Size = CALLBACK(
                        _Struct_size_bytes_,
                        ,
                    )
                    NDIS_SIZEOF_QOS_CLASSIFICATION_ELEMENT_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_CLASSIFICATION_ELEMENT,
                        ActionField)
                    )
                    # The following bits are used in NDIS_QOS_PARAMETERS.Flags
                    # field.
                    NDIS_QOS_PARAMETERS_ETS_CHANGED = 0x00000001                    # Used in OID_QOS_PARAMETERS,
                    # optional in NDIS_STATUS_QOS_XXX_PARAMETERS_CHANGE
                    NDIS_QOS_PARAMETERS_ETS_CONFIGURED = 0x00000002
                    NDIS_QOS_PARAMETERS_PFC_CHANGED = 0x00000100                    # Used in OID_QOS_PARAMETERS,
                    # optional in NDIS_STATUS_QOS_XXX_PARAMETERS_CHANGE
                    NDIS_QOS_PARAMETERS_PFC_CONFIGURED = 0x00000200
                    NDIS_QOS_PARAMETERS_CLASSIFICATION_CHANGED = 0x00010000                    # Used in OID_QOS_PARAMETERS,
                    # optional in NDIS_STATUS_QOS_XXX_PARAMETERS_CHANGE
                    NDIS_QOS_PARAMETERS_CLASSIFICATION_CONFIGURED = 0x00020000
                    NDIS_QOS_PARAMETERS_WILLING = 0x80000000                    # Used in OID_QOS_PARAMETERS
                    # The following values are used in
                    # NDIS_QOS_PARAMETERS.TsaAssignmentTable field.
                    NDIS_QOS_TSA_STRICT = 0x0                    # Strict priority
                    NDIS_QOS_TSA_CBS = 0x1                    # Credit-Based Shaper
                    NDIS_QOS_TSA_ETS = 0x2                    # Enhanced Transmission Selection
                    NDIS_QOS_TSA_MAXIMUM = 0x3
                    NDIS_QOS_PARAMETERS_REVISION_1 = 1
                    # NDIS_QOS_PARAMETERS is used by OID_QOS_PARAMETERS.
                    # typedef _Struct_size_bytes_(Header.Size) struct _NDIS_QOS_PARAMETERS
                    # {
                    # 
                    # // Header.Type = NDIS_OBJECT_TYPE_QOS_PARAMETERS
                    # // Header.Revision = NDIS_QOS_PARAMETERS_REVISION_1
                    # // Header.Size = NDIS_SIZEOF_QOS_PARAMETERS_REVISION_1 + (ctypes.sizeof_all_classification_entries
                    # 
                    # _In_ NDIS_OBJECT_HEADER Header;
                    Header.Size = CALLBACK(
                        _Struct_size_bytes_,
                        NDIS_OBJECT_HEADER,
                    )
                    # The following fields are to configure ETS.
                    # The following fields are to configure PFC.
                    # The following fields are to configure the packet
                    # classification and tagging
                    # mechanism.
                    # Each element in the array specified by
                    # FirstClassificationElementOffset
                    # is of type NDIS_QOS_CLASSIFICATION_ELEMENT. Each element
                    # occupies exactly
                    # ClassificationElementSize bytes in the array.
                    NDIS_SIZEOF_QOS_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_PARAMETERS,
                        FirstClassificationElementOffset)
                    )
                    NDIS_NIC_SWITCH_FRIENDLYNAME = NDIS_IF_COUNTED_STRING
                    PNDIS_NIC_SWITCH_FRIENDLYNAME = POINTER(NDIS_IF_COUNTED_STRING)
                    NDIS_VPORT_NAME = NDIS_IF_COUNTED_STRING
                    PNDIS_VPORT_NAME = POINTER(NDIS_IF_COUNTED_STRING)
                    NDIS_SRIOV_FUNCTION_ID = USHORT
                    PNDIS_SRIOV_FUNCTION_ID = POINTER(USHORT)
                    NDIS_VF_RID = ULONG
                    PNDIS_VF_RID = POINTER(ULONG)
                    NDIS_PF_FUNCTION_ID =  -1
                    NDIS_INVALID_VF_FUNCTION_ID =  -1
                    NDIS_INVALID_RID =  -1
                    NDIS_DEFAULT_VPORT_ID = 0
                    NDIS_INVALID_VPORT_ID =  -1
                    # This is the default switch identifier. This is the only
                    # valid
                    # switch identifier in Windows 8
                    NDIS_DEFAULT_SWITCH_ID = 0
                    NDIS_INVALID_SWITCH_ID =  -1
                    # Enum to specify the type of NIC embedded switch
                    # Used in SwitchType fields of NDIS_NIC_SWITCH_PARAMETERS
                    # and
                    # NDIS_NIC_SWITCH_PARAMETERS structures
                    class _NDIS_NIC_SWITCH_TYPE(ENUM):
                        NdisNicSwitchTypeUnspecified = 1
                        NdisNicSwitchTypeExternal = 2
                        NdisNicSwitchTypeMax = 3

                    NDIS_NIC_SWITCH_TYPE = _NDIS_NIC_SWITCH_TYPE
                    PNDIS_NIC_SWITCH_TYPE = POINTER(_NDIS_NIC_SWITCH_TYPE)


                    # The following flags are used in
                    # NDIS_NIC_SWITCH_PARAMETERS.Flags field
                    NDIS_NIC_SWITCH_PARAMETERS_CHANGE_MASK = 0xFFFF0000
                    NDIS_NIC_SWITCH_PARAMETERS_SWITCH_NAME_CHANGED = 0x00010000


                    # The following value must be used for
                    # NDIS_NIC_SWITCH_PARAMETERS.NumQueuePairsForDefaultVPort
                    # field when HW vRSS
                    # is not availabile or not used.
                    NDIS_NIC_SWITCH_PARAMETERS_DEFAULT_NUMBER_OF_QUEUE_PAIRS_FOR_DEFAULT_VPORT = (
                        1
                    )


                    # This structure is used in OID_NIC_SWITCH_CREATE_SWITCH
                    # and OID_NIC_SWITCH_PARAMETERS OIDs
                    NDIS_NIC_SWITCH_PARAMETERS_REVISION_1 = 1
                    if NDIS_SUPPORT_NDIS660:
                        NDIS_NIC_SWITCH_PARAMETERS_REVISION_2 = 2
                    # END IF   (NDIS_SUPPORT_NDIS660)


                    _TEMP__NDIS_NIC_SWITCH_PARAMETERS = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchType', NDIS_NIC_SWITCH_TYPE),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('SwitchFriendlyName', NDIS_NIC_SWITCH_FRIENDLYNAME),
                        ('NumVFs', ULONG),
                        ('NdisReserved1', ULONG),
                        ('NdisReserved2', ULONG),
                        ('NdisReserved3', ULONG),
                    ]
                    if NDIS_SUPPORT_NDIS660:
                            _TEMP__NDIS_NIC_SWITCH_PARAMETERS += [
                            ('NumQueuePairsForDefaultVPort', ULONG),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS660)


                            _NDIS_NIC_SWITCH_PARAMETERS._fields_ = _TEMP__NDIS_NIC_SWITCH_PARAMETERS
                    NDIS_SIZEOF_NIC_SWITCH_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_PARAMETERS,
                        NdisReserved3)
                    )
                    if NDIS_SUPPORT_NDIS660:
                        NDIS_SIZEOF_NIC_SWITCH_PARAMETERS_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_PARAMETERS,
                            NumQueuePairsForDefaultVPort)
                        )
                    # END IF   (NDIS_SUPPORT_NDIS660)


                    # This structure is used in OID_NIC_SWITCH_DELETE_SWITCH
                    # OID
                    NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_DELETE_SWITCH_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS,
                        SwitchId)
                    )


                    # This structure is used for each array element in
                    # NDIS_NIC_SWITCH_INFO_ARRAY structure
                    NDIS_NIC_SWITCH_INFO_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchType', NDIS_NIC_SWITCH_TYPE),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('SwitchFriendlyName', NDIS_NIC_SWITCH_FRIENDLYNAME),
                        ('NumVFs', ULONG),
                        ('NumAllocatedVFs', ULONG),
                        ('NumVPorts', ULONG),
                        ('NumActiveVPorts', ULONG),
                        ('NumQueuePairsForDefaultVPort', ULONG),
                        ('NumQueuePairsForNonDefaultVPorts', ULONG),
                        ('NumActiveDefaultVPortMacAddresses', ULONG),
                        ('NumActiveNonDefaultVPortMacAddresses', ULONG),
                        ('NumActiveDefaultVPortVlanIds', ULONG),
                        ('NumActiveNonDefaultVPortVlanIds', ULONG),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_INFO,
                        NumActiveNonDefaultVPortVlanIds)
                    )


                    # This structure is used in OID_NIC_SWITCH_ENUM_SWITCHES
                    # OID and in
                    # NicSwitches field of NDIS_BIND_PARAMETERS and
                    # NDIS_FILTER_ATTACH_PARAMETERS structures.
                    # Each element in the array is of type
                    # NDIS_NIC_SWITCH_INFO structure
                    NDIS_NIC_SWITCH_INFO_ARRAY_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_INFO_ARRAY._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('FirstElementOffset', ULONG),
                        ('NumElements', ULONG),
                        ('ElementSize', ULONG),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_INFO_ARRAY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_INFO_ARRAY,
                        ElementSize)
                    )


                    # The following enum type is used in VPortState field of
                    # NDIS_NIC_SWITCH_VPORT_INFO and
                    # NDIS_NIC_SWITCH_VPORT_PARAMETERS
                    class _NDIS_NIC_SWITCH_VPORT_STATE(ENUM):
                        NdisNicSwitchVPortStateUndefined = 1
                        NdisNicSwitchVPortStateActivated = 2
                        NdisNicSwitchVPortStateDeactivated = 3
                        NdisNicSwitchVPortStateMaximum = 4

                    NDIS_NIC_SWITCH_VPORT_STATE = _NDIS_NIC_SWITCH_VPORT_STATE
                    PNDIS_NIC_SWITCH_VPORT_STATE = POINTER(_NDIS_NIC_SWITCH_VPORT_STATE)


                    # The following enum type is used in InterruptModeration
                    # field of
                    # NDIS_NIC_SWITCH_VPORT_INFO and
                    # NDIS_NIC_SWITCH_VPORT_PARAMETERS
                    class _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION(ENUM):
                        NdisNicSwitchVPortInterruptModerationUndefined = 0
                        NdisNicSwitchVPortInterruptModerationAdaptive = 1
                        NdisNicSwitchVPortInterruptModerationOff = 2
                        NdisNicSwitchVPortInterruptModerationLow = 100
                        NdisNicSwitchVPortInterruptModerationMedium = 200
                        NdisNicSwitchVPortInterruptModerationHigh = 300

                    NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION = _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION
                    PNDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION = POINTER(_NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION)

                    if NDIS_SUPPORT_NDIS650:
                        # NDIS_SWITCH_PORT_ID and NDIS_SWITCH_NIC_INDEX are
                        # needed
                        # in user and kernel level headers without a common
                        # include,
                        # so it is defined in multiple places.
                        if not defined(_NDIS_SWITCH_PORT_ID):
                            _NDIS_SWITCH_PORT_ID = NDIS_SWITCH_PORT_ID
                            NDIS_SWITCH_PORT_ID = UINT32
                            PNDIS_SWITCH_PORT_ID = POINTER(UINT32)
                            NDIS_SWITCH_NIC_INDEX = USHORT
                            PNDIS_SWITCH_NIC_INDEX = POINTER(USHORT)

                        else:
                            # If already defined, make sure sizes match.                        # END IF
                        _NDIS_NDK_REQUEST_PARAMETERS._fields_ = [
                            ('RdmaRequested', BOOLEAN),
                            ('SwitchPortId', NDIS_SWITCH_PORT_ID),
                            ('IfIndex', NET_IFINDEX),
                            ('MacAddress', UCHAR * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                            ('VlanId', UINT),
                            ('NdkReserved', NDIS_NDK_CAPABILITIES),
                        ]

                        _NDIS_NDK_RESPONSE_PARAMETERS._fields_ = [
                            ('CapabilitiesAvailable', BOOLEAN),
                            ('ReceivedCapabilities', NDIS_NDK_CAPABILITIES),
                        ]

                        _NDIS_NDK_PARAMETERS._fields_ = [
                            ('NdkRequest', NDIS_NDK_REQUEST_PARAMETERS),
                            ('NdkResponse', NDIS_NDK_RESPONSE_PARAMETERS),
                        ]
                    # END IF   NDIS_SUPPORT_NDIS650


                    # These flags are used in
                    # NDIS_NIC_SWITCH_VPORT_PARAMETERS.Flags field
                    NDIS_NIC_SWITCH_VPORT_PARAMS_LOOKAHEAD_SPLIT_ENABLED = (
                        0x00000001
                    )
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_NIC_SWITCH_VPORT_PARAMS_PACKET_DIRECT_RX_ONLY = (
                            0x00000002
                        )
                    # END IF   (NDIS_SUPPORT_NDIS650)

                    NDIS_NIC_SWITCH_VPORT_PARAMS_CHANGE_MASK = 0xFFFF0000
                    NDIS_NIC_SWITCH_VPORT_PARAMS_FLAGS_CHANGED = 0x00010000
                    NDIS_NIC_SWITCH_VPORT_PARAMS_NAME_CHANGED = 0x00020000
                    NDIS_NIC_SWITCH_VPORT_PARAMS_INT_MOD_CHANGED = 0x00040000
                    NDIS_NIC_SWITCH_VPORT_PARAMS_STATE_CHANGED = 0x00080000
                    NDIS_NIC_SWITCH_VPORT_PARAMS_PROCESSOR_AFFINITY_CHANGED = (
                        0x00100000
                    )
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_NIC_SWITCH_VPORT_PARAMS_NDK_PARAMS_CHANGED = (
                            0x00200000
                        )
                        NDIS_NIC_SWITCH_VPORT_PARAMS_QOS_SQ_ID_CHANGED = (
                            0x00400000
                        )
                    # END IF   (NDIS_SUPPORT_NDIS650)

                    if NDIS_SUPPORT_NDIS660:
                        NDIS_NIC_SWITCH_VPORT_PARAMS_NUM_QUEUE_PAIRS_CHANGED = (
                            0x00800000
                        )
                    # END IF   (NDIS_SUPPORT_NDIS660)


                    # This structure is used in OID_NIC_SWITCH_CREATE_VPORT and
                    # OID_NIC_SWITCH_VPORT_PARAMETERS
                    NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_1 = 1
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_2 = 2
                    # END IF   NDIS_SUPPORT_NDIS650


                    _TEMP__NDIS_NIC_SWITCH_VPORT_PARAMETERS = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                        ('VPortName', NDIS_VPORT_NAME),
                        ('AttachedFunctionId', NDIS_SRIOV_FUNCTION_ID),
                        ('NumQueuePairs', ULONG),
                        ('InterruptModeration', NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION),
                        ('VPortState', NDIS_NIC_SWITCH_VPORT_STATE),
                        ('ProcessorAffinity', GROUP_AFFINITY),
                        ('LookaheadSize', ULONG),
                    ]
                    if NDIS_SUPPORT_NDIS650:
                            _TEMP__NDIS_NIC_SWITCH_VPORT_PARAMETERS += [
                            ('NdkParams', NDIS_NDK_PARAMETERS),
                            ('QosSqId', NDIS_QOS_SQ_ID),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS650)


                            _NDIS_NIC_SWITCH_VPORT_PARAMETERS._fields_ = _TEMP__NDIS_NIC_SWITCH_VPORT_PARAMETERS
                    NDIS_SIZEOF_NIC_SWITCH_VPORT_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VPORT_PARAMETERS,
                        LookaheadSize)
                    )
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_SIZEOF_NIC_SWITCH_VPORT_PARAMETERS_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VPORT_PARAMETERS,
                            QosSqId)
                        )
                    # END IF   (NDIS_SUPPORT_NDIS650)


                    # This structure is used in OID_NIC_SWITCH_DELETE_VPORT OID
                    NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_DELETE_VPORT_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS,
                        VPortId)
                    )


                    # Flags used in NDIS_NIC_SWITCH_VPORT_INFO.Flags field
                    NDIS_NIC_SWITCH_VPORT_INFO_LOOKAHEAD_SPLIT_ENABLED = (
                        0x00000001
                    )
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_NIC_SWITCH_VPORT_INFO_PACKET_DIRECT_RX_ONLY = (
                            0x00000002
                        )
                        NDIS_NIC_SWITCH_VPORT_INFO_GFT_ENABLED = 0x00000004
                    # END IF   (NDIS_SUPPORT_NDIS650)


                    # This structure is used in OID_NIC_SWITCH_ENUM_VPORTS OID
                    # Each element in the array is of type
                    # NDIS_NIC_SWITCH_VPORT_INFO structure
                    NDIS_NIC_SWITCH_VPORT_INFO_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_VPORT_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('VPortName', NDIS_VPORT_NAME),
                        ('AttachedFunctionId', NDIS_SRIOV_FUNCTION_ID),
                        ('NumQueuePairs', ULONG),
                        ('InterruptModeration', NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION),
                        ('VPortState', NDIS_NIC_SWITCH_VPORT_STATE),
                        ('ProcessorAffinity', GROUP_AFFINITY),
                        ('LookaheadSize', ULONG),
                        ('NumFilters', ULONG),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_VPORT_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VPORT_INFO,
                        NumFilters)
                    )


                    # The following flags are used in
                    # NDIS_NIC_SWITCH_VPORT_INFO_ARRAY.Flags field
                    NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_FUNCTION = (
                        0x00000001
                    )
                    NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = (
                        0x00000002
                    )


                    # This structure is used in OID_NIC_SWITCH_ENUM_VPORTS OID
                    # Each element in the array is of type
                    # NDIS_NIC_SWITCH_VPORT_INFO structure
                    NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_VPORT_INFO_ARRAY._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('AttachedFunctionId', NDIS_SRIOV_FUNCTION_ID),
                        ('FirstElementOffset', ULONG),
                        ('NumElements', ULONG),
                        ('ElementSize', ULONG),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_VPORT_INFO_ARRAY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VPORT_INFO_ARRAY,
                        ElementSize)
                    )


                    # This structure is used in OID_NIC_SWITCH_ALLOCATE_VF and
                    # OID_NIC_SWITCH_VF_PARAMETERS OIDs
                    NDIS_NIC_SWITCH_VF_PARAMETERS_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_VF_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('VMName', NDIS_VM_NAME),
                        ('VMFriendlyName', NDIS_VM_FRIENDLYNAME),
                        ('NicName', NDIS_SWITCH_NIC_NAME),
                        ('MacAddressLength', USHORT),
                        ('UCHAR                       PermanentMacAddress', _In_ * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        ('UCHAR                       CurrentMacAddress', _In_ * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('RequestorId', NDIS_VF_RID),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_VF_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VF_PARAMETERS,
                        RequestorId)
                    )


                    # This structure is used in OID_NIC_SWITCH_FREE_VF OID
                    NDIS_NIC_SWITCH_FREE_VF_PARAMETERS_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_FREE_VF_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_FREE_VF_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_FREE_VF_PARAMETERS,
                        VFId)
                    )


                    # Thus structure is used in OID_NIC_SWITCH_ENUM_VFS OID
                    # Each element in the array is of type
                    # NDIS_NIC_SWITCH_VF_INFO structure
                    NDIS_NIC_SWITCH_VF_INFO_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_VF_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('VMName', NDIS_VM_NAME),
                        ('VMFriendlyName', NDIS_VM_FRIENDLYNAME),
                        ('NicName', NDIS_SWITCH_NIC_NAME),
                        ('MacAddressLength', USHORT),
                        ('UCHAR                       PermanentMacAddress', _In_ * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        ('UCHAR                       CurrentMacAddress', _In_ * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('RequestorId', NDIS_VF_RID),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_VF_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VF_INFO,
                        RequestorId)
                    )


                    # The following flags are used in
                    # _NDIS_NIC_SWITCH_VF_INFO_ARRAY.Flags field
                    NDIS_NIC_SWITCH_VF_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = (
                        0x00000001
                    )


                    # This structure is used in OID_NIC_SWITCH_ENUM_VFS OID
                    # Each element in the array is of type
                    # NDIS_NIC_SWITCH_VF_INFO structure
                    NDIS_NIC_SWITCH_VF_INFO_ARRAY_REVISION_1 = 1


                    _NDIS_NIC_SWITCH_VF_INFO_ARRAY._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SwitchId', NDIS_NIC_SWITCH_ID),
                        ('FirstElementOffset', ULONG),
                        ('NumElements', ULONG),
                        ('ElementSize', ULONG),
                    ]
                    NDIS_SIZEOF_NIC_SWITCH_VF_INFO_ARRAY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_NIC_SWITCH_VF_INFO_ARRAY,
                        ElementSize)
                    )


                    # Following flags are used in
                    # NDIS_SRIOV_CAPABILITIES.SriovCapabilities field
                    NDIS_SRIOV_CAPS_SRIOV_SUPPORTED = 0x00000001
                    NDIS_SRIOV_CAPS_PF_MINIPORT = 0x00000002
                    NDIS_SRIOV_CAPS_VF_MINIPORT = 0x00000004


                    # This structure is used in OID_SRIOV_CURRENT_CAPABILITIES
                    # and OID_SRIOV_HARDWARE_CAPABILITIES.
                    # It is also used in the CurrentSriovCapabilities and
                    # HardwareSriovCapabilities fields of
                    # NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
                    # structure .
                    # It is also used in SriovCapabilities field of
                    # NDIS_BIND_PARAMETERS and NDIS_FILTER_ATTACH_PARAMETERS
                    NDIS_SRIOV_CAPABILITIES_REVISION_1 = 1


                    _NDIS_SRIOV_CAPABILITIES._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SriovCapabilities', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_CAPABILITIES_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_CAPABILITIES,
                        SriovCapabilities)
                    )


                    # This structure is used in OID_SRIOV_READ_VF_CONFIG_SPACE
                    NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('Offset', ULONG),
                        ('Length', ULONG),
                        ('BufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS,
                        BufferOffset)
                    )


                    # This structure is used in OID_SRIOV_WRITE_VF_CONFIG_SPACE
                    NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('Offset', ULONG),
                        ('Length', ULONG),
                        ('BufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS,
                        BufferOffset)
                    )


                    # This structure is used in OID_SRIOV_READ_VF_CONFIG_BLOCK
                    NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('BlockId', ULONG),
                        ('Length', ULONG),
                        ('BufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS,
                        BufferOffset)
                    )


                    # This structure is used in OID_SRIOV_WRITE_VF_CONFIG_BLOCK
                    NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('BlockId', ULONG),
                        ('Length', ULONG),
                        ('BufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS,
                        BufferOffset)
                    )


                    # This structure is used in OID_SRIOV_RESET_VF
                    NDIS_SRIOV_RESET_VF_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_RESET_VF_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                    ]
                    NDIS_SIZEOF_SRIOV_RESET_VF_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_RESET_VF_PARAMETERS,
                        VFId)
                    )


                    # This structure is used in OID_SRIOV_SET_VF_POWER_STATE
                    NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('PowerState', NDIS_DEVICE_POWER_STATE),
                        ('WakeEnable', BOOLEAN),
                    ]
                    NDIS_SIZEOF_SRIOV_SET_VF_POWER_STATE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS,
                        WakeEnable)
                    )


                    # This structure is used in OID_SRIOV_CONFIG_STATE
                    # This can be sent only to the VF miniport driver
                    NDIS_SRIOV_CONFIG_STATE_PARAMETERS_REVISION_1 = 1


                    _NDIS_SRIOV_CONFIG_STATE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('BlockId', ULONG),
                        ('Length', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_CONFIG_STATE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_CONFIG_STATE_PARAMETERS,
                        Length)
                    )


                    # This structure is used in OID_SRIOV_VF_VENDOR_DEVICE_ID
                    NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('VendorId', USHORT),
                        ('DeviceId', USHORT),
                    ]
                    NDIS_SIZEOF_SRIOV_VF_VENDOR_DEVICE_ID_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO,
                        DeviceId)
                    )


                    # This structure is used in OID_SRIOV_PROBED_BARS
                    NDIS_SRIOV_PROBED_BARS_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_PROBED_BARS_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('BaseRegisterValuesOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_PROBED_BARS_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_PROBED_BARS_INFO,
                        BaseRegisterValuesOffset)
                    )


                    # This structure is used in OID_RECEIVE_FILTER_MOVE_FILTER
                    NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS_REVISION_1 = 1


                    _NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('FilterId', NDIS_RECEIVE_FILTER_ID),
                        ('SourceQueueId', NDIS_RECEIVE_QUEUE_ID),
                        ('SourceVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                        ('DestQueueId', NDIS_RECEIVE_QUEUE_ID),
                        ('DestVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                    ]
                    NDIS_SIZEOF_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS,
                        DestVPortId)
                    )


                    # This structure is used in OID_SRIOV_BAR_RESOURCES
                    NDIS_SRIOV_BAR_RESOURCES_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_BAR_RESOURCES_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('VFId', NDIS_SRIOV_FUNCTION_ID),
                        ('BarIndex', USHORT),
                        ('BarResourcesOffset', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_BAR_RESOURCES_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_BAR_RESOURCES_INFO,
                        BarResourcesOffset)
                    )


                    # This structure is used in OID_SRIOV_PF_LUID
                    NDIS_SRIOV_PF_LUID_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_PF_LUID_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Luid', LUID),
                    ]
                    NDIS_SIZEOF_SRIOV_PF_LUID_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_PF_LUID_INFO,
                        Luid)
                    )


                    # This structure is used in OID_SRIOV_VF_SERIAL_NUMBER
                    NDIS_SRIOV_VF_SERIAL_NUMBER_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_VF_SERIAL_NUMBER_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('SerialNumber', ULONG),
                    ]
                    NDIS_SIZEOF_SRIOV_VF_SERIAL_NUMBER_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_VF_SERIAL_NUMBER_INFO,
                        SerialNumber)
                    )


                    # This structure is used in
                    # OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK
                    NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO_REVISION_1 = 1


                    _NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('BlockMask', ULONG64),
                    ]
                    NDIS_SIZEOF_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO,
                        BlockMask)
                    )

                    if NDIS_SUPPORT_NDIS670:
                        _NDIS_SRIOV_OVERLYING_ADAPTER_INFO._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('IfIndex', ULONG),
                            ('NdisReserved1', ULONG),
                            ('NdisReserved2', ULONG),
                        ]
                        NDIS_SRIOV_OVERLYING_ADAPTER_INFO_VERSION_1 = 1
                        NDIS_SIZEOF_SRIOV_OVERLYING_ADAPTER_INFO_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SRIOV_OVERLYING_ADAPTER_INFO,
                            NdisReserved2)
                        )
                    # END IF  (NDIS_SUPPORT_NDIS670)


                    if (NTDDI_VERSION >= NTDDI_WINBLUE) or (NDIS_SUPPORT_NDIS640):
                        # Supported isolation modes.
                        class _NDIS_ISOLATION_MODE(ENUM):
                            NdisIsolationModeNone = 0
                            NdisIsolationModeNativeVirtualSubnet = 1
                            NdisIsolationModeExternalVirtualSubnet = 2
                            NdisIsolationModeVlan = 3

                        NDIS_ISOLATION_MODE = _NDIS_ISOLATION_MODE
                        PNDIS_ISOLATION_MODE = POINTER(_NDIS_ISOLATION_MODE)
                        NDIS_ROUTING_DOMAIN_ID = GUID
                        PNDIS_ROUTING_DOMAIN_ID = POINTER(GUID)
                        NDIS_ISOLATION_NAME_MAX_STRING_SIZE = 127


                        _NDIS_ISOLATION_NAME._fields_ = [
                            # in -Bytes-
                            ('Length', USHORT),
                            ('String', WCHAR * NDIS_ISOLATION_NAME_MAX_STRING_SIZE + 1),
                        ]
                        NDIS_ISOLATION_ID_NAME = NDIS_ISOLATION_NAME
                        PNDIS_ISOLATION_ID_NAME = POINTER(NDIS_ISOLATION_NAME)
                        NDIS_ROUTING_DOMAIN_NAME = NDIS_ISOLATION_NAME
                        PNDIS_ROUTING_DOMAIN_NAME = POINTER(NDIS_ISOLATION_NAME)


                        # Information relating to a single Isolation ID within
                        # a
                        # Routing domain.
                        class _Union_3(ctypes.Union):
                            pass


                        class _Struct_3(ctypes.Structure):
                            pass


                        _Struct_3._fields_ = [
                            ('VirtualSubnetId', UINT32, 24),
                        ]
                        _Union_3._Struct_3 = _Struct_3


                        class _Struct_4(ctypes.Structure):
                            pass


                        _Struct_4._fields_ = [
                            ('VlanId', UINT32, 12),
                        ]
                        _Union_3._Struct_4 = _Struct_4

                        _Union_3._anonymous_ = (
                            '_Struct_3',
                            '_Struct_4',
                        )

                        _Union_3._fields_ = [
                            ('_Struct_3', _Union_3._Struct_3),
                            ('_Struct_4', _Union_3._Struct_4),
                            ('IsolationId', UINT32),
                        ]
                        _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY._Union_3 = _Union_3

                        _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY._anonymous_ = (
                            '_Union_3',
                        )

                        _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('IsolationIdName', NDIS_ISOLATION_ID_NAME),
                            ('_Union_3', _NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY._Union_3),
                        ]
                        NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_REVISION_1 = 1
                        NDIS_SIZEOF_NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY,
                            IsolationId)
                        )


                        # Retrieves the next
                        # NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY object in the
                        # list.
                        def NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_GET_NEXT(_IsolationInfoEntry_):
                            return PNDIS_ROUTING_DOMAIN_ISOLATION_ENTRY(PUCHAR_IsolationInfoEntry_ + _IsolationInfoEntry_.Header.Size)


                        # Information relating to a single Routing Domain
                        # entry.
                        _NDIS_ROUTING_DOMAIN_ENTRY._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('RoutingDomainId', NDIS_ROUTING_DOMAIN_ID),
                            ('RoutingDomainName', NDIS_ROUTING_DOMAIN_NAME),
                            ('NumIsolationEntries', ULONG),
                            ('FirstIsolationEntryOffset', ULONG),
                        ]
                        NDIS_ROUTING_DOMAIN_ENTRY_REVISION_1 = 1
                        NDIS_SIZEOF_NDIS_ROUTING_DOMAIN_ENTRY_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_ROUTING_DOMAIN_ENTRY,
                            FirstIsolationEntryOffset)
                        )


                        # Retrieves the next NDIS_ROUTING_DOMAIN_ENTRY object
                        # in the list.
                        def NDIS_ROUTING_DOMAIN_ENTRY_GET_NEXT(_RoutingDomainEntry_):
                            return PNDIS_ROUTING_DOMAIN_ENTRY(PUCHAR_RoutingDomainEntry_ + _RoutingDomainEntry_.Header.Size)


                        # Retrieves the first
                        # NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY object in the
                        # Isolation info.
                        def NDIS_ROUTING_DOMAIN_ENTRY_GET_FIRST_ISOLATION_ENTRY(_RoutingDomainEntry_):
                            return PNDIS_ROUTING_DOMAIN_ISOLATION_ENTRY(PUCHAR_RoutingDomainEntry_ + _RoutingDomainEntry_.FirstIsolationEntryOffset)


                        # Isolation configuration for a given network adapter.
                        _NDIS_ISOLATION_PARAMETERS._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('IsolationMode', NDIS_ISOLATION_MODE),
                            ('AllowUntaggedTraffic', BOOLEAN),
                            ('NumRoutingDomainEntries', ULONG),
                            ('FirstRoutingDomainEntryOffset', ULONG),
                        ]
                        NDIS_ISOLATION_PARAMETERS_REVISION_1 = 1
                        NDIS_SIZEOF_NDIS_ISOLATION_PARAMETERS_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_ISOLATION_PARAMETERS,
                            FirstRoutingDomainEntryOffset)
                        )


                        # Retrieves the first NDIS_ROUTING_DOMAIN_ENTRY object
                        # in the isolation info.
                        def NDIS_ISOLATION_PARAMETERS_GET_FIRST_ROUTING_DOMAIN_ENTRY(_MultiTenancyInfo_):
                            return PNDIS_ROUTING_DOMAIN_ENTRY(PUCHAR_MultiTenancyInfo_ + _MultiTenancyInfo_.FirstRoutingDomainEntryOffset)
                    # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE) or (NDIS_SUPPORT_NDIS640)


                    # NDIS_SWITCH_PORT_ID and NDIS_SWITCH_NIC_INDEX are needed
                    # in user and kernel level headers without a common
                    # include,
                    # so it is defined in multiple places.
                    if not defined(_NDIS_SWITCH_PORT_ID):
                        _NDIS_SWITCH_PORT_ID = NDIS_SWITCH_PORT_ID
                        NDIS_SWITCH_PORT_ID = UINT32
                        PNDIS_SWITCH_PORT_ID = POINTER(UINT32)
                        NDIS_SWITCH_NIC_INDEX = USHORT
                        PNDIS_SWITCH_NIC_INDEX = POINTER(USHORT)

                    else:
                        # If already defined, make sure sizes match.                    # END IF
                    NDIS_SWITCH_OBJECT_INSTANCE_ID = GUID
                    PNDIS_SWITCH_OBJECT_INSTANCE_ID = POINTER(GUID)
                    NDIS_SWITCH_OBJECT_ID = GUID
                    PNDIS_SWITCH_OBJECT_ID = POINTER(GUID)
                    NDIS_SWITCH_OBJECT_VERSION = USHORT
                    PNDIS_SWITCH_OBJECT_VERSION = POINTER(USHORT)
                    NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION = USHORT
                    PNDIS_SWITCH_OBJECT_SERIALIZATION_VERSION = POINTER(USHORT)
                    NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION_1 = 1


                    class _NDIS_SWITCH_PORT_PROPERTY_TYPE(ENUM):
                        NdisSwitchPortPropertyTypeUndefined = 1
                        NdisSwitchPortPropertyTypeCustom = 2
                        NdisSwitchPortPropertyTypeSecurity = 3
                        NdisSwitchPortPropertyTypeVlan = 4
                        NdisSwitchPortPropertyTypeProfile = 5
                        NdisSwitchPortPropertyTypeIsolation = 6
                        NdisSwitchPortPropertyTypeRoutingDomain = 7
                        NdisSwitchPortPropertyTypeMaximum = 8

                    NDIS_SWITCH_PORT_PROPERTY_TYPE = _NDIS_SWITCH_PORT_PROPERTY_TYPE
                    PNDIS_SWITCH_PORT_PROPERTY_TYPE = POINTER(_NDIS_SWITCH_PORT_PROPERTY_TYPE)


                    # This structure is used for
                    # NdisSwitchPortPropertyTypeSecurity.
                    NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_1 = 1
                    if NDIS_SUPPORT_NDIS640:
                        NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_2 = 2
                    # END IF   (NDIS_SUPPORT_NDIS640)


                    _TEMP__NDIS_SWITCH_PORT_PROPERTY_SECURITY = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('AllowMacSpoofing', BOOLEAN),
                        ('AllowIeeePriorityTag', BOOLEAN),
                        ('VirtualSubnetId', UINT32),
                        ('AllowTeaming', BOOLEAN),
                    ]
                    if NDIS_SUPPORT_NDIS640:
                            _TEMP__NDIS_SWITCH_PORT_PROPERTY_SECURITY += [
                            ('DynamicIPAddressLimit', UINT32),
                            ]
                        # END IF   (NDIS_SUPPORT_NDIS640)


                            _NDIS_SWITCH_PORT_PROPERTY_SECURITY._fields_ = _TEMP__NDIS_SWITCH_PORT_PROPERTY_SECURITY
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_SECURITY,
                        AllowTeaming)
                    )
                    if NDIS_SUPPORT_NDIS640:
                        NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_SECURITY,
                            DynamicIPAddressLimit)
                        )
                    # END IF   (NDIS_SUPPORT_NDIS640)


                    class _NDIS_SWITCH_PORT_VLAN_MODE(ENUM):
                        NdisSwitchPortVlanModeUnknown = 0
                        NdisSwitchPortVlanModeAccess = 1
                        NdisSwitchPortVlanModeTrunk = 2
                        NdisSwitchPortVlanModePrivate = 3
                        NdisSwitchPortVlanModeMax = 4

                    NDIS_SWITCH_PORT_VLAN_MODE = _NDIS_SWITCH_PORT_VLAN_MODE
                    PNDIS_SWITCH_PORT_VLAN_MODE = POINTER(_NDIS_SWITCH_PORT_VLAN_MODE)


                    class _NDIS_SWITCH_PORT_PVLAN_MODE(ENUM):
                        NdisSwitchPortPvlanModeUndefined = 0
                        NdisSwitchPortPvlanModeIsolated = 1
                        NdisSwitchPortPvlanModeCommunity = 2
                        NdisSwitchPortPvlanModePromiscuous = 3

                    NDIS_SWITCH_PORT_PVLAN_MODE = _NDIS_SWITCH_PORT_PVLAN_MODE
                    PNDIS_SWITCH_PORT_PVLAN_MODE = POINTER(_NDIS_SWITCH_PORT_PVLAN_MODE)


                    # This structure is used for
                    # NdisSwitchPortPropertyTypeVlan.
                    NDIS_SWITCH_PORT_PROPERTY_VLAN_REVISION_1 = 1


                    class _Union_4(ctypes.Union):
                        pass


                    class VlanProperties(ctypes.Structure):
                        pass


                    VlanProperties._fields_ = [
                        ('AccessVlanId', UINT16),
                        ('NativeVlanId', UINT16),
                        ('PruneVlanIdArray', UINT64 * 64),
                        ('TrunkVlanIdArray', UINT64 * 64),
                    ]
                    _Union_4.VlanProperties = VlanProperties


                    class PvlanProperties(ctypes.Structure):
                        pass


                    class _Union_5(ctypes.Union):
                        pass


                    _Union_5._fields_ = [
                        ('SecondaryVlanId', UINT16),
                        ('SecondaryVlanIdArray', UINT64 * 64),
                    ]
                    PvlanProperties._Union_5 = _Union_5

                    PvlanProperties._anonymous_ = (
                        '_Union_5',
                    )

                    PvlanProperties._fields_ = [
                        ('PrimaryVlanId', UINT16),
                        ('_Union_5', PvlanProperties._Union_5),
                    ]
                    _Union_4.PvlanProperties = PvlanProperties


                    _Union_4._fields_ = [
                        ('VlanProperties', _Union_4.VlanProperties),
                        ('PvlanProperties', _Union_4.PvlanProperties),
                    ]
                    _NDIS_SWITCH_PORT_PROPERTY_VLAN._Union_4 = _Union_4

                    _NDIS_SWITCH_PORT_PROPERTY_VLAN._anonymous_ = (
                        '_Union_4',
                    )

                    _NDIS_SWITCH_PORT_PROPERTY_VLAN._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('OperationMode', NDIS_SWITCH_PORT_VLAN_MODE),
                        ('_Union_4', _NDIS_SWITCH_PORT_PROPERTY_VLAN._Union_4),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_VLAN_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_VLAN,
                        VlanProperties)
                    )


                    # This structure is used for
                    # NdisSwitchPortPropertyTypeProfile.
                    NDIS_SWITCH_PORT_PROPERTY_PROFILE_REVISION_1 = 1


                    class PciLocation(ctypes.Structure):
                        pass


                    PciLocation._fields_ = [
                        ('PciSegmentNumber', UINT32, 16),
                        ('PciBusNumber', UINT32, 8),
                        ('PciDeviceNumber', UINT32, 5),
                        ('PciFunctionNumber', UINT32, 3),
                    ]
                    _NDIS_SWITCH_PORT_PROPERTY_PROFILE.PciLocation = PciLocation


                    _NDIS_SWITCH_PORT_PROPERTY_PROFILE._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('ProfileName', NDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME),
                        ('ProfileId', GUID),
                        ('VendorName', NDIS_VENDOR_NAME),
                        ('VendorId', GUID),
                        ('ProfileData', UINT32),
                        ('NetCfgInstanceId', GUID),
                        ('PciLocation', _NDIS_SWITCH_PORT_PROPERTY_PROFILE.PciLocation),
                        ('CdnLabelId', UINT32),
                        ('CdnLabel', NDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_PROFILE_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_PROFILE,
                        CdnLabel)
                    )

                    if (NTDDI_VERSION >= NTDDI_WINBLUE) or (NDIS_SUPPORT_NDIS640):
                        # This structure is used for
                        # NdisSwitchPortPropertyTypeIsolation.
                        NDIS_SWITCH_PORT_PROPERTY_ISOLATION_REVISION_1 = 1


                        _NDIS_SWITCH_PORT_PROPERTY_ISOLATION._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('IsolationMode', NDIS_ISOLATION_MODE),
                            ('AllowUntaggedTraffic', BOOLEAN),
                            ('DefaultIsolationId', UINT32),
                        ]
                        NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_ISOLATION_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_ISOLATION,
                            DefaultIsolationId)
                        )


                        # This structure is used for
                        # NdisSwitchPortPropertyTypeRoutingDomain.
                        NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_REVISION_1 = 1


                        _NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN._fields_ = [
                            ('Header', NDIS_OBJECT_HEADER),
                            ('Flags', ULONG),
                            ('RoutingDomainId', NDIS_ROUTING_DOMAIN_ID),
                            ('RoutingDomainName', NDIS_ROUTING_DOMAIN_NAME),
                            ('NumIsolationEntries', ULONG),
                            ('FirstIsolationEntryOffset', USHORT),
                        ]
                        NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_REVISION_1 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN,
                            FirstIsolationEntryOffset)
                        )


                        # Retrieves the first
                        # NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY object in the
                        # Isolation info.
                        def NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_GET_FIRST_ISOLATION_ENTRY(_RoutingDomainProperty_):
                            return PNDIS_ROUTING_DOMAIN_ISOLATION_ENTRY(PUCHAR_RoutingDomainProperty_ + _RoutingDomainProperty_.FirstIsolationEntryOffset)
                    # END IF   (NTDDI_VERSION >= NTDDI_WINBLUE) or (NDIS_SUPPORT_NDIS640)


                    # This structure is used for
                    # NdisSwitchPortPropertyTypeCustom.
                    NDIS_SWITCH_PORT_PROPERTY_CUSTOM_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_PROPERTY_CUSTOM._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_CUSTOM_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_CUSTOM,
                        PropertyBufferOffset)
                    )


                    # Retrieves the custom property buffer described by the
                    # NDIS_SWITCH_PORT_PROPERTY_CUSTOM structure.
                    def NDIS_SWITCH_PORT_PROPERTY_CUSTOM_GET_BUFFER(_PortPropertyCustom_):
                        return PVOID(PUCHAR_PortPropertyCustom_ + _PortPropertyCustom_.PropertyBufferOffset)


                    # Since the property buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    # This structure is used in OID_SWITCH_PORT_PROPERTY_ADD,
                    # OID_SWITCH_PORT_PROPERTY_UPDATE.
                    NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_PROPERTY_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        ('PropertyType', NDIS_SWITCH_PORT_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('PropertyVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                        ('Reserved', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_PARAMETERS,
                        Reserved)
                    )

                    # Returns the property described by the
                    # NDIS_SWITCH_PORT_PROPERTY_PARAMETERS structure.
                    def NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_GET_PROPERTY(_PortParameters_):
                        return PVOID(PUCHAR_PortParameters_ + _PortParameters_.PropertyBufferOffset)

                    # Converts the version defined from the property MOF files
                    # (e.g. "1.0") to the serialized
                    # value passed to vSwitch extensions (e.g. 0x100).
                    def NDIS_SWITCH_CREATE_PROPERTY_VERSION(_VersionMajor_, _VersionMinor_):
                        return (_VersionMajor_ << 8) + _VersionMinor_

                    # Since the property buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    # This structure is used in
                    # OID_SWITCH_PORT_PROPERTY_DELETE.
                    NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        ('PropertyType', NDIS_SWITCH_PORT_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS,
                        PropertyInstanceId)
                    )

                    # The following structures are used for
                    # OID_SWITCH_PORT_PROPERTY_ENUM.
                    NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        ('PropertyType', NDIS_SWITCH_PORT_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('FirstPropertyOffset', ULONG),
                        ('NumProperties', ULONG),
                        ('Reserved', USHORT),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS,
                        Reserved)
                    )

                    # Retrieves the first NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO
                    # object in the enumeration.
                    def NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_GET_FIRST_INFO(_PortEnumParams_):
                        return PNDIS_SWITCH_PORT_PROPERTY_ENUM_INFO(PUCHAR_PortEnumParams_ + _PortEnumParams_.FirstPropertyOffset)

                    # Since the property buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('QwordAlignedPropertyBufferLength', ULONG),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO,
                        PropertyBufferOffset)
                    )

                    # Retrieves the next NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO
                    # object in the enumeration.
                    def NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_GET_NEXT(_PortEnumInfo_):
                    # DEFINE ERROR 4: #define NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_GET_NEXT(_PortEnumInfo_) ((PNDIS_SWITCH_PORT_PROPERTY_ENUM_INFO) ((ULONG_PTR)(_PortEnumInfo_)  + (_PortEnumInfo_).QwordAlignedPropertyBufferLength  + (ctypes.sizeof(NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO)))
                        pass
                    # Returns the property described by the
                    # NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO entry.
                    def NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_GET_PROPERTY(_PortEnumInfo_):
                        return PVOID(PUCHAR_PortEnumInfo_ + _PortEnumInfo_.PropertyBufferOffset)
                    # Since the property buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    # This structure is used in
                    # OID_SWITCH_PORT_FEATURE_STATUS_QUERY.
                    class _NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE(ENUM):
                        NdisSwitchPortFeatureStatusTypeUndefined = 1
                        NdisSwitchPortFeatureStatusTypeCustom = 2
                        NdisSwitchPortFeatureStatusTypeMaximum = 3

                    NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE = _NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE
                    PNDIS_SWITCH_PORT_FEATURE_STATUS_TYPE = POINTER(_NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE)
                    NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        ('FeatureStatusType', NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE),
                        ('FeatureStatusId', NDIS_SWITCH_OBJECT_ID),
                        ('FeatureStatusVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('FeatureStatusInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('FeatureStatusBufferLength', ULONG),
                        ('FeatureStatusBufferOffset', ULONG),
                        ('Reserved', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS,
                        Reserved)
                    )

                    # Since the resource buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    # Converts the version defined from the property MOF files
                    # (e.g. "1.0") to the serialized
                    # value passed to vSwitch extensions (e.g. 0x100).
                    def NDIS_SWITCH_CREATE_FEATURE_STATUS_VERSION(_VersionMajor_, _VersionMinor_):
                        return (_VersionMajor_ << 8) + _VersionMinor_

                    # This structure is used for the resource status for
                    # NdisSwitchPortPropertyTypeCustom.
                    NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM_REVISION_1 = 1


                    _NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('FeatureStatusBufferLength', ULONG),
                        ('FeatureStatusBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM,
                        FeatureStatusBufferOffset)
                    )


                    class _NDIS_SWITCH_PROPERTY_TYPE(ENUM):
                        NdisSwitchPropertyTypeUndefined = 1
                        NdisSwitchPropertyTypeCustom = 2
                        NdisSwitchPropertyTypeMaximum = 3

                    NDIS_SWITCH_PROPERTY_TYPE = _NDIS_SWITCH_PROPERTY_TYPE
                    PNDIS_SWITCH_PROPERTY_TYPE = POINTER(_NDIS_SWITCH_PROPERTY_TYPE)

                    # This structure is used for NdisSwitchPropertyTypeCustom.
                    NDIS_SWITCH_PROPERTY_CUSTOM_REVISION_1 = 1


                    _NDIS_SWITCH_PROPERTY_CUSTOM._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PROPERTY_CUSTOM_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PROPERTY_CUSTOM,
                        PropertyBufferOffset)
                    )

                    # Retrieves the custom property buffer described by the
                    # NDIS_SWITCH_PROPERTY_CUSTOM structure.
                    def NDIS_SWITCH_PROPERTY_CUSTOM_GET_BUFFER(_SwitchPropertyCustom_):
                        return PVOID(PUCHAR_SwitchPropertyCustom_ + _SwitchPropertyCustom_.PropertyBufferOffset)
                    NDIS_SWITCH_PROPERTY_PARAMETERS_REVISION_1 = 1

                    # This structure is used in OID_SWITCH_PROPERTY_ADD and
                    # OID_SWITCH_PROPERTY_UPDATE
                    _NDIS_SWITCH_PROPERTY_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyType', NDIS_SWITCH_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('PropertyVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PROPERTY_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PROPERTY_PARAMETERS,
                        PropertyBufferOffset)
                    )

                    # Returns the property described by the
                    # NNDIS_SWITCH_PROPERTY_PARAMETERS structure.
                    def NDIS_SWITCH_PROPERTY_PARAMETERS_GET_PROPERTY(_SwitchParameters_):
                        return PVOID(PUCHAR_SwitchParameters_ + _SwitchParameters_.PropertyBufferOffset)
                    NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS_REVISION_1 = 1

                    # This structure is used in OID_SWITCH_PROPERTY_DELETE.
                    _NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyType', NDIS_SWITCH_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS,
                        PropertyInstanceId)
                    )
                    NDIS_SWITCH_PROPERTY_ENUM_INFO_REVISION_1 = 1

                    # This structure is used in OID_SWITCH_PROPERTY_ENUM.
                    _NDIS_SWITCH_PROPERTY_ENUM_INFO._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('PropertyVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('QwordAlignedPropertyBufferLength', ULONG),
                        ('PropertyBufferLength', ULONG),
                        ('PropertyBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PROPERTY_ENUM_INFO_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PROPERTY_ENUM_INFO,
                        PropertyBufferOffset)
                    )

                    # Retrieves the next NDIS_SWITCH_PROPERTY_ENUM_INFO object
                    # in the enumeration.
                    def NDIS_SWITCH_PROPERTY_ENUM_INFO_GET_NEXT(_SwitchEnumInfo_):
                    # DEFINE ERROR 4: #define NDIS_SWITCH_PROPERTY_ENUM_INFO_GET_NEXT(_SwitchEnumInfo_) ((PNDIS_SWITCH_PROPERTY_ENUM_INFO) ((ULONG_PTR)(_SwitchEnumInfo_)  + (_SwitchEnumInfo_).QwordAlignedPropertyBufferLength  + (ctypes.sizeof(NDIS_SWITCH_PROPERTY_ENUM_INFO)))
                        pass
                    # Returns the property described by the
                    # NDIS_SWITCH_PROPERTY_ENUM_INFO entry.
                    def NDIS_SWITCH_PROPERTY_ENUM_INFO_GET_PROPERTY(_SwitchEnumInfo_):
                        return PVOID(PUCHAR_SwitchEnumInfo_ + _SwitchEnumInfo_.PropertyBufferOffset)
                    NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_REVISION_1 = 1
                    # This structure is used in OID_SWITCH_PROPERTY_ENUM.
                    _NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('PropertyType', NDIS_SWITCH_PROPERTY_TYPE),
                        ('PropertyId', NDIS_SWITCH_OBJECT_ID),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('FirstPropertyOffset', ULONG),
                        ('NumProperties', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS,
                        NumProperties)
                    )
                    # Retrieves the first NDIS_SWITCH_PROPERTY_ENUM_INFO
                    # object in the enumeration.
                    def NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_GET_FIRST_INFO(_SwitchEnumParams_):
                        return PNDIS_SWITCH_PROPERTY_ENUM_INFO(PUCHAR_SwitchEnumParams_ + _SwitchEnumParams_.FirstPropertyOffset)
                    # Since the resource buffer may need 8 byte alignment, we
                    # require this struct
                    # to be 8 byte aligned.
                    # This structure is used in
                    # OID_SWITCH_FEATURE_STATUS_QUERY.
                    NDIS_SWITCH_FEATURE_STATUS_PARAMETERS_REVISION_1 = 1


                    class _NDIS_SWITCH_FEATURE_STATUS_TYPE(ENUM):
                        NdisSwitchFeatureStatusTypeUndefined = 1
                        NdisSwitchFeatureStatusTypeCustom = 2
                        NdisSwitchFeatureStatusTypeMaximum = 3

                    NDIS_SWITCH_FEATURE_STATUS_TYPE = _NDIS_SWITCH_FEATURE_STATUS_TYPE
                    PNDIS_SWITCH_FEATURE_STATUS_TYPE = POINTER(_NDIS_SWITCH_FEATURE_STATUS_TYPE)

                    _NDIS_SWITCH_FEATURE_STATUS_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('FeatureStatusType', NDIS_SWITCH_FEATURE_STATUS_TYPE),
                        ('FeatureStatusId', NDIS_SWITCH_OBJECT_ID),
                        ('FeatureStatusInstanceId', NDIS_SWITCH_OBJECT_INSTANCE_ID),
                        ('FeatureStatusVersion', NDIS_SWITCH_OBJECT_VERSION),
                        ('SerializationVersion', NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION),
                        ('FeatureStatusBufferOffset', ULONG),
                        ('FeatureStatusBufferLength', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_FEATURE_STATUS_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_FEATURE_STATUS_PARAMETERS,
                        FeatureStatusBufferLength)
                    )

                    # Since the feature status buffer may need 8 byte
                    # alignment, we require this struct
                    # to be 8 byte aligned.
                    # This structure is used for the resource status for
                    # NdisSwitchFeatureStatusTypeCustom.
                    NDIS_SWITCH_FEATURE_STATUS_CUSTOM_REVISION_1 = 1


                    _NDIS_SWITCH_FEATURE_STATUS_CUSTOM._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('FeatureStatusCustomBufferLength', ULONG),
                        ('FeatureStatusCustomBufferOffset', ULONG),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_FEATURE_STATUS_CUSTOM_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_FEATURE_STATUS_CUSTOM,
                        FeatureStatusCustomBufferOffset)
                    )

                    # Since the feature status buffer may need 8 byte
                    # alignment, we require this struct
                    # to be 8 byte aligned.
                    # This structure is used in OID_SWITCH_PARAMETERS
                    NDIS_SWITCH_PARAMETERS_REVISION_1 = 1


                    _NDIS_SWITCH_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        # Reserved for any future structure flags
                        ('Flags', ULONG),
                        # Switch ID as used by management (e.g. WMI)
                        ('SwitchName', NDIS_SWITCH_NAME),
                        # Name configured by user, displayed in UI
                        ('SwitchFriendlyName', NDIS_SWITCH_FRIENDLYNAME),
                        # The number of ports attached to the switch
                        ('NumSwitchPorts', UINT32),
                        # Whether or not the switch has been activated yet.
                        ('IsActive', BOOLEAN),
                    ]
                    NDIS_SIZEOF_NDIS_SWITCH_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PARAMETERS,
                        IsActive)
                    )

                    # These structures are used in OID_SWITCH_PORT_ARRAY
                    class _NDIS_SWITCH_PORT_TYPE(ENUM):
                        NdisSwitchPortTypeGeneric = 0
                        NdisSwitchPortTypeExternal = 1
                        NdisSwitchPortTypeSynthetic = 2
                        NdisSwitchPortTypeEmulated = 3
                        NdisSwitchPortTypeInternal = 4

                    NDIS_SWITCH_PORT_TYPE = _NDIS_SWITCH_PORT_TYPE


                    class _NDIS_SWITCH_PORT_STATE(ENUM):
                        NdisSwitchPortStateUnknown = 0
                        NdisSwitchPortStateCreated = 1
                        NdisSwitchPortStateTeardown = 2
                        NdisSwitchPortStateDeleted = 3

                    NDIS_SWITCH_PORT_STATE = _NDIS_SWITCH_PORT_STATE
                    if NDIS_SUPPORT_NDIS650:
                        # Indicates that the internal port should be treated
                        # as an untrusted entity.
                        NDIS_SWITCH_PORT_PARAMETERS_FLAG_UNTRUSTED_INTERNAL_PORT = (
                            0x1
                        )
                    # END IF   (NDIS_SUPPORT_NDIS650)

                    if NDIS_SUPPORT_NDIS660:
                        # Indicates that the port has pending saved state to
                        # be restored
                        NDIS_SWITCH_PORT_PARAMETERS_FLAG_RESTORING_PORT = 0x2
                    # END IF   (NDIS_SUPPORT_NDIS660)


                    _NDIS_SWITCH_PORT_PARAMETERS._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        # Reserved for any future structure flags
                        ('Flags', ULONG),
                        # Number based ID for the port
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        # Static port identifier as used by management, such
                        # as WMI
                        ('PortName', NDIS_SWITCH_PORT_NAME),
                        # Port friendly name
                        ('PortFriendlyName', NDIS_SWITCH_PORT_FRIENDLYNAME),
                        # Port type
                        ('PortType', NDIS_SWITCH_PORT_TYPE),
                        # port that will have a NIC connection.
                        ('IsValidationPort', BOOLEAN),
                        # The current state of the port
                        ('PortState', NDIS_SWITCH_PORT_STATE),
                    ]
                    NDIS_SWITCH_PORT_PARAMETERS_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_PARAMETERS,
                        PortState)
                    )


                    _NDIS_SWITCH_PORT_ARRAY._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('FirstElementOffset', USHORT),
                        ('NumElements', ULONG),
                        ('ElementSize', ULONG),
                    ]
                    NDIS_SWITCH_PORT_ARRAY_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_PORT_ARRAY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_PORT_ARRAY,
                        ElementSize)
                    )
                    

                    def NDIS_SWITCH_PORT_AT_ARRAY_INDEX(_PortArray_, _Index_):
                        return (PNDIS_SWITCH_PORT_PARAMETERS(PUCHAR_PortArray_ + _PortArray_.FirstElementOffset + (_PortArray_.ElementSize * _Index_)))
                    if defined(NDIS_SUPPORT_NDIS640):
                        # Flags for NDIS_SWITCH_NIC_PARAMETERS structure
                        NDIS_SWITCH_NIC_FLAGS_NIC_INITIALIZING = 0x00000001
                    # END IF


                    if defined(NDIS_SUPPORT_NDIS650):
                        # The NIC is currently in suspended state.
                        NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED = 0x00000002
                    # END IF


                    if defined(NDIS_SUPPORT_NDIS660):
                        # Preferred mapped NIC for a vNIC has changed.
                        NDIS_SWITCH_NIC_FLAGS_MAPPED_NIC_UPDATED = 0x00000004
                    # END IF


                    if defined(NDIS_SUPPORT_NDIS680):
                        # Preferred mapped NIC for a vNIC has changed.
                        NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED_LM = 0x00000010
                    # END IF


                    # These structures are used in OID_SWITCH_NIC_ARRAY
                    class _NDIS_SWITCH_NIC_TYPE(ENUM):
                        NdisSwitchNicTypeExternal = 0
                        NdisSwitchNicTypeSynthetic = 1
                        NdisSwitchNicTypeEmulated = 2
                        NdisSwitchNicTypeInternal = 3

                    NDIS_SWITCH_NIC_TYPE = _NDIS_SWITCH_NIC_TYPE


                    class _NDIS_SWITCH_NIC_STATE(ENUM):
                        NdisSwitchNicStateUnknown = 0
                        NdisSwitchNicStateCreated = 1
                        NdisSwitchNicStateConnected = 2
                        NdisSwitchNicStateDisconnected = 3
                        NdisSwitchNicStateDeleted = 4

                    NDIS_SWITCH_NIC_STATE = _NDIS_SWITCH_NIC_STATE

                    _TEMP__NDIS_SWITCH_NIC_PARAMETERS = [
                        ('Header', NDIS_OBJECT_HEADER),
                        # Flags that can be used to pass certain additional
                        # info / state.
                        ('Flags', ULONG),
                        # For other Nics the value is set by the management
                        # layer.
                        ('NicName', NDIS_SWITCH_NIC_NAME),
                        # management layer.
                        ('NicFriendlyName', NDIS_SWITCH_NIC_FRIENDLYNAME),
                        # ID of the associated Port
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        # Zero otherwise.
                        ('NicIndex', NDIS_SWITCH_NIC_INDEX),
                        # The type of NIC
                        ('NicType', NDIS_SWITCH_NIC_TYPE),
                        # The current state of the NIC
                        ('NicState', NDIS_SWITCH_NIC_STATE),
                        # Virtual Machine owning the NIC
                        ('VmName', NDIS_VM_NAME),
                        # VM Friendly Name
                        ('VmFriendlyName', NDIS_VM_FRIENDLYNAME),
                        # underlying interface.
                        ('NetCfgInstanceId', GUID),
                        # MTU of the NIC
                        ('MTU', ULONG),
                        # Preferred NUMA Node
                        ('NumaNodeId', USHORT),
                        # Permanent MAC address of the NIC
                        ('PermanentMacAddress', UCHAR * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        # MAC address of the NIC as set by the VM
                        ('VMMacAddress', UCHAR * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        # Current MAC address of the NIC, to enforce policy
                        # against
                        ('CurrentMacAddress', UCHAR * NDIS_MAX_PHYS_ADDRESS_LENGTH),
                        # If TRUE, the NIC is currently assigned to a VF on
                        # the physical adapter.
                        ('VFAssigned', BOOLEAN),
                    ]
                    if defined(NDIS_SUPPORT_NDIS640):
                            _TEMP__NDIS_SWITCH_NIC_PARAMETERS += [
                            # New fields available in
                            # NDIS_SWITCH_NIC_PARAMETERS_2
                            ('NdisReserved', ULONG64 * 2),
                            ]
                        # END IF


                            _NDIS_SWITCH_NIC_PARAMETERS._fields_ = _TEMP__NDIS_SWITCH_NIC_PARAMETERS
                    NDIS_SWITCH_NIC_PARAMETERS_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_NIC_PARAMETERS_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_PARAMETERS,
                        VFAssigned)
                    )
                    if defined(NDIS_SUPPORT_NDIS640):
                        NDIS_SWITCH_NIC_PARAMETERS_REVISION_2 = 2
                        NDIS_SIZEOF_NDIS_SWITCH_NIC_PARAMETERS_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_PARAMETERS,
                            NdisReserved)
                        )
                    # END IF


                    _NDIS_SWITCH_NIC_ARRAY._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('FirstElementOffset', USHORT),
                        ('NumElements', ULONG),
                        ('ElementSize', ULONG),
                    ]
                    NDIS_SWITCH_NIC_ARRAY_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_NIC_ARRAY_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_ARRAY,
                        ElementSize)
                    )
                    

                    def NDIS_SWITCH_NIC_AT_ARRAY_INDEX(_NicArray_, _Index_):
                        return (PNDIS_SWITCH_NIC_PARAMETERS(PUCHAR_NicArray_ + _NicArray_.FirstElementOffset + (_NicArray_.ElementSize * _Index_)))

                    # Forward declaration of OID request pointer.
                    PNDIS_OID_REQUEST = POINTER(NDIS_OID_REQUEST,)


                    _NDIS_SWITCH_NIC_OID_REQUEST._fields_ = [
                        ('Header', NDIS_OBJECT_HEADER),
                        ('Flags', ULONG),
                        ('SourcePortId', NDIS_SWITCH_PORT_ID),
                        ('SourceNicIndex', NDIS_SWITCH_NIC_INDEX),
                        ('DestinationPortId', NDIS_SWITCH_PORT_ID),
                        ('DestinationNicIndex', NDIS_SWITCH_NIC_INDEX),
                        ('OidRequest', PNDIS_OID_REQUEST),
                    ]
                    NDIS_SWITCH_NIC_OID_REQUEST_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_NIC_OID_REQUEST_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_OID_REQUEST,
                        OidRequest)
                    )

                    # These structures are used in OID_SWITCH_NIC_SAVE and
                    # OID_SWITCH_NIC_RESTORE
                    _TEMP__NDIS_SWITCH_NIC_SAVE_STATE = [
                        ('Header', NDIS_OBJECT_HEADER),
                        # Reserved for any future structure flags.
                        ('Flags', ULONG),
                        # Port Identifier
                        ('PortId', NDIS_SWITCH_PORT_ID),
                        # NIC Index
                        ('NicIndex', NDIS_SWITCH_NIC_INDEX),
                        # Identifier for extension, used by extension on
                        # restore to recognize its data.
                        ('ExtensionId', GUID),
                        # Extension name, used for diagnostic purposes.
                        ('ExtensionFriendlyName', NDIS_SWITCH_EXTENSION_FRIENDLYNAME),
                        # Optional FeatureClass identifier to further
                        # recognize its data.
                        ('FeatureClassId', GUID),
                        # Size of data in SaveData buffer.
                        ('SaveDataSize', USHORT),
                        # Offset to save data from start of this buffer.
                        ('SaveDataOffset', USHORT),
                    ]
                    if NDIS_SUPPORT_NDIS650:
                            _TEMP__NDIS_SWITCH_NIC_SAVE_STATE += [
                            # Size of data in SaveData buffer in addition to
                            # SaveDataSize
                            ('SaveDataSizeOverflow', ULONG),
                            ]
                        # END IF


                            _NDIS_SWITCH_NIC_SAVE_STATE._fields_ = _TEMP__NDIS_SWITCH_NIC_SAVE_STATE
                    NDIS_SWITCH_NIC_SAVE_STATE_REVISION_1 = 1
                    NDIS_SIZEOF_NDIS_SWITCH_NIC_SAVE_STATE_REVISION_1 = (
                        RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_SAVE_STATE,
                        SaveDataOffset)
                    )
                    if NDIS_SUPPORT_NDIS650:
                        NDIS_SWITCH_NIC_SAVE_STATE_REVISION_2 = 2
                        NDIS_SIZEOF_NDIS_SWITCH_NIC_SAVE_STATE_REVISION_2 = (
                            RTL_SIZEOF_THROUGH_FIELD(NDIS_SWITCH_NIC_SAVE_STATE,
                            SaveDataSizeOverflow)
                        )
                    # END IF

                # END IF   (NDIS_SUPPORT_NDIS630)

                # NDIS_PORT_STATE is used in port state change status
                # indications
                # as well as OID_GEN_PORT_STATE query OID
                NDIS_PORT_STATE_REVISION_1 = 1


                _NDIS_PORT_STATE._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('MediaConnectState', NDIS_MEDIA_CONNECT_STATE),
                    ('XmitLinkSpeed', ULONG64),
                    ('RcvLinkSpeed', ULONG64),
                    ('Direction', NET_IF_DIRECTION_TYPE),
                    ('SendControlState', NDIS_PORT_CONTROL_STATE),
                    ('RcvControlState', NDIS_PORT_CONTROL_STATE),
                    ('SendAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
                    ('RcvAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
                    ('Flags', ULONG),
                ]
                NDIS_SIZEOF_PORT_STATE_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PORT_STATE,
                    Flags)
                )

                # Flags used in NDIS_PORT_CHARACTERISTICS Flags field.
                NDIS_PORT_CHAR_USE_DEFAULT_AUTH_SETTINGS = 0x00000001

                # NDIS_PORT_CHARACTERISTICS is used in port allocation and
                # arrival notification as part of NDIS_PORT structure
                NDIS_PORT_CHARACTERISTICS_REVISION_1 = 1


                _NDIS_PORT_CHARACTERISTICS._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('PortNumber', NDIS_PORT_NUMBER),
                    ('Flags', ULONG),
                    ('Type', NDIS_PORT_TYPE),
                    ('MediaConnectState', NDIS_MEDIA_CONNECT_STATE),
                    ('XmitLinkSpeed', ULONG64),
                    ('RcvLinkSpeed', ULONG64),
                    ('Direction', NET_IF_DIRECTION_TYPE),
                    ('SendControlState', NDIS_PORT_CONTROL_STATE),
                    ('RcvControlState', NDIS_PORT_CONTROL_STATE),
                    ('SendAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
                    ('RcvAuthorizationState', NDIS_PORT_AUTHORIZATION_STATE),
                ]
                NDIS_SIZEOF_PORT_CHARACTERISTICS_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PORT_CHARACTERISTICS,
                    RcvAuthorizationState)
                )

                # NDIS_PORT structure is used in port activation
                # PnP notification
                PNDIS_PORT = POINTER(NDIS_PORT,)


                _NDIS_PORT._fields_ = [
                    ('Next', PNDIS_PORT),
                    ('NdisReserved', PVOID),
                    ('MiniportReserved', PVOID),
                    ('ProtocolReserved', PVOID),
                    ('PortCharacteristics', NDIS_PORT_CHARACTERISTICS),
                ]
                NDIS_PORT_ARRAY_REVISION_1 = 1

                # NDIS_PORT_ARRAY is used in enumerating the ports
                _NDIS_PORT_ARRAY._fields_ = [
                    ('Header', NDIS_OBJECT_HEADER),
                    ('NumberOfPorts', ULONG),
                    ('OffsetFirstPort', ULONG),
                    ('ElementSize', ULONG),
                    ('Ports', NDIS_PORT_CHARACTERISTICS * 1),
                ]
                NDIS_SIZEOF_PORT_ARRAY_REVISION_1 = (
                    RTL_SIZEOF_THROUGH_FIELD(NDIS_PORT_ARRAY,
                    Ports)
                )
            # END IF   ((NTDDI_VERSION >= NTDDI_VISTA) or NDIS_SUPPORT_NDIS6)
        # END IF   NTDDI_VERSION >= NTDDI_VISTA

        if NDIS_SUPPORT_NDIS650:
            from inaddr_h import * # NOQA
            from in6addr_h import * # NOQA

            # Data structures for NDIS Generic Filtering Platform (GFP) used in
            # Generic Flow Table (GFT) offload and Packet Direct
            ETHERNET_LENGTH_OF_ADDRESS = 6

            # NDIS_GFP_TABLE_TYPE enum value is used to define the type of
            # table
            # For GFT, at the minimum we have an ingress and egress exact
            # match tables.
            # we may or may not have an ingress or egress wildcard match table
            class _NDIS_GFP_TABLE_TYPE(ENUM):
                NdisGfpTableTypeUndefined = 1
                NdisGfpTableTypeWildcardIngress = 2
                NdisGfpTableTypeWildcardEgress = 3
                NdisGfpTableTypeExactMatchIngress = 4
                NdisGfpTableTypeExactMatchEgress = 5
                NdisGfpTableTypePacketDirect = 6
                NdisGfpTableTypeMax = 7

            NDIS_GFP_TABLE_TYPE = _NDIS_GFP_TABLE_TYPE
            PNDIS_GFP_TABLE_TYPE = POINTER(_NDIS_GFP_TABLE_TYPE)

            # flags used to specify which headers are present in a header group
            # These flags are used in the HeadersPresent field of
            # NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE,
            # NDIS_GFP_HEADER_GROUP_EXACT_MATCH,
            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE,
            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION,
            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE, and
            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH
            NDIS_GFP_HEADER_PRESENT_ETHERNET = 0x00000001
            NDIS_GFP_HEADER_PRESENT_IPV4 = 0x00000002
            NDIS_GFP_HEADER_PRESENT_IPV6 = 0x00000004
            NDIS_GFP_HEADER_PRESENT_TCP = 0x00000008
            NDIS_GFP_HEADER_PRESENT_UDP = 0x00000010
            NDIS_GFP_HEADER_PRESENT_ICMP = 0x00000020
            NDIS_GFP_HEADER_PRESENT_NO_ENCAP = 0x00000040
            NDIS_GFP_HEADER_PRESENT_IP_IN_IP_ENCAP = 0x00000080
            NDIS_GFP_HEADER_PRESENT_IP_IN_GRE_ENCAP = 0x00000100
            NDIS_GFP_HEADER_PRESENT_NVGRE_ENCAP = 0x00000200
            NDIS_GFP_HEADER_PRESENT_VXLAN_ENCAP = 0x00000400


            # flags used to specify fields in the Ethernet, IP, Transport and
            # encapsulation headers
            NDIS_GFP_HEADER_FIELD_DEST_MAC_ADDR = 0x00000001L
            NDIS_GFP_HEADER_FIELD_SRC_MAC_ADDR = 0x00000002L
            NDIS_GFP_HEADER_FIELD_ETH_TYPE = 0x00000004L
            NDIS_GFP_HEADER_FIELD_CUSTOMER_VLAN_ID = 0x00000008L
            NDIS_GFP_HEADER_FIELD_PROVIDER_VLAN_ID = 0x00000010L
            NDIS_GFP_HEADER_FIELD_8021P_PRIORITY = 0x00000020L
            NDIS_GFP_HEADER_FIELD_SRC_IP_ADDR = 0x00000040L
            NDIS_GFP_HEADER_FIELD_DEST_IP_ADDR = 0x00000080L
            NDIS_GFP_HEADER_FIELD_TTL = 0x00000100L
            NDIS_GFP_HEADER_FIELD_IP_PROTOCOL = 0x00000200L
            NDIS_GFP_HEADER_FIELD_IP_DSCP = 0x00000400L
            NDIS_GFP_HEADER_FIELD_TRANSPORT_SRC_PORT = 0x00000800L
            NDIS_GFP_HEADER_FIELD_TRANSPORT_DEST_PORT = 0x00001000L
            NDIS_GFP_HEADER_FIELD_TCP_FLAGS = 0x00002000L
            NDIS_GFP_HEADER_FIELD_TENANT_ID = 0x00004000L
            NDIS_GFP_HEADER_FIELD_ENTROPY = 0x00008000L
            NDIS_GFP_HEADER_FIELD_ICMP_TYPE = 0x00010000L
            NDIS_GFP_HEADER_FIELD_ICMP_CODE = 0x00020000L
            NDIS_GFP_HEADER_FIELD_OOB_VLAN = 0x00040000L
            NDIS_GFP_HEADER_FIELD_OOB_TENANT_ID = 0x00080000L
            NDIS_GFP_HEADER_FIELD_GRE_PROTOCOL = 0x00100000L


            # flags used to specify encapsulation types, they are also used
            # in SupportedEncapsulationTypes field of
            # NDIS_GFT_OFFLOAD_CAPABILITIES structure
            NDIS_GFP_ENCAPSULATION_TYPE_NOT_ENCAPSULATED = 0x00000001
            NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_IP = 0x00000002
            NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_GRE = 0x00000004
            NDIS_GFP_ENCAPSULATION_TYPE_NVGRE = 0x00000008
            NDIS_GFP_ENCAPSULATION_TYPE_VXLAN = 0x00000010
            NDIS_GFP_PROFILE_ID = ULONG
            PNDIS_GFP_PROFILE_ID = POINTER(ULONG)
            NDIS_GFP_UNDEFINED_PROFILE_ID = 0


            # flags used in Flags field of
            # NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE
            NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_IS_TTL_ONE = 0x00000001


            # NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE defines a match
            # profile for a
            # -single header group-.
            # An array of NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILEs are used
            # in
            # NDIS_GFP_EXACT_MATCH_PROFILE structure to define a full match
            # profile
            NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_REVISION_1 = 1


            _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # are present in the header group
                ('HeadersPresent', ULONG),
                # we should match against.
                ('MatchFields', ULONG64),
            ]
            NDIS_SIZEOF_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE,
                MatchFields)
            )


            # flags used in Flags field of NDIS_GFP_EXACT_MATCH_PROFILE
            NDIS_GFP_EXACT_MATCH_PROFILE_RDMA_FLOW = 0x00000001


            # NDIS_GFP_EXACT_MATCH_PROFILE is used in
            # OID_GFT_EXACT_MATCH_PROFILE
            # and NDIS_GFT_PROFILE_INFO.
            # This structure is used to fully define a match profile that can
            # span multiple header groups
            NDIS_GFP_EXACT_MATCH_PROFILE_REVISION_1 = 1


            _NDIS_GFP_EXACT_MATCH_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                ('NumSupportedEntries', ULONG),
                # from the beginning of this structure
                ('HeaderGroupExactMatchProfileArrayOffset', ULONG),
                ('HeaderGroupExactMatchProfileArrayNumElements', ULONG),
                ('HeaderGroupExactMatchProfileArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFP_EXACT_MATCH_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_EXACT_MATCH_PROFILE,
                HeaderGroupExactMatchProfileArrayElementSize)
            )


            _NDIS_GFP_ETHERNET_HEADER_FIELDS._fields_ = [
                ('DestinationMacAddress', UINT8 * ETHERNET_LENGTH_OF_ADDRESS),
                ('SourceMacAddress', UINT8 * ETHERNET_LENGTH_OF_ADDRESS),
                ('EthType', UINT16),
                ('CustomerVlanId', UINT16),
                ('ProviderVlanId', UINT16),
                ('Priority', UINT8),
            ]

            # flags used in Flags field of NDIS_GFP_HEADER_GROUP_EXACT_MATCH
            NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IS_TTL_ONE = 0x00000001

            # NDIS_GFP_HEADER_GROUP_EXACT_MATCH structure is used with
            # NDIS_GFT_EXACT_MATCH_FLOW_ENTRY. This structure defines
            # the exact match for a single header group
            NDIS_GFP_HEADER_GROUP_EXACT_MATCH_REVISION_1 = 1


            class IPAddress(ctypes.Union):
                pass


            class IPv4Address(ctypes.Structure):
                pass


            IPv4Address._fields_ = [
                ('SourceIPAddress', IN_ADDR),
                ('DestinationIPAddress', IN_ADDR),
            ]
            IPAddress.IPv4Address = IPv4Address


            class IPv6Address(ctypes.Structure):
                pass


            IPv6Address._fields_ = [
                ('SourceIPAddress', IN6_ADDR),
                ('DestinationIPAddress', IN6_ADDR),
            ]
            IPAddress.IPv6Address = IPv6Address


            IPAddress._fields_ = [
                ('IPv4Address', IPAddress.IPv4Address),
                ('IPv6Address', IPAddress.IPv6Address),
            ]
            _NDIS_GFP_HEADER_GROUP_EXACT_MATCH.IPAddress = IPAddress


            class TransportOrEncapsulation(ctypes.Union):
                pass


            class Udp(ctypes.Structure):
                pass


            Udp._fields_ = [
                ('SourcePort', USHORT),
                ('DestinationPort', USHORT),
            ]
            TransportOrEncapsulation.Udp = Udp


            class Tcp(ctypes.Structure):
                pass


            Tcp._fields_ = [
                ('SourcePort', USHORT),
                ('DestinationPort', USHORT),
                ('TcpFlags', UINT8),
            ]
            TransportOrEncapsulation.Tcp = Tcp


            class Icmp(ctypes.Structure):
                pass


            Icmp._fields_ = [
                ('Type', UINT8),
                ('Code', UINT8),
            ]
            TransportOrEncapsulation.Icmp = Icmp


            class Encapsulation(ctypes.Structure):
                pass


            Encapsulation._fields_ = [
                ('TenantId', ULONG),
                ('GreProtocol', USHORT),
            ]
            TransportOrEncapsulation.Encapsulation = Encapsulation


            TransportOrEncapsulation._fields_ = [
                ('Udp', TransportOrEncapsulation.Udp),
                ('Tcp', TransportOrEncapsulation.Tcp),
                ('Icmp', TransportOrEncapsulation.Icmp),
                ('Encapsulation', TransportOrEncapsulation.Encapsulation),
            ]
            _NDIS_GFP_HEADER_GROUP_EXACT_MATCH.TransportOrEncapsulation = TransportOrEncapsulation


            _NDIS_GFP_HEADER_GROUP_EXACT_MATCH._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # NDIS_GFP_HEADER_PRESENT_xxx
                ('HeadersPresent', ULONG),
                # NDIS_GFP_HEADER_FIELD_xxx except
                # NDIS_GFP_HEADER_FIELD_ENTROPY
                ('MatchFields', ULONG64),
                # Ethernet header
                ('EthernetFields', NDIS_GFP_ETHERNET_HEADER_FIELDS),
                # IP header
                ('IPAddress', _NDIS_GFP_HEADER_GROUP_EXACT_MATCH.IPAddress),
                ('Dscp', UINT8),
                ('IPProtocol', UINT8),
                # transport/encapsulation header
                ('TransportOrEncapsulation', _NDIS_GFP_HEADER_GROUP_EXACT_MATCH.TransportOrEncapsulation),
            ]
            NDIS_SIZEOF_GFP_HEADER_GROUP_EXACT_MATCH_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_HEADER_GROUP_EXACT_MATCH,
                TransportOrEncapsulation)
            )

            # wildcard GFP entries
            # NDIS_GFP_WILDCARD_MATCH_TYPE enum value specifies the type of
            # matches that
            # we do in a wildcard match
            class _NDIS_GFP_WILDCARD_MATCH_TYPE(ENUM):
                NdisGfpWildcardMatchTypeUndefined = 1
                NdisGfpWildcardMatchTypeEqual = 2
                NdisGfpWildcardMatchTypeMaskEqual = 3
                NdisGfpWildcardMatchTypeInRange = 4
                NdisGfpWildcardMatchTypeMax = 5

            NDIS_GFP_WILDCARD_MATCH_TYPE = _NDIS_GFP_WILDCARD_MATCH_TYPE
            PNDIS_GFP_WILDCARD_MATCH_TYPE = POINTER(_NDIS_GFP_WILDCARD_MATCH_TYPE)

            # flags used in Flags field of
            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE
            NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_IS_TTL_ONE = (
                0x00000001
            )

            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE structure is used
            # with
            # NDIS_GFP_WILDCARD_MATCH_PROFILE. This structure defines a
            # wildcard
            # match profile for a single header group
            NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_REVISION_1 = 1


            _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # NDIS_GFP_HEADER_PRESENT_xxx
                ('HeadersPresent', ULONG),
                # NDIS_GFP_HEADER_FIELD_xxx
                ('MatchFields', ULONG64),
                ('SourceIPv4AddressMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('DestinationIPv4AddressMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('SourceIPv6AddressMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('DestinationIPv6AddressMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('SourcePortMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('DestinationPortMatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('TcpFlags', UINT8),
            ]
            NDIS_SIZEOF_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE,
                TcpFlags)
            )

            # NDIS_GFP_WILDCARD_MATCH_PROFILE structure is used with
            # OID_GFT_WILDCARD_MATCH_PROFILE
            # and NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY.
            # It uses an array of
            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILEs in order to
            # describe
            # a full wildcard match profile
            NDIS_GFP_WILDCARD_MATCH_PROFILE_REVISION_1 = 1


            _NDIS_GFP_WILDCARD_MATCH_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                ('NumSupportedEntries', ULONG),
                # from the beginning of this structure
                ('HeaderGroupWildcardMatchProfileArrayOffset', ULONG),
                ('HeaderGroupWildcardMatchProfileArrayNumElements', ULONG),
                ('HeaderGroupWildcardMatchProfileArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFP_WILDCARD_MATCH_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_WILDCARD_MATCH_PROFILE,
                HeaderGroupWildcardMatchProfileArrayElementSize)
            )


            # structures used in NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH
            class MatchValue(ctypes.Union):
                pass


            MatchValue._fields_ = [
                ('PrefixLength', ULONG),
                ('RangeSize', ULONG),
            ]
            _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH.MatchValue = MatchValue


            _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH._fields_ = [
                ('MatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('IPAddress', IN_ADDR),
                ('MatchValue', _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH.MatchValue),
            ]

            _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH._fields_ = [
                ('SourceIPv4Address', NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH),
                ('DestinationIPv4Address', NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH),
            ]


            class MatchValue(ctypes.Union):
                pass


            MatchValue._fields_ = [
                ('PrefixLength', ULONG),
                ('RangeSize', ULONG),
            ]
            _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH.MatchValue = MatchValue


            _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH._fields_ = [
                ('MatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('IPAddress', IN6_ADDR),
                ('MatchValue', _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH.MatchValue),
            ]

            _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH._fields_ = [
                ('SourceIPv6Address', NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH),
                ('DestinationIPv6Address', NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH),
            ]

            _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH._fields_ = [
                ('IPv4SrcAndDestAddress', NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH),
                ('IPv6SrcAndDestAddress', NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH),
            ]

            _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH._fields_ = [
                ('MatchType', NDIS_GFP_WILDCARD_MATCH_TYPE),
                ('Port', USHORT),
                ('Range', USHORT),
            ]

            _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH._fields_ = [
                ('SourcePort', NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH),
                ('DestinationPort', NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH),
            ]


            # flags used in FLags field of NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH
            NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_IS_TTL_ONE = 0x00000001


            # NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH structure is used in
            # NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY
            NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_REVISION_1 = 1


            class TransportOrEncapsulation(ctypes.Union):
                pass


            class UdpHeader(ctypes.Structure):
                pass


            UdpHeader._fields_ = [
                ('UdpSrcAndDestPort', NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH),
            ]
            TransportOrEncapsulation.UdpHeader = UdpHeader


            class TcpHeader(ctypes.Structure):
                pass


            TcpHeader._fields_ = [
                ('TcpSrcAndDestPort', NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH),
                # implied "<and> != 0"
                ('TcpFlags', UINT8),
            ]
            TransportOrEncapsulation.TcpHeader = TcpHeader


            class IcmpHeader(ctypes.Structure):
                pass


            IcmpHeader._fields_ = [
                ('Type', UINT8),
                ('Code', UINT8),
            ]
            TransportOrEncapsulation.IcmpHeader = IcmpHeader


            class Encapsulation(ctypes.Structure):
                pass


            Encapsulation._fields_ = [
                ('TenantId', ULONG),
                ('GreProtocol', USHORT),
            ]
            TransportOrEncapsulation.Encapsulation = Encapsulation


            TransportOrEncapsulation._fields_ = [
                ('UdpHeader', TransportOrEncapsulation.UdpHeader),
                ('TcpHeader', TransportOrEncapsulation.TcpHeader),
                ('IcmpHeader', TransportOrEncapsulation.IcmpHeader),
                ('Encapsulation', TransportOrEncapsulation.Encapsulation),
            ]
            _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH.TransportOrEncapsulation = TransportOrEncapsulation


            _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                # NDIS_GFP_HEADER_PRESENT_xxx
                ('HeadersPresent', ULONG),
                # NDIS_GFP_HEADER_FIELD_xxx
                ('MatchFields', ULONG64),
                # Ethernet header
                ('EthernetFields', NDIS_GFP_ETHERNET_HEADER_FIELDS),
                # IP header
                ('IPSrcAndDestAddress', NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH),
                ('Dscp', UINT8),
                ('IPProtocol', UINT8),
                # transport/encapsulation header
                ('TransportOrEncapsulation', _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH.TransportOrEncapsulation),
            ]
            NDIS_SIZEOF_GFP_HEADER_GROUP_WILDCARD_MATCH_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH,
                TransportOrEncapsulation)
            )


            # Packet Direct data structures
            # NDIS PACKETDIRECT Capability/Configuration advertisement and
            # discovery
            # definitions.
            NDIS_PD_QUEUE_COUNT_DYNAMIC = -1


            # NDIS_PD_CAPABILITIES.CapabilityFlags definitions
            # Indicates that the PD provider supports creation of counters
            # with the PDCounterTypeReceiveFilter type.
            NDIS_PD_CAPS_RECEIVE_FILTER_COUNTERS_SUPPORTED = 0x00000001


            # Indicates that the PD provider allows PD clients to request a
            # notification
            # to be delivered on a per NDIS_PD_QUEUE basis for PD_BUFFER
            # completions.
            NDIS_PD_CAPS_DRAIN_NOTIFICATIONS_SUPPORTED = 0x00000002


            # Indicates that the PD provider supports moderating drain
            # notifications
            # based on a moderation interval value per PD queue.
            # This flag can be set only if
            # NDIS_PD_CAPS_DRAIN_NOTIFICATIONS_SUPPORTED
            # is set.
            NDIS_PD_CAPS_NOTIFICATION_MODERATION_INTERVAL_SUPPORTED = (
                0x00000004
            )


            # Indicates that the PD provider supports moderating drain
            # notifications
            # based on a moderation count value per PD queue.
            # This flag can be set only if
            # NDIS_PD_CAPS_NOTIFICATION_MODERATION_INTERVAL_SUPPORTED
            # is set
            # (i.e., there's no moderation support based on purely count).
            NDIS_PD_CAPS_NOTIFICATION_MODERATION_COUNT_SUPPORTED = 0x00000008


            # NDIS_PD_CAPABILITIES structure indicates PD capabilities for
            # a miniport adapter.
            _NDIS_PD_CAPABILITIES._fields_ = [
                # Header.Size >= NDIS_SIZEOF_PD_CAPABILITIES_REVISION_1;
                ('Header', NDIS_OBJECT_HEADER),
                # Reserved. Must be set to 0.
                ('Flags', ULONG),
                # for transmit and receive.
                ('MaximumTxPartialBufferCount', ULONG),
                ('MaximumRxPartialBufferCount', ULONG),
                # number of bits.
                ('RxFilterContextWidth', UCHAR),
                ('CapabilityFlags', ULONG),
                # miniport-adapter-wide total maximum
                ('MaxNumberOfRxQueues', ULONG),
                # miniport-adapter-wide total maximum
                ('MaxNumberOfTxQueues', ULONG),
                ('MaxNumberOfRxQueuesForDefaultVport', ULONG),
                ('MaxNumberOfTxQueuesForDefaultVport', ULONG),
                ('MaxNumberOfRxQueuesPerNonDefaultVport', ULONG),
                ('MaxNumberOfTxQueuesPerNonDefaultVport', ULONG),
                # from the beginning of this struct
                ('ExactMatchProfileArrayOffset', ULONG),
                ('ExactMatchProfileArrayNumElements', ULONG),
                ('ExactMatchProfileArrayElementSize', ULONG),
                # from the beginning of this struct
                ('WildcardMatchProfileArrayOffset', ULONG),
                ('WildcardMatchProfileArrayNumElements', ULONG),
                ('WildcardMatchProfileArrayElementSize', ULONG),
                # ModerationInterval value to the nearest supported value.
                ('MinimumModerationInterval', ULONG),
                ('MaximumModerationInterval', ULONG),
                ('ModerationIntervalGranularity', ULONG),
                # 0 means the provider does not have a hard limit.
                ('MaxRxQueueSize', ULONG),
                ('MaxTxQueueSize', ULONG),
            ]
            NDIS_PD_CAPABILITIES_REVISION_1 = 1
            NDIS_SIZEOF_PD_CAPABILITIES_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_PD_CAPABILITIES,
                MaxTxQueueSize)
            )


            # The following structure is used by PD provider to make an NDIS
            # status
            # indication, NDIS_STATUS_PD_CURRENT_CONFIG, for conveying the
            # PD status and capabilities up to NDIS. PD client drivers can
            # also use
            # OID_PD_QUERY_CURRENT_CONFIG to query the current PD status and
            # capabilities.
            # Both NDIS_STATUS_PD_CURRENT_CONFIG and
            # OID_PD_QUERY_CURRENT_CONFIG are
            # Vport-aware. However, in the current PD version, the only valid
            # Vport
            # ID that can be used with this status indication and OID is
            # NDIS_INVALID_VPORT_ID, i.e., the scope and granularity of PD
            # status and
            # capability advertisement is the whole PF on the miniport adapter
            # (in contrast
            # to each individual Vport of the PF).
            _NDIS_PD_CONFIG._fields_ = [
                # Header.Size >= NDIS_SIZEOF_PD_CONFIG_REVISION_1;
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('Enabled', BOOLEAN),
                # CapabilitiesSize == 0 means no PD capability exists
                # currently.
                ('CapabilitiesOffset', ULONG),
                ('CapabilitiesSize', ULONG),
            ]
            NDIS_PD_CONFIG_REVISION_1 = 1
            NDIS_SIZEOF_PD_CONFIG_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_PD_CONFIG,
                CapabilitiesSize)
            )


            # NDIS miniport driver package adds this NDIS keyword in its INF
            # file
            # for devices that support PacketDirect. Mere presence of this
            # keyword
            # indicates PacketDirect capability (independent of its value).
            # Value 0
            # means PD functionality of the miniport adapter is disabled. Any
            # non-zero
            # value means PD functionality of the miniport adapter is enabled.
            PACKET_DIRECT_KEYWORD = NDIS_STRING_CONST("*PacketDirect")


            # GFT flow entry ID
            NDIS_GFT_FLOW_ENTRY_ID = ULONG_PTR
            PNDIS_GFT_FLOW_ENTRY_ID = POINTER(ULONG_PTR)
            NDIS_GFT_UNDEFINED_FLOW_ENTRY_ID = 0


            # GFT table data structures
            NDIS_GFT_TABLE_ID = ULONG
            PNDIS_GFT_TABLE_ID = POINTER(ULONG)
            NDIS_GFT_UNDEFINED_TABLE_ID = 0


            # flags used in Flags field of NDIS_GFT_TABLE_PARAMETERS
            NDIS_GFT_TABLE_INCLUDE_EXTERNAL_VPPORT = 0x00000001


            # NDIS_GFT_TABLE_PARAMETERS is used in OID_GFT_CREATE_TABLE
            NDIS_GFT_TABLE_PARAMETERS_REVISION_1 = 1


            _NDIS_GFT_TABLE_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('NextTableId', NDIS_GFT_TABLE_ID),
            ]
            NDIS_SIZEOF_GFT_TABLE_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_TABLE_PARAMETERS,
                NextTableId)
            )


            # NDIS_GFT_TABLE_INFO is used with NDIS_GFT_TABLE_INFO_ARRAY
            # in OID_GFT_ENUM_TABLES that enumerates GFT tables
            # on a miniport adapter
            NDIS_GFT_TABLE_INFO_REVISION_1 = 1


            _NDIS_GFT_TABLE_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('NextTableId', NDIS_GFT_TABLE_ID),
                ('NumFlowEntries', ULONG),
            ]
            NDIS_SIZEOF_GFT_TABLE_INFO_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_TABLE_INFO,
                NumFlowEntries)
            )


            # NDIS_GFT_TABLE_INFO_ARRAY is used in OID_GFT_ENUM_TABLES
            NDIS_GFT_TABLE_INFO_ARRAY_REVISION_1 = 1


            _NDIS_GFT_TABLE_INFO_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # from the beginning of this structure
                ('TableArrayOffset', ULONG),
                ('TableArrayNumElements', ULONG),
                ('TableArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_TABLE_INFO_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_TABLE_INFO_ARRAY,
                TableArrayElementSize)
            )


            # NDIS_GFT_DELETE_TABLE_PARAMETERS is used in
            # OID_GFT_DELETE_TABLE
            NDIS_GFT_DELETE_TABLE_PARAMETERS_REVISION_1 = 1


            _NDIS_GFT_DELETE_TABLE_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
            ]
            NDIS_SIZEOF_GFT_DELETE_TABLE_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_DELETE_TABLE_PARAMETERS,
                TableId)
            )


            # GFT counter structures
            NDIS_GFT_COUNTER_ID = ULONG
            PNDIS_GFT_COUNTER_ID = POINTER(ULONG)
            NDIS_GFT_UNDEFINED_COUNTER_ID = 0


            # maximum number of counter objects associated with a flow entry
            NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY = 8


            # NDIS_GFT_COUNTER_UPDATE_FREQUENCY is used with NDIS_GFT_COUNTER
            # in
            # OID_GFT_ALLOCATE_COUNTERS. This enum is also used in
            # NDIS_GFT_EXACT_MATCH_FLOW_ENTRY and
            # NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY structures used in
            # OID_GFT_ADD_FLOW_ENTRIES
            class _NDIS_GFT_COUNTER_UPDATE_FREQUENCY(ENUM):
                NdisGftCounterUpdateFrequencyUndefined = 1
                NdisGftCounterUpdateFrequencyOnQuery = 2
                NdisGftCounterUpdateFrequencyPerUpdatePeriod = 3
                NdisGftCounterUpdateFrequencyPerPacket = 4
                NdisGftCounterUpdateFrequencyMax = 5

            NDIS_GFT_COUNTER_UPDATE_FREQUENCY = _NDIS_GFT_COUNTER_UPDATE_FREQUENCY
            PNDIS_GFT_COUNTER_UPDATE_FREQUENCY = POINTER(_NDIS_GFT_COUNTER_UPDATE_FREQUENCY)


            # NDIS_GFT_COUNTER_TYPE enum value defines the type of the GFT
            # counter
            class _NDIS_GFT_COUNTER_TYPE(ENUM):
                NdisGftCounterTypeUndefined = 1
                NdisGftCounterTypePacketCounter = 2
                NdisGftCounterTypeByteCounter = 3
                NdisGftCounterTypePacketAndByteCounter = 4
                NdisGftCounterTypeMax = 5

            NDIS_GFT_COUNTER_TYPE = _NDIS_GFT_COUNTER_TYPE
            PNDIS_GFT_COUNTER_TYPE = POINTER(_NDIS_GFT_COUNTER_TYPE)
            struct _NDIS_GFT_PACKET_COUNTER_VALUE
            {
                    ULONG64                         Packets = volatile
            # Absolute system time returned from KeQuerySystemTime
            struct _NDIS_GFT_BYTE_COUNTER_VALUE
            {
                    ULONG64                         Bytes = volatile
            # Absolute system time returned from KeQuerySystemTime
            struct _NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE
            {
                    ULONG64                         Packets = volatile
            # Absolute system time returned from KeQuerySystemTime
            # NDIS_GFT_COUNTER_PARAMETERS is used in OID_GFT_ALLOCATE_COUNTERS
            NDIS_GFT_COUNTER_PARAMETERS_CLIENT_SPECIFIED_ADDRESS = 0x00000001
            NDIS_GFT_COUNTER_PARAMETERS_REVISION_1 = 1


            class CounterValuesBufferStart(ctypes.Union):
                pass


            CounterValuesBufferStart._fields_ = [
                ('PacketCounters', PNDIS_GFT_PACKET_COUNTER_VALUE),
                ('ByteCounters', PNDIS_GFT_BYTE_COUNTER_VALUE),
                ('PacketAndByteCounters', PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE),
            ]
            _NDIS_GFT_COUNTER_PARAMETERS.CounterValuesBufferStart = CounterValuesBufferStart


            _NDIS_GFT_COUNTER_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                ('CounterUpdateFrequency', NDIS_GFT_COUNTER_UPDATE_FREQUENCY),
                ('CounterType', NDIS_GFT_COUNTER_TYPE),
                ('CounterIdStart', NDIS_GFT_COUNTER_ID),
                ('NumCounters', ULONG),
                # in milliseconds
                ('UpdatePeriod', ULONG),
                ('CounterValuesBufferStart', _NDIS_GFT_COUNTER_PARAMETERS.CounterValuesBufferStart),
            ]
            NDIS_SIZEOF_GFT_COUNTER_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_COUNTER_PARAMETERS,
                CounterValuesBufferStart)
            )


            # NDIS_GFT_FREE_COUNTER_PARAMETERS is used in OID_GFT_FREE_COUNTERS
            NDIS_GFT_FREE_COUNTER_PARAMETERS_REVISION_1 = 1


            _NDIS_GFT_FREE_COUNTER_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                ('CounterIdStart', NDIS_GFT_COUNTER_ID),
                ('NumCounters', ULONG),
                # from the beginning of this structure
                ('LastCounterValueArrayOffset', ULONG),
                ('LastCounterValueArrayNumElements', ULONG),
                ('LastCounterValueArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_FREE_COUNTER_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_FREE_COUNTER_PARAMETERS,
                LastCounterValueArrayElementSize)
            )


            # NDIS_GFT_COUNTER_INFO is used with NDIS_GFT_COUNTER_INFO_ARRAY
            # in OID_GFT_ENUM_COUNTERS. OID_GFT_ENUM_COUNTERS enumerates the
            # allocated counters (types, frequency, etc.) and not their values
            NDIS_GFT_COUNTER_INFO_REVISION_1 = 1


            _NDIS_GFT_COUNTER_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('CounterIdStart', NDIS_GFT_COUNTER_ID),
                ('NumCounters', ULONG),
                ('CounterUpdateFrequency', NDIS_GFT_COUNTER_UPDATE_FREQUENCY),
                ('CounterType', NDIS_GFT_COUNTER_TYPE),
                # in milliseconds
                ('UpdatePeriod', ULONG),
            ]
            NDIS_SIZEOF_GFT_COUNTER_INFO_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_COUNTER_INFO,
                UpdatePeriod)
            )


            # NDIS_GFT_COUNTER_INFO_ARRAY is used in OID_GFT_ENUM_COUNTERS
            NDIS_GFT_COUNTER_INFO_ARRAY_REVISION_1 = 1


            _NDIS_GFT_COUNTER_INFO_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                # from the beginning of this structure
                ('CounterInfoArrayOffset', ULONG),
                ('CounterInfoArrayNumElements', ULONG),
                ('CounterInfoArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_COUNTER_INFO_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_COUNTER_INFO_ARRAY,
                CounterInfoArrayElementSize)
            )


            # NDIS_GFT_COUNTER_VALUE is used with NDIS_GFT_COUNTER_VALUE_ARRAY
            # in OID_GFT_COUNTER_VALUES
            class CounterValue(ctypes.Union):
                pass


            CounterValue._fields_ = [
                ('Packets', NDIS_GFT_PACKET_COUNTER_VALUE),
                ('Bytes', NDIS_GFT_BYTE_COUNTER_VALUE),
                ('PacketsAndBytes', NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE),
            ]
            _NDIS_GFT_COUNTER_VALUE.CounterValue = CounterValue


            _NDIS_GFT_COUNTER_VALUE._fields_ = [
                ('CounterType', NDIS_GFT_COUNTER_TYPE),
                ('CounterValue', _NDIS_GFT_COUNTER_VALUE.CounterValue),
            ]


            # NDIS_GFT_COUNTER_VALUE_ARRAY is used in OID_GFT_COUNTER_VALUES
            # flags used in Flags field of NDIS_GFT_COUNTER_VALUE_ARRAY
            NDIS_GFT_COUNTER_VALUE_ARRAY_UPDATE_MEMORY_MAPPED_COUNTERS = (
                0x00000001
            )
            NDIS_GFT_COUNTER_VALUE_ARRAY_GET_VALUES = 0x00000002


            class _NDIS_GFT_COUNTER_VALUE_QUERY_METHOD(ENUM):
                NdisGftQueryValueQueryMethodUndefined = 1
                NdisGftQueryValueQueryMethodUsingCounterIds = 2
                NdisGftQueryValueQueryMethodUsingFlowEntryIds = 3
                NdisGftQueryValueQueryMethodVPortFlowEntries = 4
                NdisGftQueryValueQueryMethodAllFlowEntries = 5
                NdisGftQueryValueQueryMethodMax = 6

            NDIS_GFT_COUNTER_VALUE_QUERY_METHOD = _NDIS_GFT_COUNTER_VALUE_QUERY_METHOD
            PNDIS_GFT_COUNTER_VALUE_QUERY_METHOD = POINTER(_NDIS_GFT_COUNTER_VALUE_QUERY_METHOD)


            # NDIS_GFT_COUNTER_VALUE_ARRAY is used in OID_GFT_COUNTER_VALUES
            NDIS_GFT_COUNTER_VALUE_ARRAY_REVISION_1 = 1


            class StartId(ctypes.Union):
                pass


            StartId._fields_ = [
                ('FlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('CounterId', NDIS_GFT_COUNTER_ID),
            ]
            _NDIS_GFT_COUNTER_VALUE_ARRAY.StartId = StartId


            _NDIS_GFT_COUNTER_VALUE_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                ('StartId', _NDIS_GFT_COUNTER_VALUE_ARRAY.StartId),
                ('NumCounters', ULONG),
                # from the beginning of this structure
                ('CounterValueArrayOffset', ULONG),
                ('CounterValueArrayNumElements', ULONG),
                ('CounterValueArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_COUNTER_VALUE_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_COUNTER_VALUE_ARRAY,
                CounterValueArrayElementSize)
            )


            # NDIS_GFT_STATISTICS is used in OID_GFT_STATISTICS
            NDIS_GFT_STATISTICS_REVISION_1 = 1


            _NDIS_GFT_STATISTICS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # required
                ('TableId', NDIS_GFT_TABLE_ID),
                # optional
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                # optional
                ('ProviderFlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('Packets', ULONG64),
                ('Bytes', ULONG64),
                # used with TableId and VPortId
                ('L1CacheHits', ULONG64),
                # used with TableId and VPortId
                ('L2CacheHits', ULONG64),
                # used with TableId and VPortId
                ('L3CacheHits', ULONG64),
                # used with TableId and VPortId
                ('L1CacheMisses', ULONG64),
                # used with TableId and VPortId
                ('L2CacheMisses', ULONG64),
                # used with TableId and VPortId
                ('L3CacheMisses', ULONG64),
            ]
            NDIS_SIZEOF_GFT_STATISTICS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_STATISTICS,
                L3CacheMisses)
            )


            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION specifies the action
            # that must
            # be taken on a single header group
            class _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION(ENUM):
                NdisGftHeaderGroupTranspositionActionUndefined = 1
                NdisGftHeaderGroupTranspositionActionModify = 2
                NdisGftHeaderGroupTranspositionActionIgnore = 3
                NdisGftHeaderGroupTranspositionActionPush = 4
                NdisGftHeaderGroupTranspositionActionPop = 5
                NdisGftHeaderGroupTranspositionActionMax = 6

            NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION = _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION
            PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION = POINTER(_NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION)


            # flags used in Flags fields of
            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE
            NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_DECREMENT_TTL_IF_NOT_ONE = (
                0x00000001
            )


            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE defines a header
            # transposition profile
            # for a single header group
            # An array of NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTIONs are used
            # in
            # NDIS_GFT_HEADER_TRANSPOSITION_PROFILE structure to define a
            # full transposition profile
            NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_REVISION_1 = 1


            _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('Action', NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION),
                # NDIS_GFP_HEADER_PRESENT_xxx
                ('HeadersPresent', ULONG),
                # NDIS_GFP_HEADER_FIELD_xxx
                ('HeaderFields', ULONG),
            ]
            NDIS_SIZEOF_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE,
                HeaderFields)
            )
            NDIS_GFT_CUSTOM_ACTION_TYPE = ULONG
            PNDIS_GFT_CUSTOM_ACTION_TYPE = POINTER(ULONG)
            NDIS_GFT_UNDEFINED_CUSTOM_ACTION = 0

            # custom action codes up to 256 are reserved
            NDIS_GFT_RESERVED_CUSTOM_ACTIONS = 256

            # NDIS_GFT_CUSTOM_ACTION_PROFILE is used in
            # NDIS_GFT_HEADER_TRANSPOSITION_PROFILE
            # structure in order to describe a custom action profile. Custom
            # actions profiles follow
            # a TLV (Type Length Value) format to allow linking multiple
            # custom action profiles.
            NDIS_GFT_CUSTOM_ACTION_PROFILE_REVISION_1 = 1


            class _Union_5(ctypes.Union):
                pass


            _Union_5._fields_ = [
                ('Alignment', ULONG_PTR),
                ('ActionProfileData', UCHAR * 1),
            ]
            _NDIS_GFT_CUSTOM_ACTION_PROFILE._Union_5 = _Union_5

            _NDIS_GFT_CUSTOM_ACTION_PROFILE._anonymous_ = (
                '_Union_5',
            )

            _NDIS_GFT_CUSTOM_ACTION_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                ('Type', NDIS_GFT_CUSTOM_ACTION_TYPE),
                ('Length', ULONG),
                ('_Union_5', _NDIS_GFT_CUSTOM_ACTION_PROFILE._Union_5),
            ]
            NDIS_SIZEOF_NDIS_GFT_CUSTOM_ACTION_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_CUSTOM_ACTION_PROFILE,
                Alignment)
            )

            # NDIS_GFT_HEADER_TRANSPOSITION_PROFILE is used in
            # OID_GFT_HEADER_TRANSPOSITION_PROFILE
            # This structure defines a transposition profile for multiple
            # header groups
            # flags used with Flags field of
            # NDIS_GFT_HEADER_TRANSPOSITION_PROFILE
            # HTP=Header Transposition Profile
            NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 0x00000001
            NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 0x00000002
            NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000004
            )
            NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000008
            )
            NDIS_GFT_HTP_COPY_ALL_PACKETS = 0x00000010
            NDIS_GFT_HTP_COPY_FIRST_PACKET = 0x00000020
            NDIS_GFT_HTP_COPY_WHEN_TCP_FLAG_SET = 0x00000040
            NDIS_GFT_HTP_CUSTOM_ACTION_PRESENT = 0x00000080
            NDIS_GFT_HTP_META_ACTION_BEFORE_HEADER_TRANSPOSITION = 0x00000100
            NDIS_GFT_HEADER_TRANSPOSITION_PROFILE_REVISION_1 = 1


            _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                # from the beginning of this structure
                ('HeaderGroupTranspositionProfileArrayOffset', ULONG),
                ('HeaderGroupTranspositionProfileArrayNumElements', ULONG),
                ('HeaderGroupTranspositionProfileArrayElementSize', ULONG),
                # the offset to the beginning of the custom action profile TLVs
                ('CustomActionProfileOffset', ULONG),
            ]
            NDIS_SIZEOF_GFT_HEADER_TRANSPOSITION_PROFILE_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_HEADER_TRANSPOSITION_PROFILE,
                CustomActionProfileOffset)
            )


            # flags used in Flags fields of NDIS_GFT_HEADER_GROUP_TRANSPOSITION
            NDIS_GFT_HEADER_GROUP_TRANSPOSITION_DECREMENT_TTL_IF_NOT_ONE = (
                0x00000001
            )


            # NDIS_GFT_HEADER_GROUP_TRANSPOSITION is used in
            # NDIS_GFT_EXACT_MATCH_FLOW_ENTRY
            NDIS_GFT_HEADER_GROUP_TRANSPOSITION_REVISION_1 = 1


            class IPAddress(ctypes.Union):
                pass


            class IPv4Address(ctypes.Structure):
                pass


            IPv4Address._fields_ = [
                ('SourceIPAddress', IN_ADDR),
                ('DestinationIPAddress', IN_ADDR),
            ]
            IPAddress.IPv4Address = IPv4Address


            class IPv6Address(ctypes.Structure):
                pass


            IPv6Address._fields_ = [
                ('SourceIPAddress', IN6_ADDR),
                ('DestinationIPAddress', IN6_ADDR),
            ]
            IPAddress.IPv6Address = IPv6Address


            IPAddress._fields_ = [
                ('IPv4Address', IPAddress.IPv4Address),
                ('IPv6Address', IPAddress.IPv6Address),
            ]
            _NDIS_GFT_HEADER_GROUP_TRANSPOSITION.IPAddress = IPAddress


            class TransportOrEncapsulation(ctypes.Union):
                pass


            class Udp(ctypes.Structure):
                pass


            Udp._fields_ = [
                ('SourcePort', USHORT),
                ('DestinationPort', USHORT),
            ]
            TransportOrEncapsulation.Udp = Udp


            class Tcp(ctypes.Structure):
                pass


            Tcp._fields_ = [
                ('SourcePort', USHORT),
                ('DestinationPort', USHORT),
            ]
            TransportOrEncapsulation.Tcp = Tcp


            class Encapsulation(ctypes.Structure):
                pass


            Encapsulation._fields_ = [
                ('TenantId', ULONG),
                ('GreProtocol', USHORT),
                ('Entropy', USHORT),
            ]
            TransportOrEncapsulation.Encapsulation = Encapsulation


            TransportOrEncapsulation._fields_ = [
                ('Udp', TransportOrEncapsulation.Udp),
                ('Tcp', TransportOrEncapsulation.Tcp),
                ('Encapsulation', TransportOrEncapsulation.Encapsulation),
            ]
            _NDIS_GFT_HEADER_GROUP_TRANSPOSITION.TransportOrEncapsulation = TransportOrEncapsulation


            _NDIS_GFT_HEADER_GROUP_TRANSPOSITION._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('Action', NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION),
                # NDIS_GFP_HEADER_PRESENT_xxx
                ('HeadersPresent', ULONG),
                # NDIS_GFP_HEADER_FIELD_xxx
                ('HeaderFields', ULONG64),
                # Ethernet header
                ('EthernetFields', NDIS_GFP_ETHERNET_HEADER_FIELDS),
                # IP header
                ('IPAddress', _NDIS_GFT_HEADER_GROUP_TRANSPOSITION.IPAddress),
                ('Ttl', UINT8),
                ('Dscp', UINT8),
                ('IPProtocol', UINT8),
                # transport / encapsulation header
                ('TransportOrEncapsulation', _NDIS_GFT_HEADER_GROUP_TRANSPOSITION.TransportOrEncapsulation),
            ]
            NDIS_SIZEOF_GFT_HEADER_GROUP_TRANSPOSITION_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_HEADER_GROUP_TRANSPOSITION,
                TransportOrEncapsulation)
            )


            # NDIS_GFT_FLOW_ENTRY_CACHE_HINT is used to provide a hint to the
            # GFT offload provider
            # so it can use its resources more efficiently
            class _NDIS_GFT_FLOW_ENTRY_CACHE_HINT(ENUM):
                NdisGftFlowEntryCacheHintUndefined = 0
                NdisGftFlowEntryCacheHintLowFrequency = 100
                NdisGftFlowEntryCacheHintMediumFrequency = 200
                NdisGftFlowEntryCacheHintHighFrequency = 300
                NdisGftFlowEntryCacheHintMax = 1000

            NDIS_GFT_FLOW_ENTRY_CACHE_HINT = _NDIS_GFT_FLOW_ENTRY_CACHE_HINT
            PNDIS_GFT_FLOW_ENTRY_CACHE_HINT = POINTER(_NDIS_GFT_FLOW_ENTRY_CACHE_HINT)


            class _NDIS_GFT_FLOW_ENTRY_STATE(ENUM):
                NdisGftFlowEntryStateUndefined = 1
                NdisGftFlowEntryStateDeactivated = 2
                NdisGftFlowEntryStateActivated = 3
                NdisGftFlowEntryStateMax = 4

            NDIS_GFT_FLOW_ENTRY_STATE = _NDIS_GFT_FLOW_ENTRY_STATE
            PNDIS_GFT_FLOW_ENTRY_STATE = POINTER(_NDIS_GFT_FLOW_ENTRY_STATE)


            # NDIS_GFT_CUSTOM_ACTION is used in NDIS_GFT_EXACT_MATCH_FLOW_ENTRY
            # structure in order to describe a custom action. Custom actions
            # follow
            # a TLV (Type Length Value) format to allow linking multiple
            # custom actions.
            # flags used in NDIS_GFT_CUSTOM_ACTION
            NDIS_GFT_CUSTOM_ACTION_LAST_ACTION = 0x00000001
            NDIS_GFT_CUSTOM_ACTION_REVISION_1 = 1


            class _Union_6(ctypes.Union):
                pass


            _Union_6._fields_ = [
                ('Alignment', ULONG_PTR),
                ('ActionData', UCHAR * 1),
            ]
            _NDIS_GFT_CUSTOM_ACTION._Union_6 = _Union_6

            _NDIS_GFT_CUSTOM_ACTION._anonymous_ = (
                '_Union_6',
            )

            _NDIS_GFT_CUSTOM_ACTION._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                ('Type', NDIS_GFT_CUSTOM_ACTION_TYPE),
                ('Length', ULONG),
                ('_Union_6', _NDIS_GFT_CUSTOM_ACTION._Union_6),
            ]
            NDIS_SIZEOF_NDIS_GFT_CUSTOM_ACTION_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_CUSTOM_ACTION,
                Alignment)
            )


            # NDIS_GFT_EXACT_MATCH_FLOW_ENTRY is used with
            # NDIS_GFT_FLOW_ENTRY_ARRAY
            # that is used in OID_GFT_ADD_FLOW_ENTRIES and
            # OID_GFT_FLOW_ENTRY_PARAMETERS.
            # And with NDIS_GFT_FLOW_ENTRY_INFO_ARRAY that is used in
            # OID_GFT_ENUM_FLOW_ENTRIES
            # flags used in Flags field of NDIS_GFT_EXACT_MATCH_FLOW_ENTRY.
            # EMFE = Exact Match Flow Entry
            # used with OID_GFT_ADD_FLOW_ENTRIES
            NDIS_GFT_EMFE_ADD_IN_ACTIVATED_STATE = 0x00000001
            NDIS_GFT_EMFE_MATCH_AND_ACTION_MUST_BE_SUPPORTED = 0x00000002

            # used with OID_GFT_ADD_FLOW_ENTRIES, OID_GFT_ENUM_FLOW_ENTRIES
            NDIS_GFT_EMFE_RDMA_FLOW = 0x00000004

            # used with OID_GFT_ADD_FLOW_ENTRIES, OID_GFT_ENUM_FLOW_ENTRIES,
            # OID_GFT_FLOW_ENTRY_PARAMETERS
            NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 0x00001000
            NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 0x00002000
            NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00004000
            )
            NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00008000
            )
            NDIS_GFT_EMFE_COPY_ALL_PACKETS = 0x00010000
            NDIS_GFT_EMFE_COPY_FIRST_PACKET = 0x00020000
            NDIS_GFT_EMFE_COPY_WHEN_TCP_FLAG_SET = 0x00040000
            NDIS_GFT_EMFE_CUSTOM_ACTION_PRESENT = 0x00080000
            NDIS_GFT_EMFE_META_ACTION_BEFORE_HEADER_TRANSPOSITION = 0x00100000
            NDIS_GFT_EMFE_COPY_AFTER_TCP_FIN_FLAG_SET = 0x00200000
            NDIS_GFT_EMFE_COPY_AFTER_TCP_RST_FLAG_SET = 0x00400000

            # used with OID_GFT_FLOW_ENTRY_PARAMETERS
            NDIS_GFT_EMFE_COPY_CONDITION_CHANGED = 0x01000000
            NDIS_GFT_EMFE_ALL_VPORT_FLOW_ENTRIES = 0x02000000

            # flags used in CounterFlags field of of
            # NDIS_GFT_EXACT_MATCH_FLOW_ENTRY.
            # EMFE = Exact Match Flow Entry
            NDIS_GFT_EMFE_COUNTER_ALLOCATE = 0x00000001
            NDIS_GFT_EMFE_COUNTER_MEMORY_MAPPED = 0x00000002
            NDIS_GFT_EMFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = 0x00000004
            NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_REVISION_1 = 1


            class CounterValueBuffer(ctypes.Union):
                pass


            CounterValueBuffer._fields_ = [
                ('PacketCounterAddress', PNDIS_GFT_PACKET_COUNTER_VALUE),
                ('ByteCounterAddress', PNDIS_GFT_BYTE_COUNTER_VALUE),
                ('PacketAndByteCounterAddress', PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE),
            ]
            _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY.CounterValueBuffer = CounterValueBuffer


            _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                # the ID of either ingress or egress VPort
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('MatchProfileId', NDIS_GFP_PROFILE_ID),
                # allocation or activation status for this flow entry
                ('MatchRequestStatus', NDIS_STATUS),
                ('ActionRequestStatus', NDIS_STATUS),
                ('CounterFlags', ULONG),
                ('CounterUpdateFrequency', NDIS_GFT_COUNTER_UPDATE_FREQUENCY),
                ('CounterType', NDIS_GFT_COUNTER_TYPE),
                # in milliseconds
                ('UpdatePeriod', ULONG),
                ('CounterValueBuffer', _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY.CounterValueBuffer),
                # optional
                ('HeaderTranspositionProfileId', NDIS_GFP_PROFILE_ID),
                # valid only if NDIS_GFT_EMFE_REDIRECT_TO_xxx_VPORT is set
                ('RedirectionVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                # valid only if NDIS_GFT_EMFE_REDIRECT_TO_xxx_IF_TTL_IS_ONE is
                # set
                ('TtlIsOneRedirectionVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('NumCounterObjects', ULONG),
                ('NDIS_GFT_COUNTER_ID                CounterIdArray', _In_ * NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY),
                ('CacheHint', NDIS_GFT_FLOW_ENTRY_CACHE_HINT),
                ('ClientFlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('ProviderFlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                # _Out_ for Enum
                ('FlowEntryState', NDIS_GFT_FLOW_ENTRY_STATE),
                # from the beginning of this structure
                ('HeaderGroupExactMatchArrayOffset', ULONG),
                ('HeaderGroupExactMatchArrayNumElements', ULONG),
                ('HeaderGroupExactMatchArrayElementSize', ULONG),
                # from the beginning of this structure
                ('HeaderGroupTranspositionArrayOffset', ULONG),
                ('HeaderGroupTranspositionArrayNumElements', ULONG),
                ('HeaderGroupTranspositionArrayElementSize', ULONG),
                # the offset to the beginning of custom action TLVs
                ('CustomActionOffset', ULONG),
            ]
            NDIS_SIZEOF_GFT_EXACT_MATCH_FLOW_ENTRY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_EXACT_MATCH_FLOW_ENTRY,
                CustomActionOffset)
            )

            # wildcard GFT entries
            class _NDIS_GFT_WILDCARD_ACTION(ENUM):
                NdisGftWildcardActionUndefined = 1
                NdisGftWildcardActionAllow = 2
                NdisGftWildcardActionDrop = 3
                NdisGftWildcardActionMax = 4

            NDIS_GFT_WILDCARD_ACTION = _NDIS_GFT_WILDCARD_ACTION
            PNDIS_GFT_WILDCARD_ACTION = POINTER(_NDIS_GFT_WILDCARD_ACTION)

            # flags used in Flags field of NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY
            # WCFE = Wildcard Flow Entry
            NDIS_GFT_WCFE_ADD_IN_ACTIVATED_STATE = 0x00000001
            NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 0x00000002
            NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 0x00000004
            NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000008
            )
            NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000010
            )
            NDIS_GFT_WCFE_COPY_ALL_PACKETS = 0x00000020
            NDIS_GFT_WCFE_CUSTOM_ACTION_PRESENT = 0x00000040

            # flags used in CounterFlags field of of
            # NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY.
            # WCFE = Wildcard Flow Entry
            NDIS_GFT_WCFE_COUNTER_ALLOCATE = 0x00000001
            NDIS_GFT_WCFE_COUNTER_MEMORY_MAPPED = 0x00000002
            NDIS_GFT_WCFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = 0x00000004

            # NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY is used with
            # NDIS_GFT_FLOW_ENTRY_ARRAY
            # that is used in OID_GFT_ADD_FLOW_ENTRT and
            # OID_GFT_FLOW_ENTRY_PARAMETERS
            # and with NDIS_GFT_FLOW_ENTRY_INFO_ARRAY that is used in
            # OID_GFT_ENUM_FLOW_ENTRIES
            NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_REVISION_1 = 1


            class CounterValueBuffer(ctypes.Union):
                pass


            CounterValueBuffer._fields_ = [
                ('PacketCounterAddress', PNDIS_GFT_PACKET_COUNTER_VALUE),
                ('ByteCounterAddress', PNDIS_GFT_BYTE_COUNTER_VALUE),
                ('PacketAndByteCounterAddress', PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE),
            ]
            _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY.CounterValueBuffer = CounterValueBuffer


            _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                # the ID of either ingress or egress VPort
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('MatchProfileId', NDIS_GFP_PROFILE_ID),
                # allocation or activation status for this flow entry
                ('MatchRequestStatus', NDIS_STATUS),
                ('ActionRequestStatus', NDIS_STATUS),
                ('CounterFlags', ULONG),
                ('CounterUpdateFrequency', NDIS_GFT_COUNTER_UPDATE_FREQUENCY),
                ('CounterType', NDIS_GFT_COUNTER_TYPE),
                # in milliseconds
                ('UpdatePeriod', ULONG),
                ('CounterValueBuffer', _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY.CounterValueBuffer),
                ('Priority', ULONG),
                ('Action', NDIS_GFT_WILDCARD_ACTION),
                # valid only if NDIS_GFT_WCFE_REDIRECT_TO_xxx_QUEUE_OF_VPORT
                # is set
                ('RedirectionVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                # valid only if NDIS_GFT_WCFE_REDIRECT_TO_xxx_IF_TTL_IS_ONE is
                # set
                ('TtlIsOneRedirectionVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('NumCounterObjects', ULONG),
                ('NDIS_GFT_COUNTER_ID                CounterIdArray', _In_ * NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY),
                ('CacheHint', NDIS_GFT_FLOW_ENTRY_CACHE_HINT),
                ('ClientFlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('ProviderFlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('FlowState', NDIS_GFT_FLOW_ENTRY_STATE),
                # from the beginning of this structure
                ('HeaderGroupWildcardMatchArrayOffset', ULONG),
                ('HeaderGroupWildcardMatchArrayNumElements', ULONG),
                ('HeaderGroupWildcardMatchArrayElementSize', ULONG),
                # the offset to the beginning of custom action TLVs
                ('CustomActionOffset', ULONG),
            ]
            NDIS_SIZEOF_GFT_WILDCARD_MATCH_FLOW_ENTRY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY,
                CustomActionOffset)
            )

            # NDIS_GFT_PROFILE_TYPE enum type is used as ProfileType field in
            # NDIS_GFT_PROFILE_INFO
            class _NDIS_GFT_PROFILE_TYPE(ENUM):
                NdisGftProfileTypeUndefined = 1
                NdisGftProfileTypeExactMatch = 2
                NdisGftProfileTypeHeaderTransposition = 3
                NdisGftProfileTypeWildcardMatch = 4
                NdisGftProfileTypeMax = 5

            NDIS_GFT_PROFILE_TYPE = _NDIS_GFT_PROFILE_TYPE
            PNDIS_GFT_PROFILE_TYPE = POINTER(_NDIS_GFT_PROFILE_TYPE)

            # NDIS_GFT_PROFILE_INFO is used in NDIS_GFT_PROFILE_INFO_ARRAY
            NDIS_GFT_PROFILE_INFO_REVISION_1 = 1


            _NDIS_GFT_PROFILE_INFO._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('ProfileType', NDIS_GFT_PROFILE_TYPE),
                ('TableType', NDIS_GFP_TABLE_TYPE),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
                ('NumSupportedFlowEntries', ULONG),
                ('NumCurrentFlowEntries', ULONG),
                # from the beginning of this structure
                ('HeaderGroupArrayOffset', ULONG),
                ('HeaderGroupArrayNumElements', ULONG),
                ('HeaderGroupArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_PROFILE_INFO_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_PROFILE_INFO,
                HeaderGroupArrayElementSize)
            )

            # NDIS_GFT_PROFILE_INFO_ARRAY is used in OID_GFT_ENUM_PROFILES
            NDIS_GFT_PROFILE_INFO_ARRAY_REVISION_1 = 1


            _NDIS_GFT_PROFILE_INFO_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                # from the beginning of this structure
                ('ProfileInfoArrayOffset', ULONG),
                ('ProfileInfoArrayNumElements', ULONG),
                ('ProfileInfoArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_PROFILE_INFO_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_PROFILE_INFO_ARRAY,
                ProfileArrayElementSize)
            )

            # flags used in NDIS_GFT_DELETE_PROFILE_PARAMETERS structure
            NDIS_GFT_DELETE_PROFILE_ALL_PROFILES = 0x00000001

            # NDIS_GFT_DELETE_PROFILE_PARAMETERS is used in
            # OID_GFT_DELETE_PROFILE
            NDIS_GFT_DELETE_PROFILE_PARAMETERS_REVISION_1 = 1


            _NDIS_GFT_DELETE_PROFILE_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('ProfileId', NDIS_GFP_PROFILE_ID),
            ]
            NDIS_SIZEOF_GFT_DELETE_PROFILE_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_DELETE_PROFILE_PARAMETERS,
                ProfileId)
            )


            class _NDIS_GFT_FLOW_ENTRY_TYPE(ENUM):
                NdisGftFlowEntryTypeUndefined = 1
                NdisGftFlowEntryTypeExactMatch = 2
                NdisGftFlowEntryTypeWildcard = 3
                NdisGftFlowEntryTypeMax = 4

            NDIS_GFT_FLOW_ENTRY_TYPE = _NDIS_GFT_FLOW_ENTRY_TYPE
            PNDIS_GFT_FLOW_ENTRY_TYPE = POINTER(_NDIS_GFT_FLOW_ENTRY_TYPE)

            # NDIS_GFT_FLOW_ENTRY_ARRAY is used in OID_GFT_ADD_FLOW_ENTRIES
            # OID_GFT_FLOW_ENTRY_PARAMETERS
            NDIS_GFT_FLOW_ENTRY_ARRAY_REVISION_1 = 1


            _NDIS_GFT_FLOW_ENTRY_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('EntryType', NDIS_GFT_FLOW_ENTRY_TYPE),
                # from the beginning of this structure
                ('FlowEntryArrayOffset', ULONG),
                ('FlowEntryArrayNumElements', ULONG),
                ('FlowEntryArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_FLOW_ENTRY_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_FLOW_ENTRY_ARRAY,
                FlowEntryArrayElementSize)
            )

            # flags used in NDIS_GFT_FLOW_ENTRY_INFO_ARRAY structure
            NDIS_GFT_FLOW_ENTRY_INFO_ALL_FLOW_ENTRIES = 0x00000001

            # NDIS_GFT_FLOW_ENTRY_INFO_ARRAY is used in
            # OID_GFT_ENUM_FLOW_ENTRIES
            NDIS_GFT_FLOW_ENTRY_INFO_ARRAY_REVISION_1 = 1


            _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                # a single call
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('ProviderFlowEntryIdStart', NDIS_GFT_FLOW_ENTRY_ID),
                ('FlowEntryIdCount', ULONG),
                # from the beginning of this structure
                ('FlowEntryInfoArrayOffset', ULONG),
                ('FlowEntryInfoArrayNumElements', ULONG),
                ('FlowEntryInfoArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_GFT_FLOW_ENTRY_INFO_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_FLOW_ENTRY_INFO_ARRAY,
                FlowEntryInfoArrayElementSize)
            )

            # flags used in NDIS_GFT_FLOW_ENTRY_ID_ARRAY structure
            NDIS_GFT_FLOW_ENTRY_ID_ALL_NIC_SWITCH_FLOW_ENTRIES = 0x00000001
            NDIS_GFT_FLOW_ENTRY_ID_ALL_TABLE_FLOW_ENTRIES = 0x00000002
            NDIS_GFT_FLOW_ENTRY_ID_ALL_VPORT_FLOW_ENTRIES = 0x00000004
            NDIS_GFT_FLOW_ENTRY_ID_RANGE_DEFINED = 0x00000008
            NDIS_GFT_FLOW_ENTRY_ID_ARRAY_DEFINED = 0x00000010
            NDIS_GFT_FLOW_ENTRY_ID_ARRAY_COUNTER_VALUES = 0x00010000

            # In NDIS 6.50, NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER structure is
            # used in
            # NDIS_GFT_FLOW_ENTRY_ID_ARRAY with OID_GFT_DELETE_FLOW_ENTRIES or
            # OID_GFT_DEACTIVATE_FLOW_ENTRIES
            _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER._fields_ = [
                ('FlowEntryId', NDIS_GFT_FLOW_ENTRY_ID),
                ('CounterValue', NDIS_GFT_COUNTER_VALUE),
            ]

            # NDIS_GFT_FLOW_ENTRY_ID_ARRAY is used in
            # OID_GFT_DELETE_FLOW_ENTRIES, OID_GFT_ACTIVATE_FLOW_ENTRIES
            # and OID_GFT_DEACTIVATE_FLOW_ENTRIES
            NDIS_GFT_FLOW_ENTRY_ID_ARRAY_REVISION_1 = 1


            class FlowEntryIdArray(ctypes.Structure):
                pass


            FlowEntryIdArray._fields_ = [
                # from the beginning of this structure
                ('ProviderFlowEntryIdArrayOffset', ULONG),
                ('ProviderFlowEntryIdArrayNumElements', ULONG),
                ('ProviderFlowEntryIdArrayElementSize', ULONG),
            ]
            _NDIS_GFT_FLOW_ENTRY_ID_ARRAY.FlowEntryIdArray = FlowEntryIdArray


            class FlowEntryIdAndCounterArray(ctypes.Structure):
                pass


            FlowEntryIdAndCounterArray._fields_ = [
                # from the beginning of this structure
                ('ProviderFlowEntryIdAndCounterArrayOffset', ULONG),
                ('ProviderFlowEntryIdAndCounterArrayNumElements', ULONG),
                ('ProviderFlowEntryIdAndCounterArrayElementSize', ULONG),
            ]
            _NDIS_GFT_FLOW_ENTRY_ID_ARRAY.FlowEntryIdAndCounterArray = FlowEntryIdAndCounterArray


            _NDIS_GFT_FLOW_ENTRY_ID_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('TableId', NDIS_GFT_TABLE_ID),
                # a single call
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),
                ('FlowEntryIdArray', _NDIS_GFT_FLOW_ENTRY_ID_ARRAY.FlowEntryIdArray),
                ('FlowEntryIdAndCounterArray', _NDIS_GFT_FLOW_ENTRY_ID_ARRAY.FlowEntryIdAndCounterArray),
                ('} IdArray', union),
            ]
            NDIS_SIZEOF_GFT_FLOW_ENTRY_ID_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_FLOW_ENTRY_ID_ARRAY,
                IdArray)
            
            )
            # Flags used in NDIS_GFT_OFFLOAD_PARAMETERS
            NDIS_GFT_OFFLOAD_PARAMETERS_ENABLE_OFFLOAD = 0x00000001
            # NDIS_GFT_OFFLOAD_PARAMETERS is used in OID_GFT_GLOBAL_PARAMETERS
            # and NDIS_STATUS_GFT_OFFLOAD_CURRENT_CONFIG status indication
            NDIS_GFT_OFFLOAD_PARAMETERS_REVISION_1 = 1
            _NDIS_GFT_OFFLOAD_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),

                # Copy and sample VPorts are the same as the exception VPort
                ('ExceptionVPortId', NDIS_NIC_SWITCH_VPORT_ID),

                # The aggregated length of the headers that are copied
                ('CopyLookaheadLength', ULONG),
                ('SampleLookaheadLength', ULONG),
            ]
            NDIS_SIZEOF_GFT_OFFLOAD_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_OFFLOAD_PARAMETERS,
                SampleLookaheadLength)
            
            )
            # NDIS_GFT_OFFLOAD_CAPABILITIES is used in
            # OID_GFT_HARDWARE_CAPABILITIES,
            # OID_GFT_CURRENT_CAPABILITIES,
            # NDIS_STATUS_GFT_OFFLOAD_CURRENT_CAPABILITIES
            # and NDIS_STATUS_GFT_OFFLOAD_HARDWARE_CAPABILITIES
            # flags used in Flags field of NDIS_GFT_OFFLOAD_CAPABILITIES
            NDIS_GFT_OFFLOAD_CAPS_ADD_FLOW_ENTRY_DEACTIVATED_PREFERRED = (
                0x00000001
            )
            NDIS_GFT_OFFLOAD_CAPS_RATE_LIMITING_QUEUE_SUPPORTED = 0x00000002
            # flags used in CounterCapabilities field of
            # NDIS_GFT_OFFLOAD_CAPABILITIES
            NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_COUNTERS = 0x00000001
            NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_PAKCET_AND_BYTE_COUNTERS = (
                0x00000002
            )
            NDIS_GFT_OFFLOAD_CAPS_PER_FLOW_ENTRY_COUNTERS = 0x00000004
            NDIS_GFT_OFFLOAD_CAPS_PER_PACKET_COUNTER_UPDATE = 0x00000008
            NDIS_GFT_OFFLOAD_CAPS_CLIENT_SPECIFIED_MEMORY_MAPPED_COUNTERS = (
                0x00000010
            )
            NDIS_GFT_OFFLOAD_CAPS_INGRESS_AGGREGATE_COUNTERS = 0x00000020
            NDIS_GFT_OFFLOAD_CAPS_EGRESS_AGGREGATE_COUNTERS = 0x00000040
            # flags used in SupportedTableTypes field of
            # NDIS_GFT_OFFLOAD_CAPABILITIES
            NDIS_GFT_OFFLOAD_CAPS_INGRESS_WILDCARD_MATCH = 0x00000001
            NDIS_GFT_OFFLOAD_CAPS_EGRESS_WILDCARD_MATCH = 0x00000002
            NDIS_GFT_OFFLOAD_CAPS_INGRESS_EXACT_MATCH = 0x00000004
            NDIS_GFT_OFFLOAD_CAPS_EGRESS_EXACT_MATCH = 0x00000008
            NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_WILDCARD_MATCH = 0x00000010
            NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_WILDCARD_MATCH = 0x00000020
            NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_EXACT_MATCH = 0x00000040
            NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_EXACT_MATCH = 0x00000080
            # supported actions
            NDIS_GFT_OFFLOAD_CAPS_POP = 0x00000001
            NDIS_GFT_OFFLOAD_CAPS_PUSH = 0x00000002
            NDIS_GFT_OFFLOAD_CAPS_MODIFY = 0x00000004
            NDIS_GFT_OFFLOAD_CAPS_IGNORE_ACTION_SUPPORTED = 0x00000008
            NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = (
                0x00000010
            )
            NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = (
                0x00000020
            )
            NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000040
            )
            NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = (
                0x00000080
            )
            NDIS_GFT_OFFLOAD_CAPS_COPY_ALL = 0x00000100
            NDIS_GFT_OFFLOAD_CAPS_COPY_FIRST = 0x00000200
            NDIS_GFT_OFFLOAD_CAPS_COPY_WHEN_TCP_FLAG_SET = 0x00000400
            NDIS_GFT_OFFLOAD_CAPS_SAMPLE = 0x00000800
            NDIS_GFT_OFFLOAD_CAPS_META_ACTION_BEFORE_HEADER_TRANSPOSITION = (
                0x00001000
            )
            NDIS_GFT_OFFLOAD_CAPS_META_ACTION_AFTER_HEADER_TRANSPOSITION = (
                0x00002000
            )
            NDIS_GFT_OFFLOAD_CAPS_PER_VPORT_EXCEPTION_VPORT = 0x00004000
            NDIS_GFT_OFFLOAD_CAPS_DESIGNATED_EXCEPTION_VPORT = 0x00008000
            NDIS_GFT_OFFLOAD_CAPS_DSCP_MASK = 0x00010000
            NDIS_GFT_OFFLOAD_CAPS_8021P_PRIORITY_MASK = 0x00020000
            NDIS_GFT_OFFLOAD_CAPS_ALLOW = 0x00040000
            NDIS_GFT_OFFLOAD_CAPS_DROP = 0x00080000
            # NDIS_GFT_OFFLOAD_CAPABILITIES structure advertises the GFT
            # offload capabilities of
            # the miniport adapter. This structure is used in
            # NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
            NDIS_GFT_OFFLOAD_CAPABILITIES_REVISION_1 = 1
            _NDIS_GFT_OFFLOAD_CAPABILITIES._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('CounterCapabilities', ULONG),
                ('SupportedTableTypes', ULONG),

                # NDIS_GFP_ENCAPSULATION_TYPE_xxx
                ('SupportedEncapsulationTypes', ULONG),
                ('SupportedIngressExactMatchTableActions', ULONG),
                ('SupportedEgressExactMatchTableActions', ULONG),
                ('SoftwareSupportedIngressExactMatchTableActions', ULONG),
                ('SoftwareSupportedEgressExactMatchTableActions', ULONG),
                ('SupportedIngressWildcardMatchTableActions', ULONG),
                ('SupportedEgressWildcardMatchTableActions', ULONG),
                ('SoftwareSupportedIngressWildcardMatchTableActions', ULONG),
                ('SoftwareSupportedEgressWildcardMatchTableActions', ULONG),

                # might support.
                ('NumPacketCounterObjects', ULONG),
                ('NumByteCounterObjects', ULONG),
                ('NumPacketAndByteCounterObjects', ULONG),
                ('NumCounterObjectsPerIngressExactMatchFlowEntry', ULONG),
                ('NumCounterObjectsPerEgressExactMatchFlowEntry', ULONG),
                ('NumCounterObjectsPerIngressWildcardMatchFlowEntry', ULONG),
                ('NumCounterObjectsPerEgressWildcardMatchFlowEntry', ULONG),
            ]
            NDIS_SIZEOF_GFT_OFFLOAD_CAPABILITIES_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_OFFLOAD_CAPABILITIES,
                NumCounterObjectsPerEgressWildcardMatchFlowEntry)
            
            )
            # flags used in Flags field of NDIS_GFT_VPORT_PARAMETERS
            NDIS_GFT_VPORT_ENABLE = 0x00000001
            NDIS_GFT_VPORT_PARSE_VXLAN = 0x00000002
            NDIS_GFT_VPORT_PARSE_VXLAN_NOT_IN_SRC_PORT_RANGE = 0x00000004
            NDIS_GFT_VPORT_ENABLE_STATE_CHANGED = 0x00100000
            NDIS_GFT_VPORT_EXCEPTION_VPORT_CHANGED = 0x00200000
            NDIS_GFT_VPORT_SAMPLING_RATE_CHANGED = 0x00400000
            NDIS_GFT_VPORT_DSCP_MASK_CHANGED = 0x00800000
            NDIS_GFT_VPORT_PRIORITY_MASK_CHANGED = 0x01000000
            NDIS_GFT_VPORT_VXLAN_SETTINGS_CHANGED = 0x02000000
            NDIS_GFT_VPORT_DSCP_FLAGS_CHANGED = 0x04000000
            NDIS_GFT_VPORT_PARAMS_CHANGE_MASK = 0xFFF00000
            NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS = 64
            NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS = 8
            # Dscp flags used in DscpFlags field of NDIS_GFT_VPORT_PARAMETERS
            NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_RX = 0x00000001
            NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_TX = 0x00000002
            NDIS_GFT_VPORT_DSCP_MASK_ENABLE_RX = 0x00000004
            NDIS_GFT_VPORT_DSCP_MASK_ENABLE_TX = 0x00000008
            # NDIS_GFT_VPORT_PARAMETERS is used in OID_GFT_VPORT_PARAMETERS
            NDIS_GFT_VPORT_PARAMETERS_REVISION_1 = 1
            _NDIS_GFT_VPORT_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('VPortId', NDIS_NIC_SWITCH_VPORT_ID),

                # Copy and sample VPorts are the same as the exception VPort
                ('ExceptionVPortId', NDIS_NIC_SWITCH_VPORT_ID),
                # 0 means no sampling. Any value "n" other than 0 means one
                # sample for every "n" packet
                ('SamplingRate', ULONG),
                ('DscpMask', ULONG64),
                ('NumDscpMaskCounterObjects', ULONG),
                ('NDIS_GFT_COUNTER_ID                DscpMaskCounterIdArray', _In_ * NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS),
                ('PriorityMask', ULONG64),
                ('NumPriorityMaskCounterObjects', ULONG),
                ('NDIS_GFT_COUNTER_ID                PriorityMaskCounterIdArray', _In_ * NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS),
                ('VxLanSrcPortBase', USHORT),
                ('VxLanSrcPortRange', USHORT),
                ('DscpFlags', ULONG),
            ]
            NDIS_SIZEOF_GFT_VPORT_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_GFT_VPORT_PARAMETERS,
                DscpFlags)
            
            )
            # QOS Offload Scheduler Queue data structures
            NDIS_QOS_SQ_ID = ULONG
            PNDIS_QOS_SQ_ID = POINTER(ULONG)
            NDIS_QOS_DEFAULT_SQ_ID = 0
            # NDIS_QOS_SQ_TYPE specifies the type of SQ. Used with
            # NDIS_QOS_SQ_PARAMETERS
            # in OID_QOS_OFFLOAD_ENUM_SQS.
            class _NDIS_QOS_SQ_TYPE(ENUM):
                NdisQosSqTypeUndefined = 1
                NdisQosSqTypeStandard = 2
                NdisQosSqTypeGFT = 3
                NdisQosSqTypeMax = 4

            NDIS_QOS_SQ_TYPE = _NDIS_QOS_SQ_TYPE
            PNDIS_QOS_SQ_TYPE = POINTER(_NDIS_QOS_SQ_TYPE)

            # NDIS_QOS_SQ_PARAMETERS is used in OID_QOS_OFFLOAD_ENUM_SQS.
            NDIS_QOS_SQ_PARAMETERS_REVISION_1 = 1


            _NDIS_QOS_SQ_PARAMETERS._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('SqId', NDIS_QOS_SQ_ID),
                ('SqType', NDIS_QOS_SQ_TYPE),
                ('TcEnabledTable', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TcTransmitBandwidthCapTable', ULONG * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TcTransmitBandwidthReservationTable', ULONG * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TcReceiveBandwidthCapTable', ULONG * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
            ]
            NDIS_SIZEOF_QOS_SQ_PARAMETERS_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_SQ_PARAMETERS,
                TcReceiveBandwidthCapTable)
            )

            # Used in NDIS_QOS_SQ_PARAMETERS Flags Field
            NDIS_QOS_SQ_TRANSMIT_CAP_ENABLED = 0x00000001
            NDIS_QOS_SQ_TRANSMIT_RESERVATION_ENABLED = 0x00000002
            NDIS_QOS_SQ_RECEIVE_CAP_ENABLED = 0x00000004

            # NDIS_QOS_SQ_PARAMETERS_ARRAY is used in OID_QOS_OFFLOAD_ENUM_SQS.
            NDIS_QOS_SQ_PARAMETERS_ARRAY_REVISION_1 = 1


            _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('SqType', NDIS_QOS_SQ_TYPE),
                ('FirstSqId', NDIS_QOS_SQ_ID),
                ('MaxSqsToReturn', ULONG),
                ('SqParamsArrayOffset', ULONG),
                ('SqParamsArrayNumElements', ULONG),
                ('SqParamsArrayElementSize', ULONG),
            ]
            NDIS_SIZEOF_QOS_SQ_PARAMETERS_ENUM_ARRAY_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY,
                SqParamsArrayElementSize)
            )

            # NDIS_QOS_OFFLOAD_CAPABILITIES is used in the
            # NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES structure and
            # OID_QOS_OFFLOAD_HARDWARE_CAPABILITIES and
            # OID_QOS_OFFLOAD_CURRENT_CAPABILITIES.
            NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_1 = 1


            _NDIS_QOS_OFFLOAD_CAPABILITIES._fields_ = [
                ('Header', NDIS_OBJECT_HEADER),
                ('Flags', ULONG),
                ('SupportedSqTypes', ULONG),
                ('TransmitCapSupported', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TransmitReservationSupported', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('ReceiveCapSupported', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TransmitGftCapSupported', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('ReceiveGftCapSupported', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('TcSupportedTable', BOOLEAN * NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES),
                ('NumStandardSqsSupported', ULONG),
                ('NumGftSqsSupported', ULONG),
                ('ReservationGranularitySupported', ULONG),
                ('MaxNumSqInputs', ULONG),
            ]
            NDIS_SIZEOF_QOS_OFFLOAD_CAPABILITIES_REVISION_1 = (
                RTL_SIZEOF_THROUGH_FIELD(NDIS_QOS_OFFLOAD_CAPABILITIES,
                MaxNumSqInputs)
            )

            # Used in NDIS_QOS_OFFLOAD_CAPABILITIES SupportedSqTypes Field
            NDIS_QOS_OFFLOAD_CAPS_STANDARD_SQ = 0x00000001
            NDIS_QOS_OFFLOAD_CAPS_GFT_SQ = 0x00000002
        # END IF   (NDIS_SUPPORT_NDIS650)

        if defined(__cplusplus):
            pass
        # END IF


        if _MSC_VER >= 1200:
            pass
        else:
            pass
        # END IF

    # END IF  WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
# END IF   _NTDDNDIS_


