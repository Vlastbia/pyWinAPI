

from shared.wtypes_h import *
import ctypes

from shared.minwindef_h import (
    HIWORD,
    LOWORD,
    MAKELONG
)
from shared.winapifamily_h import * # NOQA
user32 = ctypes.windll.User32
WINUSERAPI = DECLSPEC_IMPORT
WINABLEAPI = DECLSPEC_IMPORT

# extern "C" {
# #endif
# #if _MSC_VER >= 1200
# #pragma warning(push)
warning = user32.warning
warning.restype = "C"

WINVER = 0x00000500
from km.crt.stdarg_h import * # NOQA
from um.libloaderapi_h import * # NOQA


MENUTEMPLATEA = VOID
MENUTEMPLATEW = VOID
MENUTEMPLATE = MENUTEMPLATEW
LPMENUTEMPLATEA = PVOID
LPMENUTEMPLATEW = PVOID
LPMENUTEMPLATE = LPMENUTEMPLATEW

WNDPROC = CALLBACK(LRESULT, HWND, UINT, WPARAM, LPARAM)
DLGPROC = CALLBACK(INT_PTR, HWND, UINT, WPARAM, LPARAM)
TIMERPROC  = CALLBACK(VOID, HWND, UINT, UINT_PTR, DWORD)
GRAYSTRINGPROC = CALLBACK(BOOL, HDC, LPARAM, INT)
WNDENUMPROC = CALLBACK(BOOL, HWND, LPARAM)
HOOKPROC = CALLBACK(LRESULT, INT, WPARAM, LPARAM)
SENDASYNCPROC = CALLBACK(VOID, HWND, UINT, ULONG_PTR, LRESULT)
PROPENUMPROCA = CALLBACK(BOOL, HWND, LPCSTR, HANDLE)
PROPENUMPROCW = CALLBACK(BOOL, HWND, LPCWSTR, HANDLE)
PROPENUMPROCEXA = CALLBACK(BOOL, HWND, LPSTR, HANDLE, ULONG_PTR)
PROPENUMPROCEXW = CALLBACK(BOOL, HWND, LPWSTR, HANDLE, ULONG_PTR)
EDITWORDBREAKPROCA = CALLBACK(INT, LPSTR, INT, INT, INT)
EDITWORDBREAKPROCW = CALLBACK(INT, LPWSTR, INT, INT, INT)
DRAWSTATEPROC = CALLBACK(BOOL, HDC, LPARAM, WPARAM, INT, INT)
PROPENUMPROC = PROPENUMPROCW
PROPENUMPROCEX = PROPENUMPROCEXW
EDITWORDBREAKPROC = EDITWORDBREAKPROCW
NAMEENUMPROCA = CALLBACK(BOOL, LPSTR, LPARAM)
NAMEENUMPROCW = CALLBACK(BOOL, LPWSTR, LPARAM)
WINSTAENUMPROCW = NAMEENUMPROCW
DESKTOPENUMPROCW = NAMEENUMPROCW
WINSTAENUMPROC = WINSTAENUMPROCW
DESKTOPENUMPROC = DESKTOPENUMPROCW


def IS_INTRESOURCE(_r):
    return (_r >> 16) == 0


def MAKEINTRESOURCEA(i):
    return i


def MAKEINTRESOURCEW(i):
    return i

MAKEINTRESOURCE = MAKEINTRESOURCEW
# MAKEINTRESOURCE = MAKEINTRESOURCEA

RT_CURSOR = MAKEINTRESOURCE(1)
RT_BITMAP = MAKEINTRESOURCE(2)
RT_ICON = MAKEINTRESOURCE(3)
RT_MENU = MAKEINTRESOURCE(4)
RT_DIALOG = MAKEINTRESOURCE(5)
RT_STRING = MAKEINTRESOURCE(6)
RT_FONTDIR = MAKEINTRESOURCE(7)
RT_FONT = MAKEINTRESOURCE(8)
RT_ACCELERATOR = MAKEINTRESOURCE(9)
RT_RCDATA = MAKEINTRESOURCE(10)
RT_MESSAGETABLE = MAKEINTRESOURCE(11)
DIFFERENCE = 0x0000000B
RT_GROUP_CURSOR = MAKEINTRESOURCE(RT_CURSOR + DIFFERENCE)
RT_GROUP_ICON = MAKEINTRESOURCE(RT_ICON + DIFFERENCE)
RT_VERSION = MAKEINTRESOURCE(16)
RT_DLGINCLUDE = MAKEINTRESOURCE(17)
RT_PLUGPLAY = MAKEINTRESOURCE(19)
RT_VXD = MAKEINTRESOURCE(20)
RT_ANICURSOR = MAKEINTRESOURCE(21)
RT_ANIICON = MAKEINTRESOURCE(22)
RT_HTML = MAKEINTRESOURCE(23)
RT_MANIFEST = 0x00000018
CREATEPROCESS_MANIFEST_RESOURCE_ID = 0x00000001
ISOLATIONAWARE_MANIFEST_RESOURCE_ID = 0x00000002
ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = 0x00000003
MINIMUM_RESERVED_MANIFEST_RESOURCE_ID = 0x00000001
MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID = 0x00000010


# WINAPI
# wvsprintfA(
#     _Out_ LPSTR,
#     _In_ _PrINTf_format_string_ LPCSTR,
#     _In_ va_list arglist);
wvsprintfA = user32.wvsprintfA
wvsprintfA.restype = WINAPI


# WINAPI
# wvsprintfW(
#     _Out_ LPWSTR,
#     _In_ _PrINTf_format_string_ LPCWSTR,
#     _In_ va_list arglist);
wvsprintfW = user32.wvsprintfW
wvsprintfW.restype = WINAPI

wvsprintf = wvsprintfW
# wvsprintf = wvsprintfA

# WINAPIV
# wsprintfA(
#     _Out_ LPSTR,
#     _In_ _PrINTf_format_string_ LPCSTR,
#     ...);
wsprintfA = user32.wsprintfA
wsprintfA.restype = WINAPIV


# WINAPIV
# wsprintfW(
#     _Out_ LPWSTR,
#     _In_ _PrINTf_format_string_ LPCWSTR,
#     ...);
wsprintfW = user32.wsprintfW
wsprintfW.restype = WINAPIV

wsprintf = wsprintfW
# wsprintf = wsprintfA

SETWALLPAPER_DEFAULT = -1
SB_HORZ = 0x00000000
SB_VERT = 0x00000001
SB_CTL = 0x00000002
SB_BOTH = 0x00000003
SB_LINEUP = 0x00000000
SB_LINELEFT = 0x00000000
SB_LINEDOWN = 0x00000001
SB_LINERIGHT = 0x00000001
SB_PAGEUP = 0x00000002
SB_PAGELEFT = 0x00000002
SB_PAGEDOWN = 0x00000003
SB_PAGERIGHT = 0x00000003
SB_THUMBPOSITION = 0x00000004
SB_THUMBTRACK = 0x00000005
SB_TOP = 0x00000006
SB_LEFT = 0x00000006
SB_BOTTOM = 0x00000007
SB_RIGHT = 0x00000007
SB_ENDSCROLL = 0x00000008
SW_HIDE = 0x00000000
SW_SHOWNORMAL = 0x00000001
SW_NORMAL = 0x00000001
SW_SHOWMINIMIZED = 0x00000002
SW_SHOWMAXIMIZED = 0x00000003
SW_MAXIMIZE = 0x00000003
SW_SHOWNOACTIVATE = 0x00000004
SW_SHOW = 0x00000005
SW_MINIMIZE = 0x00000006
SW_SHOWMINNOACTIVE = 0x00000007
SW_SHOWNA = 0x00000008
SW_RESTORE = 0x00000009
SW_SHOWDEFAULT = 0x0000000A
SW_FORCEMINIMIZE = 0x0000000B
SW_MAX = 0x0000000B
HIDE_WINDOW = 0x00000000
SHOW_OPENWINDOW = 0x00000001
SHOW_ICONWINDOW = 0x00000002
SHOW_FULLSCREEN = 0x00000003
SHOW_OPENNOACTIVATE = 0x00000004
SW_PARENTCLOSING = 0x00000001
SW_OTHERZOOM = 0x00000002
SW_PARENTOPENING = 0x00000003
SW_OTHERUNZOOM = 0x00000004
AW_HOR_POSITIVE = 0x00000001
AW_HOR_NEGATIVE = 0x00000002
AW_VER_POSITIVE = 0x00000004
AW_VER_NEGATIVE = 0x00000008
AW_CENTER = 0x00000010
AW_HIDE = 0x00010000
AW_ACTIVATE = 0x00020000
AW_SLIDE = 0x00040000
AW_BLEND = 0x00080000
KF_EXTENDED = 0x00000100
KF_DLGMODE = 0x00000800
KF_MENUMODE = 0x00001000
KF_ALTDOWN = 0x00002000
KF_REPEAT = 0x00004000
KF_UP = 0x00008000
VK_LBUTTON = 0x00000001
VK_RBUTTON = 0x00000002
VK_CANCEL = 0x00000003
VK_MBUTTON = 0x00000004
VK_XBUTTON1 = 0x00000005
VK_XBUTTON2 = 0x00000006
VK_BACK = 0x00000008
VK_TAB = 0x00000009
VK_CLEAR = 0x0000000C
VK_RETURN = 0x0000000D
VK_SHIFT = 0x00000010
VK_CONTROL = 0x00000011
VK_MENU = 0x00000012
VK_PAUSE = 0x00000013
VK_CAPITAL = 0x00000014
VK_KANA = 0x00000015
VK_HANGEUL = 0x00000015
VK_HANGUL = 0x00000015
VK_JUNJA = 0x00000017
VK_FINAL = 0x00000018
VK_HANJA = 0x00000019
VK_KANJI = 0x00000019
VK_ESCAPE = 0x0000001B
VK_CONVERT = 0x0000001C
VK_NONCONVERT = 0x0000001D
VK_ACCEPT = 0x0000001E
VK_MODECHANGE = 0x0000001F
VK_SPACE = 0x00000020
VK_PRIOR = 0x00000021
VK_NEXT = 0x00000022
VK_END = 0x00000023
VK_HOME = 0x00000024
VK_LEFT = 0x00000025
VK_UP = 0x00000026
VK_RIGHT = 0x00000027
VK_DOWN = 0x00000028
VK_SELECT = 0x00000029
VK_PRINT = 0x0000002A
VK_EXECUTE = 0x0000002B
VK_SNAPSHOT = 0x0000002C
VK_INSERT = 0x0000002D
VK_DELETE = 0x0000002E
VK_HELP = 0x0000002F
VK_LWIN = 0x0000005B
VK_RWIN = 0x0000005C
VK_APPS = 0x0000005D
VK_SLEEP = 0x0000005F
VK_NUMPAD0 = 0x00000060
VK_NUMPAD1 = 0x00000061
VK_NUMPAD2 = 0x00000062
VK_NUMPAD3 = 0x00000063
VK_NUMPAD4 = 0x00000064
VK_NUMPAD5 = 0x00000065
VK_NUMPAD6 = 0x00000066
VK_NUMPAD7 = 0x00000067
VK_NUMPAD8 = 0x00000068
VK_NUMPAD9 = 0x00000069
VK_MULTIPLY = 0x0000006A
VK_ADD = 0x0000006B
VK_SEPARATOR = 0x0000006C
VK_SUBTRACT = 0x0000006D
VK_DECIMAL = 0x0000006E
VK_DIVIDE = 0x0000006F
VK_F1 = 0x00000070
VK_F2 = 0x00000071
VK_F3 = 0x00000072
VK_F4 = 0x00000073
VK_F5 = 0x00000074
VK_F6 = 0x00000075
VK_F7 = 0x00000076
VK_F8 = 0x00000077
VK_F9 = 0x00000078
VK_F10 = 0x00000079
VK_F11 = 0x0000007A
VK_F12 = 0x0000007B
VK_F13 = 0x0000007C
VK_F14 = 0x0000007D
VK_F15 = 0x0000007E
VK_F16 = 0x0000007F
VK_F17 = 0x00000080
VK_F18 = 0x00000081
VK_F19 = 0x00000082
VK_F20 = 0x00000083
VK_F21 = 0x00000084
VK_F22 = 0x00000085
VK_F23 = 0x00000086
VK_F24 = 0x00000087
VK_NAVIGATION_VIEW = 0x00000088
VK_NAVIGATION_MENU = 0x00000089
VK_NAVIGATION_UP = 0x0000008A
VK_NAVIGATION_DOWN = 0x0000008B
VK_NAVIGATION_LEFT = 0x0000008C
VK_NAVIGATION_RIGHT = 0x0000008D
VK_NAVIGATION_ACCEPT = 0x0000008E
VK_NAVIGATION_CANCEL = 0x0000008F
VK_NUMLOCK = 0x00000090
VK_SCROLL = 0x00000091
VK_OEM_NEC_EQUAL = 0x00000092
VK_OEM_FJ_JISHO = 0x00000092
VK_OEM_FJ_MASSHOU = 0x00000093
VK_OEM_FJ_TOUROKU = 0x00000094
VK_OEM_FJ_LOYA = 0x00000095
VK_OEM_FJ_ROYA = 0x00000096
VK_LSHIFT = 0x000000A0
VK_RSHIFT = 0x000000A1
VK_LCONTROL = 0x000000A2
VK_RCONTROL = 0x000000A3
VK_LMENU = 0x000000A4
VK_RMENU = 0x000000A5
VK_BROWSER_BACK = 0x000000A6
VK_BROWSER_FORWARD = 0x000000A7
VK_BROWSER_REFRESH = 0x000000A8
VK_BROWSER_STOP = 0x000000A9
VK_BROWSER_SEARCH = 0x000000AA
VK_BROWSER_FAVORITES = 0x000000AB
VK_BROWSER_HOME = 0x000000AC
VK_VOLUME_MUTE = 0x000000AD
VK_VOLUME_DOWN = 0x000000AE
VK_VOLUME_UP = 0x000000AF
VK_MEDIA_NEXT_TRACK = 0x000000B0
VK_MEDIA_PREV_TRACK = 0x000000B1
VK_MEDIA_STOP = 0x000000B2
VK_MEDIA_PLAY_PAUSE = 0x000000B3
VK_LAUNCH_MAIL = 0x000000B4
VK_LAUNCH_MEDIA_SELECT = 0x000000B5
VK_LAUNCH_APP1 = 0x000000B6
VK_LAUNCH_APP2 = 0x000000B7
VK_OEM_1 = 0x000000BA
VK_OEM_PLUS = 0x000000BB
VK_OEM_COMMA = 0x000000BC
VK_OEM_MINUS = 0x000000BD
VK_OEM_PERIOD = 0x000000BE
VK_OEM_2 = 0x000000BF
VK_OEM_3 = 0x000000C0
VK_GAMEPAD_A = 0x000000C3
VK_GAMEPAD_B = 0x000000C4
VK_GAMEPAD_X = 0x000000C5
VK_GAMEPAD_Y = 0x000000C6
VK_GAMEPAD_RIGHT_SHOULDER = 0x000000C7
VK_GAMEPAD_LEFT_SHOULDER = 0x000000C8
VK_GAMEPAD_LEFT_TRIGGER = 0x000000C9
VK_GAMEPAD_RIGHT_TRIGGER = 0x000000CA
VK_GAMEPAD_DPAD_UP = 0x000000CB
VK_GAMEPAD_DPAD_DOWN = 0x000000CC
VK_GAMEPAD_DPAD_LEFT = 0x000000CD
VK_GAMEPAD_DPAD_RIGHT = 0x000000CE
VK_GAMEPAD_MENU = 0x000000CF
VK_GAMEPAD_VIEW = 0x000000D0
VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 0x000000D1
VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 0x000000D2
VK_GAMEPAD_LEFT_THUMBSTICK_UP = 0x000000D3
VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 0x000000D4
VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 0x000000D5
VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 0x000000D6
VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 0x000000D7
VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 0x000000D8
VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 0x000000D9
VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 0x000000DA
VK_OEM_4 = 0x000000DB
VK_OEM_5 = 0x000000DC
VK_OEM_6 = 0x000000DD
VK_OEM_7 = 0x000000DE
VK_OEM_8 = 0x000000DF
VK_OEM_AX = 0x000000E1
VK_OEM_102 = 0x000000E2
VK_ICO_HELP = 0x000000E3
VK_ICO_00 = 0x000000E4
VK_PROCESSKEY = 0x000000E5
VK_ICO_CLEAR = 0x000000E6
VK_PACKET = 0x000000E7
VK_OEM_RESET = 0x000000E9
VK_OEM_JUMP = 0x000000EA
VK_OEM_PA1 = 0x000000EB
VK_OEM_PA2 = 0x000000EC
VK_OEM_PA3 = 0x000000ED
VK_OEM_WSCTRL = 0x000000EE
VK_OEM_CUSEL = 0x000000EF
VK_OEM_ATTN = 0x000000F0
VK_OEM_FINISH = 0x000000F1
VK_OEM_COPY = 0x000000F2
VK_OEM_AUTO = 0x000000F3
VK_OEM_ENLW = 0x000000F4
VK_OEM_BACKTAB = 0x000000F5
VK_ATTN = 0x000000F6
VK_CRSEL = 0x000000F7
VK_EXSEL = 0x000000F8
VK_EREOF = 0x000000F9
VK_PLAY = 0x000000FA
VK_ZOOM = 0x000000FB
VK_NONAME = 0x000000FC
VK_PA1 = 0x000000FD
VK_OEM_CLEAR = 0x000000FE
WH_MIN = -1
WH_MSGFILTER = -1
WH_JOURNALRECORD = 0x00000000
WH_JOURNALPLAYBACK = 0x00000001
WH_KEYBOARD = 0x00000002
WH_GETMESSAGE = 0x00000003
WH_CALLWNDPROC = 0x00000004
WH_CBT = 0x00000005
WH_SYSMSGFILTER = 0x00000006
WH_MOUSE = 0x00000007
WH_HARDWARE = 0x00000008
WH_DEBUG = 0x00000009
WH_SHELL = 0x0000000A
WH_FOREGROUNDIDLE = 0x0000000B
WH_CALLWNDPROCRET = 0x0000000C
WH_KEYBOARD_LL = 0x0000000D
WH_MOUSE_LL = 0x0000000E
WH_MAX = 0x0000000E

WH_MINHOOK = WH_MIN
WH_MAXHOOK = WH_MAX
HC_ACTION = 0x00000000
HC_GETNEXT = 0x00000001
HC_SKIP = 0x00000002
HC_NOREMOVE = 0x00000003
HC_NOREM = HC_NOREMOVE
HC_SYSMODALON = 0x00000004
HC_SYSMODALOFF = 0x00000005
HCBT_MOVESIZE = 0x00000000
HCBT_MINMAX = 0x00000001
HCBT_QS = 0x00000002
HCBT_CREATEWND = 0x00000003
HCBT_DESTROYWND = 0x00000004
HCBT_ACTIVATE = 0x00000005
HCBT_CLICKSKIPPED = 0x00000006
HCBT_KEYSKIPPED = 0x00000007
HCBT_SYSCOMMAND = 0x00000008
HCBT_SETFOCUS = 0x00000009


class tagCBT_CREATEWNDA(ctypes.Structure):
    pass


CBT_CREATEWNDA = tagCBT_CREATEWNDA
LPCBT_CREATEWNDA = POINTER(tagCBT_CREATEWNDA)


class tagCBT_CREATEWNDW(ctypes.Structure):
    pass


CBT_CREATEWNDW = tagCBT_CREATEWNDW
LPCBT_CREATEWNDW = POINTER(tagCBT_CREATEWNDW)


CBT_CREATEWND = CBT_CREATEWNDW
LPCBT_CREATEWND = LPCBT_CREATEWNDW


class tagCBTACTIVATESTRUCT(ctypes.Structure):
    _fields_ = [
        ('fMouse', BOOL),
        ('hWndActive', HWND),
    ]


CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT
LPCBTACTIVATESTRUCT = POINTER(tagCBTACTIVATESTRUCT)


class tagWTSSESSION_NOTIFICATION(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('dwSessionId', DWORD),
    ]


WTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION
PWTSSESSION_NOTIFICATION = POINTER(tagWTSSESSION_NOTIFICATION)


WTS_CONSOLE_CONNECT = 0x00000001
WTS_CONSOLE_DISCONNECT = 0x00000002
WTS_REMOTE_CONNECT = 0x00000003
WTS_REMOTE_DISCONNECT = 0x00000004
WTS_SESSION_LOGON = 0x00000005
WTS_SESSION_LOGOFF = 0x00000006
WTS_SESSION_LOCK = 0x00000007
WTS_SESSION_UNLOCK = 0x00000008
WTS_SESSION_REMOTE_CONTROL = 0x00000009
WTS_SESSION_CREATE = 0x0000000A
WTS_SESSION_TERMINATE = 0x0000000B
MSGF_DIALOGBOX = 0x00000000
MSGF_MESSAGEBOX = 0x00000001
MSGF_MENU = 0x00000002
MSGF_SCROLLBAR = 0x00000005
MSGF_NEXTWINDOW = 0x00000006
MSGF_MAX = 0x00000008
MSGF_USER = 0x00001000
HSHELL_WINDOWCREATED = 0x00000001
HSHELL_WINDOWDESTROYED = 0x00000002
HSHELL_ACTIVATESHELLWINDOW = 0x00000003
HSHELL_WINDOWACTIVATED = 0x00000004
HSHELL_GETMINRECT = 0x00000005
HSHELL_REDRAW = 0x00000006
HSHELL_TASKMAN = 0x00000007
HSHELL_LANGUAGE = 0x00000008
HSHELL_SYSMENU = 0x00000009
HSHELL_ENDTASK = 0x0000000A
HSHELL_ACCESSIBILITYSTATE = 0x0000000B
HSHELL_APPCOMMAND = 0x0000000C
HSHELL_WINDOWREPLACED = 0x0000000D
HSHELL_WINDOWREPLACING = 0x0000000E
HSHELL_MONITORCHANGED = 0x00000010
HSHELL_HIGHBIT = 0x00008000
HSHELL_FLASH = HSHELL_REDRAW | HSHELL_HIGHBIT
HSHELL_RUDEAPPACTIVATED = HSHELL_WINDOWACTIVATED | HSHELL_HIGHBIT
APPCOMMAND_BROWSER_BACKWARD = 0x00000001
APPCOMMAND_BROWSER_FORWARD = 0x00000002
APPCOMMAND_BROWSER_REFRESH = 0x00000003
APPCOMMAND_BROWSER_STOP = 0x00000004
APPCOMMAND_BROWSER_SEARCH = 0x00000005
APPCOMMAND_BROWSER_FAVORITES = 0x00000006
APPCOMMAND_BROWSER_HOME = 0x00000007
APPCOMMAND_VOLUME_MUTE = 0x00000008
APPCOMMAND_VOLUME_DOWN = 0x00000009
APPCOMMAND_VOLUME_UP = 0x0000000A
APPCOMMAND_MEDIA_NEXTTRACK = 0x0000000B
APPCOMMAND_MEDIA_PREVIOUSTRACK = 0x0000000C
APPCOMMAND_MEDIA_STOP = 0x0000000D
APPCOMMAND_MEDIA_PLAY_PAUSE = 0x0000000E
APPCOMMAND_LAUNCH_MAIL = 0x0000000F
APPCOMMAND_LAUNCH_MEDIA_SELECT = 0x00000010
APPCOMMAND_LAUNCH_APP1 = 0x00000011
APPCOMMAND_LAUNCH_APP2 = 0x00000012
APPCOMMAND_BASS_DOWN = 0x00000013
APPCOMMAND_BASS_BOOST = 0x00000014
APPCOMMAND_BASS_UP = 0x00000015
APPCOMMAND_TREBLE_DOWN = 0x00000016
APPCOMMAND_TREBLE_UP = 0x00000017
APPCOMMAND_MICROPHONE_VOLUME_MUTE = 0x00000018
APPCOMMAND_MICROPHONE_VOLUME_DOWN = 0x00000019
APPCOMMAND_MICROPHONE_VOLUME_UP = 0x0000001A
APPCOMMAND_HELP = 0x0000001B
APPCOMMAND_FIND = 0x0000001C
APPCOMMAND_NEW = 0x0000001D
APPCOMMAND_OPEN = 0x0000001E
APPCOMMAND_CLOSE = 0x0000001F
APPCOMMAND_SAVE = 0x00000020
APPCOMMAND_PRINT = 0x00000021
APPCOMMAND_UNDO = 0x00000022
APPCOMMAND_REDO = 0x00000023
APPCOMMAND_COPY = 0x00000024
APPCOMMAND_CUT = 0x00000025
APPCOMMAND_PASTE = 0x00000026
APPCOMMAND_REPLY_TO_MAIL = 0x00000027
APPCOMMAND_FORWARD_MAIL = 0x00000028
APPCOMMAND_SEND_MAIL = 0x00000029
APPCOMMAND_SPELL_CHECK = 0x0000002A
APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 0x0000002B
APPCOMMAND_MIC_ON_OFF_TOGGLE = 0x0000002C
APPCOMMAND_CORRECTION_LIST = 0x0000002D
APPCOMMAND_MEDIA_PLAY = 0x0000002E
APPCOMMAND_MEDIA_PAUSE = 0x0000002F
APPCOMMAND_MEDIA_RECORD = 0x00000030
APPCOMMAND_MEDIA_FAST_FORWARD = 0x00000031
APPCOMMAND_MEDIA_REWIND = 0x00000032
APPCOMMAND_MEDIA_CHANNEL_UP = 0x00000033
APPCOMMAND_MEDIA_CHANNEL_DOWN = 0x00000034
APPCOMMAND_DELETE = 0x00000035
APPCOMMAND_DWM_FLIP3D = 0x00000036
FAPPCOMMAND_MOUSE = 0x00008000
FAPPCOMMAND_KEY = 0x00000000
FAPPCOMMAND_OEM = 0x00001000
FAPPCOMMAND_MASK = 0x0000F000


def GET_APPCOMMAND_LPARAM(lParam):
    return HIWORD(lParam & ~FAPPCOMMAND_MASK)


def GET_DEVICE_LPARAM(lParam):
    return HIWORD(lParam & FAPPCOMMAND_MASK)


GET_MOUSEORKEY_LPARAM = GET_DEVICE_LPARAM


def GET_FLAGS_LPARAM(lParam):
    return LOWORD(lParam)


def GET_KEYSTATE_LPARAM(lParam):
    return GET_FLAGS_LPARAM(lParam)


class SHELLHOOKINFO(ctypes.Structure):
    _fields_ = [
        ('hwnd', HWND),
        ('rc', RECT),
    ]


LPSHELLHOOKINFO = POINTER(SHELLHOOKINFO)



class tagEVENTMSG(ctypes.Structure):
    _fields_ = [
        ('message', UINT),
        ('paramL', UINT),
        ('paramH', UINT),
        ('time', DWORD),
        ('hwnd', HWND),
    ]


EVENTMSG = tagEVENTMSG
PEVENTMSGMSG = POINTER(tagEVENTMSG)
NPEVENTMSGMSG = POINTER(tagEVENTMSG)
LPEVENTMSGMSG = POINTER(tagEVENTMSG)


LPEVENTMSG = POINTER(FAR)



class tagCWPSTRUCT(ctypes.Structure):
    _fields_ = [
        ('lParam', LPARAM),
        ('wParam', WPARAM),
        ('message', UINT),
        ('hwnd', HWND),
    ]


CWPSTRUCT = tagCWPSTRUCT
PCWPSTRUCT = POINTER(tagCWPSTRUCT)
NPCWPSTRUCT = POINTER(tagCWPSTRUCT)
LPCWPSTRUCT = POINTER(tagCWPSTRUCT)



class tagCWPRETSTRUCT(ctypes.Structure):
    _fields_ = [
        ('lResult', LRESULT),
        ('lParam', LPARAM),
        ('wParam', WPARAM),
        ('message', UINT),
        ('hwnd', HWND),
    ]


CWPRETSTRUCT = tagCWPRETSTRUCT
PCWPRETSTRUCT = POINTER(tagCWPRETSTRUCT)
NPCWPRETSTRUCT = POINTER(tagCWPRETSTRUCT)
LPCWPRETSTRUCT = POINTER(tagCWPRETSTRUCT)


LLKHF_EXTENDED = KF_EXTENDED >> 8
LLKHF_INJECTED = 0x00000010
LLKHF_ALTDOWN = KF_ALTDOWN >> 8
LLKHF_UP = KF_UP >> 8
LLKHF_LOWER_IL_INJECTED = 0x00000002
LLMHF_INJECTED = 0x00000001
LLMHF_LOWER_IL_INJECTED = 0x00000002

class tagKBDLLHOOKSTRUCT(ctypes.Structure):
    _fields_ = [
        ('vkCode', DWORD),
        ('scanCode', DWORD),
        ('flags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR),
    ]


KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT
LPKBDLLHOOKSTRUCT = POINTER(tagKBDLLHOOKSTRUCT)
PKBDLLHOOKSTRUCT = POINTER(tagKBDLLHOOKSTRUCT)



class tagMSLLHOOKSTRUCT(ctypes.Structure):
    _fields_ = [
        ('pt', POINT),
        ('mouseData', DWORD),
        ('flags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR),
    ]


MSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT
LPMSLLHOOKSTRUCT = POINTER(tagMSLLHOOKSTRUCT)
PMSLLHOOKSTRUCT = POINTER(tagMSLLHOOKSTRUCT)



class tagDEBUGHOOKINFO(ctypes.Structure):
    _fields_ = [
        ('idThread', DWORD),
        ('idThreadInstaller', DWORD),
        ('lParam', LPARAM),
        ('wParam', WPARAM),
        ('code', INT),
    ]


DEBUGHOOKINFO = tagDEBUGHOOKINFO
PDEBUGHOOKINFO = POINTER(tagDEBUGHOOKINFO)
NPDEBUGHOOKINFO = POINTER(tagDEBUGHOOKINFO)
LPDEBUGHOOKINFO = POINTER(tagDEBUGHOOKINFO)



class tagMOUSEHOOKSTRUCT(ctypes.Structure):
    _fields_ = [
        ('pt', POINT),
        ('hwnd', HWND),
        ('wHitTestCode', UINT),
        ('dwExtraInfo', ULONG_PTR),
    ]


MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT
LPMOUSEHOOKSTRUCT = POINTER(tagMOUSEHOOKSTRUCT)
PMOUSEHOOKSTRUCT = POINTER(tagMOUSEHOOKSTRUCT)



class tagMOUSEHOOKSTRUCT(ctypes.Structure):
    _fields_ = [
        ('mouseData', DWORD),
    ]


MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCT
LPMOUSEHOOKSTRUCTEX = POINTER(tagMOUSEHOOKSTRUCT)
PMOUSEHOOKSTRUCTEX = POINTER(tagMOUSEHOOKSTRUCT)



class tagMOUSEHOOKSTRUCTEX(ctypes.Structure):
    _fields_ = [
        ('DUMMYSTRUCTNAME', MOUSEHOOKSTRUCT),
        ('mouseData', DWORD),
    ]


MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX
LPMOUSEHOOKSTRUCTEX = POINTER(tagMOUSEHOOKSTRUCTEX)
PMOUSEHOOKSTRUCTEX = POINTER(tagMOUSEHOOKSTRUCTEX)



class tagHARDWAREHOOKSTRUCT(ctypes.Structure):
    _fields_ = [
        ('hwnd', HWND),
        ('message', UINT),
        ('wParam', WPARAM),
        ('lParam', LPARAM),
    ]


HARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT
LPHARDWAREHOOKSTRUCT = POINTER(tagHARDWAREHOOKSTRUCT)
PHARDWAREHOOKSTRUCT = POINTER(tagHARDWAREHOOKSTRUCT)


HKL_PREV = 0x00000000
HKL_NEXT = 0x00000001
KLF_ACTIVATE = 0x00000001
KLF_SUBSTITUTE_OK = 0x00000002
KLF_REORDER = 0x00000008
KLF_REPLACELANG = 0x00000010
KLF_NOTELLSHELL = 0x00000080
KLF_SETFORPROCESS = 0x00000100
KLF_SHIFTLOCK = 0x00010000
KLF_RESET = 0x40000000
INPUTLANGCHANGE_SYSCHARSET = 0x00000001
INPUTLANGCHANGE_FORWARD = 0x00000002
INPUTLANGCHANGE_BACKWARD = 0x00000004
KL_NAMELENGTH = 0x00000009

# WINAPI
# LoadKeyboardLayoutA(
#     _In_ LPCSTR pwszKLID,
#     _In_ UINT Flags);
LoadKeyboardLayoutA = user32.LoadKeyboardLayoutA
LoadKeyboardLayoutA.restype = WINAPI


# WINAPI
# LoadKeyboardLayoutW(
#     _In_ LPCWSTR pwszKLID,
#     _In_ UINT Flags);
LoadKeyboardLayoutW = user32.LoadKeyboardLayoutW
LoadKeyboardLayoutW.restype = WINAPI

LoadKeyboardLayout = LoadKeyboardLayoutW
# LoadKeyboardLayout = LoadKeyboardLayoutA

# WINAPI
# ActivateKeyboardLayout(
#     _In_ HKL hkl,
#     _In_ UINT Flags);
ActivateKeyboardLayout = user32.ActivateKeyboardLayout
ActivateKeyboardLayout.restype = WINAPI


# WINAPI
# ActivateKeyboardLayout(
#     _In_ HKL hkl,
#     _In_ UINT Flags);
ActivateKeyboardLayout = user32.ActivateKeyboardLayout
ActivateKeyboardLayout.restype = WINAPI


# WINAPI
# ToUnicodeEx(
#     _In_ UINT wVirtKey,
#     _In_ UINT wScanCode,
#     _In_reads_bytes_(256) CONST BYTE *lpKeyState,
#     _Out_writes_(cchBuff) LPWSTR pwszBuff,
#     _In_ INT cchBuff,
#     _In_ UINT wFlags,
#     _In_opt_ HKL dwhkl);
ToUnicodeEx = user32.ToUnicodeEx
ToUnicodeEx.restype = WINAPI


# WINAPI
# UnloadKeyboardLayout(
#     _In_ HKL hkl);
UnloadKeyboardLayout = user32.UnloadKeyboardLayout
UnloadKeyboardLayout.restype = WINAPI


# WINAPI
# GetKeyboardLayoutNameA(
#     _Out_writes_(KL_NAMELENGTH) LPSTR pwszKLID);
GetKeyboardLayoutNameA = user32.GetKeyboardLayoutNameA
GetKeyboardLayoutNameA.restype = WINAPI


# WINAPI
# GetKeyboardLayoutNameW(
#     _Out_writes_(KL_NAMELENGTH) LPWSTR pwszKLID);
GetKeyboardLayoutNameW = user32.GetKeyboardLayoutNameW
GetKeyboardLayoutNameW.restype = WINAPI

GetKeyboardLayoutName = GetKeyboardLayoutNameW
# GetKeyboardLayoutName = GetKeyboardLayoutNameA

# WINAPI
# GetKeyboardLayoutList(
#     _In_ INT nBuff,
#     _Out_writes_to_opt_(nBuff, return) HKL FAR *lpList);
GetKeyboardLayoutList = user32.GetKeyboardLayoutList
GetKeyboardLayoutList.restype = WINAPI


# WINAPI
# GetKeyboardLayout(
#     _In_ DWORD idThread);
GetKeyboardLayout = user32.GetKeyboardLayout
GetKeyboardLayout.restype = WINAPI


class tagMOUSEMOVEPOINT(ctypes.Structure):
    _fields_ = [
        ('x', INT),
        ('y', INT),
        ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR),
    ]


MOUSEMOVEPOINT = tagMOUSEMOVEPOINT
PMOUSEMOVEPOINT = POINTER(tagMOUSEMOVEPOINT)
LPMOUSEMOVEPOINT = POINTER(tagMOUSEMOVEPOINT)


GMMP_USE_DISPLAY_POINTS = 0x00000001
GMMP_USE_HIGH_RESOLUTION_POINTS = 0x00000002

# WINAPI
# GetMouseMovePoINTsEx(
#     _In_ UINT cbSize,
#     _In_ LPMOUSEMOVEPOINT lppt,
#     _Out_writes_(nBufPoINTs) LPMOUSEMOVEPOINT lpptBuf,
#     _In_ INT nBufPoINTs,
#     _In_ DWORD resolution);
GetMouseMovePoINTsEx = user32.GetMouseMovePoINTsEx
GetMouseMovePoINTsEx.restype = WINAPI

DESKTOP_READOBJECTS = 0x00000001
DESKTOP_CREATEWINDOW = 0x00000002
DESKTOP_CREATEMENU = 0x00000004
DESKTOP_HOOKCONTROL = 0x00000008
DESKTOP_JOURNALRECORD = 0x00000010
DESKTOP_JOURNALPLAYBACK = 0x00000020
DESKTOP_ENUMERATE = 0x00000040
DESKTOP_WRITEOBJECTS = 0x00000080
DESKTOP_SWITCHDESKTOP = 0x00000100
DF_ALLOWOTHERACCOUNTHOOK = 0x00000001

# WINAPI
# CreateDesktopA(
#     _In_ LPCSTR lpszDesktop,
#     _Reserved_ LPCSTR lpszDevice,
#     _Reserved_ DEVMODEA* pDevmode,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa);
CreateDesktopA = user32.CreateDesktopA
CreateDesktopA.restype = WINAPI


# WINAPI
# CreateDesktopW(
#     _In_ LPCWSTR lpszDesktop,
#     _Reserved_ LPCWSTR lpszDevice,
#     _Reserved_ DEVMODEW* pDevmode,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa);
CreateDesktopW = user32.CreateDesktopW
CreateDesktopW.restype = WINAPI

CreateDesktop = CreateDesktopW
# CreateDesktop = CreateDesktopA

# WINAPI
# CreateDesktopExA(
#     _In_ LPCSTR lpszDesktop,
#     _Reserved_ LPCSTR lpszDevice,
#     _Reserved_ DEVMODEA* pDevmode,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa,
#     _In_ ULONG ulHeapSize,
#     _Reserved_ PVOID pVOID);
CreateDesktopExA = user32.CreateDesktopExA
CreateDesktopExA.restype = WINAPI


# WINAPI
# CreateDesktopExW(
#     _In_ LPCWSTR lpszDesktop,
#     _Reserved_ LPCWSTR lpszDevice,
#     _Reserved_ DEVMODEW* pDevmode,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa,
#     _In_ ULONG ulHeapSize,
#     _Reserved_ PVOID pVOID);
CreateDesktopExW = user32.CreateDesktopExW
CreateDesktopExW.restype = WINAPI

CreateDesktopEx = CreateDesktopExW
# CreateDesktopEx = CreateDesktopExA

# WINAPI
# OpenDesktopA(
#     _In_ LPCSTR lpszDesktop,
#     _In_ DWORD dwFlags,
#     _In_ BOOL fInherit,
#     _In_ ACCESS_MASK dwDesiredAccess);
OpenDesktopA = user32.OpenDesktopA
OpenDesktopA.restype = WINAPI


# WINAPI
# OpenDesktopW(
#     _In_ LPCWSTR lpszDesktop,
#     _In_ DWORD dwFlags,
#     _In_ BOOL fInherit,
#     _In_ ACCESS_MASK dwDesiredAccess);
OpenDesktopW = user32.OpenDesktopW
OpenDesktopW.restype = WINAPI

OpenDesktop = OpenDesktopW
# OpenDesktop = OpenDesktopA

# WINAPI
# OpenInputDesktop(
#     _In_ DWORD dwFlags,
#     _In_ BOOL fInherit,
#     _In_ ACCESS_MASK dwDesiredAccess);
OpenInputDesktop = user32.OpenInputDesktop
OpenInputDesktop.restype = WINAPI


# WINAPI
# EnumDesktopsA(
#     _In_opt_ HWINSTA hwinsta,
#     _In_ DESKTOPENUMPROCA lpEnumFunc,
#     _In_ LPARAM lParam);
EnumDesktopsA = user32.EnumDesktopsA
EnumDesktopsA.restype = WINAPI


# WINAPI
# EnumDesktopsW(
#     _In_opt_ HWINSTA hwinsta,
#     _In_ DESKTOPENUMPROCW lpEnumFunc,
#     _In_ LPARAM lParam);
EnumDesktopsW = user32.EnumDesktopsW
EnumDesktopsW.restype = WINAPI

EnumDesktops = EnumDesktopsW
# EnumDesktops = EnumDesktopsA

# WINAPI
# EnumDesktopWindows(
#     _In_opt_ HDESK hDesktop,
#     _In_ WNDENUMPROC lpfn,
#     _In_ LPARAM lParam);
EnumDesktopWindows = user32.EnumDesktopWindows
EnumDesktopWindows.restype = WINAPI


# WINAPI
# SwitchDesktop(
#     _In_ HDESK hDesktop);
SwitchDesktop = user32.SwitchDesktop
SwitchDesktop.restype = WINAPI


# WINAPI
# SetThreadDesktop(
#      _In_ HDESK hDesktop);
SetThreadDesktop = user32.SetThreadDesktop
SetThreadDesktop.restype = WINAPI


# WINAPI
# CloseDesktop(
#     _In_ HDESK hDesktop);
CloseDesktop = user32.CloseDesktop
CloseDesktop.restype = WINAPI


# WINAPI
# GetThreadDesktop(
#     _In_ DWORD dwThreadId);
GetThreadDesktop = user32.GetThreadDesktop
GetThreadDesktop.restype = WINAPI

WINSTA_ENUMDESKTOPS = 0x00000001
WINSTA_READATTRIBUTES = 0x00000002
WINSTA_ACCESSCLIPBOARD = 0x00000004
WINSTA_CREATEDESKTOP = 0x00000008
WINSTA_WRITEATTRIBUTES = 0x00000010
WINSTA_ACCESSGLOBALATOMS = 0x00000020
WINSTA_EXITWINDOWS = 0x00000040
WINSTA_ENUMERATE = 0x00000100
WINSTA_READSCREEN = 0x00000200
WINSTA_ALL_ACCESS = (
    WINSTA_ENUMDESKTOPS  |
     WINSTA_READATTRIBUTES  |
     WINSTA_ACCESSCLIPBOARD  |
     WINSTA_CREATEDESKTOP  |
     WINSTA_WRITEATTRIBUTES  |
     WINSTA_ACCESSGLOBALATOMS  |
     WINSTA_EXITWINDOWS  |
     WINSTA_ENUMERATE  |
     WINSTA_READSCREEN
)
CWF_CREATE_ONLY = 0x00000001
WSF_VISIBLE = 0x00000001

# WINAPI
# CreateWindowStationA(
#     _In_opt_ LPCSTR lpwinsta,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa);
CreateWindowStationA = user32.CreateWindowStationA
CreateWindowStationA.restype = WINAPI


# WINAPI
# CreateWindowStationW(
#     _In_opt_ LPCWSTR lpwinsta,
#     _In_ DWORD dwFlags,
#     _In_ ACCESS_MASK dwDesiredAccess,
#     _In_opt_ LPSECURITY_ATTRIBUTES lpsa);
CreateWindowStationW = user32.CreateWindowStationW
CreateWindowStationW.restype = WINAPI

CreateWindowStation = CreateWindowStationW
# CreateWindowStation = CreateWindowStationA

# WINAPI
# OpenWindowStationA(
#     _In_ LPCSTR lpszWinSta,
#     _In_ BOOL fInherit,
#     _In_ ACCESS_MASK dwDesiredAccess);
OpenWindowStationA = user32.OpenWindowStationA
OpenWindowStationA.restype = WINAPI


# WINAPI
# OpenWindowStationW(
#     _In_ LPCWSTR lpszWinSta,
#     _In_ BOOL fInherit,
#     _In_ ACCESS_MASK dwDesiredAccess);
OpenWindowStationW = user32.OpenWindowStationW
OpenWindowStationW.restype = WINAPI

OpenWindowStation = OpenWindowStationW
# OpenWindowStation = OpenWindowStationA

# WINAPI
# EnumWindowStationsA(
#     _In_ WINSTAENUMPROCA lpEnumFunc,
#     _In_ LPARAM lParam);
EnumWindowStationsA = user32.EnumWindowStationsA
EnumWindowStationsA.restype = WINAPI


# WINAPI
# EnumWindowStationsW(
#     _In_ WINSTAENUMPROCW lpEnumFunc,
#     _In_ LPARAM lParam);
EnumWindowStationsW = user32.EnumWindowStationsW
EnumWindowStationsW.restype = WINAPI

EnumWindowStations = EnumWindowStationsW
# EnumWindowStations = EnumWindowStationsA

# WINAPI
# CloseWindowStation(
#     _In_ HWINSTA hWinSta);
CloseWindowStation = user32.CloseWindowStation
CloseWindowStation.restype = WINAPI


# WINAPI
# SetProcessWindowStation(
#     _In_ HWINSTA hWinSta);
SetProcessWindowStation = user32.SetProcessWindowStation
SetProcessWindowStation.restype = WINAPI


# WINAPI
# GetProcessWindowStation(
#     VOID);
GetProcessWindowStation = user32.GetProcessWindowStation
GetProcessWindowStation.restype = WINAPI


# WINAPI
# SetUserObjectSecurity(
#     _In_ HANDLE hObj,
#     _In_ PSECURITY_INFORMATION pSIRequested,
#     _In_ PSECURITY_DESCRIPTOR pSID);
SetUserObjectSecurity = user32.SetUserObjectSecurity
SetUserObjectSecurity.restype = WINAPI


# WINAPI
# GetUserObjectSecurity(
#     _In_ HANDLE hObj,
#     _In_ PSECURITY_INFORMATION pSIRequested,
#     _Out_writes_bytes_opt_(nLength) PSECURITY_DESCRIPTOR pSID,
#     _In_ DWORD nLength,
#     _Out_ LPDWORD lpnLengthNeeded);
GetUserObjectSecurity = user32.GetUserObjectSecurity
GetUserObjectSecurity.restype = WINAPI

UOI_FLAGS = 0x00000001
UOI_NAME = 0x00000002
UOI_TYPE = 0x00000003
UOI_USER_SID = 0x00000004
UOI_HEAPSIZE = 0x00000005
UOI_IO = 0x00000006
UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 0x00000007

class tagUSEROBJECTFLAGS(ctypes.Structure):
    _fields_ = [
        ('fInherit', BOOL),
        ('fReserved', BOOL),
        ('dwFlags', DWORD),
    ]


USEROBJECTFLAGS = tagUSEROBJECTFLAGS
PUSEROBJECTFLAGS = POINTER(tagUSEROBJECTFLAGS)



# WINAPI
# GetUserObjectInformationA(
#     _In_ HANDLE hObj,
#     _In_ INT nIndex,
#     _Out_writes_bytes_opt_(nLength) PVOID pvInfo,
#     _In_ DWORD nLength,
#     _Out_opt_ LPDWORD lpnLengthNeeded);
GetUserObjectInformationA = user32.GetUserObjectInformationA
GetUserObjectInformationA.restype = WINAPI


# WINAPI
# GetUserObjectInformationW(
#     _In_ HANDLE hObj,
#     _In_ INT nIndex,
#     _Out_writes_bytes_opt_(nLength) PVOID pvInfo,
#     _In_ DWORD nLength,
#     _Out_opt_ LPDWORD lpnLengthNeeded);
GetUserObjectInformationW = user32.GetUserObjectInformationW
GetUserObjectInformationW.restype = WINAPI

GetUserObjectInformation = GetUserObjectInformationW
# GetUserObjectInformation = GetUserObjectInformationA

# WINAPI
# SetUserObjectInformationA(
#     _In_ HANDLE hObj,
#     _In_ INT nIndex,
#     _In_reads_bytes_(nLength) PVOID pvInfo,
#     _In_ DWORD nLength);
SetUserObjectInformationA = user32.SetUserObjectInformationA
SetUserObjectInformationA.restype = WINAPI


# WINAPI
# SetUserObjectInformationW(
#     _In_ HANDLE hObj,
#     _In_ INT nIndex,
#     _In_reads_bytes_(nLength) PVOID pvInfo,
#     _In_ DWORD nLength);
SetUserObjectInformationW = user32.SetUserObjectInformationW
SetUserObjectInformationW.restype = WINAPI

SetUserObjectInformation = SetUserObjectInformationW
# SetUserObjectInformation = SetUserObjectInformationA

class tagWNDCLASSEXA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('style', UINT),
        ('lpfnWndProc', WNDPROC),
        ('cbClsExtra', INT),
        ('cbWndExtra', INT),
        ('hInstance', HINSTANCE),
        ('hIcon', HICON),
        ('hCursor', HCURSOR),
        ('hbrBackground', HBRUSH),
        ('lpszMenuName', LPCSTR),
        ('lpszClassName', LPCSTR),
        ('hIconSm', HICON),
    ]


WNDCLASSEXA = tagWNDCLASSEXA
PWNDCLASSEXA = POINTER(tagWNDCLASSEXA)
NPWNDCLASSEXA = POINTER(tagWNDCLASSEXA)
LPWNDCLASSEXA = POINTER(tagWNDCLASSEXA)



class tagWNDCLASSEXW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('style', UINT),
        ('lpfnWndProc', WNDPROC),
        ('cbClsExtra', INT),
        ('cbWndExtra', INT),
        ('hInstance', HINSTANCE),
        ('hIcon', HICON),
        ('hCursor', HCURSOR),
        ('hbrBackground', HBRUSH),
        ('lpszMenuName', LPCWSTR),
        ('lpszClassName', LPCWSTR),
        ('hIconSm', HICON),
    ]


WNDCLASSEXW = tagWNDCLASSEXW
PWNDCLASSEXW = POINTER(tagWNDCLASSEXW)
NPWNDCLASSEXW = POINTER(tagWNDCLASSEXW)
LPWNDCLASSEXW = POINTER(tagWNDCLASSEXW)


WNDCLASSEX = WNDCLASSEXW
PWNDCLASSEX = PWNDCLASSEXW
NPWNDCLASSEX = NPWNDCLASSEXW
LPWNDCLASSEX = LPWNDCLASSEXW

class tagWNDCLASSA(ctypes.Structure):
    _fields_ = [
        ('style', UINT),
        ('lpfnWndProc', WNDPROC),
        ('cbClsExtra', INT),
        ('cbWndExtra', INT),
        ('hInstance', HINSTANCE),
        ('hIcon', HICON),
        ('hCursor', HCURSOR),
        ('hbrBackground', HBRUSH),
        ('lpszMenuName', LPCSTR),
        ('lpszClassName', LPCSTR),
    ]


WNDCLASSA = tagWNDCLASSA
PWNDCLASSA = POINTER(tagWNDCLASSA)
NPWNDCLASSA = POINTER(tagWNDCLASSA)
LPWNDCLASSA = POINTER(tagWNDCLASSA)



class tagWNDCLASSW(ctypes.Structure):
    _fields_ = [
        ('style', UINT),
        ('lpfnWndProc', WNDPROC),
        ('cbClsExtra', INT),
        ('cbWndExtra', INT),
        ('hInstance', HINSTANCE),
        ('hIcon', HICON),
        ('hCursor', HCURSOR),
        ('hbrBackground', HBRUSH),
        ('lpszMenuName', LPCWSTR),
        ('lpszClassName', LPCWSTR),
    ]


WNDCLASSW = tagWNDCLASSW
PWNDCLASSW = POINTER(tagWNDCLASSW)
NPWNDCLASSW = POINTER(tagWNDCLASSW)
LPWNDCLASSW = POINTER(tagWNDCLASSW)


WNDCLASS = WNDCLASSW
PWNDCLASS = PWNDCLASSW
NPWNDCLASS = NPWNDCLASSW
LPWNDCLASS = LPWNDCLASSW

# WINAPI
# IsHungAppWindow(
#     _In_ HWND hwnd);
IsHungAppWindow = user32.IsHungAppWindow
IsHungAppWindow.restype = WINAPI


# WINAPI
# DisableProcessWindowsGhosting(
#     VOID);
DisableProcessWindowsGhosting = user32.DisableProcessWindowsGhosting
DisableProcessWindowsGhosting.restype = WINAPI


class tagMSG(ctypes.Structure):
    _fields_ = [
        ('hwnd', HWND),
        ('message', UINT),
        ('wParam', WPARAM),
        ('lParam', LPARAM),
        ('time', DWORD),
        ('pt', POINT)
    ]


MSG = tagMSG
PMSG = POINTER(tagMSG)
NPMSG = POINTER(tagMSG)
LPMSG = POINTER(tagMSG)


def POINTSTOPOINT(pt, pts):
    pt.x = LOWORD(pts)
    pt.y = HIWORD(pts)
    return pt


def POINTTOPOINTS(pt):
    return MAKELONG(pt.x, pt.y)


def MAKEWPARAM(l, h):
    return MAKELONG(l, h)


def MAKELPARAM(l, h):
    return MAKELONG(l, h)


def MAKELRESULT(l, h):
    return MAKELONG(l, h)


GWL_WNDPROC = -4
GWL_HINSTANCE = -6
GWL_HWNDPARENT = -8
GWL_STYLE = -16
GWL_EXSTYLE = -20
GWL_USERDATA = -21
GWL_ID = -12
GWLP_WNDPROC = -4
GWLP_HINSTANCE = -6
GWLP_HWNDPARENT = -8
GWLP_USERDATA = -21
GWLP_ID = -12
GCL_MENUNAME = -8
GCL_HBRBACKGROUND = -10
GCL_HCURSOR = -12
GCL_HICON = -14
GCL_HMODULE = -16
GCL_CBWNDEXTRA = -18
GCL_CBCLSEXTRA = -20
GCL_WNDPROC = -24
GCL_STYLE = -26
GCW_ATOM = -32
GCL_HICONSM = -34
GCLP_MENUNAME = -8
GCLP_HBRBACKGROUND = -10
GCLP_HCURSOR = -12
GCLP_HICON = -14
GCLP_HMODULE = -16
GCLP_WNDPROC = -24
GCLP_HICONSM = -34
WM_NULL = 0x00000000
WM_CREATE = 0x00000001
WM_DESTROY = 0x00000002
WM_MOVE = 0x00000003
WM_SIZE = 0x00000005
WM_ACTIVATE = 0x00000006
WA_INACTIVE = 0x00000000
WA_ACTIVE = 0x00000001
WA_CLICKACTIVE = 0x00000002
WM_SETFOCUS = 0x00000007
WM_KILLFOCUS = 0x00000008
WM_ENABLE = 0x0000000A
WM_SETREDRAW = 0x0000000B
WM_SETTEXT = 0x0000000C
WM_GETTEXT = 0x0000000D
WM_GETTEXTLENGTH = 0x0000000E
WM_PAINT = 0x0000000F
WM_CLOSE = 0x00000010
WM_QUERYENDSESSION = 0x00000011
WM_QUERYOPEN = 0x00000013
WM_ENDSESSION = 0x00000016
WM_QUIT = 0x00000012
WM_ERASEBKGND = 0x00000014
WM_SYSCOLORCHANGE = 0x00000015
WM_SHOWWINDOW = 0x00000018
WM_WININICHANGE = 0x0000001A
WM_SETTINGCHANGE = WM_WININICHANGE
WM_DEVMODECHANGE = 0x0000001B
WM_ACTIVATEAPP = 0x0000001C
WM_FONTCHANGE = 0x0000001D
WM_TIMECHANGE = 0x0000001E
WM_CANCELMODE = 0x0000001F
WM_SETCURSOR = 0x00000020
WM_MOUSEACTIVATE = 0x00000021
WM_CHILDACTIVATE = 0x00000022
WM_QUEUESYNC = 0x00000023
WM_GETMINMAXINFO = 0x00000024

class tagMINMAXINFO(ctypes.Structure):
    _fields_ = [
        ('ptReserved', POINT),
        ('ptMaxSize', POINT),
        ('ptMaxPosition', POINT),
        ('ptMinTrackSize', POINT),
        ('ptMaxTrackSize', POINT),
    ]


MINMAXINFO = tagMINMAXINFO
PMINMAXINFO = POINTER(tagMINMAXINFO)
LPMINMAXINFO = POINTER(tagMINMAXINFO)


WM_PAINTICON = 0x00000026
WM_ICONERASEBKGND = 0x00000027
WM_NEXTDLGCTL = 0x00000028
WM_SPOOLERSTATUS = 0x0000002A
WM_DRAWITEM = 0x0000002B
WM_MEASUREITEM = 0x0000002C
WM_DELETEITEM = 0x0000002D
WM_VKEYTOITEM = 0x0000002E
WM_CHARTOITEM = 0x0000002F
WM_SETFONT = 0x00000030
WM_GETFONT = 0x00000031
WM_SETHOTKEY = 0x00000032
WM_GETHOTKEY = 0x00000033
WM_QUERYDRAGICON = 0x00000037
WM_COMPAREITEM = 0x00000039
WM_GETOBJECT = 0x0000003D
WM_COMPACTING = 0x00000041
WM_COMMNOTIFY = 0x00000044
WM_WINDOWPOSCHANGING = 0x00000046
WM_WINDOWPOSCHANGED = 0x00000047
WM_POWER = 0x00000048
PWR_OK = 0x00000001
PWR_FAIL = -1
PWR_SUSPENDREQUEST = 0x00000001
PWR_SUSPENDRESUME = 0x00000002
PWR_CRITICALRESUME = 0x00000003
WM_COPYDATA = 0x0000004A
WM_CANCELJOURNAL = 0x0000004B

class tagCOPYDATASTRUCT(ctypes.Structure):
    _fields_ = [
        ('dwData', ULONG_PTR),
        ('cbData', DWORD),
        ('lpData', PVOID),
    ]


COPYDATASTRUCT = tagCOPYDATASTRUCT
PCOPYDATASTRUCT = POINTER(tagCOPYDATASTRUCT)



class tagMDINEXTMENU(ctypes.Structure):
    _fields_ = [
        ('hmenuIn', HMENU),
        ('hmenuNext', HMENU),
        ('hwndNext', HWND),
    ]


MDINEXTMENU = tagMDINEXTMENU
PMDINEXTMENU = POINTER(tagMDINEXTMENU)
LPMDINEXTMENU = POINTER(tagMDINEXTMENU)


WM_NOTIFY = 0x0000004E
WM_INPUTLANGCHANGEREQUEST = 0x00000050
WM_INPUTLANGCHANGE = 0x00000051
WM_TCARD = 0x00000052
WM_HELP = 0x00000053
WM_USERCHANGED = 0x00000054
WM_NOTIFYFORMAT = 0x00000055
NFR_ANSI = 0x00000001
NFR_UNICODE = 0x00000002
NF_QUERY = 0x00000003
NF_REQUERY = 0x00000004
WM_CONTEXTMENU = 0x0000007B
WM_STYLECHANGING = 0x0000007C
WM_STYLECHANGED = 0x0000007D
WM_DISPLAYCHANGE = 0x0000007E
WM_GETICON = 0x0000007F
WM_SETICON = 0x00000080
WM_NCCREATE = 0x00000081
WM_NCDESTROY = 0x00000082
WM_NCCALCSIZE = 0x00000083
WM_NCHITTEST = 0x00000084
WM_NCPAINT = 0x00000085
WM_NCACTIVATE = 0x00000086
WM_GETDLGCODE = 0x00000087
WM_SYNCPAINT = 0x00000088
WM_NCMOUSEMOVE = 0x000000A0
WM_NCLBUTTONDOWN = 0x000000A1
WM_NCLBUTTONUP = 0x000000A2
WM_NCLBUTTONDBLCLK = 0x000000A3
WM_NCRBUTTONDOWN = 0x000000A4
WM_NCRBUTTONUP = 0x000000A5
WM_NCRBUTTONDBLCLK = 0x000000A6
WM_NCMBUTTONDOWN = 0x000000A7
WM_NCMBUTTONUP = 0x000000A8
WM_NCMBUTTONDBLCLK = 0x000000A9
WM_NCXBUTTONDOWN = 0x000000AB
WM_NCXBUTTONUP = 0x000000AC
WM_NCXBUTTONDBLCLK = 0x000000AD
WM_INPUT_DEVICE_CHANGE = 0x000000FE
WM_INPUT = 0x000000FF
WM_KEYFIRST = 0x00000100
WM_KEYDOWN = 0x00000100
WM_KEYUP = 0x00000101
WM_CHAR = 0x00000102
WM_DEADCHAR = 0x00000103
WM_SYSKEYDOWN = 0x00000104
WM_SYSKEYUP = 0x00000105
WM_SYSCHAR = 0x00000106
WM_SYSDEADCHAR = 0x00000107
WM_UNICHAR = 0x00000109
WM_KEYLAST = 0x00000109
UNICODE_NOCHAR = 0x0000FFFF
WM_IME_STARTCOMPOSITION = 0x0000010D
WM_IME_ENDCOMPOSITION = 0x0000010E
WM_IME_COMPOSITION = 0x0000010F
WM_IME_KEYLAST = 0x0000010F
WM_INITDIALOG = 0x00000110
WM_COMMAND = 0x00000111
WM_SYSCOMMAND = 0x00000112
WM_TIMER = 0x00000113
WM_HSCROLL = 0x00000114
WM_VSCROLL = 0x00000115
WM_INITMENU = 0x00000116
WM_INITMENUPOPUP = 0x00000117
WM_GESTURE = 0x00000119
WM_GESTURENOTIFY = 0x0000011A
WM_MENUSELECT = 0x0000011F
WM_MENUCHAR = 0x00000120
WM_ENTERIDLE = 0x00000121
WM_MENURBUTTONUP = 0x00000122
WM_MENUDRAG = 0x00000123
WM_MENUGETOBJECT = 0x00000124
WM_UNINITMENUPOPUP = 0x00000125
WM_MENUCOMMAND = 0x00000126
WM_CHANGEUISTATE = 0x00000127
WM_UPDATEUISTATE = 0x00000128
WM_QUERYUISTATE = 0x00000129
UIS_SET = 0x00000001
UIS_CLEAR = 0x00000002
UIS_INITIALIZE = 0x00000003
UISF_HIDEFOCUS = 0x00000001
UISF_HIDEACCEL = 0x00000002
UISF_ACTIVE = 0x00000004
WM_CTLCOLORMSGBOX = 0x00000132
WM_CTLCOLOREDIT = 0x00000133
WM_CTLCOLORLISTBOX = 0x00000134
WM_CTLCOLORBTN = 0x00000135
WM_CTLCOLORDLG = 0x00000136
WM_CTLCOLORSCROLLBAR = 0x00000137
WM_CTLCOLORSTATIC = 0x00000138
MN_GETHMENU = 0x000001E1
WM_MOUSEFIRST = 0x00000200
WM_MOUSEMOVE = 0x00000200
WM_LBUTTONDOWN = 0x00000201
WM_LBUTTONUP = 0x00000202
WM_LBUTTONDBLCLK = 0x00000203
WM_RBUTTONDOWN = 0x00000204
WM_RBUTTONUP = 0x00000205
WM_RBUTTONDBLCLK = 0x00000206
WM_MBUTTONDOWN = 0x00000207
WM_MBUTTONUP = 0x00000208
WM_MBUTTONDBLCLK = 0x00000209
WM_MOUSEWHEEL = 0x0000020A
WM_XBUTTONDOWN = 0x0000020B
WM_XBUTTONUP = 0x0000020C
WM_XBUTTONDBLCLK = 0x0000020D
WM_MOUSEHWHEEL = 0x0000020E
WM_MOUSELAST = 0x0000020E
WHEEL_DELTA = 0x00000078


def GET_WHEEL_DELTA_WPARAM(wParam):
    return HIWORD(wParam)

from limits_h import UINT_MAX

WHEEL_PAGESCROLL = UINT_MAX


def GET_KEYSTATE_WPARAM(wParam):
    return LOWORD(wParam)


def GET_NCHITTEST_WPARAM(wParam):
    return LOWORD(wParam)


def GET_XBUTTON_WPARAM(wParam):
    return HIWORD(wParam)


XBUTTON1 = 0x00000001
XBUTTON2 = 0x00000002
WM_PARENTNOTIFY = 0x00000210
WM_ENTERMENULOOP = 0x00000211
WM_EXITMENULOOP = 0x00000212
WM_NEXTMENU = 0x00000213
WM_SIZING = 0x00000214
WM_CAPTURECHANGED = 0x00000215
WM_MOVING = 0x00000216
WM_POWERBROADCAST = 0x00000218
PBT_APMQUERYSUSPEND = 0x00000000
PBT_APMQUERYSTANDBY = 0x00000001
PBT_APMQUERYSUSPENDFAILED = 0x00000002
PBT_APMQUERYSTANDBYFAILED = 0x00000003
PBT_APMSUSPEND = 0x00000004
PBT_APMSTANDBY = 0x00000005
PBT_APMRESUMECRITICAL = 0x00000006
PBT_APMRESUMESUSPEND = 0x00000007
PBT_APMRESUMESTANDBY = 0x00000008
PBTF_APMRESUMEFROMFAILURE = 0x00000001
PBT_APMBATTERYLOW = 0x00000009
PBT_APMPOWERSTATUSCHANGE = 0x0000000A
PBT_APMOEMEVENT = 0x0000000B
PBT_APMRESUMEAUTOMATIC = 0x00000012
PBT_POWERSETTINGCHANGE = 0x00008013

class POWERBROADCAST_SETTING(ctypes.Structure):
    _fields_ = [
        ('PowerSetting', GUID),
        ('DataLength', DWORD),
        ('Data', UCHAR * 1),
    ]


PPOWERBROADCAST_SETTING = POINTER(POWERBROADCAST_SETTING)


WM_DEVICECHANGE = 0x00000219
WM_MDICREATE = 0x00000220
WM_MDIDESTROY = 0x00000221
WM_MDIACTIVATE = 0x00000222
WM_MDIRESTORE = 0x00000223
WM_MDINEXT = 0x00000224
WM_MDIMAXIMIZE = 0x00000225
WM_MDITILE = 0x00000226
WM_MDICASCADE = 0x00000227
WM_MDIICONARRANGE = 0x00000228
WM_MDIGETACTIVE = 0x00000229
WM_MDISETMENU = 0x00000230
WM_ENTERSIZEMOVE = 0x00000231
WM_EXITSIZEMOVE = 0x00000232
WM_DROPFILES = 0x00000233
WM_MDIREFRESHMENU = 0x00000234
WM_POINTERDEVICECHANGE = 0x00000238
WM_POINTERDEVICEINRANGE = 0x00000239
WM_POINTERDEVICEOUTOFRANGE = 0x0000023A
WM_TOUCH = 0x00000240
WM_NCPOINTERUPDATE = 0x00000241
WM_NCPOINTERDOWN = 0x00000242
WM_NCPOINTERUP = 0x00000243
WM_POINTERUPDATE = 0x00000245
WM_POINTERDOWN = 0x00000246
WM_POINTERUP = 0x00000247
WM_POINTERENTER = 0x00000249
WM_POINTERLEAVE = 0x0000024A
WM_POINTERACTIVATE = 0x0000024B
WM_POINTERCAPTURECHANGED = 0x0000024C
WM_TOUCHHITTESTING = 0x0000024D
WM_POINTERWHEEL = 0x0000024E
WM_POINTERHWHEEL = 0x0000024F
DM_POINTERHITTEST = 0x00000250
WM_POINTERROUTEDTO = 0x00000251
WM_POINTERROUTEDAWAY = 0x00000252
WM_POINTERROUTEDRELEASED = 0x00000253
WM_IME_SETCONTEXT = 0x00000281
WM_IME_NOTIFY = 0x00000282
WM_IME_CONTROL = 0x00000283
WM_IME_COMPOSITIONFULL = 0x00000284
WM_IME_SELECT = 0x00000285
WM_IME_CHAR = 0x00000286
WM_IME_REQUEST = 0x00000288
WM_IME_KEYDOWN = 0x00000290
WM_IME_KEYUP = 0x00000291
WM_MOUSEHOVER = 0x000002A1
WM_MOUSELEAVE = 0x000002A3
WM_NCMOUSEHOVER = 0x000002A0
WM_NCMOUSELEAVE = 0x000002A2
WM_WTSSESSION_CHANGE = 0x000002B1
WM_TABLET_FIRST = 0x000002C0
WM_TABLET_LAST = 0x000002DF
WM_DPICHANGED = 0x000002E0
WM_DPICHANGED_BEFOREPARENT = 0x000002E2
WM_DPICHANGED_AFTERPARENT = 0x000002E3
WM_GETDPISCALEDSIZE = 0x000002E4
WM_CUT = 0x00000300
WM_COPY = 0x00000301
WM_PASTE = 0x00000302
WM_CLEAR = 0x00000303
WM_UNDO = 0x00000304
WM_RENDERFORMAT = 0x00000305
WM_RENDERALLFORMATS = 0x00000306
WM_DESTROYCLIPBOARD = 0x00000307
WM_DRAWCLIPBOARD = 0x00000308
WM_PAINTCLIPBOARD = 0x00000309
WM_VSCROLLCLIPBOARD = 0x0000030A
WM_SIZECLIPBOARD = 0x0000030B
WM_ASKCBFORMATNAME = 0x0000030C
WM_CHANGECBCHAIN = 0x0000030D
WM_HSCROLLCLIPBOARD = 0x0000030E
WM_QUERYNEWPALETTE = 0x0000030F
WM_PALETTEISCHANGING = 0x00000310
WM_PALETTECHANGED = 0x00000311
WM_HOTKEY = 0x00000312
WM_PRINT = 0x00000317
WM_PRINTCLIENT = 0x00000318
WM_APPCOMMAND = 0x00000319
WM_THEMECHANGED = 0x0000031A
WM_CLIPBOARDUPDATE = 0x0000031D
WM_DWMCOMPOSITIONCHANGED = 0x0000031E
WM_DWMNCRENDERINGCHANGED = 0x0000031F
WM_DWMCOLORIZATIONCOLORCHANGED = 0x00000320
WM_DWMWINDOWMAXIMIZEDCHANGE = 0x00000321
WM_DWMSENDICONICTHUMBNAIL = 0x00000323
WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x00000326
WM_GETTITLEBARINFOEX = 0x0000033F
WM_HANDHELDFIRST = 0x00000358
WM_HANDHELDLAST = 0x0000035F
WM_AFXFIRST = 0x00000360
WM_AFXLAST = 0x0000037F
WM_PENWINFIRST = 0x00000380
WM_PENWINLAST = 0x0000038F
WM_APP = 0x00008000
WM_USER = 0x00000400
WMSZ_LEFT = 0x00000001
WMSZ_RIGHT = 0x00000002
WMSZ_TOP = 0x00000003
WMSZ_TOPLEFT = 0x00000004
WMSZ_TOPRIGHT = 0x00000005
WMSZ_BOTTOM = 0x00000006
WMSZ_BOTTOMLEFT = 0x00000007
WMSZ_BOTTOMRIGHT = 0x00000008
HTERROR = -2
HTTRANSPARENT = -1
HTNOWHERE = 0x00000000
HTCLIENT = 0x00000001
HTCAPTION = 0x00000002
HTSYSMENU = 0x00000003
HTGROWBOX = 0x00000004
HTSIZE = HTGROWBOX
HTMENU = 0x00000005
HTHSCROLL = 0x00000006
HTVSCROLL = 0x00000007
HTMINBUTTON = 0x00000008
HTMAXBUTTON = 0x00000009
HTLEFT = 0x0000000A
HTRIGHT = 0x0000000B
HTTOP = 0x0000000C
HTTOPLEFT = 0x0000000D
HTTOPRIGHT = 0x0000000E
HTBOTTOM = 0x0000000F
HTBOTTOMLEFT = 0x00000010
HTBOTTOMRIGHT = 0x00000011
HTBORDER = 0x00000012
HTREDUCE = HTMINBUTTON
HTZOOM = HTMAXBUTTON
HTSIZEFIRST = HTLEFT
HTSIZELAST = HTBOTTOMRIGHT
HTOBJECT = 0x00000013
HTCLOSE = 0x00000014
HTHELP = 0x00000015
SMTO_NORMAL = 0x00000000
SMTO_BLOCK = 0x00000001
SMTO_ABORTIFHUNG = 0x00000002
SMTO_NOTIMEOUTIFNOTHUNG = 0x00000008
SMTO_ERRORONEXIT = 0x00000020
MA_ACTIVATE = 0x00000001
MA_ACTIVATEANDEAT = 0x00000002
MA_NOACTIVATE = 0x00000003
MA_NOACTIVATEANDEAT = 0x00000004
ICON_SMALL = 0x00000000
ICON_BIG = 0x00000001
ICON_SMALL2 = 0x00000002

# WINAPI
# RegisterWindowMessageA(
#     _In_ LPCSTR lpString);
RegisterWindowMessageA = user32.RegisterWindowMessageA
RegisterWindowMessageA.restype = WINAPI


# WINAPI
# RegisterWindowMessageW(
#     _In_ LPCWSTR lpString);
RegisterWindowMessageW = user32.RegisterWindowMessageW
RegisterWindowMessageW.restype = WINAPI

RegisterWindowMessage = RegisterWindowMessageW
# RegisterWindowMessage = RegisterWindowMessageA
SIZE_RESTORED = 0x00000000
SIZE_MINIMIZED = 0x00000001
SIZE_MAXIMIZED = 0x00000002
SIZE_MAXSHOW = 0x00000003
SIZE_MAXHIDE = 0x00000004
SIZENORMAL = SIZE_RESTORED
SIZEICONIC = SIZE_MINIMIZED
SIZEFULLSCREEN = SIZE_MAXIMIZED
SIZEZOOMSHOW = SIZE_MAXSHOW
SIZEZOOMHIDE = SIZE_MAXHIDE

class tagWINDOWPOS(ctypes.Structure):
    _fields_ = [
        ('hwnd', HWND),
        ('hwndInsertAfter', HWND),
        ('x', INT),
        ('y', INT),
        ('cx', INT),
        ('cy', INT),
        ('flags', UINT),
    ]


WINDOWPOS = tagWINDOWPOS
LPWINDOWPOS = POINTER(tagWINDOWPOS)
PWINDOWPOS = POINTER(tagWINDOWPOS)



class tagNCCALCSIZE_PARAMS(ctypes.Structure):
    _fields_ = [
        ('rgrc', RECT * 3),
        ('lppos', PWINDOWPOS),
    ]


NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS
LPNCCALCSIZE_PARAMS = POINTER(tagNCCALCSIZE_PARAMS)


WVR_ALIGNTOP = 0x00000010
WVR_ALIGNLEFT = 0x00000020
WVR_ALIGNBOTTOM = 0x00000040
WVR_ALIGNRIGHT = 0x00000080
WVR_HREDRAW = 0x00000100
WVR_VREDRAW = 0x00000200
WVR_REDRAW = WVR_HREDRAW | WVR_VREDRAW
WVR_VALIDRECTS = 0x00000400
MK_LBUTTON = 0x00000001
MK_RBUTTON = 0x00000002
MK_SHIFT = 0x00000004
MK_CONTROL = 0x00000008
MK_MBUTTON = 0x00000010
MK_XBUTTON1 = 0x00000020
MK_XBUTTON2 = 0x00000040
TME_HOVER = 0x00000001
TME_LEAVE = 0x00000002
TME_NONCLIENT = 0x00000010
TME_QUERY = 0x40000000
TME_CANCEL = 0x80000000
HOVER_DEFAULT = 0xFFFFFFFF

class tagTRACKMOUSEEVENT(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('dwFlags', DWORD),
        ('hwndTrack', HWND),
        ('dwHoverTime', DWORD),
    ]


TRACKMOUSEEVENT = tagTRACKMOUSEEVENT
LPTRACKMOUSEEVENT = POINTER(tagTRACKMOUSEEVENT)



# WINAPI
# TrackMouseEvent(
#     _Inout_ LPTRACKMOUSEEVENT lpEventTrack);
TrackMouseEvent = user32.TrackMouseEvent
TrackMouseEvent.restype = WINAPI

WS_OVERLAPPED = 0x00000000
WS_POPUP = 0x80000000
WS_CHILD = 0x40000000
WS_MINIMIZE = 0x20000000
WS_VISIBLE = 0x10000000
WS_DISABLED = 0x08000000
WS_CLIPSIBLINGS = 0x04000000
WS_CLIPCHILDREN = 0x02000000
WS_MAXIMIZE = 0x01000000
WS_CAPTION = 0x00C00000
WS_BORDER = 0x00800000
WS_DLGFRAME = 0x00400000
WS_VSCROLL = 0x00200000
WS_HSCROLL = 0x00100000
WS_SYSMENU = 0x00080000
WS_THICKFRAME = 0x00040000
WS_GROUP = 0x00020000
WS_TABSTOP = 0x00010000
WS_MINIMIZEBOX = 0x00020000
WS_MAXIMIZEBOX = 0x00010000
WS_TILED = WS_OVERLAPPED
WS_ICONIC = WS_MINIMIZE
WS_SIZEBOX = WS_THICKFRAME
WS_OVERLAPPEDWINDOW = (
    WS_OVERLAPPED  |
     WS_CAPTION  |
     WS_SYSMENU  |
     WS_THICKFRAME  |
     WS_MINIMIZEBOX  |
     WS_MAXIMIZEBOX
)
WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW
WS_POPUPWINDOW = WS_POPUP | WS_BORDER | WS_SYSMENU
WS_CHILDWINDOW = WS_CHILD
WS_EX_DLGMODALFRAME = 0x00000001
WS_EX_NOPARENTNOTIFY = 0x00000004
WS_EX_TOPMOST = 0x00000008
WS_EX_ACCEPTFILES = 0x00000010
WS_EX_TRANSPARENT = 0x00000020
WS_EX_MDICHILD = 0x00000040
WS_EX_TOOLWINDOW = 0x00000080
WS_EX_WINDOWEDGE = 0x00000100
WS_EX_CLIENTEDGE = 0x00000200
WS_EX_CONTEXTHELP = 0x00000400
WS_EX_RIGHT = 0x00001000
WS_EX_LEFT = 0x00000000
WS_EX_RTLREADING = 0x00002000
WS_EX_LTRREADING = 0x00000000
WS_EX_LEFTSCROLLBAR = 0x00004000
WS_EX_RIGHTSCROLLBAR = 0x00000000
WS_EX_CONTROLPARENT = 0x00010000
WS_EX_STATICEDGE = 0x00020000
WS_EX_APPWINDOW = 0x00040000
WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE
WS_EX_PALETTEWINDOW = WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST
WS_EX_LAYERED = 0x00080000
WS_EX_NOINHERITLAYOUT = 0x00100000
WS_EX_NOREDIRECTIONBITMAP = 0x00200000
WS_EX_LAYOUTRTL = 0x00400000
WS_EX_COMPOSITED = 0x02000000
WS_EX_NOACTIVATE = 0x08000000
CS_VREDRAW = 0x00000001
CS_HREDRAW = 0x00000002
CS_DBLCLKS = 0x00000008
CS_OWNDC = 0x00000020
CS_CLASSDC = 0x00000040
CS_PARENTDC = 0x00000080
CS_NOCLOSE = 0x00000200
CS_SAVEBITS = 0x00000800
CS_BYTEALIGNCLIENT = 0x00001000
CS_BYTEALIGNWINDOW = 0x00002000
CS_GLOBALCLASS = 0x00004000
CS_IME = 0x00010000
CS_DROPSHADOW = 0x00020000
PRF_CHECKVISIBLE = 0x00000001
PRF_NONCLIENT = 0x00000002
PRF_CLIENT = 0x00000004
PRF_ERASEBKGND = 0x00000008
PRF_CHILDREN = 0x00000010
PRF_OWNED = 0x00000020
BDR_RAISEDOUTER = 0x00000001
BDR_SUNKENOUTER = 0x00000002
BDR_RAISEDINNER = 0x00000004
BDR_SUNKENINNER = 0x00000008
BDR_OUTER = BDR_RAISEDOUTER | BDR_SUNKENOUTER
BDR_INNER = BDR_RAISEDINNER | BDR_SUNKENINNER
BDR_RAISED = BDR_RAISEDOUTER | BDR_RAISEDINNER
BDR_SUNKEN = BDR_SUNKENOUTER | BDR_SUNKENINNER
EDGE_RAISED = BDR_RAISEDOUTER | BDR_RAISEDINNER
EDGE_SUNKEN = BDR_SUNKENOUTER | BDR_SUNKENINNER
EDGE_ETCHED = BDR_SUNKENOUTER | BDR_RAISEDINNER
EDGE_BUMP = BDR_RAISEDOUTER | BDR_SUNKENINNER
BF_LEFT = 0x00000001
BF_TOP = 0x00000002
BF_RIGHT = 0x00000004
BF_BOTTOM = 0x00000008
BF_TOPLEFT = BF_TOP | BF_LEFT
BF_TOPRIGHT = BF_TOP | BF_RIGHT
BF_BOTTOMLEFT = BF_BOTTOM | BF_LEFT
BF_BOTTOMRIGHT = BF_BOTTOM | BF_RIGHT
BF_RECT = BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM
BF_DIAGONAL = 0x00000010
BF_DIAGONAL_ENDTOPRIGHT = BF_DIAGONAL | BF_TOP | BF_RIGHT
BF_DIAGONAL_ENDTOPLEFT = BF_DIAGONAL | BF_TOP | BF_LEFT
BF_DIAGONAL_ENDBOTTOMLEFT = BF_DIAGONAL | BF_BOTTOM | BF_LEFT
BF_DIAGONAL_ENDBOTTOMRIGHT = BF_DIAGONAL | BF_BOTTOM | BF_RIGHT
BF_MIDDLE = 0x00000800
BF_SOFT = 0x00001000
BF_ADJUST = 0x00002000
BF_FLAT = 0x00004000
BF_MONO = 0x00008000

# WINAPI
# DrawEdge(
#     _In_ HDC hdc,
#     _Inout_ LPRECT qrc,
#     _In_ UINT edge,
#     _In_ UINT grfFlags);
DrawEdge = user32.DrawEdge
DrawEdge.restype = WINAPI

DFC_CAPTION = 0x00000001
DFC_MENU = 0x00000002
DFC_SCROLL = 0x00000003
DFC_BUTTON = 0x00000004
DFC_POPUPMENU = 0x00000005
DFCS_CAPTIONCLOSE = 0x00000000
DFCS_CAPTIONMIN = 0x00000001
DFCS_CAPTIONMAX = 0x00000002
DFCS_CAPTIONRESTORE = 0x00000003
DFCS_CAPTIONHELP = 0x00000004
DFCS_MENUARROW = 0x00000000
DFCS_MENUCHECK = 0x00000001
DFCS_MENUBULLET = 0x00000002
DFCS_MENUARROWRIGHT = 0x00000004
DFCS_SCROLLUP = 0x00000000
DFCS_SCROLLDOWN = 0x00000001
DFCS_SCROLLLEFT = 0x00000002
DFCS_SCROLLRIGHT = 0x00000003
DFCS_SCROLLCOMBOBOX = 0x00000005
DFCS_SCROLLSIZEGRIP = 0x00000008
DFCS_SCROLLSIZEGRIPRIGHT = 0x00000010
DFCS_BUTTONCHECK = 0x00000000
DFCS_BUTTONRADIOIMAGE = 0x00000001
DFCS_BUTTONRADIOMASK = 0x00000002
DFCS_BUTTONRADIO = 0x00000004
DFCS_BUTTON3STATE = 0x00000008
DFCS_BUTTONPUSH = 0x00000010
DFCS_INACTIVE = 0x00000100
DFCS_PUSHED = 0x00000200
DFCS_CHECKED = 0x00000400
DFCS_TRANSPARENT = 0x00000800
DFCS_HOT = 0x00001000
DFCS_ADJUSTRECT = 0x00002000
DFCS_FLAT = 0x00004000
DFCS_MONO = 0x00008000

# WINAPI
# DrawFrameControl(
#     _In_ HDC,
#     _Inout_ LPRECT,
#     _In_ UINT,
#     _In_ UINT);
DrawFrameControl = user32.DrawFrameControl
DrawFrameControl.restype = WINAPI

DC_ACTIVE = 0x00000001
DC_SMALLCAP = 0x00000002
DC_ICON = 0x00000004
DC_TEXT = 0x00000008
DC_INBUTTON = 0x00000010
DC_GRADIENT = 0x00000020
DC_BUTTONS = 0x00001000

# WINAPI
# DrawCaption(
#     _In_ HWND hwnd,
#     _In_ HDC hdc,
#     _In_ CONST RECT * lprect,
#     _In_ UINT flags);
DrawCaption = user32.DrawCaption
DrawCaption.restype = WINAPI

IDANI_OPEN = 0x00000001
IDANI_CAPTION = 0x00000003

# WINAPI
# DrawAnimatedRects(
#     _In_opt_ HWND hwnd,
#     _In_ INT idAni,
#     _In_ CONST RECT *lprcFrom,
#     _In_ CONST RECT *lprcTo);
DrawAnimatedRects = user32.DrawAnimatedRects
DrawAnimatedRects.restype = WINAPI

CF_TEXT = 0x00000001
CF_BITMAP = 0x00000002
CF_METAFILEPICT = 0x00000003
CF_SYLK = 0x00000004
CF_DIF = 0x00000005
CF_TIFF = 0x00000006
CF_OEMTEXT = 0x00000007
CF_DIB = 0x00000008
CF_PALETTE = 0x00000009
CF_PENDATA = 0x0000000A
CF_RIFF = 0x0000000B
CF_WAVE = 0x0000000C
CF_UNICODETEXT = 0x0000000D
CF_ENHMETAFILE = 0x0000000E
CF_HDROP = 0x0000000F
CF_LOCALE = 0x00000010
CF_DIBV5 = 0x00000011
CF_MAX = 0x00000012
CF_MAX = 0x00000011
CF_MAX = 0x0000000F
CF_OWNERDISPLAY = 0x00000080
CF_DSPTEXT = 0x00000081
CF_DSPBITMAP = 0x00000082
CF_DSPMETAFILEPICT = 0x00000083
CF_DSPENHMETAFILE = 0x0000008E
CF_PRIVATEFIRST = 0x00000200
CF_PRIVATELAST = 0x000002FF
CF_GDIOBJFIRST = 0x00000300
CF_GDIOBJLAST = 0x000003FF
FVIRTKEY = TRUE
FNOINVERT = 0x00000002
FSHIFT = 0x00000004
FCONTROL = 0x00000008
FALT = 0x00000010

class tagACCEL(ctypes.Structure):
    _fields_ = [
        ('fVirt', BYTE),
        ('key', WORD),
        ('cmd', WORD),
        ('fVirt', WORD),
        ('key', WORD),
        ('cmd', DWORD),
    ]


ACCEL = tagACCEL
LPACCEL = POINTER(tagACCEL)



class tagPAINTSTRUCT(ctypes.Structure):
    _fields_ = [
        ('hdc', HDC),
        ('fErase', BOOL),
        ('rcPaINT', RECT),
        ('fRestore', BOOL),
        ('fIncUpdate', BOOL),
        ('rgbReserved', BYTE * 32),
    ]


PAINTSTRUCT = tagPAINTSTRUCT
PPAINTSTRUCT = POINTER(tagPAINTSTRUCT)
NPPAINTSTRUCT = POINTER(tagPAINTSTRUCT)
LPPAINTSTRUCT = POINTER(tagPAINTSTRUCT)



class tagCREATESTRUCTA(ctypes.Structure):
    _fields_ = [
        ('lpCreateParams', LPVOID),
        ('hInstance', HINSTANCE),
        ('hMenu', HMENU),
        ('hwndParent', HWND),
        ('cy', INT),
        ('cx', INT),
        ('y', INT),
        ('x', INT),
        ('style', LONG),
        ('lpszName', LPCSTR),
        ('lpszClass', LPCSTR),
        ('dwExStyle', DWORD),
    ]


CREATESTRUCTA = tagCREATESTRUCTA
LPCREATESTRUCTA = POINTER(tagCREATESTRUCTA)



class tagCREATESTRUCTW(ctypes.Structure):
    _fields_ = [
        ('lpCreateParams', LPVOID),
        ('hInstance', HINSTANCE),
        ('hMenu', HMENU),
        ('hwndParent', HWND),
        ('cy', INT),
        ('cx', INT),
        ('y', INT),
        ('x', INT),
        ('style', LONG),
        ('lpszName', LPCWSTR),
        ('lpszClass', LPCWSTR),
        ('dwExStyle', DWORD),
    ]


CREATESTRUCTW = tagCREATESTRUCTW
LPCREATESTRUCTW = POINTER(tagCREATESTRUCTW)

tagCBT_CREATEWNDA._fields_ = [
    ('lpcs', POINTER(tagCREATESTRUCTA)),
    ('hwndInsertAfter', HWND),
]
tagCBT_CREATEWNDW._fields_ = [
    ('lpcs', POINTER(tagCREATESTRUCTW)),
    ('hwndInsertAfter', HWND),
]

CREATESTRUCT = CREATESTRUCTW
LPCREATESTRUCT = LPCREATESTRUCTW

class tagWINDOWPLACEMENT(ctypes.Structure):
    _fields_ = [
        ('length', UINT),
        ('flags', UINT),
        ('showCmd', UINT),
        ('ptMinPosition', POINT),
        ('ptMaxPosition', POINT),
        ('rcNormalPosition', RECT),
        ('rcDevice', RECT),
    ]


WINDOWPLACEMENT = tagWINDOWPLACEMENT


PWINDOWPLACEMENT = POINTER(WINDOWPLACEMENT)
LPWINDOWPLACEMENT = POINTER(WINDOWPLACEMENT)
WPF_SETMINPOSITION = 0x00000001
WPF_RESTORETOMAXIMIZED = 0x00000002
WPF_ASYNCWINDOWPLACEMENT = 0x00000004

class tagNMHDR(ctypes.Structure):
    _fields_ = [
        ('hwndFrom', HWND),
        ('idFrom', UINT_PTR),
        ('code', UINT),
    ]


NMHDR = tagNMHDR


LPNMHDR = FAR

class tagSTYLESTRUCT(ctypes.Structure):
    _fields_ = [
        ('styleOld', DWORD),
        ('styleNew', DWORD),
    ]


STYLESTRUCT = tagSTYLESTRUCT
LPSTYLESTRUCT = POINTER(tagSTYLESTRUCT)


ODT_MENU = 0x00000001
ODT_LISTBOX = 0x00000002
ODT_COMBOBOX = 0x00000003
ODT_BUTTON = 0x00000004
ODT_STATIC = 0x00000005
ODA_DRAWENTIRE = 0x00000001
ODA_SELECT = 0x00000002
ODA_FOCUS = 0x00000004
ODS_SELECTED = 0x00000001
ODS_GRAYED = 0x00000002
ODS_DISABLED = 0x00000004
ODS_CHECKED = 0x00000008
ODS_FOCUS = 0x00000010
ODS_DEFAULT = 0x00000020
ODS_COMBOBOXEDIT = 0x00001000
ODS_HOTLIGHT = 0x00000040
ODS_INACTIVE = 0x00000080
ODS_NOACCEL = 0x00000100
ODS_NOFOCUSRECT = 0x00000200

class tagMEASUREITEMSTRUCT(ctypes.Structure):
    _fields_ = [
        ('CtlType', UINT),
        ('CtlID', UINT),
        ('itemID', UINT),
        ('itemWidth', UINT),
        ('itemHeight', UINT),
        ('itemData', ULONG_PTR),
    ]


MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT
PMEASUREITEMSTRUCT = POINTER(tagMEASUREITEMSTRUCT)
LPMEASUREITEMSTRUCT = POINTER(tagMEASUREITEMSTRUCT)



class tagDRAWITEMSTRUCT(ctypes.Structure):
    _fields_ = [
        ('CtlType', UINT),
        ('CtlID', UINT),
        ('itemID', UINT),
        ('itemAction', UINT),
        ('itemState', UINT),
        ('hwndItem', HWND),
        ('hDC', HDC),
        ('rcItem', RECT),
        ('itemData', ULONG_PTR),
    ]


DRAWITEMSTRUCT = tagDRAWITEMSTRUCT
PDRAWITEMSTRUCT = POINTER(tagDRAWITEMSTRUCT)
LPDRAWITEMSTRUCT = POINTER(tagDRAWITEMSTRUCT)



class tagDELETEITEMSTRUCT(ctypes.Structure):
    _fields_ = [
        ('CtlType', UINT),
        ('CtlID', UINT),
        ('itemID', UINT),
        ('hwndItem', HWND),
        ('itemData', ULONG_PTR),
    ]


DELETEITEMSTRUCT = tagDELETEITEMSTRUCT
PDELETEITEMSTRUCT = POINTER(tagDELETEITEMSTRUCT)
LPDELETEITEMSTRUCT = POINTER(tagDELETEITEMSTRUCT)



class tagCOMPAREITEMSTRUCT(ctypes.Structure):
    _fields_ = [
        ('CtlType', UINT),
        ('CtlID', UINT),
        ('hwndItem', HWND),
        ('itemID1', UINT),
        ('itemData1', ULONG_PTR),
        ('itemID2', UINT),
        ('itemData2', ULONG_PTR),
        ('dwLocaleId', DWORD),
    ]


COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT
PCOMPAREITEMSTRUCT = POINTER(tagCOMPAREITEMSTRUCT)
LPCOMPAREITEMSTRUCT = POINTER(tagCOMPAREITEMSTRUCT)



# WINAPI
# GetMessageA(
#     _Out_ LPMSG lpMsg,
#     _In_opt_ HWND hWnd,
#     _In_ UINT wMsgFilterMin,
#     _In_ UINT wMsgFilterMax);
GetMessageA = user32.GetMessageA
GetMessageA.restype = WINAPI


# WINAPI
# GetMessageW(
#     _Out_ LPMSG lpMsg,
#     _In_opt_ HWND hWnd,
#     _In_ UINT wMsgFilterMin,
#     _In_ UINT wMsgFilterMax);
GetMessageW = user32.GetMessageW
GetMessageW.restype = WINAPI

GetMessage = GetMessageW
# GetMessage = GetMessageA

# BOOL
# GetMessage(
#     LPMSG lpMsg,
#     HWND hWnd,
#     UINT wMsgFilterMin,
#     UINT wMsgFilterMax
#     )
# GetMessage = user32.GetMessage
# GetMessage.restype = BOOL


# WINAPI
# TranslateMessage(
#     _In_ CONST MSG *lpMsg);
TranslateMessage = user32.TranslateMessage
TranslateMessage.restype = WINAPI


# WINAPI
# DispatchMessageA(
#     _In_ CONST MSG *lpMsg);
DispatchMessageA = user32.DispatchMessageA
DispatchMessageA.restype = WINAPI


# WINAPI
# DispatchMessageW(
#     _In_ CONST MSG *lpMsg);
DispatchMessageW = user32.DispatchMessageW
DispatchMessageW.restype = WINAPI

DispatchMessage = DispatchMessageW
# DispatchMessage = DispatchMessageA

# LRESULT
# DispatchMessage(
#     CONST MSG *lpMsg
#     )
# DispatchMessage = user32.DispatchMessage
# DispatchMessage.restype = LRESULT


# WINAPI
# SetMessageQueue(
#     _In_ INT cMessagesMax);
SetMessageQueue = user32.SetMessageQueue
SetMessageQueue.restype = WINAPI


# WINAPI
# PeekMessageA(
#     _Out_ LPMSG lpMsg,
#     _In_opt_ HWND hWnd,
#     _In_ UINT wMsgFilterMin,
#     _In_ UINT wMsgFilterMax,
#     _In_ UINT wRemoveMsg);
PeekMessageA = user32.PeekMessageA
PeekMessageA.restype = WINAPI


# WINAPI
# PeekMessageW(
#     _Out_ LPMSG lpMsg,
#     _In_opt_ HWND hWnd,
#     _In_ UINT wMsgFilterMin,
#     _In_ UINT wMsgFilterMax,
#     _In_ UINT wRemoveMsg);
PeekMessageW = user32.PeekMessageW
PeekMessageW.restype = WINAPI

PeekMessage = PeekMessageW
# PeekMessage = PeekMessageA

QS_KEY = 0x00000001
QS_MOUSEMOVE = 0x00000002
QS_MOUSEBUTTON = 0x00000004
QS_POSTMESSAGE = 0x00000008
QS_TIMER = 0x00000010
QS_PAINT = 0x00000020
QS_SENDMESSAGE = 0x00000040
QS_HOTKEY = 0x00000080
QS_ALLPOSTMESSAGE = 0x00000100
QS_RAWINPUT = 0x00000400
QS_TOUCH = 0x00000800
QS_POINTER = 0x00001000
QS_MOUSE = QS_MOUSEMOVE | QS_MOUSEBUTTON
QS_INPUT = QS_MOUSE | QS_KEY | QS_RAWINPUT | QS_TOUCH | QS_POINTER

QS_ALLEVENTS = QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY
QS_ALLINPUT = (
    QS_INPUT  |
     QS_POSTMESSAGE  |
     QS_TIMER  |
     QS_PAINT  |
     QS_HOTKEY  |
     QS_SENDMESSAGE
)

PM_NOREMOVE = 0x00000000
PM_REMOVE = 0x00000001
PM_NOYIELD = 0x00000002
PM_QS_INPUT = QS_INPUT << 16
PM_QS_POSTMESSAGE = (QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) << 16
PM_QS_PAINT = QS_PAINT << 16
PM_QS_SENDMESSAGE = QS_SENDMESSAGE << 16

# WINAPI
# RegisterHotKey(
#     _In_opt_ HWND hWnd,
#     _In_ INT id,
#     _In_ UINT fsModifiers,
#     _In_ UINT vk);
RegisterHotKey = user32.RegisterHotKey
RegisterHotKey.restype = WINAPI


# WINAPI
# UnregisterHotKey(
#     _In_opt_ HWND hWnd,
#     _In_ INT id);
UnregisterHotKey = user32.UnregisterHotKey
UnregisterHotKey.restype = WINAPI

MOD_ALT = 0x00000001
MOD_CONTROL = 0x00000002
MOD_SHIFT = 0x00000004
MOD_WIN = 0x00000008
MOD_NOREPEAT = 0x00004000
IDHOT_SNAPWINDOW = -1
IDHOT_SNAPDESKTOP = -2
ENDSESSION_CLOSEAPP = 0x00000001
ENDSESSION_CRITICAL = 0x40000000
ENDSESSION_LOGOFF = 0x80000000
EWX_LOGOFF = 0x00000000
EWX_SHUTDOWN = 0x00000001
EWX_REBOOT = 0x00000002
EWX_FORCE = 0x00000004
EWX_POWEROFF = 0x00000008
EWX_FORCEIFHUNG = 0x00000010
EWX_QUICKRESOLVE = 0x00000020
EWX_RESTARTAPPS = 0x00000040
EWX_HYBRID_SHUTDOWN = 0x00400000
EWX_BOOTOPTIONS = 0x01000000


def ExitWindows(dwReserved, Code):
    return ExitWindowsEx(EWX_LOGOFF, 0xFFFFFFFF)

# WINAPI
# ExitWindowsEx(
#     _In_ UINT uFlags,
#     _In_ DWORD dwReason);
ExitWindowsEx = user32.ExitWindowsEx
ExitWindowsEx.restype = WINAPI


# WINAPI
# SwapMouseButton(
#     _In_ BOOL fSwap);
SwapMouseButton = user32.SwapMouseButton
SwapMouseButton.restype = WINAPI


# WINAPI
# GetMessagePos(
#     VOID);
GetMessagePos = user32.GetMessagePos
GetMessagePos.restype = WINAPI


# WINAPI
# GetMessageTime(
#     VOID);
GetMessageTime = user32.GetMessageTime
GetMessageTime.restype = WINAPI


# WINAPI
# GetMessageExtraInfo(
#     VOID);
GetMessageExtraInfo = user32.GetMessageExtraInfo
GetMessageExtraInfo.restype = WINAPI


# WINAPI
# GetUnpredictedMessagePos(
#     VOID);
GetUnpredictedMessagePos = user32.GetUnpredictedMessagePos
GetUnpredictedMessagePos.restype = WINAPI


# WINAPI
# IsWow64Message(
#     VOID);
IsWow64Message = user32.IsWow64Message
IsWow64Message.restype = WINAPI


# WINAPI
# SetMessageExtraInfo(
#     _In_ LPARAM lParam);
SetMessageExtraInfo = user32.SetMessageExtraInfo
SetMessageExtraInfo.restype = WINAPI


# WINAPI
# SendMessageA(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _Pre_maybenull_ _Post_valid_ WPARAM wParam,
#     _Pre_maybenull_ _Post_valid_ LPARAM lParam);
SendMessageA = user32.SendMessageA
SendMessageA.restype = WINAPI


# WINAPI
# SendMessageW(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _Pre_maybenull_ _Post_valid_ WPARAM wParam,
#     _Pre_maybenull_ _Post_valid_ LPARAM lParam);
SendMessageW = user32.SendMessageW
SendMessageW.restype = WINAPI

SendMessage = SendMessageW
# SendMessage = SendMessageA

# LRESULT
# SendMessage(
#     HWND hWnd,
#     UINT Msg,
#     WPARAM wParam,
#     LPARAM lParam
#     )
SendMessage = user32.SendMessage
SendMessage.restype = LRESULT


# WINAPI
# SendMessageTimeoutA(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _In_ UINT fuFlags,
#     _In_ UINT uTimeout,
#     _Out_opt_ PDWORD_PTR lpdwResult);
SendMessageTimeoutA = user32.SendMessageTimeoutA
SendMessageTimeoutA.restype = WINAPI


# WINAPI
# SendMessageTimeoutW(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _In_ UINT fuFlags,
#     _In_ UINT uTimeout,
#     _Out_opt_ PDWORD_PTR lpdwResult);
SendMessageTimeoutW = user32.SendMessageTimeoutW
SendMessageTimeoutW.restype = WINAPI

SendMessageTimeout = SendMessageTimeoutW
# SendMessageTimeout = SendMessageTimeoutA

# WINAPI
# SendNotifyMessageA(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
SendNotifyMessageA = user32.SendNotifyMessageA
SendNotifyMessageA.restype = WINAPI


# WINAPI
# SendNotifyMessageW(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
SendNotifyMessageW = user32.SendNotifyMessageW
SendNotifyMessageW.restype = WINAPI

SendNotifyMessage = SendNotifyMessageW
# SendNotifyMessage = SendNotifyMessageA

# WINAPI
# SendMessageCallbackA(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _In_ SENDASYNCPROC lpResultCallBack,
#     _In_ ULONG_PTR dwData);
SendMessageCallbackA = user32.SendMessageCallbackA
SendMessageCallbackA.restype = WINAPI


# WINAPI
# SendMessageCallbackW(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _In_ SENDASYNCPROC lpResultCallBack,
#     _In_ ULONG_PTR dwData);
SendMessageCallbackW = user32.SendMessageCallbackW
SendMessageCallbackW.restype = WINAPI

SendMessageCallback = SendMessageCallbackW
# SendMessageCallback = SendMessageCallbackA

class BSMINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('hdesk', HDESK),
        ('hwnd', HWND),
        ('luid', LUID),
    ]


PBSMINFO = POINTER(BSMINFO)



# WINAPI
# BroadcastSystemMessageExA(
#     _In_ DWORD flags,
#     _Inout_opt_ LPDWORD lpInfo,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _Out_opt_ PBSMINFO pbsmInfo);
BroadcastSystemMessageExA = user32.BroadcastSystemMessageExA
BroadcastSystemMessageExA.restype = WINAPI


# WINAPI
# BroadcastSystemMessageExW(
#     _In_ DWORD flags,
#     _Inout_opt_ LPDWORD lpInfo,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam,
#     _Out_opt_ PBSMINFO pbsmInfo);
BroadcastSystemMessageExW = user32.BroadcastSystemMessageExW
BroadcastSystemMessageExW.restype = WINAPI

BroadcastSystemMessageEx = BroadcastSystemMessageExW
# BroadcastSystemMessageEx = BroadcastSystemMessageExA

# WINAPI
# BroadcastSystemMessageA(
#     _In_ DWORD flags,
#     _Inout_opt_ LPDWORD lpInfo,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
BroadcastSystemMessageA = user32.BroadcastSystemMessageA
BroadcastSystemMessageA.restype = WINAPI


# WINAPI
# BroadcastSystemMessageW(
#     _In_ DWORD flags,
#     _Inout_opt_ LPDWORD lpInfo,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
BroadcastSystemMessageW = user32.BroadcastSystemMessageW
BroadcastSystemMessageW.restype = WINAPI

BroadcastSystemMessage = BroadcastSystemMessageW
# BroadcastSystemMessage = BroadcastSystemMessageA

# WINAPI
# BroadcastSystemMessage(
#     _In_ DWORD flags,
#     _Inout_opt_ LPDWORD lpInfo,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
BroadcastSystemMessage = user32.BroadcastSystemMessage
BroadcastSystemMessage.restype = WINAPI

BSM_ALLCOMPONENTS = 0x00000000
BSM_VXDS = 0x00000001
BSM_NETDRIVER = 0x00000002
BSM_INSTALLABLEDRIVERS = 0x00000004
BSM_APPLICATIONS = 0x00000008
BSM_ALLDESKTOPS = 0x00000010
BSF_QUERY = 0x00000001
BSF_IGNORECURRENTTASK = 0x00000002
BSF_FLUSHDISK = 0x00000004
BSF_NOHANG = 0x00000008
BSF_POSTMESSAGE = 0x00000010
BSF_FORCEIFHUNG = 0x00000020
BSF_NOTIMEOUTIFNOTHUNG = 0x00000040
BSF_ALLOWSFW = 0x00000080
BSF_SENDNOTIFYMESSAGE = 0x00000100
BSF_RETURNHDESK = 0x00000200
BSF_LUID = 0x00000400
BROADCAST_QUERY_DENY = 0x424D5144
HDEVNOTIFY = PVOID
PHDEVNOTIFY = POINTER(HDEVNOTIFY)
DEVICE_NOTIFY_WINDOW_HANDLE = 0x00000000
DEVICE_NOTIFY_SERVICE_HANDLE = 0x00000001
DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 0x00000004

# WINAPI
# RegisterDeviceNotificationA(
#     _In_ HANDLE hRecipient,
#     _In_ LPVOID NotificationFilter,
#     _In_ DWORD Flags);
RegisterDeviceNotificationA = user32.RegisterDeviceNotificationA
RegisterDeviceNotificationA.restype = WINAPI


# WINAPI
# RegisterDeviceNotificationW(
#     _In_ HANDLE hRecipient,
#     _In_ LPVOID NotificationFilter,
#     _In_ DWORD Flags);
RegisterDeviceNotificationW = user32.RegisterDeviceNotificationW
RegisterDeviceNotificationW.restype = WINAPI

RegisterDeviceNotification = RegisterDeviceNotificationW
# RegisterDeviceNotification = RegisterDeviceNotificationA

# WINAPI
# UnregisterDeviceNotification(
#     _In_ HDEVNOTIFY Handle
#     );
UnregisterDeviceNotification = user32.UnregisterDeviceNotification
UnregisterDeviceNotification.restype = WINAPI

HPOWERNOTIFY = PVOID
PHPOWERNOTIFY = POINTER(HPOWERNOTIFY)

# WINAPI
# RegisterPowerSettingNotification(
#     IN HANDLE hRecipient,
#     IN LPCGUID PowerSettingGuid,
#     IN DWORD Flags
#     );
RegisterPowerSettingNotification = user32.RegisterPowerSettingNotification
RegisterPowerSettingNotification.restype = WINAPI


# WINAPI
# UnregisterPowerSettingNotification(
#     IN HPOWERNOTIFY Handle
#     );
UnregisterPowerSettingNotification = user32.UnregisterPowerSettingNotification
UnregisterPowerSettingNotification.restype = WINAPI


# WINAPI
# RegisterSuspendResumeNotification (
#     IN HANDLE hRecipient,
#     IN DWORD Flags
#     );
RegisterSuspendResumeNotification = user32.RegisterSuspendResumeNotification
RegisterSuspendResumeNotification.restype = WINAPI


# WINAPI
# UnregisterSuspendResumeNotification (
#     IN HPOWERNOTIFY Handle
#     );
UnregisterSuspendResumeNotification = (
    user32.UnregisterSuspendResumeNotification
)
UnregisterSuspendResumeNotification.restype = WINAPI


# WINAPI
# PostMessageA(
#     _In_opt_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
PostMessageA = user32.PostMessageA
PostMessageA.restype = WINAPI


# WINAPI
# PostMessageW(
#     _In_opt_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
PostMessageW = user32.PostMessageW
PostMessageW.restype = WINAPI

PostMessage = PostMessageW
# PostMessage = PostMessageA

# WINAPI
# PostThreadMessageA(
#     _In_ DWORD idThread,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
PostThreadMessageA = user32.PostThreadMessageA
PostThreadMessageA.restype = WINAPI


# WINAPI
# PostThreadMessageW(
#     _In_ DWORD idThread,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
PostThreadMessageW = user32.PostThreadMessageW
PostThreadMessageW.restype = WINAPI

PostThreadMessage = PostThreadMessageW
# PostThreadMessage = PostThreadMessageA


def PostAppMessageA(idThread, wMsg, wParam, lParam):
    return PostThreadMessageA(idThread, wMsg, wParam, lParam)


def PostAppMessageW(idThread, wMsg, wParam, lParam):
    return PostThreadMessageW(idThread, wMsg, wParam, lParam)


PostAppMessage = PostAppMessageW
# PostAppMessage = PostAppMessageA
HWND_BROADCAST = 0xffff
HWND_MESSAGE = -3

# WINAPI
# AttachThreadInput(
#     _In_ DWORD idAttach,
#     _In_ DWORD idAttachTo,
#     _In_ BOOL fAttach);
AttachThreadInput = user32.AttachThreadInput
AttachThreadInput.restype = WINAPI


# WINAPI
# ReplyMessage(
#     _In_ LRESULT lResult);
ReplyMessage = user32.ReplyMessage
ReplyMessage.restype = WINAPI


# WINAPI
# WaitMessage(
#     VOID);
WaitMessage = user32.WaitMessage
WaitMessage.restype = WINAPI


# WINAPI
# WaitForInputIdle(
#     _In_ HANDLE hProcess,
#     _In_ DWORD dwMilliseconds);
WaitForInputIdle = user32.WaitForInputIdle
WaitForInputIdle.restype = WINAPI


# #endif
# DefWindowProcA(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefWindowProcA = user32.DefWindowProcA
DefWindowProcA.restype = WINAPI


# #endif
# DefWindowProcW(
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefWindowProcW = user32.DefWindowProcW
DefWindowProcW.restype = WINAPI

DefWindowProc = DefWindowProcW
# DefWindowProc = DefWindowProcA

# WINAPI
# PostQuitMessage(
#     _In_ INT nExitCode);
PostQuitMessage = user32.PostQuitMessage
PostQuitMessage.restype = WINAPI


# WINAPI
# CallWindowProcA(
#     _In_ WNDPROC lpPrevWndFunc,
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
CallWindowProcA = user32.CallWindowProcA
CallWindowProcA.restype = WINAPI


# WINAPI
# CallWindowProcW(
#     _In_ WNDPROC lpPrevWndFunc,
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
CallWindowProcW = user32.CallWindowProcW
CallWindowProcW.restype = WINAPI

CallWindowProc = CallWindowProcW
# CallWindowProc = CallWindowProcA

# WINAPI
# CallWindowProcA(
#     _In_ FARPROC lpPrevWndFunc,
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
CallWindowProcA = user32.CallWindowProcA
CallWindowProcA.restype = WINAPI


# WINAPI
# CallWindowProcW(
#     _In_ FARPROC lpPrevWndFunc,
#     _In_ HWND hWnd,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
CallWindowProcW = user32.CallWindowProcW
CallWindowProcW.restype = WINAPI

CallWindowProc = CallWindowProcW
# CallWindowProc = CallWindowProcA

# WINAPI
# InSendMessage(
#     VOID);
InSendMessage = user32.InSendMessage
InSendMessage.restype = WINAPI


# WINAPI
# InSendMessageEx(
#     _Reserved_ LPVOID lpReserved);
InSendMessageEx = user32.InSendMessageEx
InSendMessageEx.restype = WINAPI

ISMEX_NOSEND = 0x00000000
ISMEX_SEND = 0x00000001
ISMEX_NOTIFY = 0x00000002
ISMEX_CALLBACK = 0x00000004
ISMEX_REPLIED = 0x00000008

# WINAPI
# GetDoubleClickTime(
#     VOID);
GetDoubleClickTime = user32.GetDoubleClickTime
GetDoubleClickTime.restype = WINAPI


# WINAPI
# SetDoubleClickTime(
#     _In_ UINT);
SetDoubleClickTime = user32.SetDoubleClickTime
SetDoubleClickTime.restype = WINAPI


# WINAPI
# RegisterClassA(
#     _In_ CONST WNDCLASSA *lpWndClass);
RegisterClassA = user32.RegisterClassA
RegisterClassA.restype = WINAPI


# WINAPI
# RegisterClassW(
#     _In_ CONST WNDCLASSW *lpWndClass);
RegisterClassW = user32.RegisterClassW
RegisterClassW.restype = WINAPI

RegisterClass = RegisterClassW
# RegisterClass = RegisterClassA

# WINAPI
# UnregisterClassA(
#     _In_ LPCSTR lpClassName,
#     _In_opt_ HINSTANCE hInstance);
UnregisterClassA = user32.UnregisterClassA
UnregisterClassA.restype = WINAPI


# WINAPI
# UnregisterClassW(
#     _In_ LPCWSTR lpClassName,
#     _In_opt_ HINSTANCE hInstance);
UnregisterClassW = user32.UnregisterClassW
UnregisterClassW.restype = WINAPI

UnregisterClass = UnregisterClassW
# UnregisterClass = UnregisterClassA

# WINAPI
# GetClassInfoA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpClassName,
#     _Out_ LPWNDCLASSA lpWndClass);
GetClassInfoA = user32.GetClassInfoA
GetClassInfoA.restype = WINAPI


# WINAPI
# GetClassInfoW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpClassName,
#     _Out_ LPWNDCLASSW lpWndClass);
GetClassInfoW = user32.GetClassInfoW
GetClassInfoW.restype = WINAPI

GetClassInfo = GetClassInfoW
# GetClassInfo = GetClassInfoA

# WINAPI
# RegisterClassExA(
#     _In_ CONST WNDCLASSEXA *);
RegisterClassExA = user32.RegisterClassExA
RegisterClassExA.restype = WINAPI


# WINAPI
# RegisterClassExW(
#     _In_ CONST WNDCLASSEXW *);
RegisterClassExW = user32.RegisterClassExW
RegisterClassExW.restype = WINAPI

RegisterClassEx = RegisterClassExW
# RegisterClassEx = RegisterClassExA

# WINAPI
# GetClassInfoExA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpszClass,
#     _Out_ LPWNDCLASSEXA lpwcx);
GetClassInfoExA = user32.GetClassInfoExA
GetClassInfoExA.restype = WINAPI


# WINAPI
# GetClassInfoExW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpszClass,
#     _Out_ LPWNDCLASSEXW lpwcx);
GetClassInfoExW = user32.GetClassInfoExW
GetClassInfoExW.restype = WINAPI

GetClassInfoEx = GetClassInfoExW
# GetClassInfoEx = GetClassInfoExA
CW_USEDEFAULT = 0x80000000
HWND_DESKTOP = 0
PREGISTERCLASSNAMEW = BOOLEAN

# WINAPI
# CreateWindowExA(
#     _In_ DWORD dwExStyle,
#     _In_opt_ LPCSTR lpClassName,
#     _In_opt_ LPCSTR lpWindowName,
#     _In_ DWORD dwStyle,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HMENU hMenu,
#     _In_opt_ HINSTANCE hInstance,
#     _In_opt_ LPVOID lpParam);
CreateWindowExA = user32.CreateWindowExA
CreateWindowExA.restype = WINAPI


# WINAPI
# CreateWindowExW(
#     _In_ DWORD dwExStyle,
#     _In_opt_ LPCWSTR lpClassName,
#     _In_opt_ LPCWSTR lpWindowName,
#     _In_ DWORD dwStyle,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HMENU hMenu,
#     _In_opt_ HINSTANCE hInstance,
#     _In_opt_ LPVOID lpParam);
CreateWindowExW = user32.CreateWindowExW
CreateWindowExW.restype = WINAPI

CreateWindowEx = CreateWindowExW
# CreateWindowEx = CreateWindowExA


def CreateWindowA(lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam):
    return CreateWindowExA(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)


def CreateWindowW(lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam):
    return CreateWindowExW(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)
CreateWindow = CreateWindowW
# CreateWindow = CreateWindowA

# WINAPI
# IsWindow(
#     _In_opt_ HWND hWnd);
IsWindow = user32.IsWindow
IsWindow.restype = WINAPI


# WINAPI
# IsMenu(
#     _In_ HMENU hMenu);
IsMenu = user32.IsMenu
IsMenu.restype = WINAPI


# WINAPI
# IsChild(
#     _In_ HWND hWndParent,
#     _In_ HWND hWnd);
IsChild = user32.IsChild
IsChild.restype = WINAPI


# WINAPI
# DestroyWindow(
#     _In_ HWND hWnd);
DestroyWindow = user32.DestroyWindow
DestroyWindow.restype = WINAPI


# WINAPI
# ShowWindow(
#     _In_ HWND hWnd,
#     _In_ INT nCmdShow);
ShowWindow = user32.ShowWindow
ShowWindow.restype = WINAPI


# WINAPI
# AnimateWindow(
#     _In_ HWND hWnd,
#     _In_ DWORD dwTime,
#     _In_ DWORD dwFlags);
AnimateWindow = user32.AnimateWindow
AnimateWindow.restype = WINAPI


# WINAPI
# UpdateLayeredWindow(
#     _In_ HWND hWnd,
#     _In_opt_ HDC hdcDst,
#     _In_opt_ POINT* pptDst,
#     _In_opt_ SIZE* psize,
#     _In_opt_ HDC hdcSrc,
#     _In_opt_ POINT* pptSrc,
#     _In_ COLORREF crKey,
#     _In_opt_ BLENDFUNCTION* pblend,
#     _In_ DWORD dwFlags);
UpdateLayeredWindow = user32.UpdateLayeredWindow
UpdateLayeredWindow.restype = WINAPI

from wingdi_h import BLENDFUNCTION

class tagUPDATELAYEREDWINDOWINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('hdcDst', HDC),
        ('pptDst', POINTER(POINT)),
        ('psize', POINTER(SIZE)),
        ('hdcSrc', HDC),
        ('pptSrc', POINTER(POINT)),
        ('crKey', COLORREF),
        ('pblend', POINTER(BLENDFUNCTION)),
        ('dwFlags', DWORD),
        ('prcDirty', POINTER(RECT)),
    ]


UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO
PUPDATELAYEREDWINDOWINFO = POINTER(tagUPDATELAYEREDWINDOWINFO)



# WINAPI
# UpdateLayeredWindowIndirect(
#     _In_ HWND hWnd,
#     _In_ UPDATELAYEREDWINDOWINFO* pULWInfo);
UpdateLayeredWindowIndirect = user32.UpdateLayeredWindowIndirect
UpdateLayeredWindowIndirect.restype = WINAPI


# WINAPI
# GetLayeredWindowAttributes(
#     _In_ HWND hwnd,
#     _Out_opt_ COLORREF* pcrKey,
#     _Out_opt_ BYTE* pbAlpha,
#     _Out_opt_ DWORD* pdwFlags);
GetLayeredWindowAttributes = user32.GetLayeredWindowAttributes
GetLayeredWindowAttributes.restype = WINAPI

PW_CLIENTONLY = 0x00000001
PW_RENDERFULLCONTENT = 0x00000002

# WINAPI
# PrINTWindow(
#     _In_ HWND hwnd,
#     _In_ HDC hdcBlt,
#     _In_ UINT nFlags);
PrINTWindow = user32.PrINTWindow
PrINTWindow.restype = WINAPI


# WINAPI
# SetLayeredWindowAttributes(
#     _In_ HWND hwnd,
#     _In_ COLORREF crKey,
#     _In_ BYTE bAlpha,
#     _In_ DWORD dwFlags);
SetLayeredWindowAttributes = user32.SetLayeredWindowAttributes
SetLayeredWindowAttributes.restype = WINAPI

LWA_COLORKEY = 0x00000001
LWA_ALPHA = 0x00000002
ULW_COLORKEY = 0x00000001
ULW_ALPHA = 0x00000002
ULW_OPAQUE = 0x00000004
ULW_EX_NORESIZE = 0x00000008

# WINAPI
# ShowWindowAsync(
#     _In_  HWND hWnd,
#     _In_  INT nCmdShow);
ShowWindowAsync = user32.ShowWindowAsync
ShowWindowAsync.restype = WINAPI


# WINAPI
# FlashWindow(
#     _In_  HWND hWnd,
#     _In_  BOOL bInvert);
FlashWindow = user32.FlashWindow
FlashWindow.restype = WINAPI


class FLASHWINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('hwnd', HWND),
        ('dwFlags', DWORD),
        ('uCount', UINT),
        ('dwTimeout', DWORD),
    ]


PFLASHWINFO = POINTER(FLASHWINFO)



# WINAPI
# FlashWindowEx(
#     _In_ PFLASHWINFO pfwi);
FlashWindowEx = user32.FlashWindowEx
FlashWindowEx.restype = WINAPI

FLASHW_STOP = 0x00000000
FLASHW_CAPTION = 0x00000001
FLASHW_TRAY = 0x00000002
FLASHW_ALL = FLASHW_CAPTION | FLASHW_TRAY
FLASHW_TIMER = 0x00000004
FLASHW_TIMERNOFG = 0x0000000C

# WINAPI
# ShowOwnedPopups(
#     _In_  HWND hWnd,
#     _In_  BOOL fShow);
ShowOwnedPopups = user32.ShowOwnedPopups
ShowOwnedPopups.restype = WINAPI


# WINAPI
# OpenIcon(
#     _In_  HWND hWnd);
OpenIcon = user32.OpenIcon
OpenIcon.restype = WINAPI


# WINAPI
# CloseWindow(
#     _In_  HWND hWnd);
CloseWindow = user32.CloseWindow
CloseWindow.restype = WINAPI


# WINAPI
# MoveWindow(
#     _In_ HWND hWnd,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_ BOOL bRepaINT);
MoveWindow = user32.MoveWindow
MoveWindow.restype = WINAPI


# WINAPI
# SetWindowPos(
#     _In_ HWND hWnd,
#     _In_opt_ HWND hWndInsertAfter,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT uFlags);
SetWindowPos = user32.SetWindowPos
SetWindowPos.restype = WINAPI


# WINAPI
# GetWindowPlacement(
#     _In_ HWND hWnd,
#     _Inout_ WINDOWPLACEMENT *lpwndpl);
GetWindowPlacement = user32.GetWindowPlacement
GetWindowPlacement.restype = WINAPI


# WINAPI
# SetWindowPlacement(
#     _In_ HWND hWnd,
#     _In_ CONST WINDOWPLACEMENT *lpwndpl);
SetWindowPlacement = user32.SetWindowPlacement
SetWindowPlacement.restype = WINAPI

WDA_NONE = 0x00000000
WDA_MONITOR = 0x00000001

# WINAPI
# GetWindowDisplayAffinity(
#     _In_ HWND hWnd,
#     _Out_ DWORD* pdwAffinity);
GetWindowDisplayAffinity = user32.GetWindowDisplayAffinity
GetWindowDisplayAffinity.restype = WINAPI


# WINAPI
# SetWindowDisplayAffinity(
#     _In_ HWND hWnd,
#     _In_ DWORD dwAffinity);
SetWindowDisplayAffinity = user32.SetWindowDisplayAffinity
SetWindowDisplayAffinity.restype = WINAPI


# WINAPI
# BeginDeferWindowPos(
#     _In_ INT nNumWindows);
BeginDeferWindowPos = user32.BeginDeferWindowPos
BeginDeferWindowPos.restype = WINAPI


# WINAPI
# DeferWindowPos(
#     _In_ HDWP hWinPosInfo,
#     _In_ HWND hWnd,
#     _In_opt_ HWND hWndInsertAfter,
#     _In_ INT x,
#     _In_ INT y,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT uFlags);
DeferWindowPos = user32.DeferWindowPos
DeferWindowPos.restype = WINAPI


# WINAPI
# EndDeferWindowPos(
#     _In_ HDWP hWinPosInfo);
EndDeferWindowPos = user32.EndDeferWindowPos
EndDeferWindowPos.restype = WINAPI


# WINAPI
# IsWindowVisible(
#     _In_ HWND hWnd);
IsWindowVisible = user32.IsWindowVisible
IsWindowVisible.restype = WINAPI


# WINAPI
# IsIconic(
#     _In_ HWND hWnd);
IsIconic = user32.IsIconic
IsIconic.restype = WINAPI


# WINAPI
# AnyPopup(
#     VOID);
AnyPopup = user32.AnyPopup
AnyPopup.restype = WINAPI


# WINAPI
# BringWindowToTop(
#     _In_ HWND hWnd);
BringWindowToTop = user32.BringWindowToTop
BringWindowToTop.restype = WINAPI


# WINAPI
# IsZoomed(
#     _In_ HWND hWnd);
IsZoomed = user32.IsZoomed
IsZoomed.restype = WINAPI

SWP_NOSIZE = 0x00000001
SWP_NOMOVE = 0x00000002
SWP_NOZORDER = 0x00000004
SWP_NOREDRAW = 0x00000008
SWP_NOACTIVATE = 0x00000010
SWP_FRAMECHANGED = 0x00000020
SWP_SHOWWINDOW = 0x00000040
SWP_HIDEWINDOW = 0x00000080
SWP_NOCOPYBITS = 0x00000100
SWP_NOOWNERZORDER = 0x00000200
SWP_NOSENDCHANGING = 0x00000400
SWP_DRAWFRAME = SWP_FRAMECHANGED
SWP_NOREPOSITION = SWP_NOOWNERZORDER
SWP_DEFERERASE = 0x00002000
SWP_ASYNCWINDOWPOS = 0x00004000
HWND_TOP = 0
HWND_BOTTOM = 1
HWND_TOPMOST = -1
HWND_NOTOPMOST = -2


class DLGTEMPLATE(ctypes.Structure):
    _fields_ = [
        ('style', DWORD),
        ('dwExtendedStyle', DWORD),
        ('cdit', WORD),
        ('x', SHORT),
        ('y', SHORT),
        ('cx', SHORT),
        ('cy', SHORT),
    ]


LPDLGTEMPLATEA = POINTER(DLGTEMPLATE)
LPDLGTEMPLATEW = POINTER(DLGTEMPLATE)
LPDLGTEMPLATE = LPDLGTEMPLATEW
LPCDLGTEMPLATEA = POINTER(CONST)
LPCDLGTEMPLATEW = POINTER(CONST)
LPCDLGTEMPLATE = LPCDLGTEMPLATEW


class DLGITEMTEMPLATE(ctypes.Structure):
    _fields_ = [
        ('style', DWORD),
        ('dwExtendedStyle', DWORD),
        ('x', SHORT),
        ('y', SHORT),
        ('cx', SHORT),
        ('cy', SHORT),
        ('id', WORD),
    ]


PDLGITEMTEMPLATEA = POINTER(DLGITEMTEMPLATE)
PDLGITEMTEMPLATEW = POINTER(DLGITEMTEMPLATE)
PDLGITEMTEMPLATE = PDLGITEMTEMPLATEW
LPDLGITEMTEMPLATEA = POINTER(DLGITEMTEMPLATE)
LPDLGITEMTEMPLATEW = POINTER(DLGITEMTEMPLATE)
LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEW

# WINAPI
# CreateDialogParamA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpTemplateName,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
CreateDialogParamA = user32.CreateDialogParamA
CreateDialogParamA.restype = WINAPI


# WINAPI
# CreateDialogParamW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpTemplateName,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
CreateDialogParamW = user32.CreateDialogParamW
CreateDialogParamW.restype = WINAPI

CreateDialogParam = CreateDialogParamW
# CreateDialogParam = CreateDialogParamA

# WINAPI
# CreateDialogIndirectParamA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCDLGTEMPLATEA lpTemplate,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
CreateDialogIndirectParamA = user32.CreateDialogIndirectParamA
CreateDialogIndirectParamA.restype = WINAPI


# WINAPI
# CreateDialogIndirectParamW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCDLGTEMPLATEW lpTemplate,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
CreateDialogIndirectParamW = user32.CreateDialogIndirectParamW
CreateDialogIndirectParamW.restype = WINAPI

CreateDialogIndirectParam = CreateDialogIndirectParamW
# CreateDialogIndirectParam = CreateDialogIndirectParamA


def CreateDialogA(hInstance, lpName, hWndParent, lpDialogFunc):
    return CreateDialogParamA(hInstance, lpName, hWndParent, lpDialogFunc, 0)


def CreateDialogW(hInstance, lpName, hWndParent, lpDialogFunc):
    return CreateDialogParamW(hInstance, lpName, hWndParent, lpDialogFunc, 0)


CreateDialog = CreateDialogW
# CreateDialog = CreateDialogA


def CreateDialogIndirectA(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return CreateDialogIndirectParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


def CreateDialogIndirectW(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return CreateDialogIndirectParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


CreateDialogIndirect = CreateDialogIndirectW
# CreateDialogIndirect = CreateDialogIndirectA

# WINAPI
# DialogBoxParamA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpTemplateName,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
DialogBoxParamA = user32.DialogBoxParamA
DialogBoxParamA.restype = WINAPI


# WINAPI
# DialogBoxParamW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpTemplateName,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
DialogBoxParamW = user32.DialogBoxParamW
DialogBoxParamW.restype = WINAPI

DialogBoxParam = DialogBoxParamW
# DialogBoxParam = DialogBoxParamA

# WINAPI
# DialogBoxIndirectParamA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCDLGTEMPLATEA hDialogTemplate,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
DialogBoxIndirectParamA = user32.DialogBoxIndirectParamA
DialogBoxIndirectParamA.restype = WINAPI


# WINAPI
# DialogBoxIndirectParamW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCDLGTEMPLATEW hDialogTemplate,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ DLGPROC lpDialogFunc,
#     _In_ LPARAM dwInitParam);
DialogBoxIndirectParamW = user32.DialogBoxIndirectParamW
DialogBoxIndirectParamW.restype = WINAPI

DialogBoxIndirectParam = DialogBoxIndirectParamW
# DialogBoxIndirectParam = DialogBoxIndirectParamA


def DialogBoxA(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return DialogBoxParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


def DialogBoxW(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return DialogBoxParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


DialogBox = DialogBoxW
# DialogBox = DialogBoxA


def DialogBoxIndirectA(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return DialogBoxIndirectParamA(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


def DialogBoxIndirectW(hInstance, lpTemplate, hWndParent, lpDialogFunc):
    return DialogBoxIndirectParamW(hInstance, lpTemplate, hWndParent, lpDialogFunc, 0)


DialogBoxIndirect = DialogBoxIndirectW
# DialogBoxIndirect = DialogBoxIndirectA

# WINAPI
# EndDialog(
#     _In_ HWND hDlg,
#     _In_ INT_PTR nResult);
EndDialog = user32.EndDialog
EndDialog.restype = WINAPI


# WINAPI
# GetDlgItem(
#     _In_opt_ HWND hDlg,
#     _In_ INT nIDDlgItem);
GetDlgItem = user32.GetDlgItem
GetDlgItem.restype = WINAPI


# WINAPI
# SetDlgItemInt(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _In_ UINT uValue,
#     _In_ BOOL bSigned);
SetDlgItemInt = user32.SetDlgItemInt
SetDlgItemInt.restype = WINAPI


# WINAPI
# GetDlgItemInt(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _Out_opt_ BOOL *lpTranslated,
#     _In_ BOOL bSigned);
GetDlgItemInt = user32.GetDlgItemInt
GetDlgItemInt.restype = WINAPI


# WINAPI
# SetDlgItemTextA(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _In_ LPCSTR lpString);
SetDlgItemTextA = user32.SetDlgItemTextA
SetDlgItemTextA.restype = WINAPI


# WINAPI
# SetDlgItemTextW(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _In_ LPCWSTR lpString);
SetDlgItemTextW = user32.SetDlgItemTextW
SetDlgItemTextW.restype = WINAPI

SetDlgItemText = SetDlgItemTextW
# SetDlgItemText = SetDlgItemTextA

# WINAPI
# GetDlgItemTextA(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _Out_writes_(cchMax) LPSTR lpString,
#     _In_ INT cchMax);
GetDlgItemTextA = user32.GetDlgItemTextA
GetDlgItemTextA.restype = WINAPI


# WINAPI
# GetDlgItemTextW(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _Out_writes_(cchMax) LPWSTR lpString,
#     _In_ INT cchMax);
GetDlgItemTextW = user32.GetDlgItemTextW
GetDlgItemTextW.restype = WINAPI

GetDlgItemText = GetDlgItemTextW
# GetDlgItemText = GetDlgItemTextA

# WINAPI
# CheckDlgButton(
#     _In_ HWND hDlg,
#     _In_ INT nIDButton,
#     _In_ UINT uCheck);
CheckDlgButton = user32.CheckDlgButton
CheckDlgButton.restype = WINAPI


# WINAPI
# CheckRadioButton(
#     _In_ HWND hDlg,
#     _In_ INT nIDFirstButton,
#     _In_ INT nIDLastButton,
#     _In_ INT nIDCheckButton);
CheckRadioButton = user32.CheckRadioButton
CheckRadioButton.restype = WINAPI


# WINAPI
# IsDlgButtonChecked(
#     _In_ HWND hDlg,
#     _In_ INT nIDButton);
IsDlgButtonChecked = user32.IsDlgButtonChecked
IsDlgButtonChecked.restype = WINAPI


# WINAPI
# SendDlgItemMessageA(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
SendDlgItemMessageA = user32.SendDlgItemMessageA
SendDlgItemMessageA.restype = WINAPI


# WINAPI
# SendDlgItemMessageW(
#     _In_ HWND hDlg,
#     _In_ INT nIDDlgItem,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
SendDlgItemMessageW = user32.SendDlgItemMessageW
SendDlgItemMessageW.restype = WINAPI

SendDlgItemMessage = SendDlgItemMessageW
# SendDlgItemMessage = SendDlgItemMessageA

# WINAPI
# GetNextDlgGroupItem(
#     _In_ HWND hDlg,
#     _In_opt_ HWND hCtl,
#     _In_ BOOL bPrevious);
GetNextDlgGroupItem = user32.GetNextDlgGroupItem
GetNextDlgGroupItem.restype = WINAPI


# WINAPI
# GetNextDlgTabItem(
#     _In_ HWND hDlg,
#     _In_opt_ HWND hCtl,
#     _In_ BOOL bPrevious);
GetNextDlgTabItem = user32.GetNextDlgTabItem
GetNextDlgTabItem.restype = WINAPI


# WINAPI
# GetDlgCtrlID(
#     _In_ HWND hWnd);
GetDlgCtrlID = user32.GetDlgCtrlID
GetDlgCtrlID.restype = WINAPI


# WINAPI
# GetDialogBaseUnits(VOID);
GetDialogBaseUnits = user32.GetDialogBaseUnits
GetDialogBaseUnits.restype = WINAPI


# #endif
# DefDlgProcA(
#     _In_ HWND hDlg,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefDlgProcA = user32.DefDlgProcA
DefDlgProcA.restype = WINAPI


# #endif
# DefDlgProcW(
#     _In_ HWND hDlg,
#     _In_ UINT Msg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefDlgProcW = user32.DefDlgProcW
DefDlgProcW.restype = WINAPI

DefDlgProc = DefDlgProcW
# DefDlgProc = DefDlgProcA


class DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(ENUM):
    DCDC_DEFAULT = 0x0000
    DCDC_DISABLE_FONT_UPDATE = 0x0001
    DCDC_DISABLE_RELAYOUT = 0x0002


# WINAPI
# SetDialogControlDpiChangeBehavior(
#     _In_ HWND hWnd,
#     _In_ DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
#     _In_ DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);
SetDialogControlDpiChangeBehavior = user32.SetDialogControlDpiChangeBehavior
SetDialogControlDpiChangeBehavior.restype = WINAPI


# WINAPI
# GetDialogControlDpiChangeBehavior(
#     _In_ HWND hWnd);
GetDialogControlDpiChangeBehavior = user32.GetDialogControlDpiChangeBehavior
GetDialogControlDpiChangeBehavior.restype = WINAPI

class DIALOG_DPI_CHANGE_BEHAVIORS(ENUM):
    DDC_DEFAULT = 0x0000
    DDC_DISABLE_ALL = 0x0001
    DDC_DISABLE_RESIZE = 0x0002
    DDC_DISABLE_CONTROL_RELAYOUT = 0x0004




# WINAPI
# SetDialogDpiChangeBehavior(
#     _In_ HWND hDlg,
#     _In_ DIALOG_DPI_CHANGE_BEHAVIORS mask,
#     _In_ DIALOG_DPI_CHANGE_BEHAVIORS values);
SetDialogDpiChangeBehavior = user32.SetDialogDpiChangeBehavior
SetDialogDpiChangeBehavior.restype = WINAPI


# WINAPI
# GetDialogDpiChangeBehavior(
#     _In_ HWND hDlg);
GetDialogDpiChangeBehavior = user32.GetDialogDpiChangeBehavior
GetDialogDpiChangeBehavior.restype = WINAPI

DLGWINDOWEXTRA = 0x0000001E
DLGWINDOWEXTRA = 0x00000030

# WINAPI
# CallMsgFilterA(
#     _In_ LPMSG lpMsg,
#     _In_ INT nCode);
CallMsgFilterA = user32.CallMsgFilterA
CallMsgFilterA.restype = WINAPI


# WINAPI
# CallMsgFilterW(
#     _In_ LPMSG lpMsg,
#     _In_ INT nCode);
CallMsgFilterW = user32.CallMsgFilterW
CallMsgFilterW.restype = WINAPI

CallMsgFilter = CallMsgFilterW
# CallMsgFilter = CallMsgFilterA

# WINAPI
# OpenClipboard(
#     _In_opt_ HWND hWndNewOwner);
OpenClipboard = user32.OpenClipboard
OpenClipboard.restype = WINAPI


# WINAPI
# CloseClipboard(
#     VOID);
CloseClipboard = user32.CloseClipboard
CloseClipboard.restype = WINAPI


# WINAPI
# GetClipboardSequenceNumber(
#     VOID);
GetClipboardSequenceNumber = user32.GetClipboardSequenceNumber
GetClipboardSequenceNumber.restype = WINAPI


# WINAPI
# GetClipboardOwner(
#     VOID);
GetClipboardOwner = user32.GetClipboardOwner
GetClipboardOwner.restype = WINAPI


# WINAPI
# SetClipboardViewer(
#     _In_ HWND hWndNewViewer);
SetClipboardViewer = user32.SetClipboardViewer
SetClipboardViewer.restype = WINAPI


# WINAPI
# GetClipboardViewer(
#     VOID);
GetClipboardViewer = user32.GetClipboardViewer
GetClipboardViewer.restype = WINAPI


# WINAPI
# ChangeClipboardChain(
#     _In_ HWND hWndRemove,
#     _In_ HWND hWndNewNext);
ChangeClipboardChain = user32.ChangeClipboardChain
ChangeClipboardChain.restype = WINAPI


# WINAPI
# SetClipboardData(
#     _In_ UINT uFormat,
#     _In_opt_ HANDLE hMem);
SetClipboardData = user32.SetClipboardData
SetClipboardData.restype = WINAPI


# WINAPI
# GetClipboardData(
#     _In_ UINT uFormat);
GetClipboardData = user32.GetClipboardData
GetClipboardData.restype = WINAPI


# WINAPI
# RegisterClipboardFormatA(
#     _In_ LPCSTR lpszFormat);
RegisterClipboardFormatA = user32.RegisterClipboardFormatA
RegisterClipboardFormatA.restype = WINAPI


# WINAPI
# RegisterClipboardFormatW(
#     _In_ LPCWSTR lpszFormat);
RegisterClipboardFormatW = user32.RegisterClipboardFormatW
RegisterClipboardFormatW.restype = WINAPI

RegisterClipboardFormat = RegisterClipboardFormatW
# RegisterClipboardFormat = RegisterClipboardFormatA

# WINAPI
# CountClipboardFormats(
#     VOID);
CountClipboardFormats = user32.CountClipboardFormats
CountClipboardFormats.restype = WINAPI


# WINAPI
# EnumClipboardFormats(
#     _In_ UINT format);
EnumClipboardFormats = user32.EnumClipboardFormats
EnumClipboardFormats.restype = WINAPI


# WINAPI
# GetClipboardFormatNameA(
#     _In_ UINT format,
#     _Out_writes_(cchMaxCount) LPSTR lpszFormatName,
#     _In_ INT cchMaxCount);
GetClipboardFormatNameA = user32.GetClipboardFormatNameA
GetClipboardFormatNameA.restype = WINAPI


# WINAPI
# GetClipboardFormatNameW(
#     _In_ UINT format,
#     _Out_writes_(cchMaxCount) LPWSTR lpszFormatName,
#     _In_ INT cchMaxCount);
GetClipboardFormatNameW = user32.GetClipboardFormatNameW
GetClipboardFormatNameW.restype = WINAPI

GetClipboardFormatName = GetClipboardFormatNameW
# GetClipboardFormatName = GetClipboardFormatNameA

# WINAPI
# EmptyClipboard(
#     VOID);
EmptyClipboard = user32.EmptyClipboard
EmptyClipboard.restype = WINAPI


# WINAPI
# IsClipboardFormatAvailable(
#     _In_ UINT format);
IsClipboardFormatAvailable = user32.IsClipboardFormatAvailable
IsClipboardFormatAvailable.restype = WINAPI


# WINAPI
# GetPriorityClipboardFormat(
#     _In_reads_(cFormats) UINT *paFormatPriorityList,
#     _In_ INT cFormats);
GetPriorityClipboardFormat = user32.GetPriorityClipboardFormat
GetPriorityClipboardFormat.restype = WINAPI


# WINAPI
# GetOpenClipboardWindow(
#     VOID);
GetOpenClipboardWindow = user32.GetOpenClipboardWindow
GetOpenClipboardWindow.restype = WINAPI


# WINAPI
# AddClipboardFormatListener(
#     _In_ HWND hwnd);
AddClipboardFormatListener = user32.AddClipboardFormatListener
AddClipboardFormatListener.restype = WINAPI


# WINAPI
# RemoveClipboardFormatListener(
#     _In_ HWND hwnd);
RemoveClipboardFormatListener = user32.RemoveClipboardFormatListener
RemoveClipboardFormatListener.restype = WINAPI


# WINAPI
# GetUpdatedClipboardFormats(
#     _Out_writes_(cFormats) PUINT lpuiFormats,
#     _In_ UINT cFormats,
#     _Out_ PUINT pcFormatsOut);
GetUpdatedClipboardFormats = user32.GetUpdatedClipboardFormats
GetUpdatedClipboardFormats.restype = WINAPI


# WINAPI
# CharToOemA(
#     _In_ LPCSTR pSrc,
#     _Out_writes_(_Inexpressible_(strlen(pSrc) + 1)) LPSTR pDst);
CharToOemA = user32.CharToOemA
CharToOemA.restype = WINAPI


# WINAPI
# CharToOemW(
#     _In_ LPCWSTR pSrc,
#     _Out_writes_(_Inexpressible_(strlen(pSrc) + 1)) LPSTR pDst);
CharToOemW = user32.CharToOemW
CharToOemW.restype = WINAPI

CharToOem = CharToOemW
# CharToOem = CharToOemA

# WINAPI
# OemToCharA(
#     _In_ LPCSTR pSrc,
#     _Out_writes_(_Inexpressible_(strlen(pSrc) + 1)) LPSTR pDst);
OemToCharA = user32.OemToCharA
OemToCharA.restype = WINAPI


# WINAPI
# OemToCharW(
#     _In_ LPCSTR pSrc,
#     _Out_writes_(_Inexpressible_(strlen(pSrc) + 1)) LPWSTR pDst);
OemToCharW = user32.OemToCharW
OemToCharW.restype = WINAPI

OemToChar = OemToCharW
# OemToChar = OemToCharA

# WINAPI
# CharToOemBuffA(
#     _In_ LPCSTR lpszSrc,
#     _Out_writes_(cchDstLength) LPSTR lpszDst,
#     _In_ DWORD cchDstLength);
CharToOemBuffA = user32.CharToOemBuffA
CharToOemBuffA.restype = WINAPI


# WINAPI
# CharToOemBuffW(
#     _In_ LPCWSTR lpszSrc,
#     _Out_writes_(cchDstLength) LPSTR lpszDst,
#     _In_ DWORD cchDstLength);
CharToOemBuffW = user32.CharToOemBuffW
CharToOemBuffW.restype = WINAPI

CharToOemBuff = CharToOemBuffW
# CharToOemBuff = CharToOemBuffA

# WINAPI
# OemToCharBuffA(
#     _In_ LPCSTR lpszSrc,
#     _Out_writes_(cchDstLength) LPSTR lpszDst,
#     _In_ DWORD cchDstLength);
OemToCharBuffA = user32.OemToCharBuffA
OemToCharBuffA.restype = WINAPI


# WINAPI
# OemToCharBuffW(
#     _In_ LPCSTR lpszSrc,
#     _Out_writes_(cchDstLength) LPWSTR lpszDst,
#     _In_ DWORD cchDstLength);
OemToCharBuffW = user32.OemToCharBuffW
OemToCharBuffW.restype = WINAPI

OemToCharBuff = OemToCharBuffW
# OemToCharBuff = OemToCharBuffA

# WINAPI
# CharUpperA(
#     _Inout_ LPSTR lpsz);
CharUpperA = user32.CharUpperA
CharUpperA.restype = WINAPI


# WINAPI
# CharUpperW(
#     _Inout_ LPWSTR lpsz);
CharUpperW = user32.CharUpperW
CharUpperW.restype = WINAPI

CharUpper = CharUpperW
# CharUpper = CharUpperA

# WINAPI
# CharUpperBuffA(
#     _Inout_updates_(cchLength) LPSTR lpsz,
#     _In_ DWORD cchLength);
CharUpperBuffA = user32.CharUpperBuffA
CharUpperBuffA.restype = WINAPI


# WINAPI
# CharUpperBuffW(
#     _Inout_updates_(cchLength) LPWSTR lpsz,
#     _In_ DWORD cchLength);
CharUpperBuffW = user32.CharUpperBuffW
CharUpperBuffW.restype = WINAPI

CharUpperBuff = CharUpperBuffW
# CharUpperBuff = CharUpperBuffA

# WINAPI
# CharLowerA(
#     _Inout_ LPSTR lpsz);
CharLowerA = user32.CharLowerA
CharLowerA.restype = WINAPI


# WINAPI
# CharLowerW(
#     _Inout_ LPWSTR lpsz);
CharLowerW = user32.CharLowerW
CharLowerW.restype = WINAPI

CharLower = CharLowerW
# CharLower = CharLowerA

# WINAPI
# CharLowerBuffA(
#     _Inout_updates_(cchLength) LPSTR lpsz,
#     _In_ DWORD cchLength);
CharLowerBuffA = user32.CharLowerBuffA
CharLowerBuffA.restype = WINAPI


# WINAPI
# CharLowerBuffW(
#     _Inout_updates_(cchLength) LPWSTR lpsz,
#     _In_ DWORD cchLength);
CharLowerBuffW = user32.CharLowerBuffW
CharLowerBuffW.restype = WINAPI

CharLowerBuff = CharLowerBuffW
# CharLowerBuff = CharLowerBuffA

# WINAPI
# CharNextA(
#     _In_ LPCSTR lpsz);
CharNextA = user32.CharNextA
CharNextA.restype = WINAPI


# WINAPI
# CharNextW(
#     _In_ LPCWSTR lpsz);
CharNextW = user32.CharNextW
CharNextW.restype = WINAPI

CharNext = CharNextW
# CharNext = CharNextA

# WINAPI
# CharPrevA(
#     _In_ LPCSTR lpszStart,
#     _In_ LPCSTR lpszCurrent);
CharPrevA = user32.CharPrevA
CharPrevA.restype = WINAPI


# WINAPI
# CharPrevW(
#     _In_ LPCWSTR lpszStart,
#     _In_ LPCWSTR lpszCurrent);
CharPrevW = user32.CharPrevW
CharPrevW.restype = WINAPI

CharPrev = CharPrevW
# CharPrev = CharPrevA

# WINAPI
# CharNextExA(
#      _In_ WORD CodePage,
#      _In_ LPCSTR lpCurrentChar,
#      _In_ DWORD dwFlags);
CharNextExA = user32.CharNextExA
CharNextExA.restype = WINAPI


# WINAPI
# CharPrevExA(
#      _In_ WORD CodePage,
#      _In_ LPCSTR lpStart,
#      _In_ LPCSTR lpCurrentChar,
#      _In_ DWORD dwFlags);
CharPrevExA = user32.CharPrevExA
CharPrevExA.restype = WINAPI

# AnsiToOem = CharToOemA
# OemToAnsi = OemToCharA
# AnsiToOemBuff = CharToOemBuffA
# OemToAnsiBuff = OemToCharBuffA
# AnsiUpper = CharUpperA
# AnsiUpperBuff = CharUpperBuffA
# AnsiLower = CharLowerA
# AnsiLowerBuff = CharLowerBuffA
# AnsiNext = CharNextA
# AnsiPrev = CharPrevA

# WINAPI
# IsCharAlphaA(
#     _In_ CHAR ch);
IsCharAlphaA = user32.IsCharAlphaA
IsCharAlphaA.restype = WINAPI


# WINAPI
# IsCharAlphaW(
#     _In_ WCHAR ch);
IsCharAlphaW = user32.IsCharAlphaW
IsCharAlphaW.restype = WINAPI

IsCharAlpha = IsCharAlphaW
# IsCharAlpha = IsCharAlphaA

# WINAPI
# IsCharAlphaNumericA(
#     _In_ CHAR ch);
IsCharAlphaNumericA = user32.IsCharAlphaNumericA
IsCharAlphaNumericA.restype = WINAPI


# WINAPI
# IsCharAlphaNumericW(
#     _In_ WCHAR ch);
IsCharAlphaNumericW = user32.IsCharAlphaNumericW
IsCharAlphaNumericW.restype = WINAPI

IsCharAlphaNumeric = IsCharAlphaNumericW
# IsCharAlphaNumeric = IsCharAlphaNumericA

# WINAPI
# IsCharUpperA(
#     _In_ CHAR ch);
IsCharUpperA = user32.IsCharUpperA
IsCharUpperA.restype = WINAPI


# WINAPI
# IsCharUpperW(
#     _In_ WCHAR ch);
IsCharUpperW = user32.IsCharUpperW
IsCharUpperW.restype = WINAPI

IsCharUpper = IsCharUpperW
# IsCharUpper = IsCharUpperA

# WINAPI
# IsCharLowerA(
#     _In_ CHAR ch);
IsCharLowerA = user32.IsCharLowerA
IsCharLowerA.restype = WINAPI


# WINAPI
# IsCharLowerW(
#     _In_ WCHAR ch);
IsCharLowerW = user32.IsCharLowerW
IsCharLowerW.restype = WINAPI

IsCharLower = IsCharLowerW
# IsCharLower = IsCharLowerA

# WINAPI
# SetFocus(
#     _In_opt_ HWND hWnd);
SetFocus = user32.SetFocus
SetFocus.restype = WINAPI


# WINAPI
# GetActiveWindow(
#     VOID);
GetActiveWindow = user32.GetActiveWindow
GetActiveWindow.restype = WINAPI


# WINAPI
# GetFocus(
#     VOID);
GetFocus = user32.GetFocus
GetFocus.restype = WINAPI


# WINAPI
# GetKBCodePage(
#     VOID);
GetKBCodePage = user32.GetKBCodePage
GetKBCodePage.restype = WINAPI


# WINAPI
# GetKeyState(
#     _In_ INT nVirtKey);
GetKeyState = user32.GetKeyState
GetKeyState.restype = WINAPI


# WINAPI
# GetAsyncKeyState(
#     _In_ INT vKey);
GetAsyncKeyState = user32.GetAsyncKeyState
GetAsyncKeyState.restype = WINAPI


# WINAPI
# GetKeyboardState(
#     _Out_writes_(256) PBYTE lpKeyState);
GetKeyboardState = user32.GetKeyboardState
GetKeyboardState.restype = WINAPI


# WINAPI
# SetKeyboardState(
#     _In_reads_(256) LPBYTE lpKeyState);
SetKeyboardState = user32.SetKeyboardState
SetKeyboardState.restype = WINAPI


# WINAPI
# GetKeyNameTextA(
#     _In_ LONG lParam,
#     _Out_writes_(cchSize) LPSTR lpString,
#     _In_ INT cchSize);
GetKeyNameTextA = user32.GetKeyNameTextA
GetKeyNameTextA.restype = WINAPI


# WINAPI
# GetKeyNameTextW(
#     _In_ LONG lParam,
#     _Out_writes_(cchSize) LPWSTR lpString,
#     _In_ INT cchSize);
GetKeyNameTextW = user32.GetKeyNameTextW
GetKeyNameTextW.restype = WINAPI

GetKeyNameText = GetKeyNameTextW
# GetKeyNameText = GetKeyNameTextA

# WINAPI
# GetKeyboardType(
#     _In_ INT nTypeFlag);
GetKeyboardType = user32.GetKeyboardType
GetKeyboardType.restype = WINAPI


# WINAPI
# ToAscii(
#     _In_ UINT uVirtKey,
#     _In_ UINT uScanCode,
#     _In_reads_opt_(256) CONST BYTE *lpKeyState,
#     _Out_ LPWORD lpChar,
#     _In_ UINT uFlags);
ToAscii = user32.ToAscii
ToAscii.restype = WINAPI


# WINAPI
# ToAsciiEx(
#     _In_ UINT uVirtKey,
#     _In_ UINT uScanCode,
#     _In_reads_opt_(256) CONST BYTE *lpKeyState,
#     _Out_ LPWORD lpChar,
#     _In_ UINT uFlags,
#     _In_opt_ HKL dwhkl);
ToAsciiEx = user32.ToAsciiEx
ToAsciiEx.restype = WINAPI


# WINAPI
# ToUnicode(
#     _In_ UINT wVirtKey,
#     _In_ UINT wScanCode,
#     _In_reads_bytes_opt_(256) CONST BYTE *lpKeyState,
#     _Out_writes_(cchBuff) LPWSTR pwszBuff,
#     _In_ INT cchBuff,
#     _In_ UINT wFlags);
ToUnicode = user32.ToUnicode
ToUnicode.restype = WINAPI


# WINAPI
# OemKeyScan(
#     _In_ WORD wOemChar);
OemKeyScan = user32.OemKeyScan
OemKeyScan.restype = WINAPI


# WINAPI
# VkKeyScanA(
#     _In_ CHAR ch);
VkKeyScanA = user32.VkKeyScanA
VkKeyScanA.restype = WINAPI


# WINAPI
# VkKeyScanW(
#     _In_ WCHAR ch);
VkKeyScanW = user32.VkKeyScanW
VkKeyScanW.restype = WINAPI

VkKeyScan = VkKeyScanW
# VkKeyScan = VkKeyScanA

# WINAPI
# VkKeyScanExA(
#     _In_ CHAR ch,
#     _In_ HKL dwhkl);
VkKeyScanExA = user32.VkKeyScanExA
VkKeyScanExA.restype = WINAPI


# WINAPI
# VkKeyScanExW(
#     _In_ WCHAR ch,
#     _In_ HKL dwhkl);
VkKeyScanExW = user32.VkKeyScanExW
VkKeyScanExW.restype = WINAPI

VkKeyScanEx = VkKeyScanExW
# VkKeyScanEx = VkKeyScanExA


KEYEVENTF_EXTENDEDKEY = 0x00000001
KEYEVENTF_KEYUP = 0x00000002
KEYEVENTF_UNICODE = 0x00000004
KEYEVENTF_SCANCODE = 0x00000008

# WINAPI
# keybd_event(
#     _In_ BYTE bVk,
#     _In_ BYTE bScan,
#     _In_ DWORD dwFlags,
#     _In_ ULONG_PTR dwExtraInfo);
keybd_event = user32.keybd_event
keybd_event.restype = WINAPI

MOUSEEVENTF_MOVE = 0x00000001
MOUSEEVENTF_LEFTDOWN = 0x00000002
MOUSEEVENTF_LEFTUP = 0x00000004
MOUSEEVENTF_RIGHTDOWN = 0x00000008
MOUSEEVENTF_RIGHTUP = 0x00000010
MOUSEEVENTF_MIDDLEDOWN = 0x00000020
MOUSEEVENTF_MIDDLEUP = 0x00000040
MOUSEEVENTF_XDOWN = 0x00000080
MOUSEEVENTF_XUP = 0x00000100
MOUSEEVENTF_WHEEL = 0x00000800
MOUSEEVENTF_HWHEEL = 0x00001000
MOUSEEVENTF_MOVE_NOCOALESCE = 0x00002000
MOUSEEVENTF_VIRTUALDESK = 0x00004000
MOUSEEVENTF_ABSOLUTE = 0x00008000

# WINAPI
# mouse_event(
#     _In_ DWORD dwFlags,
#     _In_ DWORD dx,
#     _In_ DWORD dy,
#     _In_ DWORD dwData,
#     _In_ ULONG_PTR dwExtraInfo);
mouse_event = user32.mouse_event
mouse_event.restype = WINAPI


class tagMOUSEINPUT(ctypes.Structure):
    _fields_ = [
        ('dx', LONG),
        ('dy', LONG),
        ('mouseData', DWORD),
        ('dwFlags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR),
    ]


MOUSEINPUT = tagMOUSEINPUT
PMOUSEINPUT = POINTER(tagMOUSEINPUT)
LPMOUSEINPUT = POINTER(tagMOUSEINPUT)



class tagKEYBDINPUT(ctypes.Structure):
    _fields_ = [
        ('wVk', WORD),
        ('wScan', WORD),
        ('dwFlags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR),
    ]


KEYBDINPUT = tagKEYBDINPUT
PKEYBDINPUT = POINTER(tagKEYBDINPUT)
LPKEYBDINPUT = POINTER(tagKEYBDINPUT)



class tagHARDWAREINPUT(ctypes.Structure):
    _fields_ = [
        ('uMsg', DWORD),
        ('wParamL', WORD),
        ('wParamH', WORD),
    ]


HARDWAREINPUT = tagHARDWAREINPUT
PHARDWAREINPUT = POINTER(tagHARDWAREINPUT)
LPHARDWAREINPUT = POINTER(tagHARDWAREINPUT)


INPUT_MOUSE = 0x00000000
INPUT_KEYBOARD = 0x00000001
INPUT_HARDWARE = 0x00000002

class tagINPUT(ctypes.Structure):
    _fields_ = [
        ('type', DWORD),
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
    ]


INPUT = tagINPUT
PINPUT = POINTER(tagINPUT)
LPINPUT = POINTER(tagINPUT)



# WINAPI
# SendInput(
#     _In_ UINT cInputs,
#     _In_reads_(cInputs) LPINPUT pInputs,
#     _In_ INT cbSize);
SendInput = user32.SendInput
SendInput.restype = WINAPI


class tagTOUCHINPUT(ctypes.Structure):
    _fields_ = [
        ('x', LONG),
        ('y', LONG),
        ('hSource', HANDLE),
        ('dwID', DWORD),
        ('dwFlags', DWORD),
        ('dwMask', DWORD),
        ('dwTime', DWORD),
        ('dwExtraInfo', ULONG_PTR),
        ('cxContact', DWORD),
        ('cyContact', DWORD),
    ]


TOUCHINPUT = tagTOUCHINPUT
PTOUCHINPUT = POINTER(tagTOUCHINPUT)


PCTOUCHINPUT = TOUCHINPUT


def TOUCH_COORD_TO_PIXEL(l):
    return int(l / 100)


TOUCHEVENTF_MOVE = 0x00000001
TOUCHEVENTF_DOWN = 0x00000002
TOUCHEVENTF_UP = 0x00000004
TOUCHEVENTF_INRANGE = 0x00000008
TOUCHEVENTF_PRIMARY = 0x00000010
TOUCHEVENTF_NOCOALESCE = 0x00000020
TOUCHEVENTF_PEN = 0x00000040
TOUCHEVENTF_PALM = 0x00000080
TOUCHINPUTMASKF_TIMEFROMSYSTEM = 0x00000001
TOUCHINPUTMASKF_EXTRAINFO = 0x00000002
TOUCHINPUTMASKF_CONTACTAREA = 0x00000004

# WINAPI
# GetTouchInputInfo(
#     _In_ HTOUCHINPUT hTouchInput,
#     _In_ UINT cInputs,
#     _Out_writes_(cInputs) PTOUCHINPUT pInputs,
#     _In_ INT cbSize);
GetTouchInputInfo = user32.GetTouchInputInfo
GetTouchInputInfo.restype = WINAPI


# WINAPI
# CloseTouchInputHandle(
#     _In_ HTOUCHINPUT hTouchInput);
CloseTouchInputHandle = user32.CloseTouchInputHandle
CloseTouchInputHandle.restype = WINAPI

TWF_FINETOUCH = 0x00000001
TWF_WANTPALM = 0x00000002

# WINAPI
# RegisterTouchWindow(
#     _In_ HWND hwnd,
#     _In_ ULONG ulFlags);
RegisterTouchWindow = user32.RegisterTouchWindow
RegisterTouchWindow.restype = WINAPI


# WINAPI
# UnregisterTouchWindow(
#     _In_ HWND hwnd);
UnregisterTouchWindow = user32.UnregisterTouchWindow
UnregisterTouchWindow.restype = WINAPI


# WINAPI
# IsTouchWindow(
#     _In_ HWND hwnd,
#     _Out_opt_ PULONG pulFlags);
IsTouchWindow = user32.IsTouchWindow
IsTouchWindow.restype = WINAPI


class tagPOINTER_INPUT_TYPE(ENUM):
    PT_POINTER = 1
    PT_TOUCH = 2
    PT_PEN = 3
    PT_MOUSE = 4
    PT_TOUCHPAD = 5


POINTER_INPUT_TYPE = DWORD
POINTER_FLAGS = UINT32
POINTER_FLAG_NONE = 0x00000000
POINTER_FLAG_NEW = 0x00000001
POINTER_FLAG_INRANGE = 0x00000002
POINTER_FLAG_INCONTACT = 0x00000004
POINTER_FLAG_FIRSTBUTTON = 0x00000010
POINTER_FLAG_SECONDBUTTON = 0x00000020
POINTER_FLAG_THIRDBUTTON = 0x00000040
POINTER_FLAG_FOURTHBUTTON = 0x00000080
POINTER_FLAG_FIFTHBUTTON = 0x00000100
POINTER_FLAG_PRIMARY = 0x00002000
POINTER_FLAG_CONFIDENCE = 0x00004000
POINTER_FLAG_CANCELED = 0x00008000
POINTER_FLAG_DOWN = 0x00010000
POINTER_FLAG_UPDATE = 0x00020000
POINTER_FLAG_UP = 0x00040000
POINTER_FLAG_WHEEL = 0x00080000
POINTER_FLAG_HWHEEL = 0x00100000
POINTER_FLAG_CAPTURECHANGED = 0x00200000
POINTER_FLAG_HASTRANSFORM = 0x00400000
POINTER_MOD_SHIFT = 0x00000004
POINTER_MOD_CTRL = 0x00000008


class tagPOINTER_BUTTON_CHANGE_TYPE(ENUM):
    POINTER_CHANGE_NONE = 0
    POINTER_CHANGE_FIRSTBUTTON_DOWN = 1
    POINTER_CHANGE_FIRSTBUTTON_UP = 2
    POINTER_CHANGE_SECONDBUTTON_DOWN = 3
    POINTER_CHANGE_SECONDBUTTON_UP = 4
    POINTER_CHANGE_THIRDBUTTON_DOWN = 5
    POINTER_CHANGE_THIRDBUTTON_UP = 6
    POINTER_CHANGE_FOURTHBUTTON_DOWN = 7
    POINTER_CHANGE_FOURTHBUTTON_UP = 8
    POINTER_CHANGE_FIFTHBUTTON_DOWN = 9
    POINTER_CHANGE_FIFTHBUTTON_UP = 10


POINTER_BUTTON_CHANGE_TYPE = tagPOINTER_BUTTON_CHANGE_TYPE


class tagPOINTER_INFO(ctypes.Structure):
    _fields_ = [
        ('poINTerType', POINTER_INPUT_TYPE),
        ('poINTerId', UINT32),
        ('frameId', UINT32),
        ('poINTerFlags', POINTER_FLAGS),
        ('sourceDevice', HANDLE),
        ('hwndTarget', HWND),
        ('ptPixelLocation', POINT),
        ('ptHimetricLocation', POINT),
        ('ptPixelLocationRaw', POINT),
        ('ptHimetricLocationRaw', POINT),
        ('dwTime', DWORD),
        ('historyCount', UINT32),
        ('InputData', INT32),
        ('dwKeyStates', DWORD),
        ('PerformanceCount', UINT64),
        ('ButtonChangeType', POINTER_BUTTON_CHANGE_TYPE),
    ]


POINTER_INFO = tagPOINTER_INFO


TOUCH_FLAGS = UINT32
TOUCH_FLAG_NONE = 0x00000000
TOUCH_MASK = UINT32
TOUCH_MASK_NONE = 0x00000000
TOUCH_MASK_CONTACTAREA = 0x00000001
TOUCH_MASK_ORIENTATION = 0x00000002
TOUCH_MASK_PRESSURE = 0x00000004


class tagPOINTER_TOUCH_INFO(ctypes.Structure):
    _fields_ = [
        ('poINTerInfo', POINTER_INFO),
        ('touchFlags', TOUCH_FLAGS),
        ('touchMask', TOUCH_MASK),
        ('rcContact', RECT),
        ('rcContactRaw', RECT),
        ('orientation', UINT32),
        ('pressure', UINT32),
    ]


POINTER_TOUCH_INFO = tagPOINTER_TOUCH_INFO


PEN_FLAGS = UINT32
PEN_FLAG_NONE = 0x00000000
PEN_FLAG_BARREL = 0x00000001
PEN_FLAG_INVERTED = 0x00000002
PEN_FLAG_ERASER = 0x00000004
PEN_MASK = UINT32
PEN_MASK_NONE = 0x00000000
PEN_MASK_PRESSURE = 0x00000001
PEN_MASK_ROTATION = 0x00000002
PEN_MASK_TILT_X = 0x00000004
PEN_MASK_TILT_Y = 0x00000008


class tagPOINTER_PEN_INFO(ctypes.Structure):
    _fields_ = [
        ('poINTerInfo', POINTER_INFO),
        ('penFlags', PEN_FLAGS),
        ('penMask', PEN_MASK),
        ('pressure', UINT32),
        ('rotation', UINT32),
        ('tiltX', INT32),
        ('tiltY', INT32),
    ]


POINTER_PEN_INFO = tagPOINTER_PEN_INFO


POINTER_MESSAGE_FLAG_NEW = 0x00000001
POINTER_MESSAGE_FLAG_INRANGE = 0x00000002
POINTER_MESSAGE_FLAG_INCONTACT = 0x00000004
POINTER_MESSAGE_FLAG_FIRSTBUTTON = 0x00000010
POINTER_MESSAGE_FLAG_SECONDBUTTON = 0x00000020
POINTER_MESSAGE_FLAG_THIRDBUTTON = 0x00000040
POINTER_MESSAGE_FLAG_FOURTHBUTTON = 0x00000080
POINTER_MESSAGE_FLAG_FIFTHBUTTON = 0x00000100
POINTER_MESSAGE_FLAG_PRIMARY = 0x00002000
POINTER_MESSAGE_FLAG_CONFIDENCE = 0x00004000
POINTER_MESSAGE_FLAG_CANCELED = 0x00008000


def GET_POINTERID_WPARAM(wParam):
    return LOWORD(wParam)


def IS_POINTER_FLAG_SET_WPARAM(wParam, flag):
    return HIWORD(wParam & flag).value == flag


def IS_POINTER_NEW_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_NEW)


def IS_POINTER_INRANGE_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_INRANGE)


def IS_POINTER_INCONTACT_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_INCONTACT)


def IS_POINTER_FIRSTBUTTON_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_FIRSTBUTTON)


def IS_POINTER_SECONDBUTTON_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_SECONDBUTTON)


def IS_POINTER_THIRDBUTTON_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_THIRDBUTTON)


def IS_POINTER_FOURTHBUTTON_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_FOURTHBUTTON)


def IS_POINTER_FIFTHBUTTON_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_FIFTHBUTTON)


def IS_POINTER_PRIMARY_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_PRIMARY)


def HAS_POINTER_CONFIDENCE_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_CONFIDENCE)


def IS_POINTER_CANCELED_WPARAM(wParam):
    return IS_POINTER_FLAG_SET_WPARAM(wParam, POINTER_MESSAGE_FLAG_CANCELED)


PA_ACTIVATE = MA_ACTIVATE
PA_NOACTIVATE = MA_NOACTIVATE
MAX_TOUCH_COUNT = 0x00000100
TOUCH_FEEDBACK_DEFAULT = 0x00000001
TOUCH_FEEDBACK_INDIRECT = 0x00000002
TOUCH_FEEDBACK_NONE = 0x00000003

# WINAPI
# InitializeTouchInjection(
#     _In_ UINT32 maxCount,
#     _In_ DWORD dwMode);
InitializeTouchInjection = user32.InitializeTouchInjection
InitializeTouchInjection.restype = WINAPI


# WINAPI
# InjectTouchInput(
#     _In_ UINT32 count,
#     _In_reads_(count) CONST POINTER_TOUCH_INFO *contacts);
InjectTouchInput = user32.InjectTouchInput
InjectTouchInput.restype = WINAPI


class tagUSAGE_PROPERTIES(ctypes.Structure):
    _fields_ = [
        ('level', USHORT),
        ('page', USHORT),
        ('usage', USHORT),
        ('logicalMinimum', INT32),
        ('logicalMaximum', INT32),
        ('unit', USHORT),
        ('exponent', USHORT),
        ('count', BYTE),
        ('physicalMinimum', INT32),
        ('physicalMaximum', INT32),
    ]


USAGE_PROPERTIES = tagUSAGE_PROPERTIES
PUSAGE_PROPERTIES = POINTER(tagUSAGE_PROPERTIES)



class tagPOINTER_TYPE_INFO(ctypes.Structure):
    _fields_ = [
        ('type', POINTER_INPUT_TYPE),
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
    ]


POINTER_TYPE_INFO = tagPOINTER_TYPE_INFO
PPOINTER_TYPE_INFO = POINTER(tagPOINTER_TYPE_INFO)



class tagINPUT_INJECTION_VALUE(ctypes.Structure):
    _fields_ = [
        ('page', USHORT),
        ('usage', USHORT),
        ('value', INT32),
        ('index', USHORT),
    ]


INPUT_INJECTION_VALUE = tagINPUT_INJECTION_VALUE
PINPUT_INJECTION_VALUE = POINTER(tagINPUT_INJECTION_VALUE)



# WINAPI
# GetPoINTerType(
#     _In_ UINT32 poINTerId,
#     _Out_ POINTER_INPUT_TYPE *poINTerType);
GetPoINTerType = user32.GetPoINTerType
GetPoINTerType.restype = WINAPI


# WINAPI
# GetPoINTerCursorId(
#     _In_ UINT32 poINTerId,
#     _Out_ UINT32 *cursorId);
GetPoINTerCursorId = user32.GetPoINTerCursorId
GetPoINTerCursorId.restype = WINAPI


# WINAPI
# GetPoINTerInfo(
#     _In_ UINT32 poINTerId,
#     _Out_writes_(1) POINTER_INFO *poINTerInfo);
GetPoINTerInfo = user32.GetPoINTerInfo
GetPoINTerInfo.restype = WINAPI


# WINAPI
# GetPoINTerInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Out_writes_opt_(*entriesCount) POINTER_INFO *poINTerInfo);
GetPoINTerInfoHistory = user32.GetPoINTerInfoHistory
GetPoINTerInfoHistory.restype = WINAPI


# WINAPI
# GetPoINTerFrameInfo(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*poINTerCount) POINTER_INFO *poINTerInfo);
GetPoINTerFrameInfo = user32.GetPoINTerFrameInfo
GetPoINTerFrameInfo.restype = WINAPI


# WINAPI
# GetPoINTerFrameInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*entriesCount * *poINTerCount) POINTER_INFO *poINTerInfo);
GetPoINTerFrameInfoHistory = user32.GetPoINTerFrameInfoHistory
GetPoINTerFrameInfoHistory.restype = WINAPI


# WINAPI
# GetPoINTerTouchInfo(
#     _In_ UINT32 poINTerId,
#     _Out_writes_(1) POINTER_TOUCH_INFO *touchInfo);
GetPoINTerTouchInfo = user32.GetPoINTerTouchInfo
GetPoINTerTouchInfo.restype = WINAPI


# WINAPI
# GetPoINTerTouchInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Out_writes_opt_(*entriesCount) POINTER_TOUCH_INFO *touchInfo);
GetPoINTerTouchInfoHistory = user32.GetPoINTerTouchInfoHistory
GetPoINTerTouchInfoHistory.restype = WINAPI


# WINAPI
# GetPoINTerFrameTouchInfo(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*poINTerCount) POINTER_TOUCH_INFO *touchInfo);
GetPoINTerFrameTouchInfo = user32.GetPoINTerFrameTouchInfo
GetPoINTerFrameTouchInfo.restype = WINAPI


# WINAPI
# GetPoINTerFrameTouchInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*entriesCount * *poINTerCount) POINTER_TOUCH_INFO *touchInfo);
GetPoINTerFrameTouchInfoHistory = user32.GetPoINTerFrameTouchInfoHistory
GetPoINTerFrameTouchInfoHistory.restype = WINAPI


# WINAPI
# GetPoINTerPenInfo(
#     _In_ UINT32 poINTerId,
#     _Out_writes_(1) POINTER_PEN_INFO *penInfo);
GetPoINTerPenInfo = user32.GetPoINTerPenInfo
GetPoINTerPenInfo.restype = WINAPI


# WINAPI
# GetPoINTerPenInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Out_writes_opt_(*entriesCount) POINTER_PEN_INFO *penInfo);
GetPoINTerPenInfoHistory = user32.GetPoINTerPenInfoHistory
GetPoINTerPenInfoHistory.restype = WINAPI


# WINAPI
# GetPoINTerFramePenInfo(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*poINTerCount) POINTER_PEN_INFO *penInfo);
GetPoINTerFramePenInfo = user32.GetPoINTerFramePenInfo
GetPoINTerFramePenInfo.restype = WINAPI


# WINAPI
# GetPoINTerFramePenInfoHistory(
#     _In_ UINT32 poINTerId,
#     _Inout_ UINT32 *entriesCount,
#     _Inout_ UINT32 *poINTerCount,
#     _Out_writes_opt_(*entriesCount * *poINTerCount) POINTER_PEN_INFO *penInfo);
GetPoINTerFramePenInfoHistory = user32.GetPoINTerFramePenInfoHistory
GetPoINTerFramePenInfoHistory.restype = WINAPI


# WINAPI
# SkipPoINTerFrameMessages(
#     _In_ UINT32 poINTerId);
SkipPoINTerFrameMessages = user32.SkipPoINTerFrameMessages
SkipPoINTerFrameMessages.restype = WINAPI


# WINAPI
# RegisterPoINTerInputTarget(
#     _In_ HWND hwnd,
#     _In_ POINTER_INPUT_TYPE poINTerType);
RegisterPoINTerInputTarget = user32.RegisterPoINTerInputTarget
RegisterPoINTerInputTarget.restype = WINAPI


# WINAPI
# UnregisterPoINTerInputTarget(
#     _In_ HWND hwnd,
#     _In_ POINTER_INPUT_TYPE poINTerType);
UnregisterPoINTerInputTarget = user32.UnregisterPoINTerInputTarget
UnregisterPoINTerInputTarget.restype = WINAPI


# WINAPI
# RegisterPoINTerInputTargetEx(
#     _In_ HWND hwnd,
#     _In_ POINTER_INPUT_TYPE poINTerType,
#     _In_ BOOL fObserve);
RegisterPoINTerInputTargetEx = user32.RegisterPoINTerInputTargetEx
RegisterPoINTerInputTargetEx.restype = WINAPI


# WINAPI
# UnregisterPoINTerInputTargetEx(
#     _In_ HWND hwnd,
#     _In_ POINTER_INPUT_TYPE poINTerType);
UnregisterPoINTerInputTargetEx = user32.UnregisterPoINTerInputTargetEx
UnregisterPoINTerInputTargetEx.restype = WINAPI


# WINAPI
# EnableMouseInPoINTer(
#     _In_ BOOL fEnable);
EnableMouseInPoINTer = user32.EnableMouseInPoINTer
EnableMouseInPoINTer.restype = WINAPI


# WINAPI
# IsMouseInPoINTerEnabled(
#     VOID);
IsMouseInPoINTerEnabled = user32.IsMouseInPoINTerEnabled
IsMouseInPoINTerEnabled.restype = WINAPI


# WINAPI
# EnableMouseInPoINTerForThread();
EnableMouseInPoINTerForThread = user32.EnableMouseInPoINTerForThread
EnableMouseInPoINTerForThread.restype = WINAPI

TOUCH_HIT_TESTING_DEFAULT = 0x00000000
TOUCH_HIT_TESTING_CLIENT = 0x00000001
TOUCH_HIT_TESTING_NONE = 0x00000002

# WINAPI
# RegisterTouchHitTestingWindow(
#     _In_ HWND hwnd,
#     _In_ ULONG value);
RegisterTouchHitTestingWindow = user32.RegisterTouchHitTestingWindow
RegisterTouchHitTestingWindow.restype = WINAPI


class tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION(ctypes.Structure):
    _fields_ = [
        ('score', UINT16),
        ('adjustedPoINT', POINT),
    ]


TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = POINTER(tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION)



class tagTOUCH_HIT_TESTING_INPUT(ctypes.Structure):
    _fields_ = [
        ('poINTerId', UINT32),
        ('poINT', POINT),
        ('boundingBox', RECT),
        ('nonOccludedBoundingBox', RECT),
        ('orientation', UINT32),
    ]


TOUCH_HIT_TESTING_INPUT = tagTOUCH_HIT_TESTING_INPUT
PTOUCH_HIT_TESTING_INPUT = POINTER(tagTOUCH_HIT_TESTING_INPUT)


TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0x00000000
TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 0x00000FFF

# WINAPI
# EvaluateProximityToRect(
#     _In_ RECT *controlBoundingBox,
#     _In_ TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
#     _Out_ TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);
EvaluateProximityToRect = user32.EvaluateProximityToRect
EvaluateProximityToRect.restype = WINAPI


# WINAPI
# EvaluateProximityToPolygon(
#     UINT32 numVertices,
#     _In_reads_(numVertices) POINT *controlPolygon,
#     _In_ TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
#     _Out_ TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);
EvaluateProximityToPolygon = user32.EvaluateProximityToPolygon
EvaluateProximityToPolygon.restype = WINAPI


# WINAPI
# PackTouchHitTestingProximityEvaluation(
#     _In_ TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
#     _In_ TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);
PackTouchHitTestingProximityEvaluation = (
    user32.PackTouchHitTestingProximityEvaluation
)
PackTouchHitTestingProximityEvaluation.restype = WINAPI

class tagFEEDBACK_TYPE(ENUM):
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1
    FEEDBACK_PEN_BARRELVISUALIZATION = 2
    FEEDBACK_PEN_TAP = 3
    FEEDBACK_PEN_DOUBLETAP = 4
    FEEDBACK_PEN_PRESSANDHOLD = 5
    FEEDBACK_PEN_RIGHTTAP = 6
    FEEDBACK_TOUCH_TAP = 7
    FEEDBACK_TOUCH_DOUBLETAP = 8
    FEEDBACK_TOUCH_PRESSANDHOLD = 9
    FEEDBACK_TOUCH_RIGHTTAP = 10
    FEEDBACK_GESTURE_PRESSANDTAP = 11
    FEEDBACK_MAX = 0xFFFFFFFF


FEEDBACK_TYPE = tagFEEDBACK_TYPE


GWFS_INCLUDE_ANCESTORS = 0x00000001

# WINAPI
# GetWindowFeedbackSetting(
#     _In_ HWND hwnd,
#     _In_ FEEDBACK_TYPE feedback,
#     _In_ DWORD dwFlags,
#     _Inout_ UINT32* pSize,
#     _Out_writes_bytes_opt_(*pSize) VOID* config);
GetWindowFeedbackSetting = user32.GetWindowFeedbackSetting
GetWindowFeedbackSetting.restype = WINAPI


# WINAPI
# SetWindowFeedbackSetting(
#     _In_ HWND hwnd,
#     _In_ FEEDBACK_TYPE feedback,
#     _In_ DWORD dwFlags,
#     _In_ UINT32 size,
#     _In_reads_bytes_opt_(size) CONST VOID* configuration);
SetWindowFeedbackSetting = user32.SetWindowFeedbackSetting
SetWindowFeedbackSetting.restype = WINAPI


class tagINPUT_TRANSFORM(ctypes.Structure):
    _fields_ = [
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
    ]


INPUT_TRANSFORM = tagINPUT_TRANSFORM



# WINAPI
# GetPoINTerInputTransform(
#     _In_ UINT32 poINTerId,
#     _In_ UINT32 historyCount,
#     _Out_writes_(historyCount) INPUT_TRANSFORM *inputTransform);
GetPoINTerInputTransform = user32.GetPoINTerInputTransform
GetPoINTerInputTransform.restype = WINAPI


class tagLASTINPUTINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwTime', DWORD),
    ]


LASTINPUTINFO = tagLASTINPUTINFO
PLASTINPUTINFO = POINTER(tagLASTINPUTINFO)



# WINAPI
# GetLastInputInfo(
#     _Out_ PLASTINPUTINFO plii);
GetLastInputInfo = user32.GetLastInputInfo
GetLastInputInfo.restype = WINAPI


# WINAPI
# MapVirtualKeyA(
#     _In_ UINT uCode,
#     _In_ UINT uMapType);
MapVirtualKeyA = user32.MapVirtualKeyA
MapVirtualKeyA.restype = WINAPI


# WINAPI
# MapVirtualKeyW(
#     _In_ UINT uCode,
#     _In_ UINT uMapType);
MapVirtualKeyW = user32.MapVirtualKeyW
MapVirtualKeyW.restype = WINAPI

MapVirtualKey = MapVirtualKeyW
# MapVirtualKey = MapVirtualKeyA

# WINAPI
# MapVirtualKeyExA(
#     _In_ UINT uCode,
#     _In_ UINT uMapType,
#     _In_opt_ HKL dwhkl);
MapVirtualKeyExA = user32.MapVirtualKeyExA
MapVirtualKeyExA.restype = WINAPI


# WINAPI
# MapVirtualKeyExW(
#     _In_ UINT uCode,
#     _In_ UINT uMapType,
#     _In_opt_ HKL dwhkl);
MapVirtualKeyExW = user32.MapVirtualKeyExW
MapVirtualKeyExW.restype = WINAPI

MapVirtualKeyEx = MapVirtualKeyExW
# MapVirtualKeyEx = MapVirtualKeyExA
MAPVK_VK_TO_VSC = 0x00000000
MAPVK_VSC_TO_VK = 0x00000001
MAPVK_VK_TO_CHAR = 0x00000002
MAPVK_VSC_TO_VK_EX = 0x00000003
MAPVK_VK_TO_VSC_EX = 0x00000004

# WINAPI
# GetInputState(
#     VOID);
GetInputState = user32.GetInputState
GetInputState.restype = WINAPI


# WINAPI
# GetQueueStatus(
#     _In_ UINT flags);
GetQueueStatus = user32.GetQueueStatus
GetQueueStatus.restype = WINAPI


# WINAPI
# GetCapture(
#     VOID);
GetCapture = user32.GetCapture
GetCapture.restype = WINAPI


# WINAPI
# SetCapture(
#     _In_ HWND hWnd);
SetCapture = user32.SetCapture
SetCapture.restype = WINAPI


# WINAPI
# ReleaseCapture(
#     VOID);
ReleaseCapture = user32.ReleaseCapture
ReleaseCapture.restype = WINAPI


# WINAPI
# MsgWaitForMultipleObjects(
#     _In_ DWORD nCount,
#     _In_reads_opt_(nCount) CONST HANDLE *pHandles,
#     _In_ BOOL fWaitAll,
#     _In_ DWORD dwMilliseconds,
#     _In_ DWORD dwWakeMask);
MsgWaitForMultipleObjects = user32.MsgWaitForMultipleObjects
MsgWaitForMultipleObjects.restype = WINAPI


# WINAPI
# MsgWaitForMultipleObjectsEx(
#     _In_ DWORD nCount,
#     _In_reads_opt_(nCount) CONST HANDLE *pHandles,
#     _In_ DWORD dwMilliseconds,
#     _In_ DWORD dwWakeMask,
#     _In_ DWORD dwFlags);
MsgWaitForMultipleObjectsEx = user32.MsgWaitForMultipleObjectsEx
MsgWaitForMultipleObjectsEx.restype = WINAPI

MWMO_WAITALL = 0x00000001
MWMO_ALERTABLE = 0x00000002
MWMO_INPUTAVAILABLE = 0x00000004

USER_TIMER_MAXIMUM = 0x7FFFFFFF
USER_TIMER_MINIMUM = 0x0000000A

# WINAPI
# SetTimer(
#     _In_opt_ HWND hWnd,
#     _In_ UINT_PTR nIDEvent,
#     _In_ UINT uElapse,
#     _In_opt_ TIMERPROC lpTimerFunc);
SetTimer = user32.SetTimer
SetTimer.restype = WINAPI

TIMERV_DEFAULT_COALESCING = 0x00000000
TIMERV_NO_COALESCING = 0xFFFFFFFF
TIMERV_COALESCING_MIN = 0x00000001
TIMERV_COALESCING_MAX = 0x7FFFFFF5

# WINAPI
# SetCoalescableTimer(
#     _In_opt_ HWND hWnd,
#     _In_ UINT_PTR nIDEvent,
#     _In_ UINT uElapse,
#     _In_opt_ TIMERPROC lpTimerFunc,
#     _In_ ULONG uToleranceDelay);
SetCoalescableTimer = user32.SetCoalescableTimer
SetCoalescableTimer.restype = WINAPI


# WINAPI
# KillTimer(
#     _In_opt_ HWND hWnd,
#     _In_ UINT_PTR uIDEvent);
KillTimer = user32.KillTimer
KillTimer.restype = WINAPI


# WINAPI
# IsWindowUnicode(
#     _In_ HWND hWnd);
IsWindowUnicode = user32.IsWindowUnicode
IsWindowUnicode.restype = WINAPI


# WINAPI
# EnableWindow(
#     _In_ HWND hWnd,
#     _In_ BOOL bEnable);
EnableWindow = user32.EnableWindow
EnableWindow.restype = WINAPI


# WINAPI
# IsWindowEnabled(
#     _In_ HWND hWnd);
IsWindowEnabled = user32.IsWindowEnabled
IsWindowEnabled.restype = WINAPI


# WINAPI
# LoadAcceleratorsA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpTableName);
LoadAcceleratorsA = user32.LoadAcceleratorsA
LoadAcceleratorsA.restype = WINAPI


# WINAPI
# LoadAcceleratorsW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpTableName);
LoadAcceleratorsW = user32.LoadAcceleratorsW
LoadAcceleratorsW.restype = WINAPI

LoadAccelerators = LoadAcceleratorsW
# LoadAccelerators = LoadAcceleratorsA

# WINAPI
# CreateAcceleratorTableA(
#     _In_reads_(cAccel) LPACCEL paccel,
#     _In_ INT cAccel);
CreateAcceleratorTableA = user32.CreateAcceleratorTableA
CreateAcceleratorTableA.restype = WINAPI


# WINAPI
# CreateAcceleratorTableW(
#     _In_reads_(cAccel) LPACCEL paccel,
#     _In_ INT cAccel);
CreateAcceleratorTableW = user32.CreateAcceleratorTableW
CreateAcceleratorTableW.restype = WINAPI

CreateAcceleratorTable = CreateAcceleratorTableW
# CreateAcceleratorTable = CreateAcceleratorTableA

# WINAPI
# DestroyAcceleratorTable(
#     _In_ HACCEL hAccel);
DestroyAcceleratorTable = user32.DestroyAcceleratorTable
DestroyAcceleratorTable.restype = WINAPI


# WINAPI
# CopyAcceleratorTableA(
#     _In_ HACCEL hAccelSrc,
#     _Out_writes_to_opt_(cAccelEntries, return) LPACCEL lpAccelDst,
#     _In_ INT cAccelEntries);
CopyAcceleratorTableA = user32.CopyAcceleratorTableA
CopyAcceleratorTableA.restype = WINAPI


# WINAPI
# CopyAcceleratorTableW(
#     _In_ HACCEL hAccelSrc,
#     _Out_writes_to_opt_(cAccelEntries, return) LPACCEL lpAccelDst,
#     _In_ INT cAccelEntries);
CopyAcceleratorTableW = user32.CopyAcceleratorTableW
CopyAcceleratorTableW.restype = WINAPI

CopyAcceleratorTable = CopyAcceleratorTableW
# CopyAcceleratorTable = CopyAcceleratorTableA

# WINAPI
# TranslateAcceleratorA(
#     _In_ HWND hWnd,
#     _In_ HACCEL hAccTable,
#     _In_ LPMSG lpMsg);
TranslateAcceleratorA = user32.TranslateAcceleratorA
TranslateAcceleratorA.restype = WINAPI


# WINAPI
# TranslateAcceleratorW(
#     _In_ HWND hWnd,
#     _In_ HACCEL hAccTable,
#     _In_ LPMSG lpMsg);
TranslateAcceleratorW = user32.TranslateAcceleratorW
TranslateAcceleratorW.restype = WINAPI

TranslateAccelerator = TranslateAcceleratorW
# TranslateAccelerator = TranslateAcceleratorA
SM_CXSCREEN = 0x00000000
SM_CYSCREEN = 0x00000001
SM_CXVSCROLL = 0x00000002
SM_CYHSCROLL = 0x00000003
SM_CYCAPTION = 0x00000004
SM_CXBORDER = 0x00000005
SM_CYBORDER = 0x00000006
SM_CXDLGFRAME = 0x00000007
SM_CYDLGFRAME = 0x00000008
SM_CYVTHUMB = 0x00000009
SM_CXHTHUMB = 0x0000000A
SM_CXICON = 0x0000000B
SM_CYICON = 0x0000000C
SM_CXCURSOR = 0x0000000D
SM_CYCURSOR = 0x0000000E
SM_CYMENU = 0x0000000F
SM_CXFULLSCREEN = 0x00000010
SM_CYFULLSCREEN = 0x00000011
SM_CYKANJIWINDOW = 0x00000012
SM_MOUSEPRESENT = 0x00000013
SM_CYVSCROLL = 0x00000014
SM_CXHSCROLL = 0x00000015
SM_DEBUG = 0x00000016
SM_SWAPBUTTON = 0x00000017
SM_RESERVED1 = 0x00000018
SM_RESERVED2 = 0x00000019
SM_RESERVED3 = 0x0000001A
SM_RESERVED4 = 0x0000001B
SM_CXMIN = 0x0000001C
SM_CYMIN = 0x0000001D
SM_CXSIZE = 0x0000001E
SM_CYSIZE = 0x0000001F
SM_CXFRAME = 0x00000020
SM_CYFRAME = 0x00000021
SM_CXMINTRACK = 0x00000022
SM_CYMINTRACK = 0x00000023
SM_CXDOUBLECLK = 0x00000024
SM_CYDOUBLECLK = 0x00000025
SM_CXICONSPACING = 0x00000026
SM_CYICONSPACING = 0x00000027
SM_MENUDROPALIGNMENT = 0x00000028
SM_PENWINDOWS = 0x00000029
SM_DBCSENABLED = 0x0000002A
SM_CMOUSEBUTTONS = 0x0000002B
SM_CXFIXEDFRAME = SM_CXDLGFRAME
SM_CYFIXEDFRAME = SM_CYDLGFRAME
SM_CXSIZEFRAME = SM_CXFRAME
SM_CYSIZEFRAME = SM_CYFRAME
SM_SECURE = 0x0000002C
SM_CXEDGE = 0x0000002D
SM_CYEDGE = 0x0000002E
SM_CXMINSPACING = 0x0000002F
SM_CYMINSPACING = 0x00000030
SM_CXSMICON = 0x00000031
SM_CYSMICON = 0x00000032
SM_CYSMCAPTION = 0x00000033
SM_CXSMSIZE = 0x00000034
SM_CYSMSIZE = 0x00000035
SM_CXMENUSIZE = 0x00000036
SM_CYMENUSIZE = 0x00000037
SM_ARRANGE = 0x00000038
SM_CXMINIMIZED = 0x00000039
SM_CYMINIMIZED = 0x0000003A
SM_CXMAXTRACK = 0x0000003B
SM_CYMAXTRACK = 0x0000003C
SM_CXMAXIMIZED = 0x0000003D
SM_CYMAXIMIZED = 0x0000003E
SM_NETWORK = 0x0000003F
SM_CLEANBOOT = 0x00000043
SM_CXDRAG = 0x00000044
SM_CYDRAG = 0x00000045
SM_SHOWSOUNDS = 0x00000046
SM_CXMENUCHECK = 0x00000047
SM_CYMENUCHECK = 0x00000048
SM_SLOWMACHINE = 0x00000049
SM_MIDEASTENABLED = 0x0000004A
SM_MOUSEWHEELPRESENT = 0x0000004B
SM_XVIRTUALSCREEN = 0x0000004C
SM_YVIRTUALSCREEN = 0x0000004D
SM_CXVIRTUALSCREEN = 0x0000004E
SM_CYVIRTUALSCREEN = 0x0000004F
SM_CMONITORS = 0x00000050
SM_SAMEDISPLAYFORMAT = 0x00000051
SM_IMMENABLED = 0x00000052
SM_CXFOCUSBORDER = 0x00000053
SM_CYFOCUSBORDER = 0x00000054
SM_TABLETPC = 0x00000056
SM_MEDIACENTER = 0x00000057
SM_STARTER = 0x00000058
SM_SERVERR2 = 0x00000059
SM_MOUSEHORIZONTALWHEELPRESENT = 0x0000005B
SM_CXPADDEDBORDER = 0x0000005C
SM_DIGITIZER = 0x0000005E
SM_MAXIMUMTOUCHES = 0x0000005F
SM_CMETRICS = 0x0000004C
SM_CMETRICS = 0x00000053
SM_CMETRICS = 0x0000005B
SM_CMETRICS = 0x0000005D
SM_CMETRICS = 0x00000061
SM_REMOTESESSION = 0x00001000
SM_SHUTTINGDOWN = 0x00002000
SM_REMOTECONTROL = 0x00002001
SM_CARETBLINKINGENABLED = 0x00002002
SM_CONVERTIBLESLATEMODE = 0x00002003
SM_SYSTEMDOCKED = 0x00002004

# WINAPI
# GetSystemMetrics(
#     _In_ INT nIndex);
GetSystemMetrics = user32.GetSystemMetrics
GetSystemMetrics.restype = WINAPI


# WINAPI
# GetSystemMetricsForDpi(
#     _In_ INT nIndex,
#     _In_ UINT dpi);
GetSystemMetricsForDpi = user32.GetSystemMetricsForDpi
GetSystemMetricsForDpi.restype = WINAPI


# WINAPI
# LoadMenuA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpMenuName);
LoadMenuA = user32.LoadMenuA
LoadMenuA.restype = WINAPI


# WINAPI
# LoadMenuW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpMenuName);
LoadMenuW = user32.LoadMenuW
LoadMenuW.restype = WINAPI

LoadMenu = LoadMenuW
# LoadMenu = LoadMenuA

# WINAPI
# LoadMenuIndirectA(
#     _In_ CONST MENUTEMPLATEA *lpMenuTemplate);
LoadMenuIndirectA = user32.LoadMenuIndirectA
LoadMenuIndirectA.restype = WINAPI


# WINAPI
# LoadMenuIndirectW(
#     _In_ CONST MENUTEMPLATEW *lpMenuTemplate);
LoadMenuIndirectW = user32.LoadMenuIndirectW
LoadMenuIndirectW.restype = WINAPI

LoadMenuIndirect = LoadMenuIndirectW
# LoadMenuIndirect = LoadMenuIndirectA

# WINAPI
# GetMenu(
#     _In_ HWND hWnd);
GetMenu = user32.GetMenu
GetMenu.restype = WINAPI


# WINAPI
# SetMenu(
#     _In_ HWND hWnd,
#     _In_opt_ HMENU hMenu);
SetMenu = user32.SetMenu
SetMenu.restype = WINAPI


# WINAPI
# ChangeMenuA(
#     _In_ HMENU hMenu,
#     _In_ UINT cmd,
#     _In_opt_ LPCSTR lpszNewItem,
#     _In_ UINT cmdInsert,
#     _In_ UINT flags);
ChangeMenuA = user32.ChangeMenuA
ChangeMenuA.restype = WINAPI


# WINAPI
# ChangeMenuW(
#     _In_ HMENU hMenu,
#     _In_ UINT cmd,
#     _In_opt_ LPCWSTR lpszNewItem,
#     _In_ UINT cmdInsert,
#     _In_ UINT flags);
ChangeMenuW = user32.ChangeMenuW
ChangeMenuW.restype = WINAPI

ChangeMenu = ChangeMenuW
# ChangeMenu = ChangeMenuA

# WINAPI
# HiliteMenuItem(
#     _In_ HWND hWnd,
#     _In_ HMENU hMenu,
#     _In_ UINT uIDHiliteItem,
#     _In_ UINT uHilite);
HiliteMenuItem = user32.HiliteMenuItem
HiliteMenuItem.restype = WINAPI


# WINAPI
# GetMenuStringA(
#     _In_ HMENU hMenu,
#     _In_ UINT uIDItem,
#     _Out_writes_opt_(cchMax) LPSTR lpString,
#     _In_ INT cchMax,
#     _In_ UINT flags);
GetMenuStringA = user32.GetMenuStringA
GetMenuStringA.restype = WINAPI


# WINAPI
# GetMenuStringW(
#     _In_ HMENU hMenu,
#     _In_ UINT uIDItem,
#     _Out_writes_opt_(cchMax) LPWSTR lpString,
#     _In_ INT cchMax,
#     _In_ UINT flags);
GetMenuStringW = user32.GetMenuStringW
GetMenuStringW.restype = WINAPI

GetMenuString = GetMenuStringW
# GetMenuString = GetMenuStringA

# WINAPI
# GetMenuState(
#     _In_ HMENU hMenu,
#     _In_ UINT uId,
#     _In_ UINT uFlags);
GetMenuState = user32.GetMenuState
GetMenuState.restype = WINAPI


# WINAPI
# DrawMenuBar(
#     _In_ HWND hWnd);
DrawMenuBar = user32.DrawMenuBar
DrawMenuBar.restype = WINAPI

PMB_ACTIVE = 0x00000001

# WINAPI
# GetSystemMenu(
#     _In_ HWND hWnd,
#     _In_ BOOL bRevert);
GetSystemMenu = user32.GetSystemMenu
GetSystemMenu.restype = WINAPI


# WINAPI
# CreateMenu(
#     VOID);
CreateMenu = user32.CreateMenu
CreateMenu.restype = WINAPI


# WINAPI
# CreatePopupMenu(
#     VOID);
CreatePopupMenu = user32.CreatePopupMenu
CreatePopupMenu.restype = WINAPI


# WINAPI
# DestroyMenu(
#     _In_ HMENU hMenu);
DestroyMenu = user32.DestroyMenu
DestroyMenu.restype = WINAPI


# WINAPI
# CheckMenuItem(
#     _In_ HMENU hMenu,
#     _In_ UINT uIDCheckItem,
#     _In_ UINT uCheck);
CheckMenuItem = user32.CheckMenuItem
CheckMenuItem.restype = WINAPI


# WINAPI
# EnableMenuItem(
#     _In_ HMENU hMenu,
#     _In_ UINT uIDEnableItem,
#     _In_ UINT uEnable);
EnableMenuItem = user32.EnableMenuItem
EnableMenuItem.restype = WINAPI


# WINAPI
# GetSubMenu(
#     _In_ HMENU hMenu,
#     _In_ INT nPos);
GetSubMenu = user32.GetSubMenu
GetSubMenu.restype = WINAPI


# WINAPI
# GetMenuItemID(
#     _In_ HMENU hMenu,
#     _In_ INT nPos);
GetMenuItemID = user32.GetMenuItemID
GetMenuItemID.restype = WINAPI


# WINAPI
# GetMenuItemCount(
#     _In_opt_ HMENU hMenu);
GetMenuItemCount = user32.GetMenuItemCount
GetMenuItemCount.restype = WINAPI


# WINAPI
# InsertMenuA(
#     _In_ HMENU hMenu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCSTR lpNewItem);
InsertMenuA = user32.InsertMenuA
InsertMenuA.restype = WINAPI


# WINAPI
# InsertMenuW(
#     _In_ HMENU hMenu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCWSTR lpNewItem);
InsertMenuW = user32.InsertMenuW
InsertMenuW.restype = WINAPI

InsertMenu = InsertMenuW
# InsertMenu = InsertMenuA

# WINAPI
# AppendMenuA(
#     _In_ HMENU hMenu,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCSTR lpNewItem);
AppendMenuA = user32.AppendMenuA
AppendMenuA.restype = WINAPI


# WINAPI
# AppendMenuW(
#     _In_ HMENU hMenu,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCWSTR lpNewItem);
AppendMenuW = user32.AppendMenuW
AppendMenuW.restype = WINAPI

AppendMenu = AppendMenuW
# AppendMenu = AppendMenuA

# WINAPI
# ModifyMenuA(
#     _In_ HMENU hMnu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCSTR lpNewItem);
ModifyMenuA = user32.ModifyMenuA
ModifyMenuA.restype = WINAPI


# WINAPI
# ModifyMenuW(
#     _In_ HMENU hMnu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags,
#     _In_ UINT_PTR uIDNewItem,
#     _In_opt_ LPCWSTR lpNewItem);
ModifyMenuW = user32.ModifyMenuW
ModifyMenuW.restype = WINAPI

ModifyMenu = ModifyMenuW
# ModifyMenu = ModifyMenuA

# BOOL
# WINAPI RemoveMenu(
#     _In_ HMENU hMenu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags);
RemoveMenu = user32.RemoveMenu
RemoveMenu.restype = WINAPI


# WINAPI
# DeleteMenu(
#     _In_ HMENU hMenu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags);
DeleteMenu = user32.DeleteMenu
DeleteMenu.restype = WINAPI


# WINAPI
# SetMenuItemBitmaps(
#     _In_ HMENU hMenu,
#     _In_ UINT uPosition,
#     _In_ UINT uFlags,
#     _In_opt_ HBITMAP hBitmapUnchecked,
#     _In_opt_ HBITMAP hBitmapChecked);
SetMenuItemBitmaps = user32.SetMenuItemBitmaps
SetMenuItemBitmaps.restype = WINAPI


# WINAPI
# GetMenuCheckMarkDimensions(
#     VOID);
GetMenuCheckMarkDimensions = user32.GetMenuCheckMarkDimensions
GetMenuCheckMarkDimensions.restype = WINAPI


# WINAPI
# TrackPopupMenu(
#     _In_ HMENU hMenu,
#     _In_ UINT uFlags,
#     _In_ INT x,
#     _In_ INT y,
#     _Reserved_ INT nReserved,
#     _In_ HWND hWnd,
#     _Reserved_ CONST RECT *prcRect);
TrackPopupMenu = user32.TrackPopupMenu
TrackPopupMenu.restype = WINAPI

MNC_IGNORE = 0x00000000
MNC_CLOSE = 0x00000001
MNC_EXECUTE = 0x00000002
MNC_SELECT = 0x00000003

class tagTPMPARAMS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('rcExclude', RECT),
    ]


TPMPARAMS = tagTPMPARAMS


LPTPMPARAMS = POINTER(FAR)

# WINAPI
# TrackPopupMenuEx(
#     _In_ HMENU hMenu,
#     _In_ UINT uFlags,
#     _In_ INT x,
#     _In_ INT y,
#     _In_ HWND hwnd,
#     _In_opt_ LPTPMPARAMS lptpm);
TrackPopupMenuEx = user32.TrackPopupMenuEx
TrackPopupMenuEx.restype = WINAPI


# WINAPI
# CalculatePopupWindowPosition(
#     _In_ POINT *anchorPoINT,
#     _In_ SIZE *windowSize,
#     _In_ UINT  flags,
#     _In_opt_ RECT *excludeRect,
#     _Out_ RECT *popupWindowPosition);
CalculatePopupWindowPosition = user32.CalculatePopupWindowPosition
CalculatePopupWindowPosition.restype = WINAPI

MNS_NOCHECK = 0x80000000
MNS_MODELESS = 0x40000000
MNS_DRAGDROP = 0x20000000
MNS_AUTODISMISS = 0x10000000
MNS_NOTIFYBYPOS = 0x08000000
MNS_CHECKORBMP = 0x04000000
MIM_MAXHEIGHT = 0x00000001
MIM_BACKGROUND = 0x00000002
MIM_HELPID = 0x00000004
MIM_MENUDATA = 0x00000008
MIM_STYLE = 0x00000010
MIM_APPLYTOSUBMENUS = 0x80000000

class tagMENUINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('fMask', DWORD),
        ('dwStyle', DWORD),
        ('cyMax', UINT),
        ('hbrBack', HBRUSH),
        ('dwContextHelpID', DWORD),
        ('dwMenuData', ULONG_PTR),
    ]


MENUINFO = tagMENUINFO
LPMENUINFO = POINTER(tagMENUINFO)


LPCMENUINFO = POINTER(CONST)

# WINAPI
# GetMenuInfo(
#     _In_ HMENU,
#     _Inout_ LPMENUINFO);
GetMenuInfo = user32.GetMenuInfo
GetMenuInfo.restype = WINAPI


# WINAPI
# SetMenuInfo(
#     _In_ HMENU,
#     _In_ LPCMENUINFO);
SetMenuInfo = user32.SetMenuInfo
SetMenuInfo.restype = WINAPI


# WINAPI
# EndMenu(
#         VOID);
EndMenu = user32.EndMenu
EndMenu.restype = WINAPI

MND_CONTINUE = 0x00000000
MND_ENDMENU = 0x00000001

class tagMENUGETOBJECTINFO(ctypes.Structure):
    _fields_ = [
        ('dwFlags', DWORD),
        ('uPos', UINT),
        ('hmenu', HMENU),
        ('riid', PVOID),
        ('pvObj', PVOID),
    ]


MENUGETOBJECTINFO = tagMENUGETOBJECTINFO
PMENUGETOBJECTINFO = POINTER(tagMENUGETOBJECTINFO)


MNGOF_TOPGAP = 0x00000001
MNGOF_BOTTOMGAP = 0x00000002
MNGO_NOINTERFACE = 0x00000000
MNGO_NOERROR = 0x00000001
MIIM_STATE = 0x00000001
MIIM_ID = 0x00000002
MIIM_SUBMENU = 0x00000004
MIIM_CHECKMARKS = 0x00000008
MIIM_TYPE = 0x00000010
MIIM_DATA = 0x00000020
MIIM_STRING = 0x00000040
MIIM_BITMAP = 0x00000080
MIIM_FTYPE = 0x00000100
HBMMENU_CALLBACK = -1
HBMMENU_SYSTEM = 1
HBMMENU_MBAR_RESTORE = 2
HBMMENU_MBAR_MINIMIZE = 3
HBMMENU_MBAR_CLOSE = 5
HBMMENU_MBAR_CLOSE_D = 6
HBMMENU_MBAR_MINIMIZE_D = 7
HBMMENU_POPUP_CLOSE = 8
HBMMENU_POPUP_RESTORE = 9
HBMMENU_POPUP_MAXIMIZE = 10
HBMMENU_POPUP_MINIMIZE = 11


class tagMENUITEMINFOA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('fMask', UINT),
        ('fType', UINT),
        ('fState', UINT),
        ('wID', UINT),
        ('hSubMenu', HMENU),
        ('hbmpChecked', HBITMAP),
        ('hbmpUnchecked', HBITMAP),
        ('dwItemData', ULONG_PTR),
        ('dwTypeData', LPSTR),
        ('cch', UINT),
        ('hbmpItem', HBITMAP),
    ]


MENUITEMINFOA = tagMENUITEMINFOA
LPMENUITEMINFOA = POINTER(tagMENUITEMINFOA)



class tagMENUITEMINFOW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('fMask', UINT),
        ('fType', UINT),
        ('fState', UINT),
        ('wID', UINT),
        ('hSubMenu', HMENU),
        ('hbmpChecked', HBITMAP),
        ('hbmpUnchecked', HBITMAP),
        ('dwItemData', ULONG_PTR),
        ('dwTypeData', LPWSTR),
        ('cch', UINT),
        ('hbmpItem', HBITMAP),
    ]


MENUITEMINFOW = tagMENUITEMINFOW
LPMENUITEMINFOW = POINTER(tagMENUITEMINFOW)


MENUITEMINFO = MENUITEMINFOW
LPMENUITEMINFO = LPMENUITEMINFOW
LPCMENUITEMINFOA = POINTER(CONST)
LPCMENUITEMINFOW = POINTER(CONST)
LPCMENUITEMINFO = LPCMENUITEMINFOW

# WINAPI
# InsertMenuItemA(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPosition,
#     _In_ LPCMENUITEMINFOA lpmi);
InsertMenuItemA = user32.InsertMenuItemA
InsertMenuItemA.restype = WINAPI


# WINAPI
# InsertMenuItemW(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPosition,
#     _In_ LPCMENUITEMINFOW lpmi);
InsertMenuItemW = user32.InsertMenuItemW
InsertMenuItemW.restype = WINAPI

InsertMenuItem = InsertMenuItemW
# InsertMenuItem = InsertMenuItemA

# WINAPI
# GetMenuItemInfoA(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPosition,
#     _Inout_ LPMENUITEMINFOA lpmii);
GetMenuItemInfoA = user32.GetMenuItemInfoA
GetMenuItemInfoA.restype = WINAPI


# WINAPI
# GetMenuItemInfoW(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPosition,
#     _Inout_ LPMENUITEMINFOW lpmii);
GetMenuItemInfoW = user32.GetMenuItemInfoW
GetMenuItemInfoW.restype = WINAPI

GetMenuItemInfo = GetMenuItemInfoW
# GetMenuItemInfo = GetMenuItemInfoA

# WINAPI
# SetMenuItemInfoA(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPositon,
#     _In_ LPCMENUITEMINFOA lpmii);
SetMenuItemInfoA = user32.SetMenuItemInfoA
SetMenuItemInfoA.restype = WINAPI


# WINAPI
# SetMenuItemInfoW(
#     _In_ HMENU hmenu,
#     _In_ UINT item,
#     _In_ BOOL fByPositon,
#     _In_ LPCMENUITEMINFOW lpmii);
SetMenuItemInfoW = user32.SetMenuItemInfoW
SetMenuItemInfoW.restype = WINAPI

SetMenuItemInfo = SetMenuItemInfoW
# SetMenuItemInfo = SetMenuItemInfoA
GMDI_USEDISABLED = 0x00000001
GMDI_GOINTOPOPUPS = 0x00000002

# WINAPI
# GetMenuDefaultItem(
#     _In_ HMENU hMenu,
#     _In_ UINT fByPos,
#     _In_ UINT gmdiFlags);
GetMenuDefaultItem = user32.GetMenuDefaultItem
GetMenuDefaultItem.restype = WINAPI


# WINAPI
# SetMenuDefaultItem(
#     _In_ HMENU hMenu,
#     _In_ UINT uItem,
#     _In_ UINT fByPos);
SetMenuDefaultItem = user32.SetMenuDefaultItem
SetMenuDefaultItem.restype = WINAPI


# WINAPI
# GetMenuItemRect(
#     _In_opt_ HWND hWnd,
#     _In_ HMENU hMenu,
#     _In_ UINT uItem,
#     _Out_ LPRECT lprcItem);
GetMenuItemRect = user32.GetMenuItemRect
GetMenuItemRect.restype = WINAPI


# WINAPI
# MenuItemFromPoINT(
#     _In_opt_ HWND hWnd,
#     _In_ HMENU hMenu,
#     _In_ POINT ptScreen);
MenuItemFromPoINT = user32.MenuItemFromPoINT
MenuItemFromPoINT.restype = WINAPI

TPM_LEFTBUTTON = 0x00000000
TPM_RIGHTBUTTON = 0x00000002
TPM_LEFTALIGN = 0x00000000
TPM_CENTERALIGN = 0x00000004
TPM_RIGHTALIGN = 0x00000008
TPM_TOPALIGN = 0x00000000
TPM_VCENTERALIGN = 0x00000010
TPM_BOTTOMALIGN = 0x00000020
TPM_HORIZONTAL = 0x00000000
TPM_VERTICAL = 0x00000040
TPM_NONOTIFY = 0x00000080
TPM_RETURNCMD = 0x00000100
TPM_RECURSE = 0x00000001
TPM_HORPOSANIMATION = 0x00000400
TPM_HORNEGANIMATION = 0x00000800
TPM_VERPOSANIMATION = 0x00001000
TPM_VERNEGANIMATION = 0x00002000
TPM_NOANIMATION = 0x00004000
TPM_LAYOUTRTL = 0x00008000
TPM_WORKAREA = 0x00010000

class tagDROPSTRUCT(ctypes.Structure):
    _fields_ = [
        ('hwndSource', HWND),
        ('hwndSink', HWND),
        ('wFmt', DWORD),
        ('dwData', ULONG_PTR),
        ('ptDrop', POINT),
        ('dwControlData', DWORD),
    ]


DROPSTRUCT = tagDROPSTRUCT
PDROPSTRUCT = POINTER(tagDROPSTRUCT)
LPDROPSTRUCT = POINTER(tagDROPSTRUCT)


DOF_EXECUTABLE = 0x00008001
DOF_DOCUMENT = 0x00008002
DOF_DIRECTORY = 0x00008003
DOF_MULTIPLE = 0x00008004
DOF_PROGMAN = 0x00000001
DOF_SHELLDATA = 0x00000002
DO_DROPFILE = 0x454C4946
DO_PRINTFILE = 0x544E5250

# WINAPI
# DragObject(
#     _In_ HWND hwndParent,
#     _In_ HWND hwndFrom,
#     _In_ UINT fmt,
#     _In_ ULONG_PTR data,
#     _In_opt_ HCURSOR hcur);
DragObject = user32.DragObject
DragObject.restype = WINAPI


# WINAPI
# DragDetect(
#     _In_ HWND hwnd,
#     _In_ POINT pt);
DragDetect = user32.DragDetect
DragDetect.restype = WINAPI


# WINAPI
# DrawIcon(
#     _In_ HDC hDC,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ HICON hIcon);
DrawIcon = user32.DrawIcon
DrawIcon.restype = WINAPI

DT_TOP = 0x00000000
DT_LEFT = 0x00000000
DT_CENTER = 0x00000001
DT_RIGHT = 0x00000002
DT_VCENTER = 0x00000004
DT_BOTTOM = 0x00000008
DT_WORDBREAK = 0x00000010
DT_SINGLELINE = 0x00000020
DT_EXPANDTABS = 0x00000040
DT_TABSTOP = 0x00000080
DT_NOCLIP = 0x00000100
DT_EXTERNALLEADING = 0x00000200
DT_CALCRECT = 0x00000400
DT_NOPREFIX = 0x00000800
DT_INTERNAL = 0x00001000
DT_EDITCONTROL = 0x00002000
DT_PATH_ELLIPSIS = 0x00004000
DT_END_ELLIPSIS = 0x00008000
DT_MODIFYSTRING = 0x00010000
DT_RTLREADING = 0x00020000
DT_WORD_ELLIPSIS = 0x00040000
DT_NOFULLWIDTHCHARBREAK = 0x00080000
DT_HIDEPREFIX = 0x00100000
DT_PREFIXONLY = 0x00200000

class tagDRAWTEXTPARAMS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iTabLength', INT),
        ('iLeftMargin', INT),
        ('iRightMargin', INT),
        ('uiLengthDrawn', UINT),
    ]


DRAWTEXTPARAMS = tagDRAWTEXTPARAMS
LPDRAWTEXTPARAMS = POINTER(tagDRAWTEXTPARAMS)




def _In_bypassable_reads_or_z_(size):
    pass
    # return _When_((size == -1) or (_String_length__Curr_ < size), _In_z_) _When_((size != -1) and (_String_length__Curr_ >= size), _In_reads_size)


def _Inout_grows_updates_bypassable_or_z_(size, grows):
    pass
    # return _When_((size == -1) or (_String_length__Curr_ < size), _Pre_z_ _Pre_valid_ _Out_writes_z_(_String_length__Curr_ + grows)) _When_((size != -1) and (_String_length__Curr_ >= size), _Pre_count_size _Pre_valid_ _Out_writes_z_(size + grows))

# WINUSERAPI
# _Success_(return)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# DrawTextA(
#     _In_ HDC hdc,
#     _When_((format & DT_MODIFYSTRING), _At_((LPSTR)lpchText, _Inout_grows_updates_bypassable_or_z_(cchText, 4)))
DrawTextA = user32.DrawTextA
DrawTextA.restype = WINAPI


# WINUSERAPI
# _Success_(return)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# DrawTextW(
#     _In_ HDC hdc,
#     _When_((format & DT_MODIFYSTRING), _At_((LPWSTR)lpchText, _Inout_grows_updates_bypassable_or_z_(cchText, 4)))
DrawTextW = user32.DrawTextW
DrawTextW.restype = WINAPI

DrawText = DrawTextW
# DrawText = DrawTextA

# INT
# DrawText(
#     HDC hdc,
#     LPCTSTR lpchText,
#     INT cchText,
#     LPRECT lprc,
#     UINT format
#     )
# DrawText = user32.DrawText
# DrawText.restype = INT


# WINUSERAPI
# _Success_(return)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# DrawTextExA(
#     _In_ HDC hdc,
#     _When_((cchText) < -1, _Unreferenced_parameter_)
DrawTextExA = user32.DrawTextExA
DrawTextExA.restype = WINAPI


# WINUSERAPI
# _Success_(return)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# DrawTextExW(
#     _In_ HDC hdc,
#     _When_((cchText) < -1, _Unreferenced_parameter_)
DrawTextExW = user32.DrawTextExW
DrawTextExW.restype = WINAPI

DrawTextEx = DrawTextExW
# DrawTextEx = DrawTextExA

# WINAPI
# GrayStringA(
#     _In_ HDC hDC,
#     _In_opt_ HBRUSH hBrush,
#     _In_opt_ GRAYSTRINGPROC lpOutputFunc,
#     _In_ LPARAM lpData,
#     _In_ INT nCount,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight);
GrayStringA = user32.GrayStringA
GrayStringA.restype = WINAPI


# WINAPI
# GrayStringW(
#     _In_ HDC hDC,
#     _In_opt_ HBRUSH hBrush,
#     _In_opt_ GRAYSTRINGPROC lpOutputFunc,
#     _In_ LPARAM lpData,
#     _In_ INT nCount,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight);
GrayStringW = user32.GrayStringW
GrayStringW.restype = WINAPI

GrayString = GrayStringW
# GrayString = GrayStringA
DST_COMPLEX = 0x00000000
DST_TEXT = 0x00000001
DST_PREFIXTEXT = 0x00000002
DST_ICON = 0x00000003
DST_BITMAP = 0x00000004
DSS_NORMAL = 0x00000000
DSS_UNION = 0x00000010
DSS_DISABLED = 0x00000020
DSS_MONO = 0x00000080
DSS_HIDEPREFIX = 0x00000200
DSS_PREFIXONLY = 0x00000400
DSS_RIGHT = 0x00008000

# WINAPI
# DrawStateA(
#     _In_ HDC hdc,
#     _In_opt_ HBRUSH hbrFore,
#     _In_opt_ DRAWSTATEPROC qfnCallBack,
#     _In_ LPARAM lData,
#     _In_ WPARAM wData,
#     _In_ INT x,
#     _In_ INT y,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT uFlags);
DrawStateA = user32.DrawStateA
DrawStateA.restype = WINAPI


# WINAPI
# DrawStateW(
#     _In_ HDC hdc,
#     _In_opt_ HBRUSH hbrFore,
#     _In_opt_ DRAWSTATEPROC qfnCallBack,
#     _In_ LPARAM lData,
#     _In_ WPARAM wData,
#     _In_ INT x,
#     _In_ INT y,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT uFlags);
DrawStateW = user32.DrawStateW
DrawStateW.restype = WINAPI

DrawState = DrawStateW
# DrawState = DrawStateA

# WINAPI
# TabbedTextOutA(
#     _In_ HDC hdc,
#     _In_ INT x,
#     _In_ INT y,
#     _In_reads_(chCount) LPCSTR lpString,
#     _In_ INT chCount,
#     _In_ INT nTabPositions,
#     _In_reads_opt_(nTabPositions) CONST INT *lpnTabStopPositions,
#     _In_ INT nTabOrigin);
TabbedTextOutA = user32.TabbedTextOutA
TabbedTextOutA.restype = WINAPI


# WINAPI
# TabbedTextOutW(
#     _In_ HDC hdc,
#     _In_ INT x,
#     _In_ INT y,
#     _In_reads_(chCount) LPCWSTR lpString,
#     _In_ INT chCount,
#     _In_ INT nTabPositions,
#     _In_reads_opt_(nTabPositions) CONST INT *lpnTabStopPositions,
#     _In_ INT nTabOrigin);
TabbedTextOutW = user32.TabbedTextOutW
TabbedTextOutW.restype = WINAPI

TabbedTextOut = TabbedTextOutW
# TabbedTextOut = TabbedTextOutA

# WINAPI
# GetTabbedTextExtentA(
#     _In_ HDC hdc,
#     _In_reads_(chCount) LPCSTR lpString,
#     _In_ INT chCount,
#     _In_ INT nTabPositions,
#     _In_reads_opt_(nTabPositions) CONST INT *lpnTabStopPositions);
GetTabbedTextExtentA = user32.GetTabbedTextExtentA
GetTabbedTextExtentA.restype = WINAPI


# WINAPI
# GetTabbedTextExtentW(
#     _In_ HDC hdc,
#     _In_reads_(chCount) LPCWSTR lpString,
#     _In_ INT chCount,
#     _In_ INT nTabPositions,
#     _In_reads_opt_(nTabPositions) CONST INT *lpnTabStopPositions);
GetTabbedTextExtentW = user32.GetTabbedTextExtentW
GetTabbedTextExtentW.restype = WINAPI

GetTabbedTextExtent = GetTabbedTextExtentW
# GetTabbedTextExtent = GetTabbedTextExtentA

# WINAPI
# UpdateWindow(
#     _In_ HWND hWnd);
UpdateWindow = user32.UpdateWindow
UpdateWindow.restype = WINAPI


# WINAPI
# SetActiveWindow(
#     _In_ HWND hWnd);
SetActiveWindow = user32.SetActiveWindow
SetActiveWindow.restype = WINAPI


# WINAPI
# GetForegroundWindow(
#     VOID);
GetForegroundWindow = user32.GetForegroundWindow
GetForegroundWindow.restype = WINAPI


# WINAPI
# PaINTDesktop(
#     _In_ HDC hdc);
PaINTDesktop = user32.PaINTDesktop
PaINTDesktop.restype = WINAPI


# WINAPI
# SwitchToThisWindow(
#     _In_ HWND hwnd,
#     _In_ BOOL fUnknown);
SwitchToThisWindow = user32.SwitchToThisWindow
SwitchToThisWindow.restype = WINAPI


# WINAPI
# SetForegroundWindow(
#     _In_ HWND hWnd);
SetForegroundWindow = user32.SetForegroundWindow
SetForegroundWindow.restype = WINAPI


# WINAPI
# AllowSetForegroundWindow(
#     _In_ DWORD dwProcessId);
AllowSetForegroundWindow = user32.AllowSetForegroundWindow
AllowSetForegroundWindow.restype = WINAPI

ASFW_ANY = -1

# WINAPI
# LockSetForegroundWindow(
#     _In_ UINT uLockCode);
LockSetForegroundWindow = user32.LockSetForegroundWindow
LockSetForegroundWindow.restype = WINAPI

LSFW_LOCK = 0x00000001
LSFW_UNLOCK = 0x00000002

# WINAPI
# WindowFromDC(
#     _In_ HDC hDC);
WindowFromDC = user32.WindowFromDC
WindowFromDC.restype = WINAPI


# WINAPI
# GetDC(
#     _In_opt_ HWND hWnd);
GetDC = user32.GetDC
GetDC.restype = WINAPI


# WINAPI
# GetDCEx(
#     _In_opt_ HWND hWnd,
#     _In_opt_ HRGN hrgnClip,
#     _In_ DWORD flags);
GetDCEx = user32.GetDCEx
GetDCEx.restype = WINAPI

DCX_WINDOW = 0x00000001
DCX_CACHE = 0x00000002
DCX_NORESETATTRS = 0x00000004
DCX_CLIPCHILDREN = 0x00000008
DCX_CLIPSIBLINGS = 0x00000010
DCX_PARENTCLIP = 0x00000020
DCX_EXCLUDERGN = 0x00000040
DCX_INTERSECTRGN = 0x00000080
DCX_EXCLUDEUPDATE = 0x00000100
DCX_INTERSECTUPDATE = 0x00000200
DCX_LOCKWINDOWUPDATE = 0x00000400
DCX_VALIDATE = 0x00200000

# WINAPI
# GetWindowDC(
#     _In_opt_ HWND hWnd);
GetWindowDC = user32.GetWindowDC
GetWindowDC.restype = WINAPI


# WINAPI
# ReleaseDC(
#     _In_opt_ HWND hWnd,
#     _In_ HDC hDC);
ReleaseDC = user32.ReleaseDC
ReleaseDC.restype = WINAPI


# WINAPI
# BeginPaINT(
#     _In_ HWND hWnd,
#     _Out_ LPPAINTSTRUCT lpPaINT);
BeginPaINT = user32.BeginPaINT
BeginPaINT.restype = WINAPI


# WINAPI
# EndPaINT(
#     _In_ HWND hWnd,
#     _In_ CONST PAINTSTRUCT *lpPaINT);
EndPaINT = user32.EndPaINT
EndPaINT.restype = WINAPI


# WINAPI
# GetUpdateRect(
#     _In_ HWND hWnd,
#     _Out_opt_ LPRECT lpRect,
#     _In_ BOOL bErase);
GetUpdateRect = user32.GetUpdateRect
GetUpdateRect.restype = WINAPI


# WINAPI
# GetUpdateRgn(
#     _In_ HWND hWnd,
#     _In_ HRGN hRgn,
#     _In_ BOOL bErase);
GetUpdateRgn = user32.GetUpdateRgn
GetUpdateRgn.restype = WINAPI


# WINAPI
# SetWindowRgn(
#     _In_ HWND hWnd,
#     _In_opt_ HRGN hRgn,
#     _In_ BOOL bRedraw);
SetWindowRgn = user32.SetWindowRgn
SetWindowRgn.restype = WINAPI


# WINAPI
# GetWindowRgn(
#     _In_ HWND hWnd,
#     _In_ HRGN hRgn);
GetWindowRgn = user32.GetWindowRgn
GetWindowRgn.restype = WINAPI


# WINAPI
# GetWindowRgnBox(
#     _In_ HWND hWnd,
#     _Out_ LPRECT lprc);
GetWindowRgnBox = user32.GetWindowRgnBox
GetWindowRgnBox.restype = WINAPI


# WINAPI
# ExcludeUpdateRgn(
#     _In_ HDC hDC,
#     _In_ HWND hWnd);
ExcludeUpdateRgn = user32.ExcludeUpdateRgn
ExcludeUpdateRgn.restype = WINAPI


# WINAPI
# InvalidateRect(
#     _In_opt_ HWND hWnd,
#     _In_opt_ CONST RECT *lpRect,
#     _In_ BOOL bErase);
InvalidateRect = user32.InvalidateRect
InvalidateRect.restype = WINAPI


# WINAPI
# ValidateRect(
#     _In_opt_ HWND hWnd,
#     _In_opt_ CONST RECT *lpRect);
ValidateRect = user32.ValidateRect
ValidateRect.restype = WINAPI


# WINAPI
# InvalidateRgn(
#     _In_ HWND hWnd,
#     _In_opt_ HRGN hRgn,
#     _In_ BOOL bErase);
InvalidateRgn = user32.InvalidateRgn
InvalidateRgn.restype = WINAPI


# WINAPI
# ValidateRgn(
#     _In_ HWND hWnd,
#     _In_opt_ HRGN hRgn);
ValidateRgn = user32.ValidateRgn
ValidateRgn.restype = WINAPI


# WINAPI
# RedrawWindow(
#     _In_opt_ HWND hWnd,
#     _In_opt_ CONST RECT *lprcUpdate,
#     _In_opt_ HRGN hrgnUpdate,
#     _In_ UINT flags);
RedrawWindow = user32.RedrawWindow
RedrawWindow.restype = WINAPI

RDW_INVALIDATE = 0x00000001
RDW_INTERNALPAINT = 0x00000002
RDW_ERASE = 0x00000004
RDW_VALIDATE = 0x00000008
RDW_NOINTERNALPAINT = 0x00000010
RDW_NOERASE = 0x00000020
RDW_NOCHILDREN = 0x00000040
RDW_ALLCHILDREN = 0x00000080
RDW_UPDATENOW = 0x00000100
RDW_ERASENOW = 0x00000200
RDW_FRAME = 0x00000400
RDW_NOFRAME = 0x00000800

# WINAPI
# LockWindowUpdate(
#     _In_opt_ HWND hWndLock);
LockWindowUpdate = user32.LockWindowUpdate
LockWindowUpdate.restype = WINAPI


# WINAPI
# ScrollWindow(
#     _In_ HWND hWnd,
#     _In_ INT XAmount,
#     _In_ INT YAmount,
#     _In_opt_ CONST RECT *lpRect,
#     _In_opt_ CONST RECT *lpClipRect);
ScrollWindow = user32.ScrollWindow
ScrollWindow.restype = WINAPI


# WINAPI
# ScrollDC(
#     _In_ HDC hDC,
#     _In_ INT dx,
#     _In_ INT dy,
#     _In_opt_ CONST RECT *lprcScroll,
#     _In_opt_ CONST RECT *lprcClip,
#     _In_opt_ HRGN hrgnUpdate,
#     _Out_opt_ LPRECT lprcUpdate);
ScrollDC = user32.ScrollDC
ScrollDC.restype = WINAPI


# WINAPI
# ScrollWindowEx(
#     _In_ HWND hWnd,
#     _In_ INT dx,
#     _In_ INT dy,
#     _In_opt_ CONST RECT *prcScroll,
#     _In_opt_ CONST RECT *prcClip,
#     _In_opt_ HRGN hrgnUpdate,
#     _Out_opt_ LPRECT prcUpdate,
#     _In_ UINT flags);
ScrollWindowEx = user32.ScrollWindowEx
ScrollWindowEx.restype = WINAPI

SW_SCROLLCHILDREN = 0x00000001
SW_INVALIDATE = 0x00000002
SW_ERASE = 0x00000004
SW_SMOOTHSCROLL = 0x00000010

# WINAPI
# SetScrollPos(
#     _In_ HWND hWnd,
#     _In_ INT nBar,
#     _In_ INT nPos,
#     _In_ BOOL bRedraw);
SetScrollPos = user32.SetScrollPos
SetScrollPos.restype = WINAPI


# WINAPI
# GetScrollPos(
#     _In_ HWND hWnd,
#     _In_ INT nBar);
GetScrollPos = user32.GetScrollPos
GetScrollPos.restype = WINAPI


# WINAPI
# SetScrollRange(
#     _In_ HWND hWnd,
#     _In_ INT nBar,
#     _In_ INT nMinPos,
#     _In_ INT nMaxPos,
#     _In_ BOOL bRedraw);
SetScrollRange = user32.SetScrollRange
SetScrollRange.restype = WINAPI


# WINAPI
# GetScrollRange(
#     _In_ HWND hWnd,
#     _In_ INT nBar,
#     _Out_ LPINT lpMinPos,
#     _Out_ LPINT lpMaxPos);
GetScrollRange = user32.GetScrollRange
GetScrollRange.restype = WINAPI


# WINAPI
# ShowScrollBar(
#     _In_ HWND hWnd,
#     _In_ INT wBar,
#     _In_ BOOL bShow);
ShowScrollBar = user32.ShowScrollBar
ShowScrollBar.restype = WINAPI


# WINAPI
# EnableScrollBar(
#     _In_ HWND hWnd,
#     _In_ UINT wSBflags,
#     _In_ UINT wArrows);
EnableScrollBar = user32.EnableScrollBar
EnableScrollBar.restype = WINAPI

ESB_ENABLE_BOTH = 0x00000000
ESB_DISABLE_BOTH = 0x00000003
ESB_DISABLE_LEFT = 0x00000001
ESB_DISABLE_RIGHT = 0x00000002
ESB_DISABLE_UP = 0x00000001
ESB_DISABLE_DOWN = 0x00000002
ESB_DISABLE_LTUP = ESB_DISABLE_LEFT
ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT

# WINAPI
# SetPropA(
#     _In_ HWND hWnd,
#     _In_ LPCSTR lpString,
#     _In_opt_ HANDLE hData);
SetPropA = user32.SetPropA
SetPropA.restype = WINAPI


# WINAPI
# SetPropW(
#     _In_ HWND hWnd,
#     _In_ LPCWSTR lpString,
#     _In_opt_ HANDLE hData);
SetPropW = user32.SetPropW
SetPropW.restype = WINAPI

SetProp = SetPropW
# SetProp = SetPropA

# WINAPI
# GetPropA(
#     _In_ HWND hWnd,
#     _In_ LPCSTR lpString);
GetPropA = user32.GetPropA
GetPropA.restype = WINAPI


# WINAPI
# GetPropW(
#     _In_ HWND hWnd,
#     _In_ LPCWSTR lpString);
GetPropW = user32.GetPropW
GetPropW.restype = WINAPI

GetProp = GetPropW
# GetProp = GetPropA

# WINAPI
# RemovePropA(
#     _In_ HWND hWnd,
#     _In_ LPCSTR lpString);
RemovePropA = user32.RemovePropA
RemovePropA.restype = WINAPI


# WINAPI
# RemovePropW(
#     _In_ HWND hWnd,
#     _In_ LPCWSTR lpString);
RemovePropW = user32.RemovePropW
RemovePropW.restype = WINAPI

RemoveProp = RemovePropW
# RemoveProp = RemovePropA

# WINAPI
# EnumPropsExA(
#     _In_ HWND hWnd,
#     _In_ PROPENUMPROCEXA lpEnumFunc,
#     _In_ LPARAM lParam);
EnumPropsExA = user32.EnumPropsExA
EnumPropsExA.restype = WINAPI


# WINAPI
# EnumPropsExW(
#     _In_ HWND hWnd,
#     _In_ PROPENUMPROCEXW lpEnumFunc,
#     _In_ LPARAM lParam);
EnumPropsExW = user32.EnumPropsExW
EnumPropsExW.restype = WINAPI

EnumPropsEx = EnumPropsExW
# EnumPropsEx = EnumPropsExA

# WINAPI
# EnumPropsA(
#     _In_ HWND hWnd,
#     _In_ PROPENUMPROCA lpEnumFunc);
EnumPropsA = user32.EnumPropsA
EnumPropsA.restype = WINAPI


# WINAPI
# EnumPropsW(
#     _In_ HWND hWnd,
#     _In_ PROPENUMPROCW lpEnumFunc);
EnumPropsW = user32.EnumPropsW
EnumPropsW.restype = WINAPI

EnumProps = EnumPropsW
# EnumProps = EnumPropsA

# WINAPI
# SetWindowTextA(
#     _In_ HWND hWnd,
#     _In_opt_ LPCSTR lpString);
SetWindowTextA = user32.SetWindowTextA
SetWindowTextA.restype = WINAPI


# WINAPI
# SetWindowTextW(
#     _In_ HWND hWnd,
#     _In_opt_ LPCWSTR lpString);
SetWindowTextW = user32.SetWindowTextW
SetWindowTextW.restype = WINAPI

SetWindowText = SetWindowTextW
# SetWindowText = SetWindowTextA

# WINAPI
# GetWindowTextA(
#     _In_ HWND hWnd,
#     _Out_writes_(nMaxCount) LPSTR lpString,
#     _In_ INT nMaxCount);
GetWindowTextA = user32.GetWindowTextA
GetWindowTextA.restype = WINAPI


# WINAPI
# GetWindowTextW(
#     _In_ HWND hWnd,
#     _Out_writes_(nMaxCount) LPWSTR lpString,
#     _In_ INT nMaxCount);
GetWindowTextW = user32.GetWindowTextW
GetWindowTextW.restype = WINAPI

GetWindowText = GetWindowTextW
# GetWindowText = GetWindowTextA

# WINAPI
# GetWindowTextLengthA(
#     _In_ HWND hWnd);
GetWindowTextLengthA = user32.GetWindowTextLengthA
GetWindowTextLengthA.restype = WINAPI


# WINAPI
# GetWindowTextLengthW(
#     _In_ HWND hWnd);
GetWindowTextLengthW = user32.GetWindowTextLengthW
GetWindowTextLengthW.restype = WINAPI

GetWindowTextLength = GetWindowTextLengthW
# GetWindowTextLength = GetWindowTextLengthA

# WINAPI
# GetClientRect(
#     _In_ HWND hWnd,
#     _Out_ LPRECT lpRect);
GetClientRect = user32.GetClientRect
GetClientRect.restype = WINAPI


# WINAPI
# GetWindowRect(
#     _In_ HWND hWnd,
#     _Out_ LPRECT lpRect);
GetWindowRect = user32.GetWindowRect
GetWindowRect.restype = WINAPI


# WINAPI
# AdjustWindowRect(
#     _Inout_ LPRECT lpRect,
#     _In_ DWORD dwStyle,
#     _In_ BOOL bMenu);
AdjustWindowRect = user32.AdjustWindowRect
AdjustWindowRect.restype = WINAPI


# WINAPI
# AdjustWindowRectEx(
#     _Inout_ LPRECT lpRect,
#     _In_ DWORD dwStyle,
#     _In_ BOOL bMenu,
#     _In_ DWORD dwExStyle);
AdjustWindowRectEx = user32.AdjustWindowRectEx
AdjustWindowRectEx.restype = WINAPI


# WINAPI
# AdjustWindowRectExForDpi(
#     _Inout_ LPRECT lpRect,
#     _In_ DWORD dwStyle,
#     _In_ BOOL bMenu,
#     _In_ DWORD dwExStyle,
#     _In_ UINT dpi);
AdjustWindowRectExForDpi = user32.AdjustWindowRectExForDpi
AdjustWindowRectExForDpi.restype = WINAPI

HELPINFO_WINDOW = 0x00000001
HELPINFO_MENUITEM = 0x00000002

class tagHELPINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iContextType', INT),
        ('iCtrlId', INT),
        ('hItemHandle', HANDLE),
        ('dwContextId', DWORD_PTR),
        ('MousePos', POINT),
    ]


HELPINFO = tagHELPINFO
LPHELPINFO = POINTER(tagHELPINFO)



# WINAPI
# SetWindowContextHelpId(
#     _In_ HWND,
#     _In_ DWORD);
SetWindowContextHelpId = user32.SetWindowContextHelpId
SetWindowContextHelpId.restype = WINAPI


# WINAPI
# GetWindowContextHelpId(
#     _In_ HWND);
GetWindowContextHelpId = user32.GetWindowContextHelpId
GetWindowContextHelpId.restype = WINAPI


# WINAPI
# SetMenuContextHelpId(
#     _In_ HMENU,
#     _In_ DWORD);
SetMenuContextHelpId = user32.SetMenuContextHelpId
SetMenuContextHelpId.restype = WINAPI


# WINAPI
# GetMenuContextHelpId(
#     _In_ HMENU);
GetMenuContextHelpId = user32.GetMenuContextHelpId
GetMenuContextHelpId.restype = WINAPI

MB_OK = 0x00000000
MB_OKCANCEL = 0x00000001
MB_ABORTRETRYIGNORE = 0x00000002
MB_YESNOCANCEL = 0x00000003
MB_YESNO = 0x00000004
MB_RETRYCANCEL = 0x00000005
MB_CANCELTRYCONTINUE = 0x00000006
MB_ICONHAND = 0x00000010
MB_ICONQUESTION = 0x00000020
MB_ICONEXCLAMATION = 0x00000030
MB_ICONASTERISK = 0x00000040
MB_USERICON = 0x00000080
MB_ICONWARNING = MB_ICONEXCLAMATION
MB_ICONERROR = MB_ICONHAND
MB_ICONINFORMATION = MB_ICONASTERISK
MB_ICONSTOP = MB_ICONHAND
MB_DEFBUTTON1 = 0x00000000
MB_DEFBUTTON2 = 0x00000100
MB_DEFBUTTON3 = 0x00000200
MB_DEFBUTTON4 = 0x00000300
MB_APPLMODAL = 0x00000000
MB_SYSTEMMODAL = 0x00001000
MB_TASKMODAL = 0x00002000
MB_HELP = 0x00004000
MB_NOFOCUS = 0x00008000
MB_SETFOREGROUND = 0x00010000
MB_DEFAULT_DESKTOP_ONLY = 0x00020000
MB_TOPMOST = 0x00040000
MB_RIGHT = 0x00080000
MB_RTLREADING = 0x00100000
MB_SERVICE_NOTIFICATION = 0x00200000
MB_SERVICE_NOTIFICATION = 0x00040000
MB_SERVICE_NOTIFICATION_NT3X = 0x00040000
MB_TYPEMASK = 0x0000000F
MB_ICONMASK = 0x000000F0
MB_DEFMASK = 0x00000F00
MB_MODEMASK = 0x00003000
MB_MISCMASK = 0x0000C000

# WINAPI
# MessageBoxA(
#     _In_opt_ HWND hWnd,
#     _In_opt_ LPCSTR lpText,
#     _In_opt_ LPCSTR lpCaption,
#     _In_ UINT uType);
MessageBoxA = user32.MessageBoxA
MessageBoxA.restype = WINAPI


# WINAPI
# MessageBoxW(
#     _In_opt_ HWND hWnd,
#     _In_opt_ LPCWSTR lpText,
#     _In_opt_ LPCWSTR lpCaption,
#     _In_ UINT uType);
MessageBoxW = user32.MessageBoxW
MessageBoxW.restype = WINAPI

MessageBox = MessageBoxW
# MessageBox = MessageBoxA

# INT
# MessageBox(
#     HWND hWnd,
#     LPCTSTR lpText,
#     LPCTSTR lpCaption,
#     UINT uType
#     )
MessageBox = user32.MessageBox
MessageBox.restype = INT


# WINAPI
# MessageBoxExA(
#     _In_opt_ HWND hWnd,
#     _In_opt_ LPCSTR lpText,
#     _In_opt_ LPCSTR lpCaption,
#     _In_ UINT uType,
#     _In_ WORD wLanguageId);
MessageBoxExA = user32.MessageBoxExA
MessageBoxExA.restype = WINAPI


# WINAPI
# MessageBoxExW(
#     _In_opt_ HWND hWnd,
#     _In_opt_ LPCWSTR lpText,
#     _In_opt_ LPCWSTR lpCaption,
#     _In_ UINT uType,
#     _In_ WORD wLanguageId);
MessageBoxExW = user32.MessageBoxExW
MessageBoxExW.restype = WINAPI

MessageBoxEx = MessageBoxExW
# MessageBoxEx = MessageBoxExA


MSGBOXCALLBACK = CALLBACK(VOID, LPHELPINFO)


class tagMSGBOXPARAMSA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('hwndOwner', HWND),
        ('hInstance', HINSTANCE),
        ('lpszText', LPCSTR),
        ('lpszCaption', LPCSTR),
        ('dwStyle', DWORD),
        ('lpszIcon', LPCSTR),
        ('dwContextHelpId', DWORD_PTR),
        ('lpfnMsgBoxCallback', MSGBOXCALLBACK),
        ('dwLanguageId', DWORD),
    ]


MSGBOXPARAMSA = tagMSGBOXPARAMSA
PMSGBOXPARAMSA = POINTER(tagMSGBOXPARAMSA)
LPMSGBOXPARAMSA = POINTER(tagMSGBOXPARAMSA)



class tagMSGBOXPARAMSW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('hwndOwner', HWND),
        ('hInstance', HINSTANCE),
        ('lpszText', LPCWSTR),
        ('lpszCaption', LPCWSTR),
        ('dwStyle', DWORD),
        ('lpszIcon', LPCWSTR),
        ('dwContextHelpId', DWORD_PTR),
        ('lpfnMsgBoxCallback', MSGBOXCALLBACK),
        ('dwLanguageId', DWORD),
    ]


MSGBOXPARAMSW = tagMSGBOXPARAMSW
PMSGBOXPARAMSW = POINTER(tagMSGBOXPARAMSW)
LPMSGBOXPARAMSW = POINTER(tagMSGBOXPARAMSW)


MSGBOXPARAMS = MSGBOXPARAMSW
PMSGBOXPARAMS = PMSGBOXPARAMSW
LPMSGBOXPARAMS = LPMSGBOXPARAMSW

# WINAPI
# MessageBoxIndirectA(
#     _In_ CONST MSGBOXPARAMSA * lpmbp);
MessageBoxIndirectA = user32.MessageBoxIndirectA
MessageBoxIndirectA.restype = WINAPI


# WINAPI
# MessageBoxIndirectW(
#     _In_ CONST MSGBOXPARAMSW * lpmbp);
MessageBoxIndirectW = user32.MessageBoxIndirectW
MessageBoxIndirectW.restype = WINAPI

MessageBoxIndirect = MessageBoxIndirectW
# MessageBoxIndirect = MessageBoxIndirectA

# WINAPI
# MessageBeep(
#     _In_ UINT uType);
MessageBeep = user32.MessageBeep
MessageBeep.restype = WINAPI


# WINAPI
# ShowCursor(
#     _In_ BOOL bShow);
ShowCursor = user32.ShowCursor
ShowCursor.restype = WINAPI


# WINAPI
# SetCursorPos(
#     _In_ INT X,
#     _In_ INT Y);
SetCursorPos = user32.SetCursorPos
SetCursorPos.restype = WINAPI


# WINAPI
# SetPhysicalCursorPos(
#     _In_ INT X,
#     _In_ INT Y);
SetPhysicalCursorPos = user32.SetPhysicalCursorPos
SetPhysicalCursorPos.restype = WINAPI


# WINAPI
# SetCursor(
#     _In_opt_ HCURSOR hCursor);
SetCursor = user32.SetCursor
SetCursor.restype = WINAPI


# WINAPI
# GetCursorPos(
#     _Out_ LPPOINT lpPoINT);
GetCursorPos = user32.GetCursorPos
GetCursorPos.restype = WINAPI


# WINAPI
# GetPhysicalCursorPos(
#     _Out_ LPPOINT lpPoINT);
GetPhysicalCursorPos = user32.GetPhysicalCursorPos
GetPhysicalCursorPos.restype = WINAPI


# WINAPI
# GetClipCursor(
#     _Out_ LPRECT lpRect);
GetClipCursor = user32.GetClipCursor
GetClipCursor.restype = WINAPI


# WINAPI
# GetCursor(
#     VOID);
GetCursor = user32.GetCursor
GetCursor.restype = WINAPI


# WINAPI
# CreateCaret(
#     _In_ HWND hWnd,
#     _In_opt_ HBITMAP hBitmap,
#     _In_ INT nWidth,
#     _In_ INT nHeight);
CreateCaret = user32.CreateCaret
CreateCaret.restype = WINAPI


# WINAPI
# GetCaretBlinkTime(
#     VOID);
GetCaretBlinkTime = user32.GetCaretBlinkTime
GetCaretBlinkTime.restype = WINAPI


# WINAPI
# SetCaretBlinkTime(
#     _In_ UINT uMSeconds);
SetCaretBlinkTime = user32.SetCaretBlinkTime
SetCaretBlinkTime.restype = WINAPI


# WINAPI
# DestroyCaret(
#     VOID);
DestroyCaret = user32.DestroyCaret
DestroyCaret.restype = WINAPI


# WINAPI
# HideCaret(
#     _In_opt_ HWND hWnd);
HideCaret = user32.HideCaret
HideCaret.restype = WINAPI


# WINAPI
# ShowCaret(
#     _In_opt_ HWND hWnd);
ShowCaret = user32.ShowCaret
ShowCaret.restype = WINAPI


# WINAPI
# SetCaretPos(
#     _In_ INT X,
#     _In_ INT Y);
SetCaretPos = user32.SetCaretPos
SetCaretPos.restype = WINAPI


# WINAPI
# GetCaretPos(
#     _Out_ LPPOINT lpPoINT);
GetCaretPos = user32.GetCaretPos
GetCaretPos.restype = WINAPI


# WINAPI
# ClientToScreen(
#     _In_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
ClientToScreen = user32.ClientToScreen
ClientToScreen.restype = WINAPI


# WINAPI
# ScreenToClient(
#     _In_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
ScreenToClient = user32.ScreenToClient
ScreenToClient.restype = WINAPI


# WINAPI
# LogicalToPhysicalPoINT(
#     _In_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
LogicalToPhysicalPoINT = user32.LogicalToPhysicalPoINT
LogicalToPhysicalPoINT.restype = WINAPI


# WINAPI
# PhysicalToLogicalPoINT(
#     _In_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
PhysicalToLogicalPoINT = user32.PhysicalToLogicalPoINT
PhysicalToLogicalPoINT.restype = WINAPI


# WINAPI
# LogicalToPhysicalPoINTForPerMonitorDPI(
#     _In_opt_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
LogicalToPhysicalPoINTForPerMonitorDPI = (
    user32.LogicalToPhysicalPoINTForPerMonitorDPI
)
LogicalToPhysicalPoINTForPerMonitorDPI.restype = WINAPI


# WINAPI
# PhysicalToLogicalPoINTForPerMonitorDPI(
#     _In_opt_ HWND hWnd,
#     _Inout_ LPPOINT lpPoINT);
PhysicalToLogicalPoINTForPerMonitorDPI = (
    user32.PhysicalToLogicalPoINTForPerMonitorDPI
)
PhysicalToLogicalPoINTForPerMonitorDPI.restype = WINAPI


# WINAPI
# MapWindowPoINTs(
#     _In_opt_ HWND hWndFrom,
#     _In_opt_ HWND hWndTo,
#     _Inout_updates_(cPoINTs) LPPOINT lpPoINTs,
#     _In_ UINT cPoINTs);
MapWindowPoINTs = user32.MapWindowPoINTs
MapWindowPoINTs.restype = WINAPI


# WINAPI
# WindowFromPoINT(
#     _In_ POINT PoINT);
WindowFromPoINT = user32.WindowFromPoINT
WindowFromPoINT.restype = WINAPI


# WINAPI
# WindowFromPhysicalPoINT(
#     _In_ POINT PoINT);
WindowFromPhysicalPoINT = user32.WindowFromPhysicalPoINT
WindowFromPhysicalPoINT.restype = WINAPI


# WINAPI
# ChildWindowFromPoINT(
#     _In_ HWND hWndParent,
#     _In_ POINT PoINT);
ChildWindowFromPoINT = user32.ChildWindowFromPoINT
ChildWindowFromPoINT.restype = WINAPI


# WINAPI
# ClipCursor(
#     _In_opt_ CONST RECT *lpRect);
ClipCursor = user32.ClipCursor
ClipCursor.restype = WINAPI

CWP_ALL = 0x00000000
CWP_SKIPINVISIBLE = 0x00000001
CWP_SKIPDISABLED = 0x00000002
CWP_SKIPTRANSPARENT = 0x00000004

# WINAPI
# ChildWindowFromPoINTEx(
#     _In_ HWND hwnd,
#     _In_ POINT pt,
#     _In_ UINT flags);
ChildWindowFromPoINTEx = user32.ChildWindowFromPoINTEx
ChildWindowFromPoINTEx.restype = WINAPI

CTLCOLOR_MSGBOX = 0x00000000
CTLCOLOR_EDIT = 0x00000001
CTLCOLOR_LISTBOX = 0x00000002
CTLCOLOR_BTN = 0x00000003
CTLCOLOR_DLG = 0x00000004
CTLCOLOR_SCROLLBAR = 0x00000005
CTLCOLOR_STATIC = 0x00000006
CTLCOLOR_MAX = 0x00000007
COLOR_SCROLLBAR = 0x00000000
COLOR_BACKGROUND = 0x00000001
COLOR_ACTIVECAPTION = 0x00000002
COLOR_INACTIVECAPTION = 0x00000003
COLOR_MENU = 0x00000004
COLOR_WINDOW = 0x00000005
COLOR_WINDOWFRAME = 0x00000006
COLOR_MENUTEXT = 0x00000007
COLOR_WINDOWTEXT = 0x00000008
COLOR_CAPTIONTEXT = 0x00000009
COLOR_ACTIVEBORDER = 0x0000000A
COLOR_INACTIVEBORDER = 0x0000000B
COLOR_APPWORKSPACE = 0x0000000C
COLOR_HIGHLIGHT = 0x0000000D
COLOR_HIGHLIGHTTEXT = 0x0000000E
COLOR_BTNFACE = 0x0000000F
COLOR_BTNSHADOW = 0x00000010
COLOR_GRAYTEXT = 0x00000011
COLOR_BTNTEXT = 0x00000012
COLOR_INACTIVECAPTIONTEXT = 0x00000013
COLOR_BTNHIGHLIGHT = 0x00000014
COLOR_3DDKSHADOW = 0x00000015
COLOR_3DLIGHT = 0x00000016
COLOR_INFOTEXT = 0x00000017
COLOR_INFOBK = 0x00000018
COLOR_HOTLIGHT = 0x0000001A
COLOR_GRADIENTACTIVECAPTION = 0x0000001B
COLOR_GRADIENTINACTIVECAPTION = 0x0000001C
COLOR_MENUHILIGHT = 0x0000001D
COLOR_MENUBAR = 0x0000001E
COLOR_DESKTOP = COLOR_BACKGROUND
COLOR_3DFACE = COLOR_BTNFACE
COLOR_3DSHADOW = COLOR_BTNSHADOW
COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT
COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT
COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT

# WINAPI
# GetSysColor(
#     _In_ INT nIndex);
GetSysColor = user32.GetSysColor
GetSysColor.restype = WINAPI


# WINAPI
# GetSysColorBrush(
#     _In_ INT nIndex);
GetSysColorBrush = user32.GetSysColorBrush
GetSysColorBrush.restype = WINAPI


# WINAPI
# SetSysColors(
#     _In_ INT cElements,
#     _In_reads_(cElements) CONST INT * lpaElements,
#     _In_reads_(cElements) CONST COLORREF * lpaRgbValues);
SetSysColors = user32.SetSysColors
SetSysColors.restype = WINAPI


# WINAPI
# DrawFocusRect(
#     _In_ HDC hDC,
#     _In_ CONST RECT * lprc);
DrawFocusRect = user32.DrawFocusRect
DrawFocusRect.restype = WINAPI


# WINAPI
# FillRect(
#     _In_ HDC hDC,
#     _In_ CONST RECT *lprc,
#     _In_ HBRUSH hbr);
FillRect = user32.FillRect
FillRect.restype = WINAPI


# WINAPI
# FrameRect(
#     _In_ HDC hDC,
#     _In_ CONST RECT *lprc,
#     _In_ HBRUSH hbr);
FrameRect = user32.FrameRect
FrameRect.restype = WINAPI


# WINAPI
# InvertRect(
#     _In_ HDC hDC,
#     _In_ CONST RECT *lprc);
InvertRect = user32.InvertRect
InvertRect.restype = WINAPI


# WINAPI
# SetRect(
#     _Out_ LPRECT lprc,
#     _In_ INT xLeft,
#     _In_ INT yTop,
#     _In_ INT xRight,
#     _In_ INT yBottom);
SetRect = user32.SetRect
SetRect.restype = WINAPI


# WINAPI
# SetRectEmpty(
#     _Out_ LPRECT lprc);
SetRectEmpty = user32.SetRectEmpty
SetRectEmpty.restype = WINAPI


# WINAPI
# CopyRect(
#     _Out_ LPRECT lprcDst,
#     _In_ CONST RECT *lprcSrc);
CopyRect = user32.CopyRect
CopyRect.restype = WINAPI


# WINAPI
# InflateRect(
#     _Inout_ LPRECT lprc,
#     _In_ INT dx,
#     _In_ INT dy);
InflateRect = user32.InflateRect
InflateRect.restype = WINAPI


# WINAPI
# IntersectRect(
#     _Out_ LPRECT lprcDst,
#     _In_ CONST RECT *lprcSrc1,
#     _In_ CONST RECT *lprcSrc2);
IntersectRect = user32.IntersectRect
IntersectRect.restype = WINAPI


# WINAPI
# UnionRect(
#     _Out_ LPRECT lprcDst,
#     _In_ CONST RECT *lprcSrc1,
#     _In_ CONST RECT *lprcSrc2);
UnionRect = user32.UnionRect
UnionRect.restype = WINAPI


# WINAPI
# SubtractRect(
#     _Out_ LPRECT lprcDst,
#     _In_ CONST RECT *lprcSrc1,
#     _In_ CONST RECT *lprcSrc2);
SubtractRect = user32.SubtractRect
SubtractRect.restype = WINAPI


# WINAPI
# OffsetRect(
#     _Inout_ LPRECT lprc,
#     _In_ INT dx,
#     _In_ INT dy);
OffsetRect = user32.OffsetRect
OffsetRect.restype = WINAPI


# WINAPI
# IsRectEmpty(
#     _In_ CONST RECT *lprc);
IsRectEmpty = user32.IsRectEmpty
IsRectEmpty.restype = WINAPI


# WINAPI
# EqualRect(
#     _In_ CONST RECT *lprc1,
#     _In_ CONST RECT *lprc2);
EqualRect = user32.EqualRect
EqualRect.restype = WINAPI


# WINAPI
# PtInRect(
#     _In_ CONST RECT *lprc,
#     _In_ POINT pt);
PtInRect = user32.PtInRect
PtInRect.restype = WINAPI


# WINAPI
# GetWindowWord(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetWindowWord = user32.GetWindowWord
GetWindowWord.restype = WINAPI


# WINAPI
# SetWindowWord(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ WORD wNewWord);
SetWindowWord = user32.SetWindowWord
SetWindowWord.restype = WINAPI


# WINAPI
# GetWindowLongA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetWindowLongA = user32.GetWindowLongA
GetWindowLongA.restype = WINAPI


# WINAPI
# GetWindowLongW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetWindowLongW = user32.GetWindowLongW
GetWindowLongW.restype = WINAPI

GetWindowLong = GetWindowLongW
# GetWindowLong = GetWindowLongA

# WINAPI
# SetWindowLongA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG dwNewLong);
SetWindowLongA = user32.SetWindowLongA
SetWindowLongA.restype = WINAPI


# WINAPI
# SetWindowLongW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG dwNewLong);
SetWindowLongW = user32.SetWindowLongW
SetWindowLongW.restype = WINAPI

SetWindowLong = SetWindowLongW
# SetWindowLong = SetWindowLongA

# WINAPI
# GetWindowLongPtrA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetWindowLongPtrA = user32.GetWindowLongPtrA
GetWindowLongPtrA.restype = WINAPI


# WINAPI
# GetWindowLongPtrW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetWindowLongPtrW = user32.GetWindowLongPtrW
GetWindowLongPtrW.restype = WINAPI

GetWindowLongPtr = GetWindowLongPtrW
# GetWindowLongPtr = GetWindowLongPtrA

# WINAPI
# SetWindowLongPtrA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG_PTR dwNewLong);
SetWindowLongPtrA = user32.SetWindowLongPtrA
SetWindowLongPtrA.restype = WINAPI


# WINAPI
# SetWindowLongPtrW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG_PTR dwNewLong);
SetWindowLongPtrW = user32.SetWindowLongPtrW
SetWindowLongPtrW.restype = WINAPI

SetWindowLongPtr = SetWindowLongPtrW
# SetWindowLongPtr = SetWindowLongPtrA
# GetWindowLongPtrA = GetWindowLongA
GetWindowLongPtrW = GetWindowLongW
GetWindowLongPtr = GetWindowLongPtrW
# GetWindowLongPtr = GetWindowLongPtrA
# SetWindowLongPtrA = SetWindowLongA
SetWindowLongPtrW = SetWindowLongW
SetWindowLongPtr = SetWindowLongPtrW
# SetWindowLongPtr = SetWindowLongPtrA

# WINAPI
# GetClassWord(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetClassWord = user32.GetClassWord
GetClassWord.restype = WINAPI


# WINAPI
# SetClassWord(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ WORD wNewWord);
SetClassWord = user32.SetClassWord
SetClassWord.restype = WINAPI


# WINAPI
# GetClassLongA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetClassLongA = user32.GetClassLongA
GetClassLongA.restype = WINAPI


# WINAPI
# GetClassLongW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetClassLongW = user32.GetClassLongW
GetClassLongW.restype = WINAPI

GetClassLong = GetClassLongW
# GetClassLong = GetClassLongA

# WINAPI
# SetClassLongA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG dwNewLong);
SetClassLongA = user32.SetClassLongA
SetClassLongA.restype = WINAPI


# WINAPI
# SetClassLongW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG dwNewLong);
SetClassLongW = user32.SetClassLongW
SetClassLongW.restype = WINAPI

SetClassLong = SetClassLongW
# SetClassLong = SetClassLongA

# WINAPI
# GetClassLongPtrA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetClassLongPtrA = user32.GetClassLongPtrA
GetClassLongPtrA.restype = WINAPI


# WINAPI
# GetClassLongPtrW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex);
GetClassLongPtrW = user32.GetClassLongPtrW
GetClassLongPtrW.restype = WINAPI

GetClassLongPtr = GetClassLongPtrW
# GetClassLongPtr = GetClassLongPtrA

# WINAPI
# SetClassLongPtrA(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG_PTR dwNewLong);
SetClassLongPtrA = user32.SetClassLongPtrA
SetClassLongPtrA.restype = WINAPI


# WINAPI
# SetClassLongPtrW(
#     _In_ HWND hWnd,
#     _In_ INT nIndex,
#     _In_ LONG_PTR dwNewLong);
SetClassLongPtrW = user32.SetClassLongPtrW
SetClassLongPtrW.restype = WINAPI

SetClassLongPtr = SetClassLongPtrW
# SetClassLongPtr = SetClassLongPtrA
# GetClassLongPtrA = GetClassLongA
GetClassLongPtrW = GetClassLongW
GetClassLongPtr = GetClassLongPtrW
# GetClassLongPtr = GetClassLongPtrA
# SetClassLongPtrA = SetClassLongA
SetClassLongPtrW = SetClassLongW
SetClassLongPtr = SetClassLongPtrW
# SetClassLongPtr = SetClassLongPtrA

# WINAPI
# GetProcessDefaultLayout(
#     _Out_ DWORD *pdwDefaultLayout);
GetProcessDefaultLayout = user32.GetProcessDefaultLayout
GetProcessDefaultLayout.restype = WINAPI


# WINAPI
# SetProcessDefaultLayout(
#     _In_ DWORD dwDefaultLayout);
SetProcessDefaultLayout = user32.SetProcessDefaultLayout
SetProcessDefaultLayout.restype = WINAPI


# WINAPI
# GetDesktopWindow(
#     VOID);
GetDesktopWindow = user32.GetDesktopWindow
GetDesktopWindow.restype = WINAPI


# WINAPI
# GetParent(
#     _In_ HWND hWnd);
GetParent = user32.GetParent
GetParent.restype = WINAPI


# WINAPI
# SetParent(
#     _In_ HWND hWndChild,
#     _In_opt_ HWND hWndNewParent);
SetParent = user32.SetParent
SetParent.restype = WINAPI


# WINAPI
# EnumChildWindows(
#     _In_opt_ HWND hWndParent,
#     _In_ WNDENUMPROC lpEnumFunc,
#     _In_ LPARAM lParam);
EnumChildWindows = user32.EnumChildWindows
EnumChildWindows.restype = WINAPI


# WINAPI
# FindWindowA(
#     _In_opt_ LPCSTR lpClassName,
#     _In_opt_ LPCSTR lpWindowName);
FindWindowA = user32.FindWindowA
FindWindowA.restype = WINAPI


# WINAPI
# FindWindowW(
#     _In_opt_ LPCWSTR lpClassName,
#     _In_opt_ LPCWSTR lpWindowName);
FindWindowW = user32.FindWindowW
FindWindowW.restype = WINAPI

FindWindow = FindWindowW
# FindWindow = FindWindowA

# WINAPI
# FindWindowExA(
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HWND hWndChildAfter,
#     _In_opt_ LPCSTR lpszClass,
#     _In_opt_ LPCSTR lpszWindow);
FindWindowExA = user32.FindWindowExA
FindWindowExA.restype = WINAPI


# WINAPI
# FindWindowExW(
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HWND hWndChildAfter,
#     _In_opt_ LPCWSTR lpszClass,
#     _In_opt_ LPCWSTR lpszWindow);
FindWindowExW = user32.FindWindowExW
FindWindowExW.restype = WINAPI

FindWindowEx = FindWindowExW
# FindWindowEx = FindWindowExA

# WINAPI
# GetShellWindow(
#     VOID);
GetShellWindow = user32.GetShellWindow
GetShellWindow.restype = WINAPI


# WINAPI
# RegisterShellHookWindow(
#     _In_ HWND hwnd);
RegisterShellHookWindow = user32.RegisterShellHookWindow
RegisterShellHookWindow.restype = WINAPI


# WINAPI
# DeregisterShellHookWindow(
#     _In_ HWND hwnd);
DeregisterShellHookWindow = user32.DeregisterShellHookWindow
DeregisterShellHookWindow.restype = WINAPI


# WINAPI
# EnumWindows(
#     _In_ WNDENUMPROC lpEnumFunc,
#     _In_ LPARAM lParam);
EnumWindows = user32.EnumWindows
EnumWindows.restype = WINAPI


# WINAPI
# EnumThreadWindows(
#     _In_ DWORD dwThreadId,
#     _In_ WNDENUMPROC lpfn,
#     _In_ LPARAM lParam);
EnumThreadWindows = user32.EnumThreadWindows
EnumThreadWindows.restype = WINAPI

from basetsd_h import HandleToULong

def EnumTaskWindows(hTask, lpfn, lParam):
    return EnumThreadWindows(HandleToULong(hTask), lpfn, lParam)

# WINAPI
# GetClassNameA(
#     _In_ HWND hWnd,
#     _Out_writes_to_(nMaxCount, return) LPSTR lpClassName,
#     _In_ INT nMaxCount
#     );
GetClassNameA = user32.GetClassNameA
GetClassNameA.restype = WINAPI


# WINAPI
# GetClassNameW(
#     _In_ HWND hWnd,
#     _Out_writes_to_(nMaxCount, return) LPWSTR lpClassName,
#     _In_ INT nMaxCount
#     );
GetClassNameW = user32.GetClassNameW
GetClassNameW.restype = WINAPI

GetClassName = GetClassNameW
# GetClassName = GetClassNameA

# INT
# GetClassName(
#     HWND hWnd,
#     LPTSTR lpClassName,
#     INT nMaxCount
#     )
# GetClassName = user32.GetClassName
# GetClassName.restype = INT


# WINAPI
# GetTopWindow(
#     _In_opt_ HWND hWnd);
GetTopWindow = user32.GetTopWindow
GetTopWindow.restype = WINAPI



def GetNextWindow(hWnd, wCmd):
    return GetWindow(hWnd, wCmd)


# WINAPI
# GetWindowThreadProcessId(
#     _In_ HWND hWnd,
#     _Out_opt_ LPDWORD lpdwProcessId);
GetWindowThreadProcessId = user32.GetWindowThreadProcessId
GetWindowThreadProcessId.restype = WINAPI


# WINAPI
# IsGUIThread(
#     _In_ BOOL bConvert);
IsGUIThread = user32.IsGUIThread
IsGUIThread.restype = WINAPI



def GetWindowTask(hWnd):
    return GetWindowThreadProcessId(hWnd, NULL)

# WINAPI
# GetLastActivePopup(
#     _In_ HWND hWnd);
GetLastActivePopup = user32.GetLastActivePopup
GetLastActivePopup.restype = WINAPI

GW_HWNDFIRST = 0x00000000
GW_HWNDLAST = 0x00000001
GW_HWNDNEXT = 0x00000002
GW_HWNDPREV = 0x00000003
GW_OWNER = 0x00000004
GW_CHILD = 0x00000005
GW_MAX = 0x00000005
GW_ENABLEDPOPUP = 0x00000006
GW_MAX = 0x00000006

# WINAPI
# GetWindow(
#     _In_ HWND hWnd,
#     _In_ UINT uCmd);
GetWindow = user32.GetWindow
GetWindow.restype = WINAPI


# WINAPI
# SetWindowsHookA(
#     _In_ INT nFilterType,
#     _In_ HOOKPROC pfnFilterProc);
SetWindowsHookA = user32.SetWindowsHookA
SetWindowsHookA.restype = WINAPI


# WINAPI
# SetWindowsHookW(
#     _In_ INT nFilterType,
#     _In_ HOOKPROC pfnFilterProc);
SetWindowsHookW = user32.SetWindowsHookW
SetWindowsHookW.restype = WINAPI

SetWindowsHook = SetWindowsHookW
# SetWindowsHook = SetWindowsHookA

# WINAPI
# SetWindowsHookA(
#     _In_ INT nFilterType,
#     _In_ HOOKPROC pfnFilterProc);
SetWindowsHookA = user32.SetWindowsHookA
SetWindowsHookA.restype = WINAPI


# WINAPI
# SetWindowsHookW(
#     _In_ INT nFilterType,
#     _In_ HOOKPROC pfnFilterProc);
SetWindowsHookW = user32.SetWindowsHookW
SetWindowsHookW.restype = WINAPI

SetWindowsHook = SetWindowsHookW
# SetWindowsHook = SetWindowsHookA

# WINAPI
# UnhookWindowsHook(
#     _In_ INT nCode,
#     _In_ HOOKPROC pfnFilterProc);
UnhookWindowsHook = user32.UnhookWindowsHook
UnhookWindowsHook.restype = WINAPI


# WINAPI
# SetWindowsHookExA(
#     _In_ INT idHook,
#     _In_ HOOKPROC lpfn,
#     _In_opt_ HINSTANCE hmod,
#     _In_ DWORD dwThreadId);
SetWindowsHookExA = user32.SetWindowsHookExA
SetWindowsHookExA.restype = WINAPI


# WINAPI
# SetWindowsHookExW(
#     _In_ INT idHook,
#     _In_ HOOKPROC lpfn,
#     _In_opt_ HINSTANCE hmod,
#     _In_ DWORD dwThreadId);
SetWindowsHookExW = user32.SetWindowsHookExW
SetWindowsHookExW.restype = WINAPI

SetWindowsHookEx = SetWindowsHookExW
# SetWindowsHookEx = SetWindowsHookExA

# WINAPI
# UnhookWindowsHookEx(
#     _In_ HHOOK hhk);
UnhookWindowsHookEx = user32.UnhookWindowsHookEx
UnhookWindowsHookEx.restype = WINAPI


# WINAPI
# CallNextHookEx(
#     _In_opt_ HHOOK hhk,
#     _In_ INT nCode,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
CallNextHookEx = user32.CallNextHookEx
CallNextHookEx.restype = WINAPI



def DefHookProc(nCode, wParam, lParam, phhk):
    return CallNextHookEx(ctypes.byref(phhk), nCode, wParam, lParam)


MF_INSERT = 0x00000000
MF_CHANGE = 0x00000080
MF_APPEND = 0x00000100
MF_DELETE = 0x00000200
MF_REMOVE = 0x00001000
MF_BYCOMMAND = 0x00000000
MF_BYPOSITION = 0x00000400
MF_SEPARATOR = 0x00000800
MF_ENABLED = 0x00000000
MF_GRAYED = 0x00000001
MF_DISABLED = 0x00000002
MF_UNCHECKED = 0x00000000
MF_CHECKED = 0x00000008
MF_USECHECKBITMAPS = 0x00000200
MF_STRING = 0x00000000
MF_BITMAP = 0x00000004
MF_OWNERDRAW = 0x00000100
MF_POPUP = 0x00000010
MF_MENUBARBREAK = 0x00000020
MF_MENUBREAK = 0x00000040
MF_UNHILITE = 0x00000000
MF_HILITE = 0x00000080
MF_DEFAULT = 0x00001000
MF_SYSMENU = 0x00002000
MF_HELP = 0x00004000
MF_RIGHTJUSTIFY = 0x00004000
MF_MOUSESELECT = 0x00008000
MF_END = 0x00000080
MFT_STRING = MF_STRING
MFT_BITMAP = MF_BITMAP
MFT_MENUBARBREAK = MF_MENUBARBREAK
MFT_MENUBREAK = MF_MENUBREAK
MFT_OWNERDRAW = MF_OWNERDRAW
MFT_RADIOCHECK = 0x00000200
MFT_SEPARATOR = MF_SEPARATOR
MFT_RIGHTORDER = 0x00002000
MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY
MFS_GRAYED = 0x00000003
MFS_DISABLED = MFS_GRAYED
MFS_CHECKED = MF_CHECKED
MFS_HILITE = MF_HILITE
MFS_ENABLED = MF_ENABLED
MFS_UNCHECKED = MF_UNCHECKED
MFS_UNHILITE = MF_UNHILITE
MFS_DEFAULT = MF_DEFAULT

# WINAPI
# CheckMenuRadioItem(
#     _In_ HMENU hmenu,
#     _In_ UINT first,
#     _In_ UINT last,
#     _In_ UINT check,
#     _In_ UINT flags);
CheckMenuRadioItem = user32.CheckMenuRadioItem
CheckMenuRadioItem.restype = WINAPI


class MENUITEMTEMPLATEHEADER(ctypes.Structure):
    _fields_ = [
        ('versionNumber', WORD),
        ('offset', WORD),
    ]


PMENUITEMTEMPLATEHEADER = POINTER(MENUITEMTEMPLATEHEADER)



class MENUITEMTEMPLATE(ctypes.Structure):
    _fields_ = [
        ('mtOption', WORD),
        ('mtID', WORD),
        ('mtString', WCHAR * 1),
    ]


PMENUITEMTEMPLATE = POINTER(MENUITEMTEMPLATE)


MF_END = 0x00000080
SC_SIZE = 0x0000F000
SC_MOVE = 0x0000F010
SC_MINIMIZE = 0x0000F020
SC_MAXIMIZE = 0x0000F030
SC_NEXTWINDOW = 0x0000F040
SC_PREVWINDOW = 0x0000F050
SC_CLOSE = 0x0000F060
SC_VSCROLL = 0x0000F070
SC_HSCROLL = 0x0000F080
SC_MOUSEMENU = 0x0000F090
SC_KEYMENU = 0x0000F100
SC_ARRANGE = 0x0000F110
SC_RESTORE = 0x0000F120
SC_TASKLIST = 0x0000F130
SC_SCREENSAVE = 0x0000F140
SC_HOTKEY = 0x0000F150
SC_DEFAULT = 0x0000F160
SC_MONITORPOWER = 0x0000F170
SC_CONTEXTHELP = 0x0000F180
SC_SEPARATOR = 0x0000F00F
SCF_ISSECURE = 0x00000001


def GET_SC_WPARAM(wParam):
    return wParam & 0xFFF0


SC_ICON = SC_MINIMIZE
SC_ZOOM = SC_MAXIMIZE

# WINAPI
# LoadBitmapA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpBitmapName);
LoadBitmapA = user32.LoadBitmapA
LoadBitmapA.restype = WINAPI


# WINAPI
# LoadBitmapW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpBitmapName);
LoadBitmapW = user32.LoadBitmapW
LoadBitmapW.restype = WINAPI

LoadBitmap = LoadBitmapW
# LoadBitmap = LoadBitmapA

# WINAPI
# LoadCursorA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpCursorName);
LoadCursorA = user32.LoadCursorA
LoadCursorA.restype = WINAPI


# WINAPI
# LoadCursorW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpCursorName);
LoadCursorW = user32.LoadCursorW
LoadCursorW.restype = WINAPI

LoadCursor = LoadCursorW
# LoadCursor = LoadCursorA

# WINAPI
# LoadCursorFromFileA(
#     _In_ LPCSTR lpFileName);
LoadCursorFromFileA = user32.LoadCursorFromFileA
LoadCursorFromFileA.restype = WINAPI


# WINAPI
# LoadCursorFromFileW(
#     _In_ LPCWSTR lpFileName);
LoadCursorFromFileW = user32.LoadCursorFromFileW
LoadCursorFromFileW.restype = WINAPI

LoadCursorFromFile = LoadCursorFromFileW
# LoadCursorFromFile = LoadCursorFromFileA

# WINAPI
# CreateCursor(
#     _In_opt_ HINSTANCE hInst,
#     _In_ INT xHotSpot,
#     _In_ INT yHotSpot,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_ CONST VOID *pvANDPlane,
#     _In_ CONST VOID *pvXORPlane);
CreateCursor = user32.CreateCursor
CreateCursor.restype = WINAPI


# WINAPI
# DestroyCursor(
#     _In_ HCURSOR hCursor);
DestroyCursor = user32.DestroyCursor
DestroyCursor.restype = WINAPI


# WINAPI
# CopyCursor(
#     _In_ HCURSOR hCursor);
CopyCursor = user32.CopyCursor
CopyCursor.restype = WINAPI

IDC_ARROW = MAKEINTRESOURCE(32512)
IDC_IBEAM = MAKEINTRESOURCE(32513)
IDC_WAIT = MAKEINTRESOURCE(32514)
IDC_CROSS = MAKEINTRESOURCE(32515)
IDC_UPARROW = MAKEINTRESOURCE(32516)
IDC_SIZE = MAKEINTRESOURCE(32640)
IDC_ICON = MAKEINTRESOURCE(32641)
IDC_SIZENWSE = MAKEINTRESOURCE(32642)
IDC_SIZENESW = MAKEINTRESOURCE(32643)
IDC_SIZEWE = MAKEINTRESOURCE(32644)
IDC_SIZENS = MAKEINTRESOURCE(32645)
IDC_SIZEALL = MAKEINTRESOURCE(32646)
IDC_NO = MAKEINTRESOURCE(32648)
IDC_HAND = MAKEINTRESOURCE(32649)
IDC_APPSTARTING = MAKEINTRESOURCE(32650)
IDC_HELP = MAKEINTRESOURCE(32651)
IDC_PIN = MAKEINTRESOURCE(32671)
IDC_PERSON = MAKEINTRESOURCE(32672)

# WINAPI
# SetSystemCursor(
#     _In_ HCURSOR hcur,
#     _In_ DWORD id);
SetSystemCursor = user32.SetSystemCursor
SetSystemCursor.restype = WINAPI


class _ICONINFO(ctypes.Structure):
    _fields_ = [
        ('fIcon', BOOL),
        ('xHotspot', DWORD),
        ('yHotspot', DWORD),
        ('hbmMask', HBITMAP),
        ('hbmColor', HBITMAP),
    ]


ICONINFO = _ICONINFO


PICONINFO = POINTER(ICONINFO)

# WINAPI
# LoadIconA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCSTR lpIconName);
LoadIconA = user32.LoadIconA
LoadIconA.restype = WINAPI


# WINAPI
# LoadIconW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPCWSTR lpIconName);
LoadIconW = user32.LoadIconW
LoadIconW.restype = WINAPI

LoadIcon = LoadIconW
# LoadIcon = LoadIconA

# WINAPI
# PrivateExtractIconsA(
#     _In_reads_(MAX_PATH) LPCSTR szFileName,
#     _In_ INT nIconIndex,
#     _In_ INT cxIcon,
#     _In_ INT cyIcon,
#     _Out_writes_opt_(nIcons) HICON *phicon,
#     _Out_writes_opt_(nIcons) UINT *piconid,
#     _In_ UINT nIcons,
#     _In_ UINT flags);
PrivateExtractIconsA = user32.PrivateExtractIconsA
PrivateExtractIconsA.restype = WINAPI


# WINAPI
# PrivateExtractIconsW(
#     _In_reads_(MAX_PATH) LPCWSTR szFileName,
#     _In_ INT nIconIndex,
#     _In_ INT cxIcon,
#     _In_ INT cyIcon,
#     _Out_writes_opt_(nIcons) HICON *phicon,
#     _Out_writes_opt_(nIcons) UINT *piconid,
#     _In_ UINT nIcons,
#     _In_ UINT flags);
PrivateExtractIconsW = user32.PrivateExtractIconsW
PrivateExtractIconsW.restype = WINAPI

PrivateExtractIcons = PrivateExtractIconsW
# PrivateExtractIcons = PrivateExtractIconsA

# WINAPI
# CreateIcon(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_ BYTE cPlanes,
#     _In_ BYTE cBitsPixel,
#     _In_ CONST BYTE *lpbANDbits,
#     _In_ CONST BYTE *lpbXORbits);
CreateIcon = user32.CreateIcon
CreateIcon.restype = WINAPI


# WINAPI
# DestroyIcon(
#     _In_ HICON hIcon);
DestroyIcon = user32.DestroyIcon
DestroyIcon.restype = WINAPI


# WINAPI
# LookupIconIdFromDirectory(
#     _In_reads_bytes_(ctypes.sizeof(WORD) * 3) PBYTE presbits,
#     _In_ BOOL fIcon);
LookupIconIdFromDirectory = user32.LookupIconIdFromDirectory
LookupIconIdFromDirectory.restype = WINAPI


# WINAPI
# LookupIconIdFromDirectoryEx(
#     _In_reads_bytes_(ctypes.sizeof(WORD) * 3) PBYTE presbits,
#     _In_ BOOL fIcon,
#     _In_ INT cxDesired,
#     _In_ INT cyDesired,
#     _In_ UINT Flags);
LookupIconIdFromDirectoryEx = user32.LookupIconIdFromDirectoryEx
LookupIconIdFromDirectoryEx.restype = WINAPI


# WINAPI
# CreateIconFromResource(
#     _In_reads_bytes_(dwResSize) PBYTE presbits,
#     _In_ DWORD dwResSize,
#     _In_ BOOL fIcon,
#     _In_ DWORD dwVer);
CreateIconFromResource = user32.CreateIconFromResource
CreateIconFromResource.restype = WINAPI


# WINAPI
# CreateIconFromResourceEx(
#     _In_reads_bytes_(dwResSize) PBYTE presbits,
#     _In_ DWORD dwResSize,
#     _In_ BOOL fIcon,
#     _In_ DWORD dwVer,
#     _In_ INT cxDesired,
#     _In_ INT cyDesired,
#     _In_ UINT Flags);
CreateIconFromResourceEx = user32.CreateIconFromResourceEx
CreateIconFromResourceEx.restype = WINAPI


class tagCURSORSHAPE(ctypes.Structure):
    _fields_ = [
        ('xHotSpot', INT),
        ('yHotSpot', INT),
        ('cx', INT),
        ('cy', INT),
        ('cbWidth', INT),
        ('Planes', BYTE),
        ('BitsPixel', BYTE),
    ]


CURSORSHAPE = tagCURSORSHAPE
LPCURSORSHAPE = POINTER(tagCURSORSHAPE)


IMAGE_BITMAP = 0x00000000
IMAGE_ICON = 0x00000001
IMAGE_CURSOR = 0x00000002
IMAGE_ENHMETAFILE = 0x00000003
LR_DEFAULTCOLOR = 0x00000000
LR_MONOCHROME = 0x00000001
LR_COLOR = 0x00000002
LR_COPYRETURNORG = 0x00000004
LR_COPYDELETEORG = 0x00000008
LR_LOADFROMFILE = 0x00000010
LR_LOADTRANSPARENT = 0x00000020
LR_DEFAULTSIZE = 0x00000040
LR_VGACOLOR = 0x00000080
LR_LOADMAP3DCOLORS = 0x00001000
LR_CREATEDIBSECTION = 0x00002000
LR_COPYFROMRESOURCE = 0x00004000
LR_SHARED = 0x00008000

# WINAPI
# LoadImageA(
#     _In_opt_ HINSTANCE hInst,
#     _In_ LPCSTR name,
#     _In_ UINT type,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT fuLoad);
LoadImageA = user32.LoadImageA
LoadImageA.restype = WINAPI


# WINAPI
# LoadImageW(
#     _In_opt_ HINSTANCE hInst,
#     _In_ LPCWSTR name,
#     _In_ UINT type,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT fuLoad);
LoadImageW = user32.LoadImageW
LoadImageW.restype = WINAPI

LoadImage = LoadImageW
# LoadImage = LoadImageA

# WINAPI
# CopyImage(
#     _In_ HANDLE h,
#     _In_ UINT type,
#     _In_ INT cx,
#     _In_ INT cy,
#     _In_ UINT flags);
CopyImage = user32.CopyImage
CopyImage.restype = WINAPI

DI_MASK = 0x00000001
DI_IMAGE = 0x00000002
DI_NORMAL = 0x00000003
DI_COMPAT = 0x00000004
DI_DEFAULTSIZE = 0x00000008
DI_NOMIRROR = 0x00000010

#
# WINUSERAPI BOOL WINAPI DrawIconEx(
#     _In_ HDC hdc,
#     _In_ INT xLeft,
#     _In_ INT yTop,
#     _In_ HICON hIcon,
#     _In_ INT cxWidth,
#     _In_ INT cyWidth,
#     _In_ UINT istepIfAniCur,
#     _In_opt_ HBRUSH hbrFlickerFreeDraw,
#     _In_ UINT diFlags);
DrawIconEx = user32.DrawIconEx
DrawIconEx.restype = WINUSERAPI


# WINAPI
# CreateIconIndirect(
#     _In_ PICONINFO piconinfo);
CreateIconIndirect = user32.CreateIconIndirect
CreateIconIndirect.restype = WINAPI


# WINAPI
# CopyIcon(
#     _In_ HICON hIcon);
CopyIcon = user32.CopyIcon
CopyIcon.restype = WINAPI


# WINAPI
# GetIconInfo(
#     _In_ HICON hIcon,
#     _Out_ PICONINFO piconinfo);
GetIconInfo = user32.GetIconInfo
GetIconInfo.restype = WINAPI

MAX_PATH = 255


class _ICONINFOEXA(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('fIcon', BOOL),
        ('xHotspot', DWORD),
        ('yHotspot', DWORD),
        ('hbmMask', HBITMAP),
        ('hbmColor', HBITMAP),
        ('wResID', WORD),
        ('szModName', CHAR * MAX_PATH),
        ('szResName', CHAR * MAX_PATH),
    ]


ICONINFOEXA = _ICONINFOEXA
PICONINFOEXA = POINTER(_ICONINFOEXA)



class _ICONINFOEXW(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('fIcon', BOOL),
        ('xHotspot', DWORD),
        ('yHotspot', DWORD),
        ('hbmMask', HBITMAP),
        ('hbmColor', HBITMAP),
        ('wResID', WORD),
        ('szModName', WCHAR * MAX_PATH),
        ('szResName', WCHAR * MAX_PATH),
    ]


ICONINFOEXW = _ICONINFOEXW
PICONINFOEXW = POINTER(_ICONINFOEXW)


ICONINFOEX = ICONINFOEXW
PICONINFOEX = PICONINFOEXW

# WINAPI
# GetIconInfoExA(
#     _In_ HICON hicon,
#     _Inout_ PICONINFOEXA piconinfo);
GetIconInfoExA = user32.GetIconInfoExA
GetIconInfoExA.restype = WINAPI


# WINAPI
# GetIconInfoExW(
#     _In_ HICON hicon,
#     _Inout_ PICONINFOEXW piconinfo);
GetIconInfoExW = user32.GetIconInfoExW
GetIconInfoExW.restype = WINAPI

GetIconInfoEx = GetIconInfoExW
# GetIconInfoEx = GetIconInfoExA
RES_ICON = 0x00000001
RES_CURSOR = 0x00000002
OBM_CLOSE = 0x00007FF2
OBM_UPARROW = 0x00007FF1
OBM_DNARROW = 0x00007FF0
OBM_RGARROW = 0x00007FEF
OBM_LFARROW = 0x00007FEE
OBM_REDUCE = 0x00007FED
OBM_ZOOM = 0x00007FEC
OBM_RESTORE = 0x00007FEB
OBM_REDUCED = 0x00007FEA
OBM_ZOOMD = 0x00007FE9
OBM_RESTORED = 0x00007FE8
OBM_UPARROWD = 0x00007FE7
OBM_DNARROWD = 0x00007FE6
OBM_RGARROWD = 0x00007FE5
OBM_LFARROWD = 0x00007FE4
OBM_MNARROW = 0x00007FE3
OBM_COMBO = 0x00007FE2
OBM_UPARROWI = 0x00007FE1
OBM_DNARROWI = 0x00007FE0
OBM_RGARROWI = 0x00007FDF
OBM_LFARROWI = 0x00007FDE
OBM_OLD_CLOSE = 0x00007FFF
OBM_SIZE = 0x00007FFE
OBM_OLD_UPARROW = 0x00007FFD
OBM_OLD_DNARROW = 0x00007FFC
OBM_OLD_RGARROW = 0x00007FFB
OBM_OLD_LFARROW = 0x00007FFA
OBM_BTSIZE = 0x00007FF9
OBM_CHECK = 0x00007FF8
OBM_CHECKBOXES = 0x00007FF7
OBM_BTNCORNERS = 0x00007FF6
OBM_OLD_REDUCE = 0x00007FF5
OBM_OLD_ZOOM = 0x00007FF4
OBM_OLD_RESTORE = 0x00007FF3
OCR_NORMAL = 0x00007F00
OCR_IBEAM = 0x00007F01
OCR_WAIT = 0x00007F02
OCR_CROSS = 0x00007F03
OCR_UP = 0x00007F04
OCR_SIZE = 0x00007F80
OCR_ICON = 0x00007F81
OCR_SIZENWSE = 0x00007F82
OCR_SIZENESW = 0x00007F83
OCR_SIZEWE = 0x00007F84
OCR_SIZENS = 0x00007F85
OCR_SIZEALL = 0x00007F86
OCR_ICOCUR = 0x00007F87
OCR_NO = 0x00007F88
OCR_HAND = 0x00007F89
OCR_APPSTARTING = 0x00007F8A
OIC_SAMPLE = 0x00007F00
OIC_HAND = 0x00007F01
OIC_QUES = 0x00007F02
OIC_BANG = 0x00007F03
OIC_NOTE = 0x00007F04
OIC_WINLOGO = 0x00007F05
OIC_WARNING = OIC_BANG
OIC_ERROR = OIC_HAND
OIC_INFORMATION = OIC_NOTE
OIC_SHIELD = 0x00007F06
ORD_LANGDRIVER = 1
IDI_APPLICATION = 0x00007F00
IDI_HAND = 0x00007F01
IDI_QUESTION = 0x00007F02
IDI_EXCLAMATION = 0x00007F03
IDI_ASTERISK = 0x00007F04
IDI_WINLOGO = 0x00007F05
IDI_SHIELD = 0x00007F06

IDI_WARNING = IDI_EXCLAMATION
IDI_ERROR = IDI_HAND
IDI_INFORMATION = IDI_ASTERISK

# WINAPI
# LoadStringA(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ UINT uID,
#     _Out_writes_to_(cchBufferMax, return + 1) LPSTR lpBuffer,
#     _In_ INT cchBufferMax);
LoadStringA = user32.LoadStringA
LoadStringA.restype = WINAPI


# WINAPI
# LoadStringW(
#     _In_opt_ HINSTANCE hInstance,
#     _In_ UINT uID,
#     _Out_writes_to_(cchBufferMax, return + 1) LPWSTR lpBuffer,
#     _In_ INT cchBufferMax);
LoadStringW = user32.LoadStringW
LoadStringW.restype = WINAPI

LoadString = LoadStringW
# LoadString = LoadStringA
IDOK = 0x00000001
IDCANCEL = 0x00000002
IDABORT = 0x00000003
IDRETRY = 0x00000004
IDIGNORE = 0x00000005
IDYES = 0x00000006
IDNO = 0x00000007
IDCLOSE = 0x00000008
IDHELP = 0x00000009
IDTRYAGAIN = 0x0000000A
IDCONTINUE = 0x0000000B
IDTIMEOUT = 0x00007D00
ES_LEFT = 0x00000000
ES_CENTER = 0x00000001
ES_RIGHT = 0x00000002
ES_MULTILINE = 0x00000004
ES_UPPERCASE = 0x00000008
ES_LOWERCASE = 0x00000010
ES_PASSWORD = 0x00000020
ES_AUTOVSCROLL = 0x00000040
ES_AUTOHSCROLL = 0x00000080
ES_NOHIDESEL = 0x00000100
ES_OEMCONVERT = 0x00000400
ES_READONLY = 0x00000800
ES_WANTRETURN = 0x00001000
ES_NUMBER = 0x00002000
EN_SETFOCUS = 0x00000100
EN_KILLFOCUS = 0x00000200
EN_CHANGE = 0x00000300
EN_UPDATE = 0x00000400
EN_ERRSPACE = 0x00000500
EN_MAXTEXT = 0x00000501
EN_HSCROLL = 0x00000601
EN_VSCROLL = 0x00000602
EN_ALIGN_LTR_EC = 0x00000700
EN_ALIGN_RTL_EC = 0x00000701
EN_BEFORE_PASTE = 0x00000800
EN_AFTER_PASTE = 0x00000801
EC_LEFTMARGIN = 0x00000001
EC_RIGHTMARGIN = 0x00000002
EC_USEFONTINFO = 0x0000FFFF
EMSIS_COMPOSITIONSTRING = 0x00000001
EIMES_GETCOMPSTRATONCE = 0x00000001
EIMES_CANCELCOMPSTRINFOCUS = 0x00000002
EIMES_COMPLETECOMPSTRKILLFOCUS = 0x00000004
EM_GETSEL = 0x000000B0
EM_SETSEL = 0x000000B1
EM_GETRECT = 0x000000B2
EM_SETRECT = 0x000000B3
EM_SETRECTNP = 0x000000B4
EM_SCROLL = 0x000000B5
EM_LINESCROLL = 0x000000B6
EM_SCROLLCARET = 0x000000B7
EM_GETMODIFY = 0x000000B8
EM_SETMODIFY = 0x000000B9
EM_GETLINECOUNT = 0x000000BA
EM_LINEINDEX = 0x000000BB
EM_SETHANDLE = 0x000000BC
EM_GETHANDLE = 0x000000BD
EM_GETTHUMB = 0x000000BE
EM_LINELENGTH = 0x000000C1
EM_REPLACESEL = 0x000000C2
EM_GETLINE = 0x000000C4
EM_LIMITTEXT = 0x000000C5
EM_CANUNDO = 0x000000C6
EM_UNDO = 0x000000C7
EM_FMTLINES = 0x000000C8
EM_LINEFROMCHAR = 0x000000C9
EM_SETTABSTOPS = 0x000000CB
EM_SETPASSWORDCHAR = 0x000000CC
EM_EMPTYUNDOBUFFER = 0x000000CD
EM_GETFIRSTVISIBLELINE = 0x000000CE
EM_SETREADONLY = 0x000000CF
EM_SETWORDBREAKPROC = 0x000000D0
EM_GETWORDBREAKPROC = 0x000000D1
EM_GETPASSWORDCHAR = 0x000000D2
EM_SETMARGINS = 0x000000D3
EM_GETMARGINS = 0x000000D4
EM_SETLIMITTEXT = EM_LIMITTEXT
EM_GETLIMITTEXT = 0x000000D5
EM_POSFROMCHAR = 0x000000D6
EM_CHARFROMPOS = 0x000000D7
EM_SETIMESTATUS = 0x000000D8
EM_GETIMESTATUS = 0x000000D9
EM_ENABLEFEATURE = 0x000000DA


class EDIT_CONTROL_FEATURE(ENUM):
    EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0
    EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1


MAKEINTATOM = VOID

WB_LEFT = 0x00000000
WB_RIGHT = 0x00000001
WB_ISDELIMITER = 0x00000002
BS_PUSHBUTTON = 0x00000000
BS_DEFPUSHBUTTON = 0x00000001
BS_CHECKBOX = 0x00000002
BS_AUTOCHECKBOX = 0x00000003
BS_RADIOBUTTON = 0x00000004
BS_3STATE = 0x00000005
BS_AUTO3STATE = 0x00000006
BS_GROUPBOX = 0x00000007
BS_USERBUTTON = 0x00000008
BS_AUTORADIOBUTTON = 0x00000009
BS_PUSHBOX = 0x0000000A
BS_OWNERDRAW = 0x0000000B
BS_TYPEMASK = 0x0000000F
BS_LEFTTEXT = 0x00000020
BS_TEXT = 0x00000000
BS_ICON = 0x00000040
BS_BITMAP = 0x00000080
BS_LEFT = 0x00000100
BS_RIGHT = 0x00000200
BS_CENTER = 0x00000300
BS_TOP = 0x00000400
BS_BOTTOM = 0x00000800
BS_VCENTER = 0x00000C00
BS_PUSHLIKE = 0x00001000
BS_MULTILINE = 0x00002000
BS_NOTIFY = 0x00004000
BS_FLAT = 0x00008000
BS_RIGHTBUTTON = BS_LEFTTEXT
BN_CLICKED = 0x00000000
BN_PAINT = 0x00000001
BN_HILITE = 0x00000002
BN_UNHILITE = 0x00000003
BN_DISABLE = 0x00000004
BN_DOUBLECLICKED = 0x00000005
BN_PUSHED = BN_HILITE
BN_UNPUSHED = BN_UNHILITE
BN_DBLCLK = BN_DOUBLECLICKED
BN_SETFOCUS = 0x00000006
BN_KILLFOCUS = 0x00000007
BM_GETCHECK = 0x000000F0
BM_SETCHECK = 0x000000F1
BM_GETSTATE = 0x000000F2
BM_SETSTATE = 0x000000F3
BM_SETSTYLE = 0x000000F4
BM_CLICK = 0x000000F5
BM_GETIMAGE = 0x000000F6
BM_SETIMAGE = 0x000000F7
BM_SETDONTCLICK = 0x000000F8
BST_UNCHECKED = 0x00000000
BST_CHECKED = 0x00000001
BST_INDETERMINATE = 0x00000002
BST_PUSHED = 0x00000004
BST_FOCUS = 0x00000008
SS_LEFT = 0x00000000
SS_CENTER = 0x00000001
SS_RIGHT = 0x00000002
SS_ICON = 0x00000003
SS_BLACKRECT = 0x00000004
SS_GRAYRECT = 0x00000005
SS_WHITERECT = 0x00000006
SS_BLACKFRAME = 0x00000007
SS_GRAYFRAME = 0x00000008
SS_WHITEFRAME = 0x00000009
SS_USERITEM = 0x0000000A
SS_SIMPLE = 0x0000000B
SS_LEFTNOWORDWRAP = 0x0000000C
SS_OWNERDRAW = 0x0000000D
SS_BITMAP = 0x0000000E
SS_ENHMETAFILE = 0x0000000F
SS_ETCHEDHORZ = 0x00000010
SS_ETCHEDVERT = 0x00000011
SS_ETCHEDFRAME = 0x00000012
SS_TYPEMASK = 0x0000001F
SS_REALSIZECONTROL = 0x00000040
SS_NOPREFIX = 0x00000080
SS_NOTIFY = 0x00000100
SS_CENTERIMAGE = 0x00000200
SS_RIGHTJUST = 0x00000400
SS_REALSIZEIMAGE = 0x00000800
SS_SUNKEN = 0x00001000
SS_EDITCONTROL = 0x00002000
SS_ENDELLIPSIS = 0x00004000
SS_PATHELLIPSIS = 0x00008000
SS_WORDELLIPSIS = 0x0000C000
SS_ELLIPSISMASK = 0x0000C000
STM_SETICON = 0x00000170
STM_GETICON = 0x00000171
STM_SETIMAGE = 0x00000172
STM_GETIMAGE = 0x00000173
STN_CLICKED = 0x00000000
STN_DBLCLK = 0x00000001
STN_ENABLE = 0x00000002
STN_DISABLE = 0x00000003
STM_MSGMAX = 0x00000174
WC_DIALOG = MAKEINTATOM(0x8002)
DWL_MSGRESULT = 0x00000000
DWL_DLGPROC = 0x00000004
DWL_USER = 0x00000008
DWLP_MSGRESULT = 0x00000000
DWLP_DLGPROC = DWLP_MSGRESULT + ctypes.sizeof(LRESULT)
DWLP_USER = DWLP_DLGPROC + ctypes.sizeof(DLGPROC)

# WINAPI
# IsDialogMessageA(
#     _In_ HWND hDlg,
#     _In_ LPMSG lpMsg);
IsDialogMessageA = user32.IsDialogMessageA
IsDialogMessageA.restype = WINAPI


# WINAPI
# IsDialogMessageW(
#     _In_ HWND hDlg,
#     _In_ LPMSG lpMsg);
IsDialogMessageW = user32.IsDialogMessageW
IsDialogMessageW.restype = WINAPI

IsDialogMessage = IsDialogMessageW
# IsDialogMessage = IsDialogMessageA

# WINAPI
# MapDialogRect(
#     _In_ HWND hDlg,
#     _Inout_ LPRECT lpRect);
MapDialogRect = user32.MapDialogRect
MapDialogRect.restype = WINAPI


# WINAPI
# DlgDirListA(
#     _In_ HWND hDlg,
#     _Inout_ LPSTR lpPathSpec,
#     _In_ INT nIDListBox,
#     _In_ INT nIDStaticPath,
#     _In_ UINT uFileType);
DlgDirListA = user32.DlgDirListA
DlgDirListA.restype = WINAPI


# WINAPI
# DlgDirListW(
#     _In_ HWND hDlg,
#     _Inout_ LPWSTR lpPathSpec,
#     _In_ INT nIDListBox,
#     _In_ INT nIDStaticPath,
#     _In_ UINT uFileType);
DlgDirListW = user32.DlgDirListW
DlgDirListW.restype = WINAPI

DlgDirList = DlgDirListW
# DlgDirList = DlgDirListA
DDL_READWRITE = 0x00000000
DDL_READONLY = 0x00000001
DDL_HIDDEN = 0x00000002
DDL_SYSTEM = 0x00000004
DDL_DIRECTORY = 0x00000010
DDL_ARCHIVE = 0x00000020
DDL_POSTMSGS = 0x00002000
DDL_DRIVES = 0x00004000
DDL_EXCLUSIVE = 0x00008000

# WINAPI
# DlgDirSelectExA(
#     _In_ HWND hwndDlg,
#     _Out_writes_(chCount) LPSTR lpString,
#     _In_ INT chCount,
#     _In_ INT idListBox);
DlgDirSelectExA = user32.DlgDirSelectExA
DlgDirSelectExA.restype = WINAPI


# WINAPI
# DlgDirSelectExW(
#     _In_ HWND hwndDlg,
#     _Out_writes_(chCount) LPWSTR lpString,
#     _In_ INT chCount,
#     _In_ INT idListBox);
DlgDirSelectExW = user32.DlgDirSelectExW
DlgDirSelectExW.restype = WINAPI

DlgDirSelectEx = DlgDirSelectExW
# DlgDirSelectEx = DlgDirSelectExA

# WINAPI
# DlgDirListComboBoxA(
#     _In_ HWND hDlg,
#     _Inout_ LPSTR lpPathSpec,
#     _In_ INT nIDComboBox,
#     _In_ INT nIDStaticPath,
#     _In_ UINT uFiletype);
DlgDirListComboBoxA = user32.DlgDirListComboBoxA
DlgDirListComboBoxA.restype = WINAPI


# WINAPI
# DlgDirListComboBoxW(
#     _In_ HWND hDlg,
#     _Inout_ LPWSTR lpPathSpec,
#     _In_ INT nIDComboBox,
#     _In_ INT nIDStaticPath,
#     _In_ UINT uFiletype);
DlgDirListComboBoxW = user32.DlgDirListComboBoxW
DlgDirListComboBoxW.restype = WINAPI

DlgDirListComboBox = DlgDirListComboBoxW
# DlgDirListComboBox = DlgDirListComboBoxA

# WINAPI
# DlgDirSelectComboBoxExA(
#     _In_ HWND hwndDlg,
#     _Out_writes_(cchOut) LPSTR lpString,
#     _In_ INT cchOut,
#     _In_ INT idComboBox);
DlgDirSelectComboBoxExA = user32.DlgDirSelectComboBoxExA
DlgDirSelectComboBoxExA.restype = WINAPI


# WINAPI
# DlgDirSelectComboBoxExW(
#     _In_ HWND hwndDlg,
#     _Out_writes_(cchOut) LPWSTR lpString,
#     _In_ INT cchOut,
#     _In_ INT idComboBox);
DlgDirSelectComboBoxExW = user32.DlgDirSelectComboBoxExW
DlgDirSelectComboBoxExW.restype = WINAPI

DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExW
# DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExA
DS_ABSALIGN = 0x00000001
DS_SYSMODAL = 0x00000002
DS_LOCALEDIT = 0x00000020
DS_SETFONT = 0x00000040
DS_MODALFRAME = 0x00000080
DS_NOIDLEMSG = 0x00000100
DS_SETFOREGROUND = 0x00000200
DS_3DLOOK = 0x00000004
DS_FIXEDSYS = 0x00000008
DS_NOFAILCREATE = 0x00000010
DS_CONTROL = 0x00000400
DS_CENTER = 0x00000800
DS_CENTERMOUSE = 0x00001000
DS_CONTEXTHELP = 0x00002000
DS_SHELLFONT = DS_SETFONT | DS_FIXEDSYS
DS_USEPIXELS = 0x00008000
DM_GETDEFID = WM_USER+0
DM_SETDEFID = WM_USER+1
DM_REPOSITION = WM_USER+2
DC_HASDEFID = 0x0000534B
DLGC_WANTARROWS = 0x00000001
DLGC_WANTTAB = 0x00000002
DLGC_WANTALLKEYS = 0x00000004
DLGC_WANTMESSAGE = 0x00000004
DLGC_HASSETSEL = 0x00000008
DLGC_DEFPUSHBUTTON = 0x00000010
DLGC_UNDEFPUSHBUTTON = 0x00000020
DLGC_RADIOBUTTON = 0x00000040
DLGC_WANTCHARS = 0x00000080
DLGC_STATIC = 0x00000100
DLGC_BUTTON = 0x00002000
LB_CTLCODE = 0x00000000
LB_OKAY = 0x00000000
LB_ERR = -1
LB_ERRSPACE = -2
LBN_ERRSPACE = -2
LBN_SELCHANGE = 0x00000001
LBN_DBLCLK = 0x00000002
LBN_SELCANCEL = 0x00000003
LBN_SETFOCUS = 0x00000004
LBN_KILLFOCUS = 0x00000005
LB_ADDSTRING = 0x00000180
LB_INSERTSTRING = 0x00000181
LB_DELETESTRING = 0x00000182
LB_SELITEMRANGEEX = 0x00000183
LB_RESETCONTENT = 0x00000184
LB_SETSEL = 0x00000185
LB_SETCURSEL = 0x00000186
LB_GETSEL = 0x00000187
LB_GETCURSEL = 0x00000188
LB_GETTEXT = 0x00000189
LB_GETTEXTLEN = 0x0000018A
LB_GETCOUNT = 0x0000018B
LB_SELECTSTRING = 0x0000018C
LB_DIR = 0x0000018D
LB_GETTOPINDEX = 0x0000018E
LB_FINDSTRING = 0x0000018F
LB_GETSELCOUNT = 0x00000190
LB_GETSELITEMS = 0x00000191
LB_SETTABSTOPS = 0x00000192
LB_GETHORIZONTALEXTENT = 0x00000193
LB_SETHORIZONTALEXTENT = 0x00000194
LB_SETCOLUMNWIDTH = 0x00000195
LB_ADDFILE = 0x00000196
LB_SETTOPINDEX = 0x00000197
LB_GETITEMRECT = 0x00000198
LB_GETITEMDATA = 0x00000199
LB_SETITEMDATA = 0x0000019A
LB_SELITEMRANGE = 0x0000019B
LB_SETANCHORINDEX = 0x0000019C
LB_GETANCHORINDEX = 0x0000019D
LB_SETCARETINDEX = 0x0000019E
LB_GETCARETINDEX = 0x0000019F
LB_SETITEMHEIGHT = 0x000001A0
LB_GETITEMHEIGHT = 0x000001A1
LB_FINDSTRINGEXACT = 0x000001A2
LB_SETLOCALE = 0x000001A5
LB_GETLOCALE = 0x000001A6
LB_SETCOUNT = 0x000001A7
LB_INITSTORAGE = 0x000001A8
LB_ITEMFROMPOINT = 0x000001A9
LB_MULTIPLEADDSTRING = 0x000001B1
LB_GETLISTBOXINFO = 0x000001B2
LB_MSGMAX = 0x000001B3
LB_MSGMAX = 0x000001B1
LB_MSGMAX = 0x000001B0
LB_MSGMAX = 0x000001A8
LBS_NOTIFY = 0x00000001
LBS_SORT = 0x00000002
LBS_NOREDRAW = 0x00000004
LBS_MULTIPLESEL = 0x00000008
LBS_OWNERDRAWFIXED = 0x00000010
LBS_OWNERDRAWVARIABLE = 0x00000020
LBS_HASSTRINGS = 0x00000040
LBS_USETABSTOPS = 0x00000080
LBS_NOINTEGRALHEIGHT = 0x00000100
LBS_MULTICOLUMN = 0x00000200
LBS_WANTKEYBOARDINPUT = 0x00000400
LBS_EXTENDEDSEL = 0x00000800
LBS_DISABLENOSCROLL = 0x00001000
LBS_NODATA = 0x00002000
LBS_NOSEL = 0x00004000
LBS_COMBOBOX = 0x00008000
LBS_STANDARD = LBS_NOTIFY | LBS_SORT | WS_VSCROLL | WS_BORDER
CB_OKAY = 0x00000000
CB_ERR = -1
CB_ERRSPACE = -2
CBN_ERRSPACE = -1
CBN_SELCHANGE = 0x00000001
CBN_DBLCLK = 0x00000002
CBN_SETFOCUS = 0x00000003
CBN_KILLFOCUS = 0x00000004
CBN_EDITCHANGE = 0x00000005
CBN_EDITUPDATE = 0x00000006
CBN_DROPDOWN = 0x00000007
CBN_CLOSEUP = 0x00000008
CBN_SELENDOK = 0x00000009
CBN_SELENDCANCEL = 0x0000000A
CBS_SIMPLE = 0x00000001
CBS_DROPDOWN = 0x00000002
CBS_DROPDOWNLIST = 0x00000003
CBS_OWNERDRAWFIXED = 0x00000010
CBS_OWNERDRAWVARIABLE = 0x00000020
CBS_AUTOHSCROLL = 0x00000040
CBS_OEMCONVERT = 0x00000080
CBS_SORT = 0x00000100
CBS_HASSTRINGS = 0x00000200
CBS_NOINTEGRALHEIGHT = 0x00000400
CBS_DISABLENOSCROLL = 0x00000800
CBS_UPPERCASE = 0x00002000
CBS_LOWERCASE = 0x00004000
CB_GETEDITSEL = 0x00000140
CB_LIMITTEXT = 0x00000141
CB_SETEDITSEL = 0x00000142
CB_ADDSTRING = 0x00000143
CB_DELETESTRING = 0x00000144
CB_DIR = 0x00000145
CB_GETCOUNT = 0x00000146
CB_GETCURSEL = 0x00000147
CB_GETLBTEXT = 0x00000148
CB_GETLBTEXTLEN = 0x00000149
CB_INSERTSTRING = 0x0000014A
CB_RESETCONTENT = 0x0000014B
CB_FINDSTRING = 0x0000014C
CB_SELECTSTRING = 0x0000014D
CB_SETCURSEL = 0x0000014E
CB_SHOWDROPDOWN = 0x0000014F
CB_GETITEMDATA = 0x00000150
CB_SETITEMDATA = 0x00000151
CB_GETDROPPEDCONTROLRECT = 0x00000152
CB_SETITEMHEIGHT = 0x00000153
CB_GETITEMHEIGHT = 0x00000154
CB_SETEXTENDEDUI = 0x00000155
CB_GETEXTENDEDUI = 0x00000156
CB_GETDROPPEDSTATE = 0x00000157
CB_FINDSTRINGEXACT = 0x00000158
CB_SETLOCALE = 0x00000159
CB_GETLOCALE = 0x0000015A
CB_GETTOPINDEX = 0x0000015B
CB_SETTOPINDEX = 0x0000015C
CB_GETHORIZONTALEXTENT = 0x0000015D
CB_SETHORIZONTALEXTENT = 0x0000015E
CB_GETDROPPEDWIDTH = 0x0000015F
CB_SETDROPPEDWIDTH = 0x00000160
CB_INITSTORAGE = 0x00000161
CB_MULTIPLEADDSTRING = 0x00000163
CB_GETCOMBOBOXINFO = 0x00000164
CB_MSGMAX = 0x00000165
CB_MSGMAX = 0x00000163
CB_MSGMAX = 0x00000162
CB_MSGMAX = 0x0000015B
SBS_HORZ = 0x00000000
SBS_VERT = 0x00000001
SBS_TOPALIGN = 0x00000002
SBS_LEFTALIGN = 0x00000002
SBS_BOTTOMALIGN = 0x00000004
SBS_RIGHTALIGN = 0x00000004
SBS_SIZEBOXTOPLEFTALIGN = 0x00000002
SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x00000004
SBS_SIZEBOX = 0x00000008
SBS_SIZEGRIP = 0x00000010
SBM_SETPOS = 0x000000E0
SBM_GETPOS = 0x000000E1
SBM_SETRANGE = 0x000000E2
SBM_SETRANGEREDRAW = 0x000000E6
SBM_GETRANGE = 0x000000E3
SBM_ENABLE_ARROWS = 0x000000E4
SBM_SETSCROLLINFO = 0x000000E9
SBM_GETSCROLLINFO = 0x000000EA
SBM_GETSCROLLBARINFO = 0x000000EB
SIF_RANGE = 0x00000001
SIF_PAGE = 0x00000002
SIF_POS = 0x00000004
SIF_DISABLENOSCROLL = 0x00000008
SIF_TRACKPOS = 0x00000010
SIF_ALL = SIF_RANGE | SIF_PAGE | SIF_POS | SIF_TRACKPOS

class tagSCROLLINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('fMask', UINT),
        ('nMin', INT),
        ('nMax', INT),
        ('nPage', UINT),
        ('nPos', INT),
        ('nTrackPos', INT),
    ]


SCROLLINFO = tagSCROLLINFO
LPSCROLLINFO = POINTER(tagSCROLLINFO)


LPCSCROLLINFO = POINTER(CONST)

# WINAPI
# SetScrollInfo(
#     _In_ HWND hwnd,
#     _In_ INT nBar,
#     _In_ LPCSCROLLINFO lpsi,
#     _In_ BOOL redraw);
SetScrollInfo = user32.SetScrollInfo
SetScrollInfo.restype = WINAPI


# WINAPI
# GetScrollInfo(
#     _In_ HWND hwnd,
#     _In_ INT nBar,
#     _Inout_ LPSCROLLINFO lpsi);
GetScrollInfo = user32.GetScrollInfo
GetScrollInfo.restype = WINAPI

MDIS_ALLCHILDSTYLES = 0x00000001
MDITILE_VERTICAL = 0x00000000
MDITILE_HORIZONTAL = 0x00000001
MDITILE_SKIPDISABLED = 0x00000002
MDITILE_ZORDER = 0x00000004

class tagMDICREATESTRUCTA(ctypes.Structure):
    _fields_ = [
        ('szClass', LPCSTR),
        ('szTitle', LPCSTR),
        ('hOwner', HANDLE),
        ('x', INT),
        ('y', INT),
        ('cx', INT),
        ('cy', INT),
        ('style', DWORD),
        ('lParam', LPARAM),
    ]


MDICREATESTRUCTA = tagMDICREATESTRUCTA
LPMDICREATESTRUCTA = POINTER(tagMDICREATESTRUCTA)



class tagMDICREATESTRUCTW(ctypes.Structure):
    _fields_ = [
        ('szClass', LPCWSTR),
        ('szTitle', LPCWSTR),
        ('hOwner', HANDLE),
        ('x', INT),
        ('y', INT),
        ('cx', INT),
        ('cy', INT),
        ('style', DWORD),
        ('lParam', LPARAM),
    ]


MDICREATESTRUCTW = tagMDICREATESTRUCTW
LPMDICREATESTRUCTW = POINTER(tagMDICREATESTRUCTW)


MDICREATESTRUCT = MDICREATESTRUCTW
LPMDICREATESTRUCT = LPMDICREATESTRUCTW

class tagCLIENTCREATESTRUCT(ctypes.Structure):
    _fields_ = [
        ('hWindowMenu', HANDLE),
        ('idFirstChild', UINT),
    ]


CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT
LPCLIENTCREATESTRUCT = POINTER(tagCLIENTCREATESTRUCT)



# WINAPI
# DefFrameProcA(
#     _In_ HWND hWnd,
#     _In_opt_ HWND hWndMDIClient,
#     _In_ UINT uMsg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefFrameProcA = user32.DefFrameProcA
DefFrameProcA.restype = WINAPI


# WINAPI
# DefFrameProcW(
#     _In_ HWND hWnd,
#     _In_opt_ HWND hWndMDIClient,
#     _In_ UINT uMsg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefFrameProcW = user32.DefFrameProcW
DefFrameProcW.restype = WINAPI

DefFrameProc = DefFrameProcW
# DefFrameProc = DefFrameProcA

# #endif
# DefMDIChildProcA(
#     _In_ HWND hWnd,
#     _In_ UINT uMsg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefMDIChildProcA = user32.DefMDIChildProcA
DefMDIChildProcA.restype = WINAPI


# #endif
# DefMDIChildProcW(
#     _In_ HWND hWnd,
#     _In_ UINT uMsg,
#     _In_ WPARAM wParam,
#     _In_ LPARAM lParam);
DefMDIChildProcW = user32.DefMDIChildProcW
DefMDIChildProcW.restype = WINAPI

DefMDIChildProc = DefMDIChildProcW
# DefMDIChildProc = DefMDIChildProcA

# WINAPI
# TranslateMDISysAccel(
#     _In_ HWND hWndClient,
#     _In_ LPMSG lpMsg);
TranslateMDISysAccel = user32.TranslateMDISysAccel
TranslateMDISysAccel.restype = WINAPI


# WINAPI
# ArrangeIconicWindows(
#     _In_ HWND hWnd);
ArrangeIconicWindows = user32.ArrangeIconicWindows
ArrangeIconicWindows.restype = WINAPI


# WINAPI
# CreateMDIWindowA(
#     _In_ LPCSTR lpClassName,
#     _In_ LPCSTR lpWindowName,
#     _In_ DWORD dwStyle,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPARAM lParam);
CreateMDIWindowA = user32.CreateMDIWindowA
CreateMDIWindowA.restype = WINAPI


# WINAPI
# CreateMDIWindowW(
#     _In_ LPCWSTR lpClassName,
#     _In_ LPCWSTR lpWindowName,
#     _In_ DWORD dwStyle,
#     _In_ INT X,
#     _In_ INT Y,
#     _In_ INT nWidth,
#     _In_ INT nHeight,
#     _In_opt_ HWND hWndParent,
#     _In_opt_ HINSTANCE hInstance,
#     _In_ LPARAM lParam);
CreateMDIWindowW = user32.CreateMDIWindowW
CreateMDIWindowW.restype = WINAPI

CreateMDIWindow = CreateMDIWindowW
# CreateMDIWindow = CreateMDIWindowA

# WINAPI
# TileWindows(
#     _In_opt_ HWND hwndParent,
#     _In_ UINT wHow,
#     _In_opt_ CONST RECT * lpRect,
#     _In_ UINT cKids,
#     _In_reads_opt_(cKids) HWND FAR * lpKids);
TileWindows = user32.TileWindows
TileWindows.restype = WINAPI


# WORD
# WINAPI CascadeWindows(
#     _In_opt_ HWND hwndParent,
#     _In_ UINT wHow,
#     _In_opt_ CONST RECT * lpRect,
#     _In_ UINT cKids,
#     _In_reads_opt_(cKids) HWND FAR * lpKids);
CascadeWindows = user32.CascadeWindows
CascadeWindows.restype = WINAPI

HELPPOLY = DWORD

class tagMULTIKEYHELPA(ctypes.Structure):
    _fields_ = [
        ('mkSize', DWORD),
        ('mkSize', WORD),
        ('mkKeylist', CHAR),
        ('szKeyphrase', CHAR * 1),
    ]


MULTIKEYHELPA = tagMULTIKEYHELPA
PMULTIKEYHELPA = POINTER(tagMULTIKEYHELPA)
LPMULTIKEYHELPA = POINTER(tagMULTIKEYHELPA)



class tagMULTIKEYHELPW(ctypes.Structure):
    _fields_ = [
        ('mkSize', DWORD),
        ('mkSize', WORD),
        ('mkKeylist', WCHAR),
        ('szKeyphrase', WCHAR * 1),
    ]


MULTIKEYHELPW = tagMULTIKEYHELPW
PMULTIKEYHELPW = POINTER(tagMULTIKEYHELPW)
LPMULTIKEYHELPW = POINTER(tagMULTIKEYHELPW)


MULTIKEYHELP = MULTIKEYHELPW
PMULTIKEYHELP = PMULTIKEYHELPW
LPMULTIKEYHELP = LPMULTIKEYHELPW

class tagHELPWININFOA(ctypes.Structure):
    _fields_ = [
        ('wStructSize', INT),
        ('x', INT),
        ('y', INT),
        ('dx', INT),
        ('dy', INT),
        ('wMax', INT),
        ('rgchMember', CHAR * 2),
    ]


HELPWININFOA = tagHELPWININFOA
PHELPWININFOA = POINTER(tagHELPWININFOA)
LPHELPWININFOA = POINTER(tagHELPWININFOA)



class tagHELPWININFOW(ctypes.Structure):
    _fields_ = [
        ('wStructSize', INT),
        ('x', INT),
        ('y', INT),
        ('dx', INT),
        ('dy', INT),
        ('wMax', INT),
        ('rgchMember', WCHAR * 2),
    ]


HELPWININFOW = tagHELPWININFOW
PHELPWININFOW = POINTER(tagHELPWININFOW)
LPHELPWININFOW = POINTER(tagHELPWININFOW)


HELPWININFO = HELPWININFOW
PHELPWININFO = PHELPWININFOW
LPHELPWININFO = LPHELPWININFOW
HELP_CONTEXT = 0x00000001
HELP_QUIT = 0x00000002
HELP_INDEX = 0x00000003
HELP_CONTENTS = 0x00000003
HELP_HELPONHELP = 0x00000004
HELP_SETINDEX = 0x00000005
HELP_SETCONTENTS = 0x00000005
HELP_CONTEXTPOPUP = 0x00000008
HELP_FORCEFILE = 0x00000009
HELP_KEY = 0x00000101
HELP_COMMAND = 0x00000102
HELP_PARTIALKEY = 0x00000105
HELP_MULTIKEY = 0x00000201
HELP_SETWINPOS = 0x00000203
HELP_CONTEXTMENU = 0x0000000A
HELP_FINDER = 0x0000000B
HELP_WM_HELP = 0x0000000C
HELP_SETPOPUP_POS = 0x0000000D
HELP_TCARD = 0x00008000
HELP_TCARD_DATA = 0x00000010
HELP_TCARD_OTHER_CALLER = 0x00000011
IDH_NO_HELP = 0x00006F18
IDH_MISSING_CONTEXT = 0x00006F19
IDH_GENERIC_HELP_BUTTON = 0x00006F1A
IDH_OK = 0x00006F1B
IDH_CANCEL = 0x00006F1C
IDH_HELP = 0x00006F1D

# WINAPI
# WinHelpA(
#     _In_opt_ HWND hWndMain,
#     _In_opt_ LPCSTR lpszHelp,
#     _In_ UINT uCommand,
#     _In_ ULONG_PTR dwData);
WinHelpA = user32.WinHelpA
WinHelpA.restype = WINAPI


# WINAPI
# WinHelpW(
#     _In_opt_ HWND hWndMain,
#     _In_opt_ LPCWSTR lpszHelp,
#     _In_ UINT uCommand,
#     _In_ ULONG_PTR dwData);
WinHelpW = user32.WinHelpW
WinHelpW.restype = WINAPI

WinHelp = WinHelpW
# WinHelp = WinHelpA
GR_GDIOBJECTS = 0x00000000
GR_USEROBJECTS = 0x00000001
GR_GDIOBJECTS_PEAK = 0x00000002
GR_USEROBJECTS_PEAK = 0x00000004
GR_GLOBAL = -2

# WINAPI
# GetGuiResources(
#     _In_ HANDLE hProcess,
#     _In_ DWORD uiFlags);
GetGuiResources = user32.GetGuiResources
GetGuiResources.restype = WINAPI

SPI_GETBEEP = 0x00000001
SPI_SETBEEP = 0x00000002
SPI_GETMOUSE = 0x00000003
SPI_SETMOUSE = 0x00000004
SPI_GETBORDER = 0x00000005
SPI_SETBORDER = 0x00000006
SPI_GETKEYBOARDSPEED = 0x0000000A
SPI_SETKEYBOARDSPEED = 0x0000000B
SPI_LANGDRIVER = 0x0000000C
SPI_ICONHORIZONTALSPACING = 0x0000000D
SPI_GETSCREENSAVETIMEOUT = 0x0000000E
SPI_SETSCREENSAVETIMEOUT = 0x0000000F
SPI_GETSCREENSAVEACTIVE = 0x00000010
SPI_SETSCREENSAVEACTIVE = 0x00000011
SPI_GETGRIDGRANULARITY = 0x00000012
SPI_SETGRIDGRANULARITY = 0x00000013
SPI_SETDESKWALLPAPER = 0x00000014
SPI_SETDESKPATTERN = 0x00000015
SPI_GETKEYBOARDDELAY = 0x00000016
SPI_SETKEYBOARDDELAY = 0x00000017
SPI_ICONVERTICALSPACING = 0x00000018
SPI_GETICONTITLEWRAP = 0x00000019
SPI_SETICONTITLEWRAP = 0x0000001A
SPI_GETMENUDROPALIGNMENT = 0x0000001B
SPI_SETMENUDROPALIGNMENT = 0x0000001C
SPI_SETDOUBLECLKWIDTH = 0x0000001D
SPI_SETDOUBLECLKHEIGHT = 0x0000001E
SPI_GETICONTITLELOGFONT = 0x0000001F
SPI_SETDOUBLECLICKTIME = 0x00000020
SPI_SETMOUSEBUTTONSWAP = 0x00000021
SPI_SETICONTITLELOGFONT = 0x00000022
SPI_GETFASTTASKSWITCH = 0x00000023
SPI_SETFASTTASKSWITCH = 0x00000024
SPI_SETDRAGFULLWINDOWS = 0x00000025
SPI_GETDRAGFULLWINDOWS = 0x00000026
SPI_GETNONCLIENTMETRICS = 0x00000029
SPI_SETNONCLIENTMETRICS = 0x0000002A
SPI_GETMINIMIZEDMETRICS = 0x0000002B
SPI_SETMINIMIZEDMETRICS = 0x0000002C
SPI_GETICONMETRICS = 0x0000002D
SPI_SETICONMETRICS = 0x0000002E
SPI_SETWORKAREA = 0x0000002F
SPI_GETWORKAREA = 0x00000030
SPI_SETPENWINDOWS = 0x00000031
SPI_GETHIGHCONTRAST = 0x00000042
SPI_SETHIGHCONTRAST = 0x00000043
SPI_GETKEYBOARDPREF = 0x00000044
SPI_SETKEYBOARDPREF = 0x00000045
SPI_GETSCREENREADER = 0x00000046
SPI_SETSCREENREADER = 0x00000047
SPI_GETANIMATION = 0x00000048
SPI_SETANIMATION = 0x00000049
SPI_GETFONTSMOOTHING = 0x0000004A
SPI_SETFONTSMOOTHING = 0x0000004B
SPI_SETDRAGWIDTH = 0x0000004C
SPI_SETDRAGHEIGHT = 0x0000004D
SPI_SETHANDHELD = 0x0000004E
SPI_GETLOWPOWERTIMEOUT = 0x0000004F
SPI_GETPOWEROFFTIMEOUT = 0x00000050
SPI_SETLOWPOWERTIMEOUT = 0x00000051
SPI_SETPOWEROFFTIMEOUT = 0x00000052
SPI_GETLOWPOWERACTIVE = 0x00000053
SPI_GETPOWEROFFACTIVE = 0x00000054
SPI_SETLOWPOWERACTIVE = 0x00000055
SPI_SETPOWEROFFACTIVE = 0x00000056
SPI_SETCURSORS = 0x00000057
SPI_SETICONS = 0x00000058
SPI_GETDEFAULTINPUTLANG = 0x00000059
SPI_SETDEFAULTINPUTLANG = 0x0000005A
SPI_SETLANGTOGGLE = 0x0000005B
SPI_GETWINDOWSEXTENSION = 0x0000005C
SPI_SETMOUSETRAILS = 0x0000005D
SPI_GETMOUSETRAILS = 0x0000005E
SPI_SETSCREENSAVERRUNNING = 0x00000061
SPI_SCREENSAVERRUNNING = SPI_SETSCREENSAVERRUNNING
SPI_GETFILTERKEYS = 0x00000032
SPI_SETFILTERKEYS = 0x00000033
SPI_GETTOGGLEKEYS = 0x00000034
SPI_SETTOGGLEKEYS = 0x00000035
SPI_GETMOUSEKEYS = 0x00000036
SPI_SETMOUSEKEYS = 0x00000037
SPI_GETSHOWSOUNDS = 0x00000038
SPI_SETSHOWSOUNDS = 0x00000039
SPI_GETSTICKYKEYS = 0x0000003A
SPI_SETSTICKYKEYS = 0x0000003B
SPI_GETACCESSTIMEOUT = 0x0000003C
SPI_SETACCESSTIMEOUT = 0x0000003D
SPI_GETSERIALKEYS = 0x0000003E
SPI_SETSERIALKEYS = 0x0000003F
SPI_GETSOUNDSENTRY = 0x00000040
SPI_SETSOUNDSENTRY = 0x00000041
SPI_GETSNAPTODEFBUTTON = 0x0000005F
SPI_SETSNAPTODEFBUTTON = 0x00000060
SPI_GETMOUSEHOVERWIDTH = 0x00000062
SPI_SETMOUSEHOVERWIDTH = 0x00000063
SPI_GETMOUSEHOVERHEIGHT = 0x00000064
SPI_SETMOUSEHOVERHEIGHT = 0x00000065
SPI_GETMOUSEHOVERTIME = 0x00000066
SPI_SETMOUSEHOVERTIME = 0x00000067
SPI_GETWHEELSCROLLLINES = 0x00000068
SPI_SETWHEELSCROLLLINES = 0x00000069
SPI_GETMENUSHOWDELAY = 0x0000006A
SPI_SETMENUSHOWDELAY = 0x0000006B
SPI_GETWHEELSCROLLCHARS = 0x0000006C
SPI_SETWHEELSCROLLCHARS = 0x0000006D
SPI_GETSHOWIMEUI = 0x0000006E
SPI_SETSHOWIMEUI = 0x0000006F
SPI_GETMOUSESPEED = 0x00000070
SPI_SETMOUSESPEED = 0x00000071
SPI_GETSCREENSAVERRUNNING = 0x00000072
SPI_GETDESKWALLPAPER = 0x00000073
SPI_GETAUDIODESCRIPTION = 0x00000074
SPI_SETAUDIODESCRIPTION = 0x00000075
SPI_GETSCREENSAVESECURE = 0x00000076
SPI_SETSCREENSAVESECURE = 0x00000077
SPI_GETHUNGAPPTIMEOUT = 0x00000078
SPI_SETHUNGAPPTIMEOUT = 0x00000079
SPI_GETWAITTOKILLTIMEOUT = 0x0000007A
SPI_SETWAITTOKILLTIMEOUT = 0x0000007B
SPI_GETWAITTOKILLSERVICETIMEOUT = 0x0000007C
SPI_SETWAITTOKILLSERVICETIMEOUT = 0x0000007D
SPI_GETMOUSEDOCKTHRESHOLD = 0x0000007E
SPI_SETMOUSEDOCKTHRESHOLD = 0x0000007F
SPI_GETPENDOCKTHRESHOLD = 0x00000080
SPI_SETPENDOCKTHRESHOLD = 0x00000081
SPI_GETWINARRANGING = 0x00000082
SPI_SETWINARRANGING = 0x00000083
SPI_GETMOUSEDRAGOUTTHRESHOLD = 0x00000084
SPI_SETMOUSEDRAGOUTTHRESHOLD = 0x00000085
SPI_GETPENDRAGOUTTHRESHOLD = 0x00000086
SPI_SETPENDRAGOUTTHRESHOLD = 0x00000087
SPI_GETMOUSESIDEMOVETHRESHOLD = 0x00000088
SPI_SETMOUSESIDEMOVETHRESHOLD = 0x00000089
SPI_GETPENSIDEMOVETHRESHOLD = 0x0000008A
SPI_SETPENSIDEMOVETHRESHOLD = 0x0000008B
SPI_GETDRAGFROMMAXIMIZE = 0x0000008C
SPI_SETDRAGFROMMAXIMIZE = 0x0000008D
SPI_GETSNAPSIZING = 0x0000008E
SPI_SETSNAPSIZING = 0x0000008F
SPI_GETDOCKMOVING = 0x00000090
SPI_SETDOCKMOVING = 0x00000091
MAX_TOUCH_PREDICTION_FILTER_TAPS = 0x00000003

class tagTouchPredictionParameters(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwLatency', UINT),
        ('dwSampleTime', UINT),
        ('bUseHWTimeStamp', UINT),
    ]


TOUCHPREDICTIONPARAMETERS = tagTouchPredictionParameters
PTOUCHPREDICTIONPARAMETERS = POINTER(tagTouchPredictionParameters)


TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 0x00000008
TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 0x00000008
TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 0x00000001
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA = 0.001
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN = 0.9
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX = 0.999
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE = 0.001
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA = 0.99
SPI_GETTOUCHPREDICTIONPARAMETERS = 0x0000009C
SPI_SETTOUCHPREDICTIONPARAMETERS = 0x0000009D
MAX_LOGICALDPIOVERRIDE = 0x00000002
MIN_LOGICALDPIOVERRIDE = -2
SPI_GETLOGICALDPIOVERRIDE = 0x0000009E
SPI_SETLOGICALDPIOVERRIDE = 0x0000009F
SPI_GETMENURECT = 0x000000A2
SPI_SETMENURECT = 0x000000A3
SPI_GETACTIVEWINDOWTRACKING = 0x00001000
SPI_SETACTIVEWINDOWTRACKING = 0x00001001
SPI_GETMENUANIMATION = 0x00001002
SPI_SETMENUANIMATION = 0x00001003
SPI_GETCOMBOBOXANIMATION = 0x00001004
SPI_SETCOMBOBOXANIMATION = 0x00001005
SPI_GETLISTBOXSMOOTHSCROLLING = 0x00001006
SPI_SETLISTBOXSMOOTHSCROLLING = 0x00001007
SPI_GETGRADIENTCAPTIONS = 0x00001008
SPI_SETGRADIENTCAPTIONS = 0x00001009
SPI_GETKEYBOARDCUES = 0x0000100A
SPI_SETKEYBOARDCUES = 0x0000100B
SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES
SPI_SETMENUUNDERLINES = SPI_SETKEYBOARDCUES
SPI_GETACTIVEWNDTRKZORDER = 0x0000100C
SPI_SETACTIVEWNDTRKZORDER = 0x0000100D
SPI_GETHOTTRACKING = 0x0000100E
SPI_SETHOTTRACKING = 0x0000100F
SPI_GETMENUFADE = 0x00001012
SPI_SETMENUFADE = 0x00001013
SPI_GETSELECTIONFADE = 0x00001014
SPI_SETSELECTIONFADE = 0x00001015
SPI_GETTOOLTIPANIMATION = 0x00001016
SPI_SETTOOLTIPANIMATION = 0x00001017
SPI_GETTOOLTIPFADE = 0x00001018
SPI_SETTOOLTIPFADE = 0x00001019
SPI_GETCURSORSHADOW = 0x0000101A
SPI_SETCURSORSHADOW = 0x0000101B
SPI_GETMOUSESONAR = 0x0000101C
SPI_SETMOUSESONAR = 0x0000101D
SPI_GETMOUSECLICKLOCK = 0x0000101E
SPI_SETMOUSECLICKLOCK = 0x0000101F
SPI_GETMOUSEVANISH = 0x00001020
SPI_SETMOUSEVANISH = 0x00001021
SPI_GETFLATMENU = 0x00001022
SPI_SETFLATMENU = 0x00001023
SPI_GETDROPSHADOW = 0x00001024
SPI_SETDROPSHADOW = 0x00001025
SPI_GETBLOCKSENDINPUTRESETS = 0x00001026
SPI_SETBLOCKSENDINPUTRESETS = 0x00001027
SPI_GETUIEFFECTS = 0x0000103E
SPI_SETUIEFFECTS = 0x0000103F
SPI_GETDISABLEOVERLAPPEDCONTENT = 0x00001040
SPI_SETDISABLEOVERLAPPEDCONTENT = 0x00001041
SPI_GETCLIENTAREAANIMATION = 0x00001042
SPI_SETCLIENTAREAANIMATION = 0x00001043
SPI_GETCLEARTYPE = 0x00001048
SPI_SETCLEARTYPE = 0x00001049
SPI_GETSPEECHRECOGNITION = 0x0000104A
SPI_SETSPEECHRECOGNITION = 0x0000104B
SPI_GETCARETBROWSING = 0x0000104C
SPI_SETCARETBROWSING = 0x0000104D
SPI_GETTHREADLOCALINPUTSETTINGS = 0x0000104E
SPI_SETTHREADLOCALINPUTSETTINGS = 0x0000104F
SPI_GETSYSTEMLANGUAGEBAR = 0x00001050
SPI_SETSYSTEMLANGUAGEBAR = 0x00001051
SPI_GETFOREGROUNDLOCKTIMEOUT = 0x00002000
SPI_SETFOREGROUNDLOCKTIMEOUT = 0x00002001
SPI_GETACTIVEWNDTRKTIMEOUT = 0x00002002
SPI_SETACTIVEWNDTRKTIMEOUT = 0x00002003
SPI_GETFOREGROUNDFLASHCOUNT = 0x00002004
SPI_SETFOREGROUNDFLASHCOUNT = 0x00002005
SPI_GETCARETWIDTH = 0x00002006
SPI_SETCARETWIDTH = 0x00002007
SPI_GETMOUSECLICKLOCKTIME = 0x00002008
SPI_SETMOUSECLICKLOCKTIME = 0x00002009
SPI_GETFONTSMOOTHINGTYPE = 0x0000200A
SPI_SETFONTSMOOTHINGTYPE = 0x0000200B
FE_FONTSMOOTHINGSTANDARD = 0x00000001
FE_FONTSMOOTHINGCLEARTYPE = 0x00000002
SPI_GETFONTSMOOTHINGCONTRAST = 0x0000200C
SPI_SETFONTSMOOTHINGCONTRAST = 0x0000200D
SPI_GETFOCUSBORDERWIDTH = 0x0000200E
SPI_SETFOCUSBORDERWIDTH = 0x0000200F
SPI_GETFOCUSBORDERHEIGHT = 0x00002010
SPI_SETFOCUSBORDERHEIGHT = 0x00002011
SPI_GETFONTSMOOTHINGORIENTATION = 0x00002012
SPI_SETFONTSMOOTHINGORIENTATION = 0x00002013
FE_FONTSMOOTHINGORIENTATIONBGR = 0x00000000
FE_FONTSMOOTHINGORIENTATIONRGB = 0x00000001
SPI_GETMINIMUMHITRADIUS = 0x00002014
SPI_SETMINIMUMHITRADIUS = 0x00002015
SPI_GETMESSAGEDURATION = 0x00002016
SPI_SETMESSAGEDURATION = 0x00002017
SPI_GETCONTACTVISUALIZATION = 0x00002018
SPI_SETCONTACTVISUALIZATION = 0x00002019
CONTACTVISUALIZATION_OFF = 0x00000000
CONTACTVISUALIZATION_ON = 0x00000001
CONTACTVISUALIZATION_PRESENTATIONMODE = 0x00000002
SPI_GETGESTUREVISUALIZATION = 0x0000201A
SPI_SETGESTUREVISUALIZATION = 0x0000201B
GESTUREVISUALIZATION_OFF = 0x00000000
GESTUREVISUALIZATION_ON = 0x0000001F
GESTUREVISUALIZATION_TAP = 0x00000001
GESTUREVISUALIZATION_DOUBLETAP = 0x00000002
GESTUREVISUALIZATION_PRESSANDTAP = 0x00000004
GESTUREVISUALIZATION_PRESSANDHOLD = 0x00000008
GESTUREVISUALIZATION_RIGHTTAP = 0x00000010
SPI_GETMOUSEWHEELROUTING = 0x0000201C
SPI_SETMOUSEWHEELROUTING = 0x0000201D
MOUSEWHEEL_ROUTING_FOCUS = 0x00000000
MOUSEWHEEL_ROUTING_HYBRID = 0x00000001
MOUSEWHEEL_ROUTING_MOUSE_POS = 0x00000002
SPI_GETPENVISUALIZATION = 0x0000201E
SPI_SETPENVISUALIZATION = 0x0000201F
PENVISUALIZATION_ON = 0x00000023
PENVISUALIZATION_OFF = 0x00000000
PENVISUALIZATION_TAP = 0x00000001
PENVISUALIZATION_DOUBLETAP = 0x00000002
PENVISUALIZATION_CURSOR = 0x00000020
SPI_GETPENARBITRATIONTYPE = 0x00002020
SPI_SETPENARBITRATIONTYPE = 0x00002021
PENARBITRATIONTYPE_NONE = 0x00000000
PENARBITRATIONTYPE_WIN8 = 0x00000001
PENARBITRATIONTYPE_FIS = 0x00000002
PENARBITRATIONTYPE_SPT = 0x00000003
PENARBITRATIONTYPE_MAX = 0x00000004
SPI_GETCARETTIMEOUT = 0x00002022
SPI_SETCARETTIMEOUT = 0x00002023
SPI_GETHANDEDNESS = 0x00002024
SPI_SETHANDEDNESS = 0x00002025


class tagHANDEDNESS(ENUM):
    HANDEDNESS_LEFT = 0
    HANDEDNESS_RIGHT = 1


HANDEDNESS = tagHANDEDNESS
PHANDEDNESS = POINTER(tagHANDEDNESS)


SPIF_UPDATEINIFILE = 0x00000001
SPIF_SENDWININICHANGE = 0x00000002
SPIF_SENDCHANGE = SPIF_SENDWININICHANGE
METRICS_USEDEFAULT = -1

from shtypes_h import *


class tagNONCLIENTMETRICSA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iBorderWidth', INT),
        ('iScrollWidth', INT),
        ('iScrollHeight', INT),
        ('iCaptionWidth', INT),
        ('iCaptionHeight', INT),
        ('lfCaptionFont', LOGFONTA),
        ('iSmCaptionWidth', INT),
        ('iSmCaptionHeight', INT),
        ('lfSmCaptionFont', LOGFONTA),
        ('iMenuWidth', INT),
        ('iMenuHeight', INT),
        ('lfMenuFont', LOGFONTA),
        ('lfStatusFont', LOGFONTA),
        ('lfMessageFont', LOGFONTA),
        ('iPaddedBorderWidth', INT),
    ]


NONCLIENTMETRICSA = tagNONCLIENTMETRICSA
PNONCLIENTMETRICSA = POINTER(tagNONCLIENTMETRICSA)
LPNONCLIENTMETRICSA = POINTER(tagNONCLIENTMETRICSA)



class tagNONCLIENTMETRICSW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iBorderWidth', INT),
        ('iScrollWidth', INT),
        ('iScrollHeight', INT),
        ('iCaptionWidth', INT),
        ('iCaptionHeight', INT),
        ('lfCaptionFont', LOGFONTW),
        ('iSmCaptionWidth', INT),
        ('iSmCaptionHeight', INT),
        ('lfSmCaptionFont', LOGFONTW),
        ('iMenuWidth', INT),
        ('iMenuHeight', INT),
        ('lfMenuFont', LOGFONTW),
        ('lfStatusFont', LOGFONTW),
        ('lfMessageFont', LOGFONTW),
        ('iPaddedBorderWidth', INT),
    ]


NONCLIENTMETRICSW = tagNONCLIENTMETRICSW
PNONCLIENTMETRICSW = POINTER(tagNONCLIENTMETRICSW)
LPNONCLIENTMETRICSW = POINTER(tagNONCLIENTMETRICSW)


NONCLIENTMETRICS = NONCLIENTMETRICSW
PNONCLIENTMETRICS = PNONCLIENTMETRICSW
LPNONCLIENTMETRICS = LPNONCLIENTMETRICSW
ARW_BOTTOMLEFT = 0x00000000
ARW_BOTTOMRIGHT = 0x00000001
ARW_TOPLEFT = 0x00000002
ARW_TOPRIGHT = 0x00000003
ARW_STARTMASK = 0x00000003
ARW_STARTRIGHT = 0x00000001
ARW_STARTTOP = 0x00000002
ARW_LEFT = 0x00000000
ARW_RIGHT = 0x00000000
ARW_UP = 0x00000004
ARW_DOWN = 0x00000004
ARW_HIDE = 0x00000008

class tagMINIMIZEDMETRICS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iWidth', INT),
        ('iHorzGap', INT),
        ('iVertGap', INT),
        ('iArrange', INT),
    ]


MINIMIZEDMETRICS = tagMINIMIZEDMETRICS
PMINIMIZEDMETRICS = POINTER(tagMINIMIZEDMETRICS)
LPMINIMIZEDMETRICS = POINTER(tagMINIMIZEDMETRICS)



class tagICONMETRICSA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iHorzSpacing', INT),
        ('iVertSpacing', INT),
        ('iTitleWrap', INT),
        ('lfFont', LOGFONTA),
    ]


ICONMETRICSA = tagICONMETRICSA
PICONMETRICSA = POINTER(tagICONMETRICSA)
LPICONMETRICSA = POINTER(tagICONMETRICSA)



class tagICONMETRICSW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iHorzSpacing', INT),
        ('iVertSpacing', INT),
        ('iTitleWrap', INT),
        ('lfFont', LOGFONTW),
    ]


ICONMETRICSW = tagICONMETRICSW
PICONMETRICSW = POINTER(tagICONMETRICSW)
LPICONMETRICSW = POINTER(tagICONMETRICSW)


ICONMETRICS = ICONMETRICSW
PICONMETRICS = PICONMETRICSW
LPICONMETRICS = LPICONMETRICSW

class tagANIMATIONINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('iMinAnimate', INT),
    ]


ANIMATIONINFO = tagANIMATIONINFO
LPANIMATIONINFO = POINTER(tagANIMATIONINFO)



class tagSERIALKEYSA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('lpszActivePort', LPSTR),
        ('lpszPort', LPSTR),
        ('iBaudRate', UINT),
        ('iPortState', UINT),
        ('iActive', UINT),
    ]


SERIALKEYSA = tagSERIALKEYSA
LPSERIALKEYSA = POINTER(tagSERIALKEYSA)



class tagSERIALKEYSW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('lpszActivePort', LPWSTR),
        ('lpszPort', LPWSTR),
        ('iBaudRate', UINT),
        ('iPortState', UINT),
        ('iActive', UINT),
    ]


SERIALKEYSW = tagSERIALKEYSW
LPSERIALKEYSW = POINTER(tagSERIALKEYSW)


SERIALKEYS = SERIALKEYSW
LPSERIALKEYS = LPSERIALKEYSW
SERKF_SERIALKEYSON = 0x00000001
SERKF_AVAILABLE = 0x00000002
SERKF_INDICATOR = 0x00000004

class tagHIGHCONTRASTA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('lpszDefaultScheme', LPSTR),
    ]


HIGHCONTRASTA = tagHIGHCONTRASTA
LPHIGHCONTRASTA = POINTER(tagHIGHCONTRASTA)



class tagHIGHCONTRASTW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('lpszDefaultScheme', LPWSTR),
    ]


HIGHCONTRASTW = tagHIGHCONTRASTW
LPHIGHCONTRASTW = POINTER(tagHIGHCONTRASTW)


HIGHCONTRAST = HIGHCONTRASTW
LPHIGHCONTRAST = LPHIGHCONTRASTW
HCF_HIGHCONTRASTON = 0x00000001
HCF_AVAILABLE = 0x00000002
HCF_HOTKEYACTIVE = 0x00000004
HCF_CONFIRMHOTKEY = 0x00000008
HCF_HOTKEYSOUND = 0x00000010
HCF_INDICATOR = 0x00000020
HCF_HOTKEYAVAILABLE = 0x00000040
HCF_LOGONDESKTOP = 0x00000100
HCF_DEFAULTDESKTOP = 0x00000200
CDS_UPDATEREGISTRY = 0x00000001
CDS_TEST = 0x00000002
CDS_FULLSCREEN = 0x00000004
CDS_GLOBAL = 0x00000008
CDS_SET_PRIMARY = 0x00000010
CDS_VIDEOPARAMETERS = 0x00000020
CDS_ENABLE_UNSAFE_MODES = 0x00000100
CDS_DISABLE_UNSAFE_MODES = 0x00000200
CDS_RESET = 0x40000000
CDS_RESET_EX = 0x20000000
CDS_NORESET = 0x10000000

from tvout_h import * # NOQA

DISP_CHANGE_SUCCESSFUL = 0x00000000
DISP_CHANGE_RESTART = 0x00000001
DISP_CHANGE_FAILED = -1
DISP_CHANGE_BADMODE = -2
DISP_CHANGE_NOTUPDATED = -3
DISP_CHANGE_BADFLAGS = -4
DISP_CHANGE_BADPARAM = -5
DISP_CHANGE_BADDUALVIEW = -6

# WINAPI
# ChangeDisplaySettingsA(
#     _In_opt_ DEVMODEA* lpDevMode,
#     _In_ DWORD dwFlags);
ChangeDisplaySettingsA = user32.ChangeDisplaySettingsA
ChangeDisplaySettingsA.restype = WINAPI


# WINAPI
# ChangeDisplaySettingsW(
#     _In_opt_ DEVMODEW* lpDevMode,
#     _In_ DWORD dwFlags);
ChangeDisplaySettingsW = user32.ChangeDisplaySettingsW
ChangeDisplaySettingsW.restype = WINAPI

ChangeDisplaySettings = ChangeDisplaySettingsW
# ChangeDisplaySettings = ChangeDisplaySettingsA

# WINAPI
# ChangeDisplaySettingsExA(
#     _In_opt_ LPCSTR lpszDeviceName,
#     _In_opt_ DEVMODEA* lpDevMode,
#     _Reserved_ HWND hwnd,
#     _In_ DWORD dwflags,
#     _In_opt_ LPVOID lParam);
ChangeDisplaySettingsExA = user32.ChangeDisplaySettingsExA
ChangeDisplaySettingsExA.restype = WINAPI


# WINAPI
# ChangeDisplaySettingsExW(
#     _In_opt_ LPCWSTR lpszDeviceName,
#     _In_opt_ DEVMODEW* lpDevMode,
#     _Reserved_ HWND hwnd,
#     _In_ DWORD dwflags,
#     _In_opt_ LPVOID lParam);
ChangeDisplaySettingsExW = user32.ChangeDisplaySettingsExW
ChangeDisplaySettingsExW.restype = WINAPI

ChangeDisplaySettingsEx = ChangeDisplaySettingsExW
# ChangeDisplaySettingsEx = ChangeDisplaySettingsExA
ENUM_CURRENT_SETTINGS = -1
ENUM_REGISTRY_SETTINGS = -2

# WINAPI
# EnumDisplaySettingsA(
#     _In_opt_ LPCSTR lpszDeviceName,
#     _In_ DWORD iModeNum,
#     _Inout_ DEVMODEA* lpDevMode);
EnumDisplaySettingsA = user32.EnumDisplaySettingsA
EnumDisplaySettingsA.restype = WINAPI


# WINAPI
# EnumDisplaySettingsW(
#     _In_opt_ LPCWSTR lpszDeviceName,
#     _In_ DWORD iModeNum,
#     _Inout_ DEVMODEW* lpDevMode);
EnumDisplaySettingsW = user32.EnumDisplaySettingsW
EnumDisplaySettingsW.restype = WINAPI

EnumDisplaySettings = EnumDisplaySettingsW
# EnumDisplaySettings = EnumDisplaySettingsA

# WINAPI
# EnumDisplaySettingsExA(
#     _In_opt_ LPCSTR lpszDeviceName,
#     _In_ DWORD iModeNum,
#     _Inout_ DEVMODEA* lpDevMode,
#     _In_ DWORD dwFlags);
EnumDisplaySettingsExA = user32.EnumDisplaySettingsExA
EnumDisplaySettingsExA.restype = WINAPI


# WINAPI
# EnumDisplaySettingsExW(
#     _In_opt_ LPCWSTR lpszDeviceName,
#     _In_ DWORD iModeNum,
#     _Inout_ DEVMODEW* lpDevMode,
#     _In_ DWORD dwFlags);
EnumDisplaySettingsExW = user32.EnumDisplaySettingsExW
EnumDisplaySettingsExW.restype = WINAPI

EnumDisplaySettingsEx = EnumDisplaySettingsExW
# EnumDisplaySettingsEx = EnumDisplaySettingsExA
EDS_RAWMODE = 0x00000002
EDS_ROTATEDMODE = 0x00000004

# WINAPI
# EnumDisplayDevicesA(
#     _In_opt_ LPCSTR lpDevice,
#     _In_ DWORD iDevNum,
#     _Inout_ PDISPLAY_DEVICEA lpDisplayDevice,
#     _In_ DWORD dwFlags);
EnumDisplayDevicesA = user32.EnumDisplayDevicesA
EnumDisplayDevicesA.restype = WINAPI


# WINAPI
# EnumDisplayDevicesW(
#     _In_opt_ LPCWSTR lpDevice,
#     _In_ DWORD iDevNum,
#     _Inout_ PDISPLAY_DEVICEW lpDisplayDevice,
#     _In_ DWORD dwFlags);
EnumDisplayDevicesW = user32.EnumDisplayDevicesW
EnumDisplayDevicesW.restype = WINAPI

EnumDisplayDevices = EnumDisplayDevicesW
# EnumDisplayDevices = EnumDisplayDevicesA
EDD_GET_DEVICE_INTERFACE_NAME = 0x00000001

# WINAPI
# GetDisplayConfigBufferSizes(
#     _In_ UINT32 flags,
#     _Out_ UINT32* numPathArrayElements,
#     _Out_ UINT32* numModeInfoArrayElements);
GetDisplayConfigBufferSizes = user32.GetDisplayConfigBufferSizes
GetDisplayConfigBufferSizes.restype = WINAPI


# WINAPI
# SetDisplayConfig(
#     _In_ UINT32 numPathArrayElements,
#     _In_reads_opt_(numPathArrayElements) DISPLAYCONFIG_PATH_INFO* pathArray,
#     _In_ UINT32 numModeInfoArrayElements,
#     _In_reads_opt_(numModeInfoArrayElements) DISPLAYCONFIG_MODE_INFO* modeInfoArray,
#     _In_ UINT32 flags);
SetDisplayConfig = user32.SetDisplayConfig
SetDisplayConfig.restype = WINAPI


# WINAPI
# QueryDisplayConfig(
#     _In_ UINT32 flags,
#     _Inout_ UINT32* numPathArrayElements,
#     _Out_writes_to_(*numPathArrayElements, *numPathArrayElements) DISPLAYCONFIG_PATH_INFO* pathArray,
#     _Inout_ UINT32* numModeInfoArrayElements,
#     _Out_writes_to_(*numModeInfoArrayElements, *numModeInfoArrayElements) DISPLAYCONFIG_MODE_INFO* modeInfoArray,
#     _When_(!(flags & QDC_DATABASE_CURRENT), _Pre_null_)
QueryDisplayConfig = user32.QueryDisplayConfig
QueryDisplayConfig.restype = WINAPI


# WINAPI
# DisplayConfigGetDeviceInfo(
#     _Inout_ DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);
DisplayConfigGetDeviceInfo = user32.DisplayConfigGetDeviceInfo
DisplayConfigGetDeviceInfo.restype = WINAPI


# WINAPI
# DisplayConfigSetDeviceInfo(
#     _In_ DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);
DisplayConfigSetDeviceInfo = user32.DisplayConfigSetDeviceInfo
DisplayConfigSetDeviceInfo.restype = WINAPI


# WINUSERAPI
# _Success_(return != FALSE)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# SystemParametersInfoA(
#     _In_ UINT uiAction,
#     _In_ UINT uiParam,
#     _Pre_maybenull_ _Post_valid_ PVOID pvParam,
#     _In_ UINT fWinIni);
SystemParametersInfoA = user32.SystemParametersInfoA
SystemParametersInfoA.restype = WINAPI


# WINUSERAPI
# _Success_(return != FALSE)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# SystemParametersInfoW(
#     _In_ UINT uiAction,
#     _In_ UINT uiParam,
#     _Pre_maybenull_ _Post_valid_ PVOID pvParam,
#     _In_ UINT fWinIni);
SystemParametersInfoW = user32.SystemParametersInfoW
SystemParametersInfoW.restype = WINAPI

SystemParametersInfo = SystemParametersInfoW
# SystemParametersInfo = SystemParametersInfoA

# WINUSERAPI
# _Success_(return != FALSE)
_Success_ = user32._Success_
_Success_.restype = WINUSERAPI


# WINAPI
# SystemParametersInfoForDpi(
#     _In_ UINT uiAction,
#     _In_ UINT uiParam,
#     _Pre_maybenull_ _Post_valid_ PVOID pvParam,
#     _In_ UINT fWinIni,
#     _In_ UINT dpi);
SystemParametersInfoForDpi = user32.SystemParametersInfoForDpi
SystemParametersInfoForDpi.restype = WINAPI


class tagFILTERKEYS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('iWaitMSec', DWORD),
        ('iDelayMSec', DWORD),
        ('iRepeatMSec', DWORD),
        ('iBounceMSec', DWORD),
    ]


FILTERKEYS = tagFILTERKEYS
LPFILTERKEYS = POINTER(tagFILTERKEYS)


FKF_FILTERKEYSON = 0x00000001
FKF_AVAILABLE = 0x00000002
FKF_HOTKEYACTIVE = 0x00000004
FKF_CONFIRMHOTKEY = 0x00000008
FKF_HOTKEYSOUND = 0x00000010
FKF_INDICATOR = 0x00000020
FKF_CLICKON = 0x00000040

class tagSTICKYKEYS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
    ]


STICKYKEYS = tagSTICKYKEYS
LPSTICKYKEYS = POINTER(tagSTICKYKEYS)


SKF_STICKYKEYSON = 0x00000001
SKF_AVAILABLE = 0x00000002
SKF_HOTKEYACTIVE = 0x00000004
SKF_CONFIRMHOTKEY = 0x00000008
SKF_HOTKEYSOUND = 0x00000010
SKF_INDICATOR = 0x00000020
SKF_AUDIBLEFEEDBACK = 0x00000040
SKF_TRISTATE = 0x00000080
SKF_TWOKEYSOFF = 0x00000100
SKF_LALTLATCHED = 0x10000000
SKF_LCTLLATCHED = 0x04000000
SKF_LSHIFTLATCHED = 0x01000000
SKF_RALTLATCHED = 0x20000000
SKF_RCTLLATCHED = 0x08000000
SKF_RSHIFTLATCHED = 0x02000000
SKF_LWINLATCHED = 0x40000000
SKF_RWINLATCHED = 0x80000000
SKF_LALTLOCKED = 0x00100000
SKF_LCTLLOCKED = 0x00040000
SKF_LSHIFTLOCKED = 0x00010000
SKF_RALTLOCKED = 0x00200000
SKF_RCTLLOCKED = 0x00080000
SKF_RSHIFTLOCKED = 0x00020000
SKF_LWINLOCKED = 0x00400000
SKF_RWINLOCKED = 0x00800000

class tagMOUSEKEYS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('iMaxSpeed', DWORD),
        ('iTimeToMaxSpeed', DWORD),
        ('iCtrlSpeed', DWORD),
        ('dwReserved1', DWORD),
        ('dwReserved2', DWORD),
    ]


MOUSEKEYS = tagMOUSEKEYS
LPMOUSEKEYS = POINTER(tagMOUSEKEYS)


MKF_MOUSEKEYSON = 0x00000001
MKF_AVAILABLE = 0x00000002
MKF_HOTKEYACTIVE = 0x00000004
MKF_CONFIRMHOTKEY = 0x00000008
MKF_HOTKEYSOUND = 0x00000010
MKF_INDICATOR = 0x00000020
MKF_MODIFIERS = 0x00000040
MKF_REPLACENUMBERS = 0x00000080
MKF_LEFTBUTTONSEL = 0x10000000
MKF_RIGHTBUTTONSEL = 0x20000000
MKF_LEFTBUTTONDOWN = 0x01000000
MKF_RIGHTBUTTONDOWN = 0x02000000
MKF_MOUSEMODE = 0x80000000

class tagACCESSTIMEOUT(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('iTimeOutMSec', DWORD),
    ]


ACCESSTIMEOUT = tagACCESSTIMEOUT
LPACCESSTIMEOUT = POINTER(tagACCESSTIMEOUT)


ATF_TIMEOUTON = 0x00000001
ATF_ONOFFFEEDBACK = 0x00000002
SSGF_NONE = 0x00000000
SSGF_DISPLAY = 0x00000003
SSTF_NONE = 0x00000000
SSTF_CHARS = 0x00000001
SSTF_BORDER = 0x00000002
SSTF_DISPLAY = 0x00000003
SSWF_NONE = 0x00000000
SSWF_TITLE = 0x00000001
SSWF_WINDOW = 0x00000002
SSWF_DISPLAY = 0x00000003
SSWF_CUSTOM = 0x00000004

class tagSOUNDSENTRYA(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('iFSTextEffect', DWORD),
        ('iFSTextEffectMSec', DWORD),
        ('iFSTextEffectColorBits', DWORD),
        ('iFSGrafEffect', DWORD),
        ('iFSGrafEffectMSec', DWORD),
        ('iFSGrafEffectColor', DWORD),
        ('iWindowsEffect', DWORD),
        ('iWindowsEffectMSec', DWORD),
        ('lpszWindowsEffectDLL', LPSTR),
        ('iWindowsEffectOrdinal', DWORD),
    ]


SOUNDSENTRYA = tagSOUNDSENTRYA
LPSOUNDSENTRYA = POINTER(tagSOUNDSENTRYA)



class tagSOUNDSENTRYW(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('iFSTextEffect', DWORD),
        ('iFSTextEffectMSec', DWORD),
        ('iFSTextEffectColorBits', DWORD),
        ('iFSGrafEffect', DWORD),
        ('iFSGrafEffectMSec', DWORD),
        ('iFSGrafEffectColor', DWORD),
        ('iWindowsEffect', DWORD),
        ('iWindowsEffectMSec', DWORD),
        ('lpszWindowsEffectDLL', LPWSTR),
        ('iWindowsEffectOrdinal', DWORD),
    ]


SOUNDSENTRYW = tagSOUNDSENTRYW
LPSOUNDSENTRYW = POINTER(tagSOUNDSENTRYW)


SOUNDSENTRY = SOUNDSENTRYW
LPSOUNDSENTRY = LPSOUNDSENTRYW
SSF_SOUNDSENTRYON = 0x00000001
SSF_AVAILABLE = 0x00000002
SSF_INDICATOR = 0x00000004

# WINAPI
# SoundSentry(VOID);
SoundSentry = user32.SoundSentry
SoundSentry.restype = WINAPI


class tagTOGGLEKEYS(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
    ]


TOGGLEKEYS = tagTOGGLEKEYS
LPTOGGLEKEYS = POINTER(tagTOGGLEKEYS)


TKF_TOGGLEKEYSON = 0x00000001
TKF_AVAILABLE = 0x00000002
TKF_HOTKEYACTIVE = 0x00000004
TKF_CONFIRMHOTKEY = 0x00000008
TKF_HOTKEYSOUND = 0x00000010
TKF_INDICATOR = 0x00000020

class tagAUDIODESCRIPTION(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('Enabled', BOOL),
        ('Locale', LCID),
    ]


AUDIODESCRIPTION = tagAUDIODESCRIPTION
LPAUDIODESCRIPTION = POINTER(tagAUDIODESCRIPTION)



# WINAPI
# SetDebugErrorLevel(
#     _In_ DWORD dwLevel);
SetDebugErrorLevel = user32.SetDebugErrorLevel
SetDebugErrorLevel.restype = WINAPI

SLE_ERROR = 0x00000001
SLE_MINORERROR = 0x00000002
SLE_WARNING = 0x00000003

# WINAPI
# SetLastErrorEx(
#     _In_ DWORD dwErrCode,
#     _In_ DWORD dwType);
SetLastErrorEx = user32.SetLastErrorEx
SetLastErrorEx.restype = WINAPI


# WINAPI
# InternalGetWindowText(
#     _In_ HWND hWnd,
#     _Out_writes_to_(cchMaxCount, return + 1) LPWSTR pString,
#     _In_ INT cchMaxCount);
InternalGetWindowText = user32.InternalGetWindowText
InternalGetWindowText.restype = WINAPI


# WINAPI
# EndTask(
#     _In_ HWND hWnd,
#     _In_ BOOL fShutDown,
#     _In_ BOOL fForce);
EndTask = user32.EndTask
EndTask.restype = WINAPI


# WINAPI
# CancelShutdown(
#     VOID);
CancelShutdown = user32.CancelShutdown
CancelShutdown.restype = WINAPI

MONITOR_DEFAULTTONULL = 0x00000000
MONITOR_DEFAULTTOPRIMARY = 0x00000001
MONITOR_DEFAULTTONEAREST = 0x00000002

# WINAPI
# MonitorFromPoINT(
#     _In_ POINT pt,
#     _In_ DWORD dwFlags);
MonitorFromPoINT = user32.MonitorFromPoINT
MonitorFromPoINT.restype = WINAPI


# WINAPI
# MonitorFromRect(
#     _In_ LPCRECT lprc,
#     _In_ DWORD dwFlags);
MonitorFromRect = user32.MonitorFromRect
MonitorFromRect.restype = WINAPI


# WINAPI
# MonitorFromWindow(
#     _In_ HWND hwnd,
#     _In_ DWORD dwFlags);
MonitorFromWindow = user32.MonitorFromWindow
MonitorFromWindow.restype = WINAPI

MONITORINFOF_PRIMARY = 0x00000001
CCHDEVICENAME = 0x00000020

class tagMONITORINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcMonitor', RECT),
        ('rcWork', RECT),
        ('dwFlags', DWORD),
    ]


MONITORINFO = tagMONITORINFO
LPMONITORINFO = POINTER(tagMONITORINFO)



class tagMONITORINFO(ctypes.Structure):
    _fields_ = [
        ('szDevice', CHAR * CCHDEVICENAME),
    ]


MONITORINFOEXA = tagMONITORINFO
LPMONITORINFOEXA = POINTER(tagMONITORINFO)



class tagMONITORINFO(ctypes.Structure):
    _fields_ = [
        ('szDevice', WCHAR * CCHDEVICENAME),
    ]


MONITORINFOEXW = tagMONITORINFO
LPMONITORINFOEXW = POINTER(tagMONITORINFO)


MONITORINFOEX = MONITORINFOEXW
LPMONITORINFOEX = LPMONITORINFOEXW

class tagMONITORINFOEXA(ctypes.Structure):
    _fields_ = [
        ('DUMMYSTRUCTNAME', MONITORINFO),
        ('szDevice', CHAR * CCHDEVICENAME),
    ]


MONITORINFOEXA = tagMONITORINFOEXA
LPMONITORINFOEXA = POINTER(tagMONITORINFOEXA)



class tagMONITORINFOEXW(ctypes.Structure):
    _fields_ = [
        ('DUMMYSTRUCTNAME', MONITORINFO),
        ('szDevice', WCHAR * CCHDEVICENAME),
    ]


MONITORINFOEXW = tagMONITORINFOEXW
LPMONITORINFOEXW = POINTER(tagMONITORINFOEXW)


MONITORINFOEX = MONITORINFOEXW
LPMONITORINFOEX = LPMONITORINFOEXW

# WINAPI
# GetMonitorInfoA(
#     _In_ HMONITOR hMonitor,
#     _Inout_ LPMONITORINFO lpmi);
GetMonitorInfoA = user32.GetMonitorInfoA
GetMonitorInfoA.restype = WINAPI


# WINAPI
# GetMonitorInfoW(
#     _In_ HMONITOR hMonitor,
#     _Inout_ LPMONITORINFO lpmi);
GetMonitorInfoW = user32.GetMonitorInfoW
GetMonitorInfoW.restype = WINAPI

GetMonitorInfo = GetMonitorInfoW
# GetMonitorInfo = GetMonitorInfoA

MONITORENUMPROC = CALLBACK(BOOL, HMONITOR, HDC, LPRECT, LPARAM);

# WINAPI
# EnumDisplayMonitors(
#     _In_opt_ HDC hdc,
#     _In_opt_ LPCRECT lprcClip,
#     _In_ MONITORENUMPROC lpfnEnum,
#     _In_ LPARAM dwData);
EnumDisplayMonitors = user32.EnumDisplayMonitors
EnumDisplayMonitors.restype = WINAPI


# WINAPI
# NotifyWinEvent(
#     _In_ DWORD event,
#     _In_ HWND  hwnd,
#     _In_ LONG  idObject,
#     _In_ LONG  idChild);
NotifyWinEvent = user32.NotifyWinEvent
NotifyWinEvent.restype = WINAPI


# WINAPI
# SetWinEventHook(
#     _In_ DWORD eventMin,
#     _In_ DWORD eventMax,
#     _In_opt_ HMODULE hmodWinEventProc,
#     _In_ WINEVENTPROC pfnWinEventProc,
#     _In_ DWORD idProcess,
#     _In_ DWORD idThread,
#     _In_ DWORD dwFlags);
SetWinEventHook = user32.SetWinEventHook
SetWinEventHook.restype = WINAPI


# WINAPI
# IsWinEventHookInstalled(
#     _In_ DWORD event);
IsWinEventHookInstalled = user32.IsWinEventHookInstalled
IsWinEventHookInstalled.restype = WINAPI

WINEVENT_OUTOFCONTEXT = 0x00000000
WINEVENT_SKIPOWNTHREAD = 0x00000001
WINEVENT_SKIPOWNPROCESS = 0x00000002
WINEVENT_INCONTEXT = 0x00000004

# WINAPI
# UnhookWinEvent(
#     _In_ HWINEVENTHOOK hWinEventHook);
UnhookWinEvent = user32.UnhookWinEvent
UnhookWinEvent.restype = WINAPI

CHILDID_SELF = 0x00000000
INDEXID_OBJECT = 0x00000000
INDEXID_CONTAINER = 0x00000000
OBJID_WINDOW = 0x00000000
OBJID_SYSMENU = 0xFFFFFFFF
OBJID_TITLEBAR = 0xFFFFFFFE
OBJID_MENU = 0xFFFFFFFD
OBJID_CLIENT = 0xFFFFFFFC
OBJID_VSCROLL = 0xFFFFFFFB
OBJID_HSCROLL = 0xFFFFFFFA
OBJID_SIZEGRIP = 0xFFFFFFF9
OBJID_CARET = 0xFFFFFFF8
OBJID_CURSOR = 0xFFFFFFF7
OBJID_ALERT = 0xFFFFFFF6
OBJID_SOUND = 0xFFFFFFF5
OBJID_QUERYCLASSNAMEIDX = 0xFFFFFFF4
OBJID_NATIVEOM = 0xFFFFFFF0
EVENT_MIN = 0x00000001
EVENT_MAX = 0x7FFFFFFF
EVENT_SYSTEM_SOUND = 0x00000001
EVENT_SYSTEM_ALERT = 0x00000002
EVENT_SYSTEM_FOREGROUND = 0x00000003
EVENT_SYSTEM_MENUSTART = 0x00000004
EVENT_SYSTEM_MENUEND = 0x00000005
EVENT_SYSTEM_MENUPOPUPSTART = 0x00000006
EVENT_SYSTEM_MENUPOPUPEND = 0x00000007
EVENT_SYSTEM_CAPTURESTART = 0x00000008
EVENT_SYSTEM_CAPTUREEND = 0x00000009
EVENT_SYSTEM_MOVESIZESTART = 0x0000000A
EVENT_SYSTEM_MOVESIZEEND = 0x0000000B
EVENT_SYSTEM_CONTEXTHELPSTART = 0x0000000C
EVENT_SYSTEM_CONTEXTHELPEND = 0x0000000D
EVENT_SYSTEM_DRAGDROPSTART = 0x0000000E
EVENT_SYSTEM_DRAGDROPEND = 0x0000000F
EVENT_SYSTEM_DIALOGSTART = 0x00000010
EVENT_SYSTEM_DIALOGEND = 0x00000011
EVENT_SYSTEM_SCROLLINGSTART = 0x00000012
EVENT_SYSTEM_SCROLLINGEND = 0x00000013
EVENT_SYSTEM_SWITCHSTART = 0x00000014
EVENT_SYSTEM_SWITCHEND = 0x00000015
EVENT_SYSTEM_MINIMIZESTART = 0x00000016
EVENT_SYSTEM_MINIMIZEEND = 0x00000017
EVENT_SYSTEM_DESKTOPSWITCH = 0x00000020
EVENT_SYSTEM_SWITCHER_APPGRABBED = 0x00000024
EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 0x00000025
EVENT_SYSTEM_SWITCHER_APPDROPPED = 0x00000026
EVENT_SYSTEM_SWITCHER_CANCELLED = 0x00000027
EVENT_SYSTEM_IME_KEY_NOTIFICATION = 0x00000029
EVENT_SYSTEM_END = 0x000000FF
EVENT_OEM_DEFINED_START = 0x00000101
EVENT_OEM_DEFINED_END = 0x000001FF
EVENT_UIA_EVENTID_START = 0x00004E00
EVENT_UIA_EVENTID_END = 0x00004EFF
EVENT_UIA_PROPID_START = 0x00007500
EVENT_UIA_PROPID_END = 0x000075FF
EVENT_CONSOLE_CARET = 0x00004001
EVENT_CONSOLE_UPDATE_REGION = 0x00004002
EVENT_CONSOLE_UPDATE_SIMPLE = 0x00004003
EVENT_CONSOLE_UPDATE_SCROLL = 0x00004004
EVENT_CONSOLE_LAYOUT = 0x00004005
EVENT_CONSOLE_START_APPLICATION = 0x00004006
EVENT_CONSOLE_END_APPLICATION = 0x00004007
CONSOLE_APPLICATION_16BIT = 0x00000000
CONSOLE_APPLICATION_16BIT = 0x00000001
CONSOLE_CARET_SELECTION = 0x00000001
CONSOLE_CARET_VISIBLE = 0x00000002
EVENT_CONSOLE_END = 0x000040FF
EVENT_OBJECT_CREATE = 0x00008000
EVENT_OBJECT_DESTROY = 0x00008001
EVENT_OBJECT_SHOW = 0x00008002
EVENT_OBJECT_HIDE = 0x00008003
EVENT_OBJECT_REORDER = 0x00008004
EVENT_OBJECT_FOCUS = 0x00008005
EVENT_OBJECT_SELECTION = 0x00008006
EVENT_OBJECT_SELECTIONADD = 0x00008007
EVENT_OBJECT_SELECTIONREMOVE = 0x00008008
EVENT_OBJECT_SELECTIONWITHIN = 0x00008009
EVENT_OBJECT_STATECHANGE = 0x0000800A
EVENT_OBJECT_LOCATIONCHANGE = 0x0000800B
EVENT_OBJECT_NAMECHANGE = 0x0000800C
EVENT_OBJECT_DESCRIPTIONCHANGE = 0x0000800D
EVENT_OBJECT_VALUECHANGE = 0x0000800E
EVENT_OBJECT_PARENTCHANGE = 0x0000800F
EVENT_OBJECT_HELPCHANGE = 0x00008010
EVENT_OBJECT_DEFACTIONCHANGE = 0x00008011
EVENT_OBJECT_ACCELERATORCHANGE = 0x00008012
EVENT_OBJECT_INVOKED = 0x00008013
EVENT_OBJECT_TEXTSELECTIONCHANGED = 0x00008014
EVENT_OBJECT_CONTENTSCROLLED = 0x00008015
EVENT_SYSTEM_ARRANGMENTPREVIEW = 0x00008016
EVENT_OBJECT_CLOAKED = 0x00008017
EVENT_OBJECT_UNCLOAKED = 0x00008018
EVENT_OBJECT_LIVEREGIONCHANGED = 0x00008019
EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 0x00008020
EVENT_OBJECT_DRAGSTART = 0x00008021
EVENT_OBJECT_DRAGCANCEL = 0x00008022
EVENT_OBJECT_DRAGCOMPLETE = 0x00008023
EVENT_OBJECT_DRAGENTER = 0x00008024
EVENT_OBJECT_DRAGLEAVE = 0x00008025
EVENT_OBJECT_DRAGDROPPED = 0x00008026
EVENT_OBJECT_IME_SHOW = 0x00008027
EVENT_OBJECT_IME_HIDE = 0x00008028
EVENT_OBJECT_IME_CHANGE = 0x00008029
EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 0x00008030
EVENT_OBJECT_END = 0x000080FF
EVENT_AIA_START = 0x0000A000
EVENT_AIA_END = 0x0000AFFF
SOUND_SYSTEM_STARTUP = 0x00000001
SOUND_SYSTEM_SHUTDOWN = 0x00000002
SOUND_SYSTEM_BEEP = 0x00000003
SOUND_SYSTEM_ERROR = 0x00000004
SOUND_SYSTEM_QUESTION = 0x00000005
SOUND_SYSTEM_WARNING = 0x00000006
SOUND_SYSTEM_INFORMATION = 0x00000007
SOUND_SYSTEM_MAXIMIZE = 0x00000008
SOUND_SYSTEM_MINIMIZE = 0x00000009
SOUND_SYSTEM_RESTOREUP = 0x0000000A
SOUND_SYSTEM_RESTOREDOWN = 0x0000000B
SOUND_SYSTEM_APPSTART = 0x0000000C
SOUND_SYSTEM_FAULT = 0x0000000D
SOUND_SYSTEM_APPEND = 0x0000000E
SOUND_SYSTEM_MENUCOMMAND = 0x0000000F
SOUND_SYSTEM_MENUPOPUP = 0x00000010
CSOUND_SYSTEM = 0x00000010
ALERT_SYSTEM_INFORMATIONAL = 0x00000001
ALERT_SYSTEM_WARNING = 0x00000002
ALERT_SYSTEM_ERROR = 0x00000003
ALERT_SYSTEM_QUERY = 0x00000004
ALERT_SYSTEM_CRITICAL = 0x00000005
CALERT_SYSTEM = 0x00000006

class tagGUITHREADINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('flags', DWORD),
        ('hwndActive', HWND),
        ('hwndFocus', HWND),
        ('hwndCapture', HWND),
        ('hwndMenuOwner', HWND),
        ('hwndMoveSize', HWND),
        ('hwndCaret', HWND),
        ('rcCaret', RECT),
    ]


GUITHREADINFO = tagGUITHREADINFO
PGUITHREADINFO = POINTER(tagGUITHREADINFO)
LPGUITHREADINFO = POINTER(tagGUITHREADINFO)


GUI_CARETBLINKING = 0x00000001
GUI_INMOVESIZE = 0x00000002
GUI_INMENUMODE = 0x00000004
GUI_SYSTEMMENUMODE = 0x00000008
GUI_POPUPMENUMODE = 0x00000010
GUI_16BITTASK = 0x00000000
GUI_16BITTASK = 0x00000020

# WINAPI
# GetGUIThreadInfo(
#     _In_ DWORD idThread,
#     _Inout_ PGUITHREADINFO pgui);
GetGUIThreadInfo = user32.GetGUIThreadInfo
GetGUIThreadInfo.restype = WINAPI


# WINAPI
# BlockInput(
#     BOOL fBlockIt);
BlockInput = user32.BlockInput
BlockInput.restype = WINAPI

USER_DEFAULT_SCREEN_DPI = 0x00000060

# WINAPI
# SetProcessDPIAware(
#     VOID);
SetProcessDPIAware = user32.SetProcessDPIAware
SetProcessDPIAware.restype = WINAPI


# WINAPI
# IsProcessDPIAware(
#     VOID);
IsProcessDPIAware = user32.IsProcessDPIAware
IsProcessDPIAware.restype = WINAPI


# WINAPI
# SetThreadDpiAwarenessContext(
#     _In_ DPI_AWARENESS_CONTEXT dpiContext);
SetThreadDpiAwarenessContext = user32.SetThreadDpiAwarenessContext
SetThreadDpiAwarenessContext.restype = WINAPI


# WINAPI
# GetThreadDpiAwarenessContext(
#     VOID);
GetThreadDpiAwarenessContext = user32.GetThreadDpiAwarenessContext
GetThreadDpiAwarenessContext.restype = WINAPI


# WINAPI
# GetWindowDpiAwarenessContext(
#     _In_ HWND hwnd);
GetWindowDpiAwarenessContext = user32.GetWindowDpiAwarenessContext
GetWindowDpiAwarenessContext.restype = WINAPI


# WINAPI
# GetAwarenessFromDpiAwarenessContext(
#     _In_ DPI_AWARENESS_CONTEXT value);
GetAwarenessFromDpiAwarenessContext = (
    user32.GetAwarenessFromDpiAwarenessContext
)
GetAwarenessFromDpiAwarenessContext.restype = WINAPI


# WINAPI
# GetDpiFromDpiAwarenessContext(
#     _In_ DPI_AWARENESS_CONTEXT value);
GetDpiFromDpiAwarenessContext = user32.GetDpiFromDpiAwarenessContext
GetDpiFromDpiAwarenessContext.restype = WINAPI


# WINAPI
# AreDpiAwarenessContextsEqual(
#     _In_ DPI_AWARENESS_CONTEXT dpiContextA,
#     _In_ DPI_AWARENESS_CONTEXT dpiContextB);
AreDpiAwarenessContextsEqual = user32.AreDpiAwarenessContextsEqual
AreDpiAwarenessContextsEqual.restype = WINAPI


# WINAPI
# IsValidDpiAwarenessContext(
#     _In_ DPI_AWARENESS_CONTEXT value);
IsValidDpiAwarenessContext = user32.IsValidDpiAwarenessContext
IsValidDpiAwarenessContext.restype = WINAPI


# WINAPI
# GetDpiForWindow(
#     _In_ HWND hwnd);
GetDpiForWindow = user32.GetDpiForWindow
GetDpiForWindow.restype = WINAPI


# WINAPI
# GetDpiForSystem(
#     VOID);
GetDpiForSystem = user32.GetDpiForSystem
GetDpiForSystem.restype = WINAPI


# WINAPI
# GetSystemDpiForProcess(
#     _In_ HANDLE hProcess);
GetSystemDpiForProcess = user32.GetSystemDpiForProcess
GetSystemDpiForProcess.restype = WINAPI


# WINAPI
# EnableNonClientDpiScaling(
#     _In_ HWND hwnd);
EnableNonClientDpiScaling = user32.EnableNonClientDpiScaling
EnableNonClientDpiScaling.restype = WINAPI


# WINAPI
# InheritWindowMonitor(
#     _In_ HWND hwnd,
#     _In_opt_ HWND hwndInherit);
InheritWindowMonitor = user32.InheritWindowMonitor
InheritWindowMonitor.restype = WINAPI


# WINAPI
# SetProcessDpiAwarenessContext(
#     _In_ DPI_AWARENESS_CONTEXT value);
SetProcessDpiAwarenessContext = user32.SetProcessDpiAwarenessContext
SetProcessDpiAwarenessContext.restype = WINAPI


# WINAPI
# SetThreadDpiHostingBehavior(
#     _In_ DPI_HOSTING_BEHAVIOR value);
SetThreadDpiHostingBehavior = user32.SetThreadDpiHostingBehavior
SetThreadDpiHostingBehavior.restype = WINAPI


# WINAPI
# GetThreadDpiHostingBehavior();
GetThreadDpiHostingBehavior = user32.GetThreadDpiHostingBehavior
GetThreadDpiHostingBehavior.restype = WINAPI


# WINAPI
# GetWindowDpiHostingBehavior(
#     _In_ HWND hwnd);
GetWindowDpiHostingBehavior = user32.GetWindowDpiHostingBehavior
GetWindowDpiHostingBehavior.restype = WINAPI


# WINAPI
# GetWindowModuleFileNameA(
#     _In_ HWND hwnd,
#     _Out_writes_to_(cchFileNameMax, return) LPSTR pszFileName,
#     _In_ UINT cchFileNameMax);
GetWindowModuleFileNameA = user32.GetWindowModuleFileNameA
GetWindowModuleFileNameA.restype = WINAPI


# WINAPI
# GetWindowModuleFileNameW(
#     _In_ HWND hwnd,
#     _Out_writes_to_(cchFileNameMax, return) LPWSTR pszFileName,
#     _In_ UINT cchFileNameMax);
GetWindowModuleFileNameW = user32.GetWindowModuleFileNameW
GetWindowModuleFileNameW.restype = WINAPI

GetWindowModuleFileName = GetWindowModuleFileNameW
# GetWindowModuleFileName = GetWindowModuleFileNameA
STATE_SYSTEM_UNAVAILABLE = 0x00000001
STATE_SYSTEM_SELECTED = 0x00000002
STATE_SYSTEM_FOCUSED = 0x00000004
STATE_SYSTEM_PRESSED = 0x00000008
STATE_SYSTEM_CHECKED = 0x00000010
STATE_SYSTEM_MIXED = 0x00000020
STATE_SYSTEM_INDETERMINATE = STATE_SYSTEM_MIXED
STATE_SYSTEM_READONLY = 0x00000040
STATE_SYSTEM_HOTTRACKED = 0x00000080
STATE_SYSTEM_DEFAULT = 0x00000100
STATE_SYSTEM_EXPANDED = 0x00000200
STATE_SYSTEM_COLLAPSED = 0x00000400
STATE_SYSTEM_BUSY = 0x00000800
STATE_SYSTEM_FLOATING = 0x00001000
STATE_SYSTEM_MARQUEED = 0x00002000
STATE_SYSTEM_ANIMATED = 0x00004000
STATE_SYSTEM_INVISIBLE = 0x00008000
STATE_SYSTEM_OFFSCREEN = 0x00010000
STATE_SYSTEM_SIZEABLE = 0x00020000
STATE_SYSTEM_MOVEABLE = 0x00040000
STATE_SYSTEM_SELFVOICING = 0x00080000
STATE_SYSTEM_FOCUSABLE = 0x00100000
STATE_SYSTEM_SELECTABLE = 0x00200000
STATE_SYSTEM_LINKED = 0x00400000
STATE_SYSTEM_TRAVERSED = 0x00800000
STATE_SYSTEM_MULTISELECTABLE = 0x01000000
STATE_SYSTEM_EXTSELECTABLE = 0x02000000
STATE_SYSTEM_ALERT_LOW = 0x04000000
STATE_SYSTEM_ALERT_MEDIUM = 0x08000000
STATE_SYSTEM_ALERT_HIGH = 0x10000000
STATE_SYSTEM_PROTECTED = 0x20000000
STATE_SYSTEM_VALID = 0x3FFFFFFF
CCHILDREN_TITLEBAR = 0x00000005
CCHILDREN_SCROLLBAR = 0x00000005

class tagCURSORINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('flags', DWORD),
        ('hCursor', HCURSOR),
        ('ptScreenPos', POINT),
    ]


CURSORINFO = tagCURSORINFO
PCURSORINFO = POINTER(tagCURSORINFO)
LPCURSORINFO = POINTER(tagCURSORINFO)


CURSOR_SHOWING = 0x00000001
CURSOR_SUPPRESSED = 0x00000002

# WINAPI
# GetCursorInfo(
#     _Inout_ PCURSORINFO pci);
GetCursorInfo = user32.GetCursorInfo
GetCursorInfo.restype = WINAPI


class tagWINDOWINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcWindow', RECT),
        ('rcClient', RECT),
        ('dwStyle', DWORD),
        ('dwExStyle', DWORD),
        ('dwWindowStatus', DWORD),
        ('cxWindowBorders', UINT),
        ('cyWindowBorders', UINT),
        ('atomWindowType', ATOM),
        ('wCreatorVersion', WORD),
    ]


WINDOWINFO = tagWINDOWINFO
PWINDOWINFO = POINTER(tagWINDOWINFO)
LPWINDOWINFO = POINTER(tagWINDOWINFO)


WS_ACTIVECAPTION = 0x00000001

# WINAPI
# GetWindowInfo(
#     _In_ HWND hwnd,
#     _Inout_ PWINDOWINFO pwi);
GetWindowInfo = user32.GetWindowInfo
GetWindowInfo.restype = WINAPI


class tagTITLEBARINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcTitleBar', RECT),
        ('rgstate', DWORD * CCHILDREN_TITLEBAR + 1),
    ]


TITLEBARINFO = tagTITLEBARINFO
PTITLEBARINFO = POINTER(tagTITLEBARINFO)
LPTITLEBARINFO = POINTER(tagTITLEBARINFO)



# WINAPI
# GetTitleBarInfo(
#     _In_ HWND hwnd,
#     _Inout_ PTITLEBARINFO pti);
GetTitleBarInfo = user32.GetTitleBarInfo
GetTitleBarInfo.restype = WINAPI


class tagTITLEBARINFOEX(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcTitleBar', RECT),
        ('rgstate', DWORD * CCHILDREN_TITLEBAR + 1),
        ('rgrect', RECT * CCHILDREN_TITLEBAR + 1),
    ]


TITLEBARINFOEX = tagTITLEBARINFOEX
PTITLEBARINFOEX = POINTER(tagTITLEBARINFOEX)
LPTITLEBARINFOEX = POINTER(tagTITLEBARINFOEX)



class tagMENUBARINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcBar', RECT),
        ('hMenu', HMENU),
        ('hwndMenu', HWND),
        ('fBarFocused:1', BOOL),
        ('fFocused:1', BOOL),
    ]


MENUBARINFO = tagMENUBARINFO
PMENUBARINFO = POINTER(tagMENUBARINFO)
LPMENUBARINFO = POINTER(tagMENUBARINFO)



# WINAPI
# GetMenuBarInfo(
#     _In_ HWND hwnd,
#     _In_ LONG idObject,
#     _In_ LONG idItem,
#     _Inout_ PMENUBARINFO pmbi);
GetMenuBarInfo = user32.GetMenuBarInfo
GetMenuBarInfo.restype = WINAPI


class tagSCROLLBARINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcScrollBar', RECT),
        ('dxyLineButton', INT),
        ('xyThumbTop', INT),
        ('xyThumbBottom', INT),
        ('reserved', INT),
        ('rgstate', DWORD * CCHILDREN_SCROLLBAR + 1),
    ]


SCROLLBARINFO = tagSCROLLBARINFO
PSCROLLBARINFO = POINTER(tagSCROLLBARINFO)
LPSCROLLBARINFO = POINTER(tagSCROLLBARINFO)



# WINAPI
# GetScrollBarInfo(
#     _In_ HWND hwnd,
#     _In_ LONG idObject,
#     _Inout_ PSCROLLBARINFO psbi);
GetScrollBarInfo = user32.GetScrollBarInfo
GetScrollBarInfo.restype = WINAPI


class tagCOMBOBOXINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('rcItem', RECT),
        ('rcButton', RECT),
        ('stateButton', DWORD),
        ('hwndCombo', HWND),
        ('hwndItem', HWND),
        ('hwndList', HWND),
    ]


COMBOBOXINFO = tagCOMBOBOXINFO
PCOMBOBOXINFO = POINTER(tagCOMBOBOXINFO)
LPCOMBOBOXINFO = POINTER(tagCOMBOBOXINFO)



# WINAPI
# GetComboBoxInfo(
#     _In_ HWND hwndCombo,
#     _Inout_ PCOMBOBOXINFO pcbi);
GetComboBoxInfo = user32.GetComboBoxInfo
GetComboBoxInfo.restype = WINAPI

GA_PARENT = 0x00000001
GA_ROOT = 0x00000002
GA_ROOTOWNER = 0x00000003

# WINAPI
# GetAncestor(
#     _In_ HWND hwnd,
#     _In_ UINT gaFlags);
GetAncestor = user32.GetAncestor
GetAncestor.restype = WINAPI


# WINAPI
# RealChildWindowFromPoINT(
#     _In_ HWND hwndParent,
#     _In_ POINT ptParentClientCoords);
RealChildWindowFromPoINT = user32.RealChildWindowFromPoINT
RealChildWindowFromPoINT.restype = WINAPI


# WINAPI
# RealGetWindowClassA(
#     _In_ HWND hwnd,
#     _Out_writes_to_(cchClassNameMax, return) LPSTR ptszClassName,
#     _In_ UINT cchClassNameMax);
RealGetWindowClassA = user32.RealGetWindowClassA
RealGetWindowClassA.restype = WINAPI


# WINAPI
# RealGetWindowClassW(
#     _In_ HWND hwnd,
#     _Out_writes_to_(cchClassNameMax, return) LPWSTR ptszClassName,
#     _In_ UINT cchClassNameMax);
RealGetWindowClassW = user32.RealGetWindowClassW
RealGetWindowClassW.restype = WINAPI

RealGetWindowClass = RealGetWindowClassW
# RealGetWindowClass = RealGetWindowClassA

class tagALTTABINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('cItems', INT),
        ('cColumns', INT),
        ('cRows', INT),
        ('iColFocus', INT),
        ('iRowFocus', INT),
        ('cxItem', INT),
        ('cyItem', INT),
        ('ptStart', POINT),
    ]


ALTTABINFO = tagALTTABINFO
PALTTABINFO = POINTER(tagALTTABINFO)
LPALTTABINFO = POINTER(tagALTTABINFO)



# WINAPI
# GetAltTabInfoA(
#     _In_opt_ HWND hwnd,
#     _In_ INT iItem,
#     _Inout_ PALTTABINFO pati,
#     _Out_writes_opt_(cchItemText) LPSTR pszItemText,
#     _In_ UINT cchItemText);
GetAltTabInfoA = user32.GetAltTabInfoA
GetAltTabInfoA.restype = WINAPI


# WINAPI
# GetAltTabInfoW(
#     _In_opt_ HWND hwnd,
#     _In_ INT iItem,
#     _Inout_ PALTTABINFO pati,
#     _Out_writes_opt_(cchItemText) LPWSTR pszItemText,
#     _In_ UINT cchItemText);
GetAltTabInfoW = user32.GetAltTabInfoW
GetAltTabInfoW.restype = WINAPI

GetAltTabInfo = GetAltTabInfoW
# GetAltTabInfo = GetAltTabInfoA

# WINAPI
# GetListBoxInfo(
#     _In_ HWND hwnd);
GetListBoxInfo = user32.GetListBoxInfo
GetListBoxInfo.restype = WINAPI


# WINAPI
# LockWorkStation(
#     VOID);
LockWorkStation = user32.LockWorkStation
LockWorkStation.restype = WINAPI


# WINAPI
# UserHandleGrantAccess(
#     _In_ HANDLE hUserHandle,
#     _In_ HANDLE hJob,
#     _In_ BOOL   bGrant);
UserHandleGrantAccess = user32.UserHandleGrantAccess
UserHandleGrantAccess.restype = WINAPI



def GET_RAWINPUT_CODE_WPARAM(wParam):
    return wParam & 0xff
RIM_INPUT = 0x00000000
RIM_INPUTSINK = 0x00000001

class tagRAWINPUTHEADER(ctypes.Structure):
    _fields_ = [
        ('dwType', DWORD),
        ('dwSize', DWORD),
        ('hDevice', HANDLE),
        ('wParam', WPARAM),
    ]


RAWINPUTHEADER = tagRAWINPUTHEADER
PRAWINPUTHEADER = POINTER(tagRAWINPUTHEADER)
LPRAWINPUTHEADER = POINTER(tagRAWINPUTHEADER)


RIM_TYPEMOUSE = 0x00000000
RIM_TYPEKEYBOARD = 0x00000001
RIM_TYPEHID = 0x00000002
RIM_TYPEMAX = 0x00000002

class tagRAWMOUSE(ctypes.Structure):
    _fields_ = [
        ('usFlags', USHORT),
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
        ('ulRawButtons', ULONG),
        ('lLastX', LONG),
        ('lLastY', LONG),
        ('ulExtraInformation', ULONG),
    ]


RAWMOUSE = tagRAWMOUSE
PRAWMOUSE = POINTER(tagRAWMOUSE)
LPRAWMOUSE = POINTER(tagRAWMOUSE)


RI_MOUSE_LEFT_BUTTON_DOWN = 0x00000001
RI_MOUSE_LEFT_BUTTON_UP = 0x00000002
RI_MOUSE_RIGHT_BUTTON_DOWN = 0x00000004
RI_MOUSE_RIGHT_BUTTON_UP = 0x00000008
RI_MOUSE_MIDDLE_BUTTON_DOWN = 0x00000010
RI_MOUSE_MIDDLE_BUTTON_UP = 0x00000020
RI_MOUSE_BUTTON_1_DOWN = RI_MOUSE_LEFT_BUTTON_DOWN
RI_MOUSE_BUTTON_1_UP = RI_MOUSE_LEFT_BUTTON_UP
RI_MOUSE_BUTTON_2_DOWN = RI_MOUSE_RIGHT_BUTTON_DOWN
RI_MOUSE_BUTTON_2_UP = RI_MOUSE_RIGHT_BUTTON_UP
RI_MOUSE_BUTTON_3_DOWN = RI_MOUSE_MIDDLE_BUTTON_DOWN
RI_MOUSE_BUTTON_3_UP = RI_MOUSE_MIDDLE_BUTTON_UP
RI_MOUSE_BUTTON_4_DOWN = 0x00000040
RI_MOUSE_BUTTON_4_UP = 0x00000080
RI_MOUSE_BUTTON_5_DOWN = 0x00000100
RI_MOUSE_BUTTON_5_UP = 0x00000200
RI_MOUSE_WHEEL = 0x00000400
RI_MOUSE_HWHEEL = 0x00000800
MOUSE_MOVE_RELATIVE = 0x00000000
MOUSE_MOVE_ABSOLUTE = 0x00000001
MOUSE_VIRTUAL_DESKTOP = 0x00000002
MOUSE_ATTRIBUTES_CHANGED = 0x00000004
MOUSE_MOVE_NOCOALESCE = 0x00000008

class tagRAWKEYBOARD(ctypes.Structure):
    _fields_ = [
        ('MakeCode', USHORT),
        ('Flags', USHORT),
        ('Reserved', USHORT),
        ('VKey', USHORT),
        ('Message', UINT),
        ('ExtraInformation', ULONG),
    ]


RAWKEYBOARD = tagRAWKEYBOARD
PRAWKEYBOARD = POINTER(tagRAWKEYBOARD)
LPRAWKEYBOARD = POINTER(tagRAWKEYBOARD)


KEYBOARD_OVERRUN_MAKE_CODE = 0x000000FF
RI_KEY_MAKE = 0x00000000
RI_KEY_BREAK = 0x00000001
RI_KEY_E0 = 0x00000002
RI_KEY_E1 = 0x00000004
RI_KEY_TERMSRV_SET_LED = 0x00000008
RI_KEY_TERMSRV_SHADOW = 0x00000010

class tagRAWHID(ctypes.Structure):
    _fields_ = [
        ('dwSizeHid', DWORD),
        ('dwCount', DWORD),
        ('bRawData', BYTE * 1),
    ]


RAWHID = tagRAWHID
PRAWHID = POINTER(tagRAWHID)
LPRAWHID = POINTER(tagRAWHID)



class tagRAWINPUT(ctypes.Structure):

    class data(ctypes.Union):
        _fields_ = [
            ('mouse', RAWMOUSE),
            ('keyboard', RAWKEYBOARD),
            ('hid', RAWHID),
        ]

    _fields_ = [
        ('header', RAWINPUTHEADER),
        ('data', data),
    ]


RAWINPUT = tagRAWINPUT
PRAWINPUT = POINTER(tagRAWINPUT)
LPRAWINPUT = POINTER(tagRAWINPUT)




def RAWINPUT_ALIGN(x):
    return (x + ctypes.sizeof - 1) & ~(ctypes.sizeof - 1)



def NEXTRAWINPUTBLOCK(ptr):
    return RAWINPUT_ALIGN(ptr + ptr.header.dwSize)


RID_INPUT = 0x10000003
RID_HEADER = 0x10000005

# WINAPI
# GetRawInputData(
#     _In_ HRAWINPUT hRawInput,
#     _In_ UINT uiCommand,
#     _Out_writes_bytes_to_opt_(*pcbSize, return) LPVOID pData,
#     _Inout_ PUINT pcbSize,
#     _In_ UINT cbSizeHeader);
GetRawInputData = user32.GetRawInputData
GetRawInputData.restype = WINAPI

RIDI_PREPARSEDDATA = 0x20000005
RIDI_DEVICENAME = 0x20000007
RIDI_DEVICEINFO = 0x2000000B

class tagRID_DEVICE_INFO_MOUSE(ctypes.Structure):
    _fields_ = [
        ('dwId', DWORD),
        ('dwNumberOfButtons', DWORD),
        ('dwSampleRate', DWORD),
        ('fHasHorizontalWheel', BOOL),
    ]


RID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE
PRID_DEVICE_INFO_MOUSE = POINTER(tagRID_DEVICE_INFO_MOUSE)



class tagRID_DEVICE_INFO_KEYBOARD(ctypes.Structure):
    _fields_ = [
        ('dwType', DWORD),
        ('dwSubType', DWORD),
        ('dwKeyboardMode', DWORD),
        ('dwNumberOfFunctionKeys', DWORD),
        ('dwNumberOfIndicators', DWORD),
        ('dwNumberOfKeysTotal', DWORD),
    ]


RID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD
PRID_DEVICE_INFO_KEYBOARD = POINTER(tagRID_DEVICE_INFO_KEYBOARD)



class tagRID_DEVICE_INFO_HID(ctypes.Structure):
    _fields_ = [
        ('dwVendorId', DWORD),
        ('dwProductId', DWORD),
        ('dwVersionNumber', DWORD),
        ('usUsagePage', USHORT),
        ('usUsage', USHORT),
    ]


RID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID
PRID_DEVICE_INFO_HID = POINTER(tagRID_DEVICE_INFO_HID)



class tagRID_DEVICE_INFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('dwType', DWORD),
        ('DUMMYUNIONNAME', DUMMYUNIONNAME),
    ]


RID_DEVICE_INFO = tagRID_DEVICE_INFO
PRID_DEVICE_INFO = POINTER(tagRID_DEVICE_INFO)
LPRID_DEVICE_INFO = POINTER(tagRID_DEVICE_INFO)



# WINAPI
# GetRawInputDeviceInfoA(
#     _In_opt_ HANDLE hDevice,
#     _In_ UINT uiCommand,
#     _Inout_updates_bytes_to_opt_(*pcbSize, *pcbSize) LPVOID pData,
#     _Inout_ PUINT pcbSize);
GetRawInputDeviceInfoA = user32.GetRawInputDeviceInfoA
GetRawInputDeviceInfoA.restype = WINAPI


# WINAPI
# GetRawInputDeviceInfoW(
#     _In_opt_ HANDLE hDevice,
#     _In_ UINT uiCommand,
#     _Inout_updates_bytes_to_opt_(*pcbSize, *pcbSize) LPVOID pData,
#     _Inout_ PUINT pcbSize);
GetRawInputDeviceInfoW = user32.GetRawInputDeviceInfoW
GetRawInputDeviceInfoW.restype = WINAPI

GetRawInputDeviceInfo = GetRawInputDeviceInfoW
# GetRawInputDeviceInfo = GetRawInputDeviceInfoA

# WINAPI
# GetRawInputBuffer(
#     _Out_writes_bytes_opt_(*pcbSize) PRAWINPUT pData,
#     _Inout_ PUINT pcbSize,
#     _In_ UINT cbSizeHeader);
GetRawInputBuffer = user32.GetRawInputBuffer
GetRawInputBuffer.restype = WINAPI


class tagRAWINPUTDEVICE(ctypes.Structure):
    _fields_ = [
        ('usUsagePage', USHORT),
        ('usUsage', USHORT),
        ('dwFlags', DWORD),
        ('hwndTarget', HWND),
    ]


RAWINPUTDEVICE = tagRAWINPUTDEVICE
PRAWINPUTDEVICE = POINTER(tagRAWINPUTDEVICE)
LPRAWINPUTDEVICE = POINTER(tagRAWINPUTDEVICE)


PCRAWINPUTDEVICE = CONST
RIDEV_REMOVE = 0x00000001
RIDEV_EXCLUDE = 0x00000010
RIDEV_PAGEONLY = 0x00000020
RIDEV_NOLEGACY = 0x00000030
RIDEV_INPUTSINK = 0x00000100
RIDEV_CAPTUREMOUSE = 0x00000200
RIDEV_NOHOTKEYS = 0x00000200
RIDEV_APPKEYS = 0x00000400
RIDEV_EXINPUTSINK = 0x00001000
RIDEV_DEVNOTIFY = 0x00002000
RIDEV_EXMODEMASK = 0x000000F0


def RIDEV_EXMODE(mode):
    return mode & RIDEV_EXMODEMASK


GIDC_ARRIVAL = 0x00000001
GIDC_REMOVAL = 0x00000002


def GET_DEVICE_CHANGE_WPARAM(wParam):
    return LOWORD(wParam)


def GET_DEVICE_CHANGE_LPARAM(lParam):
    return LOWORD(lParam)

# WINAPI
# RegisterRawInputDevices(
#     _In_reads_(uiNumDevices) PCRAWINPUTDEVICE pRawInputDevices,
#     _In_ UINT uiNumDevices,
#     _In_ UINT cbSize);
RegisterRawInputDevices = user32.RegisterRawInputDevices
RegisterRawInputDevices.restype = WINAPI


# WINAPI
# GetRegisteredRawInputDevices(
#     _Out_writes_opt_( *puiNumDevices) PRAWINPUTDEVICE pRawInputDevices,
#     _Inout_ PUINT puiNumDevices,
#     _In_ UINT cbSize);
GetRegisteredRawInputDevices = user32.GetRegisteredRawInputDevices
GetRegisteredRawInputDevices.restype = WINAPI


class tagRAWINPUTDEVICELIST(ctypes.Structure):
    _fields_ = [
        ('hDevice', HANDLE),
        ('dwType', DWORD),
    ]


RAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST
PRAWINPUTDEVICELIST = POINTER(tagRAWINPUTDEVICELIST)



# WINAPI
# GetRawInputDeviceList(
#     _Out_writes_opt_(*puiNumDevices) PRAWINPUTDEVICELIST pRawInputDeviceList,
#     _Inout_ PUINT puiNumDevices,
#     _In_ UINT cbSize);
GetRawInputDeviceList = user32.GetRawInputDeviceList
GetRawInputDeviceList.restype = WINAPI


# WINAPI
# DefRawInputProc(
#     _In_reads_(nInput) PRAWINPUT* paRawInput,
#     _In_ INT nInput,
#     _In_ UINT cbSizeHeader);
DefRawInputProc = user32.DefRawInputProc
DefRawInputProc.restype = WINAPI

POINTER_DEVICE_PRODUCT_STRING_MAX = 0x00000208
PDC_ARRIVAL = 0x00000001
PDC_REMOVAL = 0x00000002
PDC_ORIENTATION_0 = 0x00000004
PDC_ORIENTATION_90 = 0x00000008
PDC_ORIENTATION_180 = 0x00000010
PDC_ORIENTATION_270 = 0x00000020
PDC_MODE_DEFAULT = 0x00000040
PDC_MODE_CENTERED = 0x00000080
PDC_MAPPING_CHANGE = 0x00000100
PDC_RESOLUTION = 0x00000200
PDC_ORIGIN = 0x00000400
PDC_MODE_ASPECTRATIOPRESERVED = 0x00000800
class tagPOINTER_DEVICE_TYPE(ENUM):
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x00000002
    POINTER_DEVICE_TYPE_TOUCH = 0x00000003
    #if(WINVER > = 4
    POINTER_DEVICE_TYPE_TOUCH_PAD = 0x00000004
    #endif = 5
    POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF


POINTER_DEVICE_TYPE = tagPOINTER_DEVICE_TYPE



class tagPOINTER_DEVICE_INFO(ctypes.Structure):
    _fields_ = [
        ('displayOrientation', DWORD),
        ('device', HANDLE),
        ('poINTerDeviceType', POINTER_DEVICE_TYPE),
        ('monitor', HMONITOR),
        ('startingCursorId', ULONG),
        ('maxActiveContacts', USHORT),
        ('productString', WCHAR * POINTER_DEVICE_PRODUCT_STRING_MAX),
    ]


POINTER_DEVICE_INFO = tagPOINTER_DEVICE_INFO



class tagPOINTER_DEVICE_PROPERTY(ctypes.Structure):
    _fields_ = [
        ('logicalMin', INT32),
        ('logicalMax', INT32),
        ('physicalMin', INT32),
        ('physicalMax', INT32),
        ('unit', UINT32),
        ('unitExponent', UINT32),
        ('usagePageId', USHORT),
        ('usageId', USHORT),
    ]


POINTER_DEVICE_PROPERTY = tagPOINTER_DEVICE_PROPERTY


class tagPOINTER_DEVICE_CURSOR_TYPE(ENUM):
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000
    POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002
    POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF


POINTER_DEVICE_CURSOR_TYPE = tagPOINTER_DEVICE_CURSOR_TYPE



class tagPOINTER_DEVICE_CURSOR_INFO(ctypes.Structure):
    _fields_ = [
        ('cursorId', UINT32),
        ('cursor', POINTER_DEVICE_CURSOR_TYPE),
    ]


POINTER_DEVICE_CURSOR_INFO = tagPOINTER_DEVICE_CURSOR_INFO



# WINAPI
# GetPoINTerDevices(
#     _Inout_ UINT32* deviceCount,
#     _Out_writes_opt_(*deviceCount) POINTER_DEVICE_INFO *poINTerDevices);
GetPoINTerDevices = user32.GetPoINTerDevices
GetPoINTerDevices.restype = WINAPI


# WINAPI
# GetPoINTerDevice(
#     _In_ HANDLE device,
#     _Out_writes_(1) POINTER_DEVICE_INFO *poINTerDevice);
GetPoINTerDevice = user32.GetPoINTerDevice
GetPoINTerDevice.restype = WINAPI


# WINAPI
# GetPoINTerDeviceProperties(
#     _In_ HANDLE device,
#     _Inout_ UINT32* propertyCount,
#     _Out_writes_opt_(*propertyCount) POINTER_DEVICE_PROPERTY *poINTerProperties);
GetPoINTerDeviceProperties = user32.GetPoINTerDeviceProperties
GetPoINTerDeviceProperties.restype = WINAPI


# WINAPI
# RegisterPoINTerDeviceNotifications(
#     _In_ HWND window,
#     _In_ BOOL notifyRange);
RegisterPoINTerDeviceNotifications = user32.RegisterPoINTerDeviceNotifications
RegisterPoINTerDeviceNotifications.restype = WINAPI


# WINAPI
# GetPoINTerDeviceRects(
#     _In_ HANDLE device,
#     _Out_writes_(1) RECT* poINTerDeviceRect,
#     _Out_writes_(1) RECT* displayRect);
GetPoINTerDeviceRects = user32.GetPoINTerDeviceRects
GetPoINTerDeviceRects.restype = WINAPI


# WINAPI
# GetPoINTerDeviceCursors(
#     _In_ HANDLE device,
#     _Inout_ UINT32* cursorCount,
#     _Out_writes_opt_(*cursorCount) POINTER_DEVICE_CURSOR_INFO *deviceCursors);
GetPoINTerDeviceCursors = user32.GetPoINTerDeviceCursors
GetPoINTerDeviceCursors.restype = WINAPI


# WINAPI
# GetRawPoINTerDeviceData(
#     _In_ UINT32 poINTerId,
#     _In_ UINT32 historyCount,
#     _In_ UINT32 propertiesCount,
#     _In_reads_(propertiesCount) POINTER_DEVICE_PROPERTY* pProperties,
#     _Out_writes_(historyCount * propertiesCount) LONG* pValues);
GetRawPoINTerDeviceData = user32.GetRawPoINTerDeviceData
GetRawPoINTerDeviceData.restype = WINAPI

MSGFLT_ADD = 0x00000001
MSGFLT_REMOVE = 0x00000002

# WINAPI
# ChangeWindowMessageFilter(
#     _In_ UINT message,
#     _In_ DWORD dwFlag);
ChangeWindowMessageFilter = user32.ChangeWindowMessageFilter
ChangeWindowMessageFilter.restype = WINAPI

MSGFLTINFO_NONE = 0x00000000
MSGFLTINFO_ALREADYALLOWED_FORWND = 0x00000001
MSGFLTINFO_ALREADYDISALLOWED_FORWND = 0x00000002
MSGFLTINFO_ALLOWED_HIGHER = 0x00000003

class tagCHANGEFILTERSTRUCT(ctypes.Structure):
    _fields_ = [
        ('cbSize', DWORD),
        ('ExtStatus', DWORD),
    ]


CHANGEFILTERSTRUCT = tagCHANGEFILTERSTRUCT
PCHANGEFILTERSTRUCT = POINTER(tagCHANGEFILTERSTRUCT)


MSGFLT_RESET = 0x00000000
MSGFLT_ALLOW = 0x00000001
MSGFLT_DISALLOW = 0x00000002

# WINAPI
# ChangeWindowMessageFilterEx(
#     _In_ HWND hwnd,
#     _In_ UINT message,
#     _In_ DWORD action,
#     _Inout_opt_ PCHANGEFILTERSTRUCT pChangeFilterStruct);
ChangeWindowMessageFilterEx = user32.ChangeWindowMessageFilterEx
ChangeWindowMessageFilterEx.restype = WINAPI

GF_BEGIN = 0x00000001
GF_INERTIA = 0x00000002
GF_END = 0x00000004
GID_BEGIN = 0x00000001
GID_END = 0x00000002
GID_ZOOM = 0x00000003
GID_PAN = 0x00000004
GID_ROTATE = 0x00000005
GID_TWOFINGERTAP = 0x00000006
GID_PRESSANDTAP = 0x00000007
GID_ROLLOVER = GID_PRESSANDTAP

class tagGESTUREINFO(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('dwID', DWORD),
        ('hwndTarget', HWND),
        ('ptsLocation', POINTS),
        ('dwInstanceID', DWORD),
        ('dwSequenceID', DWORD),
        ('ullArguments', ULONGLONG),
        ('cbExtraArgs', UINT),
    ]


GESTUREINFO = tagGESTUREINFO
PGESTUREINFO = POINTER(tagGESTUREINFO)


PCGESTUREINFO = GESTUREINFO

class tagGESTURENOTIFYSTRUCT(ctypes.Structure):
    _fields_ = [
        ('cbSize', UINT),
        ('dwFlags', DWORD),
        ('hwndTarget', HWND),
        ('ptsLocation', POINTS),
        ('dwInstanceID', DWORD),
    ]


GESTURENOTIFYSTRUCT = tagGESTURENOTIFYSTRUCT
PGESTURENOTIFYSTRUCT = POINTER(tagGESTURENOTIFYSTRUCT)


def GID_ROTATE_ANGLE_TO_ARGUMENT(_arg_):
    return ((_arg_ + 2.0 * 3.14159265) / 4.0 * 3.14159265) * 65535.0


def GID_ROTATE_ANGLE_FROM_ARGUMENT(_arg_):
    return ((_arg_ / 65535.0) * 4.0 * 3.14159265) - 2.0 * 3.14159265

# WINAPI
# GetGestureInfo(
#     _In_ HGESTUREINFO hGestureInfo,
#     _Out_ PGESTUREINFO pGestureInfo);
GetGestureInfo = user32.GetGestureInfo
GetGestureInfo.restype = WINAPI


# WINAPI
# GetGestureExtraArgs(
#     _In_ HGESTUREINFO hGestureInfo,
#     _In_ UINT cbExtraArgs,
#     _Out_writes_bytes_(cbExtraArgs) PBYTE pExtraArgs);
GetGestureExtraArgs = user32.GetGestureExtraArgs
GetGestureExtraArgs.restype = WINAPI


# WINAPI
# CloseGestureInfoHandle(
#     _In_ HGESTUREINFO hGestureInfo);
CloseGestureInfoHandle = user32.CloseGestureInfoHandle
CloseGestureInfoHandle.restype = WINAPI


class tagGESTURECONFIG(ctypes.Structure):
    _fields_ = [
        ('dwID', DWORD),
        ('dwWant', DWORD),
        ('dwBlock', DWORD),
    ]


GESTURECONFIG = tagGESTURECONFIG
PGESTURECONFIG = POINTER(tagGESTURECONFIG)


GC_ALLGESTURES = 0x00000001
GC_ZOOM = 0x00000001
GC_PAN = 0x00000001
GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 0x00000002
GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 0x00000004
GC_PAN_WITH_GUTTER = 0x00000008
GC_PAN_WITH_INERTIA = 0x00000010
GC_ROTATE = 0x00000001
GC_TWOFINGERTAP = 0x00000001
GC_PRESSANDTAP = 0x00000001
GC_ROLLOVER = GC_PRESSANDTAP
GESTURECONFIGMAXCOUNT = 0x00000100

# WINAPI
# SetGestureConfig(
#     _In_ HWND hwnd,
#     _In_ DWORD dwReserved,
#     _In_ UINT cIDs,
#     _In_reads_(cIDs) PGESTURECONFIG pGestureConfig,
#
#     _In_ UINT cbSize);
SetGestureConfig = user32.SetGestureConfig
SetGestureConfig.restype = WINAPI

GCF_INCLUDE_ANCESTORS = 0x00000001

# WINAPI
# GetGestureConfig(
#     _In_ HWND hwnd,
#     _In_ DWORD dwReserved,
#     _In_ DWORD dwFlags,
#     _In_ PUINT pcIDs,
#
#     _Inout_updates_(*pcIDs) PGESTURECONFIG pGestureConfig,
#
#     _In_ UINT cbSize);
GetGestureConfig = user32.GetGestureConfig
GetGestureConfig.restype = WINAPI

NID_INTEGRATED_TOUCH = 0x00000001
NID_EXTERNAL_TOUCH = 0x00000002
NID_INTEGRATED_PEN = 0x00000004
NID_EXTERNAL_PEN = 0x00000008
NID_MULTI_INPUT = 0x00000040
NID_READY = 0x00000080
MAX_STR_BLOCKREASON = 0x00000100

# WINAPI
# ShutdownBlockReasonCreate(
#     _In_ HWND hWnd,
#     _In_ LPCWSTR pwszReason);
ShutdownBlockReasonCreate = user32.ShutdownBlockReasonCreate
ShutdownBlockReasonCreate.restype = WINAPI


# WINAPI
# ShutdownBlockReasonQuery(
#     _In_ HWND hWnd,
#     _Out_writes_opt_(*pcchBuff) LPWSTR pwszBuff,
#     _Inout_ DWORD *pcchBuff);
ShutdownBlockReasonQuery = user32.ShutdownBlockReasonQuery
ShutdownBlockReasonQuery.restype = WINAPI


# WINAPI
# ShutdownBlockReasonDestroy(
#     _In_ HWND hWnd);
ShutdownBlockReasonDestroy = user32.ShutdownBlockReasonDestroy
ShutdownBlockReasonDestroy.restype = WINAPI

class tagINPUT_MESSAGE_DEVICE_TYPE(ENUM):
    IMDT_UNAVAILABLE = 0x00000000
    IMDT_KEYBOARD = 0x00000001
    IMDT_MOUSE = 0x00000002
    IMDT_TOUCH = 0x00000004
    IMDT_PEN = 0x00000008
    #if(WINVER > = 9
    IMDT_TOUCHPAD = 0x00000010
    #endif = 17


INPUT_MESSAGE_DEVICE_TYPE = tagINPUT_MESSAGE_DEVICE_TYPE


class tagINPUT_MESSAGE_ORIGIN_ID(ENUM):
    IMO_UNAVAILABLE = 0x00000000
    IMO_HARDWARE = 0x00000001
    IMO_INJECTED = 0x00000002
    IMO_SYSTEM = 0x00000004


INPUT_MESSAGE_ORIGIN_ID = tagINPUT_MESSAGE_ORIGIN_ID



# WINAPI
# GetCurrentInputMessageSource(
#     _Out_ INPUT_MESSAGE_SOURCE *inputMessageSource);
GetCurrentInputMessageSource = user32.GetCurrentInputMessageSource
GetCurrentInputMessageSource.restype = WINAPI


# WINAPI
# GetCIMSSM(
#     _Out_ INPUT_MESSAGE_SOURCE *inputMessageSource);
GetCIMSSM = user32.GetCIMSSM
GetCIMSSM.restype = WINAPI

class tagAR_STATE(ENUM):
    AR_ENABLED = 0x0
    AR_DISABLED = 0x1
    AR_SUPPRESSED = 0x2
    AR_REMOTESESSION = 0x4
    AR_MULTIMON = 0x8
    AR_NOSENSOR = 0x10
    AR_NOT_SUPPORTED = 0x20
    AR_DOCKED = 0x40
    AR_LAPTOP = 0x80


AR_STATE = tagAR_STATE
PAR_STATE = POINTER(tagAR_STATE)


class ORIENTATION_PREFERENCE(ENUM):
    ORIENTATION_PREFERENCE_NONE = 0x0
    ORIENTATION_PREFERENCE_LANDSCAPE = 0x1
    ORIENTATION_PREFERENCE_PORTRAIT = 0x2
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8




# WINAPI
# GetAutoRotationState(
#     _Out_ PAR_STATE pState);
GetAutoRotationState = user32.GetAutoRotationState
GetAutoRotationState.restype = WINAPI


# WINAPI
# GetDisplayAutoRotationPreferences(
#     _Out_ ORIENTATION_PREFERENCE *pOrientation);
GetDisplayAutoRotationPreferences = user32.GetDisplayAutoRotationPreferences
GetDisplayAutoRotationPreferences.restype = WINAPI


# WINAPI
# GetDisplayAutoRotationPreferencesByProcessId(
#     _In_ DWORD dwProcessId,
#     _Out_ ORIENTATION_PREFERENCE *pOrientation,
#     _Out_ BOOL *fRotateScreen);
GetDisplayAutoRotationPreferencesByProcessId = (
    user32.GetDisplayAutoRotationPreferencesByProcessId
)
GetDisplayAutoRotationPreferencesByProcessId.restype = WINAPI


# WINAPI
# SetDisplayAutoRotationPreferences(
#     _In_ ORIENTATION_PREFERENCE orientation);
SetDisplayAutoRotationPreferences = user32.SetDisplayAutoRotationPreferences
SetDisplayAutoRotationPreferences.restype = WINAPI


# WINAPI
# IsImmersiveProcess(
#     _In_ HANDLE hProcess);
IsImmersiveProcess = user32.IsImmersiveProcess
IsImmersiveProcess.restype = WINAPI


# WINAPI
# SetProcessRestrictionExemption(
#     _In_ BOOL fEnableExemption);
SetProcessRestrictionExemption = user32.SetProcessRestrictionExemption
SetProcessRestrictionExemption.restype = WINAPI


__all__ = (
    'SLE_ERROR', 'VK_OEM_ATTN', 'SPI_SCREENSAVERRUNNING', 'WM_MOUSELEAVE',
    'MF_BYCOMMAND', 'QS_PAINT', 'LB_SELECTSTRING', 'WM_NOTIFYFORMAT', 'MB_OK',
    'SPI_GETBLOCKSENDINPUTRESETS', 'INPUTLANGCHANGE_SYSCHARSET', 'VK_TAB',
    'PostAppMessage', 'EnumDesktops', 'IS_POINTER_INCONTACT_WPARAM', 'GC_PAN',
    'RDW_NOINTERNALPAINT', 'SOUND_SYSTEM_INFORMATION', 'VK_NAVIGATION_VIEW',
    'SS_WHITERECT', 'MOUSEWHEEL_ROUTING_FOCUS', 'SM_SHUTTINGDOWN', 'IDABORT',
    'SPI_SETGESTUREVISUALIZATION', 'SB_PAGEUP', 'WM_GETICON', 'LBS_COMBOBOX',
    'WTS_SESSION_REMOTE_CONTROL', 'EVENT_SYSTEM_DIALOGEND', 'SPI_GETWORKAREA',
    'STATE_SYSTEM_PRESSED', 'VK_ICO_00', 'MAPVK_VSC_TO_VK', 'CB_GETCOUNT',
    'GCLP_HICON', 'DLGC_WANTMESSAGE', 'PM_QS_INPUT', 'WPF_RESTORETOMAXIMIZED',
    'SPI_ICONVERTICALSPACING', 'WH_SHELL', 'PostAppMessageW', 'CB_GETEDITSEL',
    'SPI_GETLOGICALDPIOVERRIDE', 'POINTER_FLAG_NONE', 'WM_CTLCOLORBTN',
    'GID_ROTATE_ANGLE_TO_ARGUMENT', 'KF_DLGMODE', 'SBM_GETRANGE', 'DT_LEFT',
    'SPI_SETMOUSECLICKLOCK', 'RDW_ERASENOW', 'WM_NCMOUSELEAVE', 'LoadMenu',
    'SWP_NOCOPYBITS', 'MB_RETRYCANCEL', 'GetNextWindow', 'LR_VGACOLOR',
    'POINTER_FLAG_THIRDBUTTON', 'SPI_GETNONCLIENTMETRICS', 'VK_HANJA', 'IDOK',
    'DCX_INTERSECTUPDATE', 'WM_KEYFIRST', 'MF_INSERT', 'SKF_RCTLLATCHED',
    'RI_MOUSE_BUTTON_4_DOWN', 'IS_POINTER_NEW_WPARAM', 'SM_CXMINIMIZED',
    'COLOR_BTNHIGHLIGHT', 'LB_GETANCHORINDEX', 'DialogBoxIndirectA', 'GWL_ID',
    'GET_NCHITTEST_WPARAM', 'MFS_UNCHECKED', 'WM_SYSCOMMAND', 'MB_TASKMODAL',
    'WINSTA_READATTRIBUTES', 'UOI_FLAGS', 'MAKEWPARAM', 'WM_POINTERWHEEL',
    'APPCOMMAND_BASS_BOOST', 'wvsprintf', 'VK_MULTIPLY', 'SM_IMMENABLED',
    'SPI_SETPENSIDEMOVETHRESHOLD', 'DFCS_SCROLLLEFT', 'WS_EX_WINDOWEDGE',
    'HWND_BROADCAST', 'EVENT_OBJECT_DRAGCANCEL', 'VK_OEM_CLEAR', 'UIS_SET',
    'SPI_SETFOCUSBORDERHEIGHT', 'MOUSEEVENTF_RIGHTDOWN', 'ESB_ENABLE_BOTH',
    'APPCOMMAND_BROWSER_STOP', 'GrayString', 'SB_PAGERIGHT', 'OIC_WARNING',
    'MK_RBUTTON', 'SS_ETCHEDFRAME', 'SIZE_MAXSHOW', 'GC_ROLLOVER', 'HELP_KEY',
    'STATE_SYSTEM_OFFSCREEN', 'PDC_ARRIVAL', 'EVENT_UIA_EVENTID_START',
    'WTS_CONSOLE_CONNECT', 'EVENT_SYSTEM_SCROLLINGEND', 'RIM_TYPEMOUSE',
    'RT_DIALOG', 'DSS_MONO', 'INDEXID_OBJECT', 'IDC_HELP', 'OCR_SIZEWE',
    'BSF_NOHANG', 'ES_AUTOHSCROLL', 'OIC_QUES', 'RDW_NOCHILDREN', 'IDC_PIN',
    'EVENT_OBJECT_IME_SHOW', 'STATE_SYSTEM_SELECTED', 'MSGF_MAX', 'EM_SETSEL',
    'SKF_LCTLLOCKED', 'WM_NCPOINTERUP', 'SystemParametersInfo', 'SC_ARRANGE',
    'VK_PROCESSKEY', 'SM_CXDLGFRAME', 'TOUCHEVENTF_PALM', 'SM_ARRANGE',
    'WTS_REMOTE_CONNECT', 'EVENT_OBJECT_IME_CHANGE', 'LR_COLOR', 'DDL_SYSTEM',
    'CDS_NORESET', 'OBM_OLD_ZOOM', 'MOUSEWHEEL_ROUTING_HYBRID', 'MB_TOPMOST',
    'SPI_GETDRAGFROMMAXIMIZE', 'WM_MDIMAXIMIZE', 'WINSTA_EXITWINDOWS', 'IDNO',
    'EM_GETMODIFY', 'SetClassLong', 'CWP_SKIPDISABLED', 'PM_QS_POSTMESSAGE',
    'LB_GETCARETINDEX', 'STATE_SYSTEM_FOCUSED', 'SPI_SETHIGHCONTRAST', 'FALT',
    'HTTRANSPARENT', 'ULW_EX_NORESIZE', 'SetWindowText', 'WM_CHILDACTIVATE',
    'ESB_DISABLE_UP', 'OBM_OLD_CLOSE', 'CF_OEMTEXT', 'SC_CLOSE',
    'SPI_SETMINIMUMHITRADIUS', 'RDW_INTERNALPAINT', 'CF_MAX', 'OBJID_ALERT',
    'CS_BYTEALIGNCLIENT', 'VK_PACKET', 'SPI_SETSCREENREADER', 'GA_PARENT',
    'GUI_INMOVESIZE', 'SKF_CONFIRMHOTKEY', 'HTCLOSE', 'LLKHF_EXTENDED',
    'STATE_SYSTEM_UNAVAILABLE', 'LLMHF_LOWER_IL_INJECTED', 'SM_CYFOCUSBORDER',
    'TIMERV_NO_COALESCING', 'VK_GAMEPAD_VIEW', 'WH_MAX', 'WM_DROPFILES',
    'SPI_SETDOUBLECLICKTIME', 'GID_BEGIN', 'MAX_TOUCH_COUNT', 'MIM_STYLE',
    'EWX_QUICKRESOLVE', 'WINSTA_ENUMERATE', 'DefDlgProc', 'HC_SKIP', 'UOI_IO',
    'EM_GETPASSWORDCHAR', 'OBM_REDUCE', 'VK_SNAPSHOT', 'CHILDID_SELF',
    'COLOR_INACTIVECAPTIONTEXT', 'ODS_CHECKED', 'OIC_SAMPLE', 'MIIM_ID',
    'SPI_GETFONTSMOOTHING', 'DESKTOP_ENUMERATE', 'DS_CONTEXTHELP', 'DST_TEXT',
    'EVENT_OBJECT_DRAGLEAVE', 'WH_KEYBOARD_LL', 'WM_DESTROY', 'QS_RAWINPUT',
    'ARW_STARTRIGHT', 'OCR_UP', 'WS_EX_LEFT', 'KF_ALTDOWN', 'VK_OEM_JUMP',
    'WM_MENUDRAG', 'SPI_SETDESKPATTERN', 'MK_CONTROL', 'LB_GETITEMDATA',
    'APPCOMMAND_MIC_ON_OFF_TOGGLE', 'SPI_GETSCREENSAVERRUNNING', 'MB_HELP',
    'SM_CXMINSPACING', 'VK_OEM_FJ_LOYA', 'CB_GETITEMHEIGHT', 'MF_BYPOSITION',
    'PDC_ORIENTATION_90', 'WM_NCPOINTERDOWN', 'ARW_BOTTOMRIGHT', 'RES_ICON',
    'APPCOMMAND_MEDIA_PREVIOUSTRACK', 'SPI_GETKEYBOARDDELAY', 'WM_MBUTTONUP',
    'GESTUREVISUALIZATION_DOUBLETAP', 'SPI_GETFONTSMOOTHINGTYPE', 'SB_VERT',
    'EM_EMPTYUNDOBUFFER', 'WS_EX_OVERLAPPEDWINDOW', 'LoadMenuIndirect',
    'IS_POINTER_SECONDBUTTON_WPARAM', 'VK_HANGEUL', 'DDL_HIDDEN', 'TME_QUERY',
    'IS_POINTER_FIRSTBUTTON_WPARAM', 'HELP_SETCONTENTS', 'MNGO_NOINTERFACE',
    'SM_MENUDROPALIGNMENT', 'GET_DEVICE_CHANGE_LPARAM', 'OBM_CHECK', 'WM_CUT',
    'VK_HELP', 'WM_KEYUP', 'EVENT_MIN', 'SM_CYKANJIWINDOW', 'DispatchMessage',
    'WM_XBUTTONDBLCLK', 'SPI_SETTOOLTIPANIMATION', 'APPCOMMAND_CUT', 'PWR_OK',
    'CBS_LOWERCASE', 'VK_OEM_BACKTAB', 'OBM_ZOOMD', 'CBS_AUTOHSCROLL',
    'RemoveProp', 'SPI_SETLOWPOWERTIMEOUT', 'MAKEINTRESOURCEA', 'VK_CANCEL',
    'SM_CYMINTRACK', 'VK_OEM_RESET', 'EVENT_UIA_EVENTID_END', 'VK_NUMLOCK',
    'MAKEINTRESOURCEW', 'EVENT_OBJECT_END', 'SM_CYMAXTRACK', 'INPUT_HARDWARE',
    'TPM_RIGHTALIGN', 'VK_BROWSER_STOP', 'WM_INITDIALOG', 'MWMO_ALERTABLE',
    'EVENT_SYSTEM_CAPTUREEND', 'EVENT_SYSTEM_SWITCHEND', 'OBM_SIZE', 'HTHELP',
    'EVENT_SYSTEM_MOVESIZESTART', 'MF_RIGHTJUSTIFY', 'GC_PRESSANDTAP',
    'BS_NOTIFY', 'WM_IME_REQUEST', 'SETWALLPAPER_DEFAULT', 'MSGF_DIALOGBOX',
    'WM_SYSCOLORCHANGE', 'WM_MDIACTIVATE', 'VK_SLEEP', 'SS_TYPEMASK', 'VK_F9',
    'WM_TOUCH', 'ISMEX_REPLIED', 'COLOR_3DDKSHADOW', 'OCR_SIZE', 'SC_HSCROLL',
    'TIMERV_COALESCING_MIN', 'SPI_GETPENDRAGOUTTHRESHOLD', 'SKF_RALTLATCHED',
    'SPI_GETMOUSESPEED', 'POINTER_FLAG_SECONDBUTTON', 'GCLP_HBRBACKGROUND',
    'DS_FIXEDSYS', 'WS_BORDER', 'DefHookProc', 'MOUSE_MOVE_RELATIVE', 'VK_F8',
    'VK_OEM_AX', 'SPI_GETCLIENTAREAANIMATION', 'SC_TASKLIST', 'ARW_LEFT',
    'DISP_CHANGE_BADPARAM', 'WM_MOUSEHWHEEL', 'WMSZ_BOTTOM', 'TPM_LEFTBUTTON',
    'WM_GETDLGCODE', 'SERKF_SERIALKEYSON', 'MSGF_NEXTWINDOW', 'OCR_HAND',
    'DEVICE_NOTIFY_WINDOW_HANDLE', 'MF_DEFAULT', 'EVENT_OBJECT_CREATE',
    'HSHELL_APPCOMMAND', 'SPI_SETMENUFADE', 'DLGC_WANTARROWS', 'VK_XBUTTON2',
    'VK_XBUTTON1', 'TPM_RETURNCMD', 'PBT_APMSTANDBY', 'EVENT_OBJECT_REORDER',
    'ES_MULTILINE', 'SHOW_ICONWINDOW', 'AW_HOR_NEGATIVE', 'RID_INPUT',
    'OBJID_CURSOR', 'GWL_USERDATA', 'SPI_SETSHOWSOUNDS', 'GetClassLongPtrW',
    'OCR_NORMAL', 'SKF_AUDIBLEFEEDBACK', 'SM_CYVSCROLL', 'HCBT_ACTIVATE',
    'ALERT_SYSTEM_ERROR', 'ARW_TOPLEFT', 'LBS_NOSEL', 'GetClassLongPtrA',
    'SC_MOUSEMENU', 'WH_JOURNALRECORD', 'DESKTOP_CREATEMENU', 'ODT_STATIC',
    'VK_GAMEPAD_LEFT_TRIGGER', 'VK_OEM_COMMA', 'STATE_SYSTEM_DEFAULT',
    'DDL_READONLY', 'WMSZ_LEFT', 'RealGetWindowClass', 'RIDEV_EXMODEMASK',
    'POINTER_MESSAGE_FLAG_THIRDBUTTON', 'PBT_APMOEMEVENT', 'BS_AUTOCHECKBOX',
    'IDC_IBEAM', 'DCX_EXCLUDEUPDATE', 'CBS_DROPDOWN', 'GW_HWNDLAST', 'VK_F3',
    'SPI_SETPENDOCKTHRESHOLD', 'MNGOF_TOPGAP', 'MIM_MENUDATA', 'BF_TOPLEFT',
    'SKF_RWINLOCKED', 'SW_SHOWMAXIMIZED', 'LR_COPYFROMRESOURCE', 'EM_SETRECT',
    'ODA_DRAWENTIRE', 'WH_JOURNALPLAYBACK', 'WM_NCXBUTTONDOWN', 'BF_DIAGONAL',
    'CS_BYTEALIGNWINDOW', 'VK_NAVIGATION_ACCEPT', 'SPI_GETGRIDGRANULARITY',
    'GIDC_ARRIVAL', 'DDL_ARCHIVE', 'COLOR_HIGHLIGHT', 'CreateWindowStation',
    'DialogBoxParam', 'EDS_ROTATEDMODE', 'SPI_GETDRAGFULLWINDOWS', 'MB_YESNO',
    '_Inout_grows_updates_bypassable_or_z_', 'EC_USEFONTINFO', 'OBM_RGARROW',
    'LBN_KILLFOCUS', 'SPI_SETWAITTOKILLSERVICETIMEOUT', 'ORD_LANGDRIVER',
    'COLOR_GRADIENTACTIVECAPTION', 'DT_MODIFYSTRING', 'SPI_SETHANDHELD',
    'WM_EXITSIZEMOVE', 'STM_GETICON', 'SB_RIGHT', 'ExitWindows', 'WM_PAINT',
    'SKF_LSHIFTLATCHED', 'TPM_HORPOSANIMATION', 'SPI_GETMINIMIZEDMETRICS',
    'KEYBOARD_OVERRUN_MAKE_CODE', 'WM_COMPAREITEM', 'WS_EX_RIGHT', 'SB_BOTH',
    'EVENT_SYSTEM_CAPTURESTART', 'SPI_GETCURSORSHADOW', 'SB_PAGELEFT',
    'APPCOMMAND_CORRECTION_LIST', 'APPCOMMAND_BROWSER_FORWARD', 'EM_CANUNDO',
    'MSGFLTINFO_ALLOWED_HIGHER', 'SPI_SETSYSTEMLANGUAGEBAR', 'MB_YESNOCANCEL',
    'MB_SERVICE_NOTIFICATION_NT3X', 'EVENT_SYSTEM_CONTEXTHELPEND', 'WS_CHILD',
    'TPM_NONOTIFY', 'APPCOMMAND_SPELL_CHECK', 'KEYEVENTF_KEYUP', 'PM_REMOVE',
    'DESKTOP_JOURNALPLAYBACK', 'IDI_QUESTION', 'SPI_SETSHOWIMEUI', 'VK_NEXT',
    'DialogBox', 'CDS_GLOBAL', 'LB_INSERTSTRING', 'WM_LBUTTONUP', 'BM_CLICK',
    'EM_GETFIRSTVISIBLELINE', 'DWLP_DLGPROC', 'HSHELL_WINDOWACTIVATED',
    'RT_ICON', 'APPCOMMAND_LAUNCH_MAIL', 'MND_ENDMENU', 'DFCS_CAPTIONRESTORE',
    'SPI_SETMOUSETRAILS', 'WM_KEYLAST', 'VK_MEDIA_NEXT_TRACK', 'HWND_TOPMOST',
    'RI_MOUSE_MIDDLE_BUTTON_DOWN', 'VK_PRIOR', 'APPCOMMAND_MEDIA_PLAY_PAUSE',
    'IDIGNORE', 'SWP_DEFERERASE', 'VK_BACK', 'ATF_TIMEOUTON', 'DFC_SCROLL',
    'SOUND_SYSTEM_MENUPOPUP', 'ISMEX_CALLBACK', 'SPI_GETCLEARTYPE', 'VK_F2',
    'HSHELL_WINDOWREPLACING', 'SB_ENDSCROLL', 'VK_GAMEPAD_A', 'VK_GAMEPAD_B',
    'SBM_GETSCROLLINFO', 'VK_F1', 'WSF_VISIBLE', 'VK_F6', 'ES_NOHIDESEL',
    'VK_F4', 'SPI_GETHUNGAPPTIMEOUT', 'EM_GETLINECOUNT', 'BS_3STATE', 'VK_UP',
    'VK_GAMEPAD_X', 'VK_GAMEPAD_Y', 'SPI_SETFONTSMOOTHINGORIENTATION',
    'WS_EX_NOREDIRECTIONBITMAP', 'MKF_REPLACENUMBERS', 'PW_CLIENTONLY',
    'CBS_OWNERDRAWVARIABLE', 'BSF_POSTMESSAGE', 'SS_REALSIZEIMAGE', 'DC_TEXT',
    'SPI_GETPENARBITRATIONTYPE', 'WM_CHARTOITEM', 'WVR_REDRAW', 'AW_CENTER',
    'SB_LINERIGHT', 'MF_USECHECKBITMAPS', 'GC_ROTATE', 'MNC_CLOSE', 'BS_LEFT',
    'POINTER_MESSAGE_FLAG_NEW', 'MONITOR_DEFAULTTONULL', 'ODS_DISABLED',
    'MF_UNCHECKED', 'CreateDialogA', 'PWR_SUSPENDRESUME', 'CB_SETEDITSEL',
    'FLASHW_CAPTION', 'BN_PAINT', 'HCF_INDICATOR', 'DT_RIGHT', 'GF_INERTIA',
    'DFCS_SCROLLSIZEGRIP', 'SPI_SETUIEFFECTS', 'SPI_SETDRAGWIDTH', 'BF_RIGHT',
    'WM_ENTERIDLE', 'SPI_SETKEYBOARDSPEED', 'EDGE_SUNKEN', 'HCBT_CREATEWND',
    'SPI_GETWINDOWSEXTENSION', 'STATE_SYSTEM_LINKED', 'LB_GETITEMHEIGHT',
    'EVENT_SYSTEM_SWITCHSTART', 'EIMES_CANCELCOMPSTRINFOCUS', 'ODS_GRAYED',
    'SPI_GETFILTERKEYS', 'EM_CHARFROMPOS', 'WM_POWERBROADCAST', 'SS_CENTER',
    'VK_OEM_CUSEL', 'SPI_SETFILTERKEYS', 'FLASHW_STOP', 'SPI_SETDRAGHEIGHT',
    'EC_LEFTMARGIN', 'TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME', 'ARW_UP',
    'SPI_SETLOWPOWERACTIVE', 'SPI_SETMOUSESONAR', 'VK_RCONTROL',
    'RI_MOUSE_BUTTON_3_DOWN', 'EC_RIGHTMARGIN', 'RIM_INPUTSINK', 'VK_NUMPAD9',
    'VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON', 'SPI_GETPENDOCKTHRESHOLD', 'HTMENU',
    'WPF_SETMINPOSITION', 'SM_CXDOUBLECLK', 'SPI_GETMENUDROPALIGNMENT',
    'VK_NUMPAD8', 'RI_KEY_TERMSRV_SET_LED', 'VK_NUMPAD3', 'VK_NUMPAD2',
    'VK_NUMPAD1', 'VK_NUMPAD0', 'VK_NUMPAD7', 'VK_NUMPAD6', 'VK_NUMPAD5',
    'VK_NUMPAD4', 'BN_DBLCLK', 'IDHOT_SNAPDESKTOP', 'LB_GETITEMRECT', 'KF_UP',
    'HELP_HELPONHELP', 'HSHELL_ACTIVATESHELLWINDOW', 'SPI_GETMESSAGEDURATION',
    'MB_USERICON', 'VK_OEM_MINUS', 'EM_SETRECTNP', 'PWR_SUSPENDREQUEST',
    'CS_OWNDC', 'IDC_HAND', 'WM_ASKCBFORMATNAME', 'WM_COMMAND', 'HELP_INDEX',
    'STM_SETIMAGE', 'COLOR_WINDOWTEXT', 'COLOR_INACTIVEBORDER', 'BS_BOTTOM',
    'OBM_RGARROWI', 'HELP_CONTEXT', 'POINTER_FLAG_INCONTACT', 'OBM_RGARROWD',
    'VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT', 'GetTabbedTextExtent', 'KLF_REORDER',
    'SPI_GETMINIMUMHITRADIUS', 'DialogBoxIndirectParam', 'WS_EX_CONTEXTHELP',
    'DlgDirSelectComboBoxEx', 'MOUSEEVENTF_MIDDLEDOWN', 'PEN_FLAG_BARREL',
    'FE_FONTSMOOTHINGORIENTATIONRGB', 'DI_COMPAT', 'BN_CLICKED', 'DrawText',
    'MOUSEEVENTF_WHEEL', 'SPI_GETWAITTOKILLSERVICETIMEOUT', 'BS_RIGHT',
    'MFT_MENUBREAK', 'SPI_GETHANDEDNESS', 'MF_MENUBREAK', 'DC_ACTIVE',
    'APPCOMMAND_BROWSER_BACKWARD', 'DS_CONTROL', 'ODS_INACTIVE', 'EM_GETSEL',
    'EVENT_SYSTEM_DIALOGSTART', 'SPI_SETICONTITLEWRAP', 'WM_DESTROYCLIPBOARD',
    'WS_EX_APPWINDOW', 'BSM_ALLCOMPONENTS', 'CopyCursor', 'SM_CXMENUCHECK',
    'WM_MEASUREITEM', 'APPCOMMAND_MEDIA_RECORD', 'MB_CANCELTRYCONTINUE',
    'LoadAccelerators', 'SW_SMOOTHSCROLL', 'DT_HIDEPREFIX', 'BF_FLAT',
    'TOUCHINPUTMASKF_EXTRAINFO', 'RI_KEY_TERMSRV_SHADOW', 'BST_INDETERMINATE',
    'WM_POINTERCAPTURECHANGED', 'EVENT_OBJECT_CLOAKED', 'RIDEV_EXCLUDE',
    'ChangeDisplaySettings', 'TOUCHEVENTF_PEN', 'WVR_VREDRAW', 'MWMO_WAITALL',
    'SB_THUMBTRACK', 'POINTER_MESSAGE_FLAG_CANCELED', 'WM_MDIRESTORE',
    'WHEEL_DELTA', 'WH_HARDWARE', 'SM_MOUSEHORIZONTALWHEELPRESENT', 'DT_TOP',
    'LoadCursor', 'WS_SIZEBOX', 'WM_NCMBUTTONUP', 'SS_NOPREFIX', 'DT_TABSTOP',
    'LBS_MULTIPLESEL', 'IsCharAlpha', 'TKF_HOTKEYSOUND', 'LR_LOADMAP3DCOLORS',
    'SM_CONVERTIBLESLATEMODE', 'HBMMENU_POPUP_MINIMIZE', 'WM_IME_SELECT',
    'EVENT_SYSTEM_MOVESIZEEND', 'GUI_INMENUMODE', 'WM_IME_KEYUP', 'DS_CENTER',
    'SPI_SETHANDEDNESS', 'VK_LAUNCH_APP1', 'IDCONTINUE', 'VK_LAUNCH_APP2',
    'GW_HWNDPREV', 'GET_DEVICE_LPARAM', 'SIZE_RESTORED', 'MFT_BITMAP',
    'InsertMenuItem', 'WMSZ_BOTTOMLEFT', 'SPI_SETDOCKMOVING', 'LR_SHARED',
    'EVENT_OBJECT_HIDE', 'TPM_BOTTOMALIGN', 'SPI_GETSCREENSAVETIMEOUT',
    'SIZE_MINIMIZED', 'DialogBoxA', 'VK_OEM_FJ_ROYA', 'WM_POINTERHWHEEL',
    'ODS_COMBOBOXEDIT', 'PBT_APMQUERYSUSPENDFAILED', 'BM_SETDONTCLICK',
    'DDL_DRIVES', 'WM_NCPOINTERUPDATE', 'MAKEINTRESOURCE', 'CS_DBLCLKS',
    'PM_QS_SENDMESSAGE', 'WM_THEMECHANGED', 'DEVICE_NOTIFY_SERVICE_HANDLE',
    'WM_KILLFOCUS', 'HKL_NEXT', 'HCBT_MOVESIZE', 'STATE_SYSTEM_CHECKED',
    'QS_MOUSE', 'SPI_GETUIEFFECTS', 'WH_CALLWNDPROC', 'TKF_TOGGLEKEYSON',
    'GCLP_MENUNAME', 'SM_CXMIN', 'TPM_LEFTALIGN', 'POINTTOPOINTS', 'VK_LWIN',
    'RegisterClassEx', 'EM_SETMODIFY', 'MB_SETFOREGROUND', 'SKF_LALTLATCHED',
    'EVENT_CONSOLE_CARET', 'SS_ENDELLIPSIS', 'EDGE_BUMP', 'CreateDesktopEx',
    'HC_SYSMODALON', 'WM_QUERYUISTATE', 'LR_COPYRETURNORG', 'SC_PREVWINDOW',
    'SPI_GETMOUSEHOVERTIME', 'CS_SAVEBITS', 'MF_MOUSESELECT', 'CreateWindow',
    'VK_ESCAPE', 'MOUSE_ATTRIBUTES_CHANGED', 'GetWindowText', 'EM_SETHANDLE',
    'SMTO_BLOCK', 'SPI_GETDROPSHADOW', 'ISMEX_NOTIFY', 'COLOR_BTNHILIGHT',
    'BSF_IGNORECURRENTTASK', 'CONSOLE_CARET_VISIBLE', 'KLF_NOTELLSHELL',
    'SendDlgItemMessage', 'WHEEL_PAGESCROLL', 'STN_DBLCLK', 'MapVirtualKeyEx',
    'VK_PAUSE', 'LSFW_LOCK', 'WM_SETTINGCHANGE', 'SM_CXSMICON', 'SS_RIGHT',
    'SPI_GETMENURECT', 'LB_DELETESTRING', 'EVENT_SYSTEM_SWITCHER_CANCELLED',
    'HBMMENU_SYSTEM', 'WS_ICONIC', 'SPI_GETWHEELSCROLLCHARS', 'WM_KEYDOWN',
    'DFCS_SCROLLRIGHT', 'SBS_SIZEBOXTOPLEFTALIGN', 'HELP_QUIT', 'WM_COPYDATA',
    'DFCS_SCROLLSIZEGRIPRIGHT', 'WM_WININICHANGE', 'VK_PRINT', 'FNOINVERT',
    'WM_WINDOWPOSCHANGING', 'OBJID_TITLEBAR', 'CB_GETITEMDATA', 'DC_INBUTTON',
    'CWP_SKIPTRANSPARENT', 'FAPPCOMMAND_KEY', 'PENVISUALIZATION_CURSOR',
    'ATF_ONOFFFEEDBACK', 'RT_VXD', 'SPI_SETFOREGROUNDLOCKTIMEOUT', 'OIC_HAND',
    'WTS_SESSION_TERMINATE', 'PEN_FLAG_INVERTED', 'SPI_GETPOWEROFFACTIVE',
    'SW_SHOWNA', 'VK_RETURN', 'WS_ACTIVECAPTION', 'WM_RBUTTONDBLCLK', 'IDYES',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA', 'WINSTA_ACCESSCLIPBOARD',
    'WM_POINTERDOWN', 'IDH_MISSING_CONTEXT', 'IS_POINTER_CANCELED_WPARAM',
    'CTLCOLOR_SCROLLBAR', 'BDR_RAISEDINNER', 'HAS_POINTER_CONFIDENCE_WPARAM',
    'ODA_FOCUS', 'IDC_NO', 'IS_POINTER_PRIMARY_WPARAM', 'SPI_GETDOCKMOVING',
    'WM_QUIT', 'WM_NOTIFY', 'HCBT_QS', 'MNC_IGNORE', 'VK_HANGUL', 'HTCLIENT',
    'WM_HANDHELDLAST', 'DISP_CHANGE_BADFLAGS', 'SetWindowLong', 'VK_EXECUTE',
    'IS_POINTER_FOURTHBUTTON_WPARAM', 'CB_GETCOMBOBOXINFO', 'LBN_SELCANCEL',
    'KEYEVENTF_EXTENDEDKEY', 'WM_TABLET_FIRST', 'WH_MSGFILTER', 'SSWF_NONE',
    'SKF_LWINLOCKED', 'ARW_STARTTOP', 'GCL_HBRBACKGROUND', 'CBN_DROPDOWN',
    'PDC_ORIENTATION_0', 'ICON_BIG', 'HTBOTTOMLEFT', 'CB_SETDROPPEDWIDTH',
    'VK_CONVERT', 'SPI_SETSCREENSAVESECURE', 'MIIM_BITMAP', 'WM_RBUTTONUP',
    'VK_BROWSER_FORWARD', 'TranslateAccelerator', 'STATE_SYSTEM_SELFVOICING',
    'APPCOMMAND_MICROPHONE_VOLUME_MUTE', 'CF_METAFILEPICT', 'ES_CENTER',
    'GetClassInfo', 'DST_COMPLEX', 'SPI_GETCONTACTVISUALIZATION', 'SM_SECURE',
    'SPI_GETSYSTEMLANGUAGEBAR', 'WM_NCLBUTTONUP', 'PW_RENDERFULLCONTENT',
    'MessageBoxEx', 'RT_ANIICON', 'DialogBoxW', 'SPI_GETBORDER', 'IMAGE_ICON',
    'SM_CXSCREEN', 'BS_PUSHLIKE', 'ESB_DISABLE_DOWN', 'OCR_SIZENESW', 'VK_F7',
    'SPI_SETKEYBOARDDELAY', 'HSHELL_LANGUAGE', 'WM_POINTERROUTEDTO', 'SB_TOP',
    'WH_MAXHOOK', 'HELP_CONTEXTMENU', 'EVENT_OBJECT_TEXTSELECTIONCHANGED',
    'IDC_ICON', 'FLASHW_ALL', 'SW_MAXIMIZE', 'SPI_SETHOTTRACKING', 'GCW_ATOM',
    'CF_DSPTEXT', 'APPCOMMAND_BROWSER_HOME', 'CF_DSPENHMETAFILE', 'SS_LEFT',
    'WS_EX_ACCEPTFILES', 'LB_SETCARETINDEX', 'TOUCH_FEEDBACK_NONE', 'CF_TEXT',
    'RDW_VALIDATE', 'CharUpperBuff', 'TOUCH_HIT_TESTING_PROXIMITY_CLOSEST',
    'SPI_GETICONTITLELOGFONT', 'DFC_CAPTION', 'SW_SHOWNORMAL', 'DI_IMAGE',
    'BSM_ALLDESKTOPS', 'SS_REALSIZECONTROL', 'WM_DPICHANGED_BEFOREPARENT',
    'SKF_LALTLOCKED', 'PEN_MASK_PRESSURE', 'ES_OEMCONVERT', 'COLOR_HOTLIGHT',
    'MB_DEFMASK', 'MIIM_TYPE', 'EN_UPDATE', 'EVENT_CONSOLE_UPDATE_SIMPLE',
    'GetUserObjectInformation', 'SPI_GETKEYBOARDPREF', 'SWP_NOSENDCHANGING',
    'SPI_GETMOUSESIDEMOVETHRESHOLD', 'INPUTLANGCHANGE_FORWARD', 'WS_TABSTOP',
    'PBT_APMRESUMEAUTOMATIC', 'WM_NULL', 'SPI_GETSCREENSAVESECURE', 'VK_MENU',
    'LB_SETITEMDATA', 'VK_SELECT', 'PRF_CLIENT', 'EM_POSFROMCHAR', 'CDS_TEST',
    'WM_UNINITMENUPOPUP', 'ALERT_SYSTEM_INFORMATIONAL', 'BN_KILLFOCUS',
    'SPI_SETSELECTIONFADE', 'MOUSEEVENTF_HWHEEL', 'LB_FINDSTRING', 'MOD_ALT',
    'EVENT_OBJECT_SELECTIONADD', 'WS_EX_STATICEDGE', 'MWMO_INPUTAVAILABLE',
    'SM_CXFULLSCREEN', 'COLOR_INFOTEXT', 'SC_SCREENSAVE', 'OBJID_SIZEGRIP',
    'MFS_UNHILITE', 'PRF_CHILDREN', 'VK_LAUNCH_MAIL', 'WM_MOVING', 'XBUTTON1',
    'EM_GETMARGINS', 'HELP_SETWINPOS', 'LB_MULTIPLEADDSTRING', 'OBM_LFARROW',
    'COLOR_WINDOWFRAME', 'GESTUREVISUALIZATION_TAP', 'RI_KEY_BREAK', 'CB_ERR',
    'RI_MOUSE_MIDDLE_BUTTON_UP', 'SPI_GETFOREGROUNDLOCKTIMEOUT', 'XBUTTON2',
    'SKF_HOTKEYSOUND', 'CharToOemBuff', 'MOUSEWHEEL_ROUTING_MOUSE_POS',
    'SW_SHOWMINIMIZED', 'WS_EX_LTRREADING', 'SPI_SETMOUSEKEYS', 'CBN_CLOSEUP',
    'WTS_SESSION_LOCK', 'MB_DEFAULT_DESKTOP_ONLY', 'ARW_TOPRIGHT', 'GID_ZOOM',
    'RI_MOUSE_BUTTON_3_UP', 'GetClassName', 'MAPVK_VK_TO_CHAR', 'DS_ABSALIGN',
    'WM_QUERYOPEN', 'SM_CYCAPTION', 'GetDlgItemText', 'RI_MOUSE_BUTTON_4_UP',
    'SPIF_SENDCHANGE', 'BroadcastSystemMessage', 'UISF_HIDEFOCUS', 'ES_LEFT',
    'TabbedTextOut', 'SPI_GETGESTUREVISUALIZATION', 'MB_RTLREADING', 'WINVER',
    'BroadcastSystemMessageEx', 'PDC_ORIENTATION_180', 'VK_NONCONVERT',
    'SPI_SETCOMBOBOXANIMATION', 'EVENT_OBJECT_UNCLOAKED', 'SS_BLACKRECT',
    'DESKTOP_WRITEOBJECTS', 'GetIconInfoEx', 'SM_CLEANBOOT', 'CreateDialogW',
    'DLGC_DEFPUSHBUTTON', 'GET_DEVICE_CHANGE_WPARAM', 'SPI_GETSOUNDSENTRY',
    'WM_CAPTURECHANGED', 'KEYEVENTF_UNICODE', 'PEN_FLAG_ERASER', 'MIM_HELPID',
    'CreateDialogIndirect', 'DLGC_WANTALLKEYS', 'VK_SEPARATOR', 'BF_TOPRIGHT',
    'WH_SYSMSGFILTER', 'WM_MOUSEWHEEL', 'WM_FONTCHANGE', 'WM_STYLECHANGED',
    'WM_MENUSELECT', 'IDI_INFORMATION', 'SPI_GETSNAPTODEFBUTTON', 'OCR_IBEAM',
    'SPI_SETCURSORSHADOW', 'AW_HOR_POSITIVE', 'MB_ICONINFORMATION', 'RT_HTML',
    'IDH_NO_HELP', 'OBM_DNARROW', 'COLOR_3DLIGHT', 'SPI_GETFASTTASKSWITCH',
    'WM_INPUT_DEVICE_CHANGE', 'SPI_SETAUDIODESCRIPTION', 'SPI_GETHOTTRACKING',
    'VK_NAVIGATION_CANCEL', 'LB_FINDSTRINGEXACT', 'WM_MENUCOMMAND', 'RT_FONT',
    'RT_ACCELERATOR', 'CallWindowProc', 'SSF_SOUNDSENTRYON', 'SWP_NOACTIVATE',
    'DFC_POPUPMENU', 'RDW_NOFRAME', 'WMSZ_TOPLEFT', 'WM_MOUSEMOVE', 'MOD_WIN',
    'WM_PAINTICON', 'EVENT_SYSTEM_MINIMIZESTART', 'SPI_GETMENUANIMATION',
    'USER_DEFAULT_SCREEN_DPI', 'WM_POINTERLEAVE', 'EM_GETRECT', 'MIIM_STRING',
    'DefFrameProc', 'EVENT_OBJECT_LOCATIONCHANGE', 'DSS_HIDEPREFIX', 'SB_CTL',
    'MOUSEEVENTF_MIDDLEUP', 'CREATEPROCESS_MANIFEST_RESOURCE_ID', 'IDC_CROSS',
    'MNGO_NOERROR', 'SPI_SETLISTBOXSMOOTHSCROLLING', 'CBN_SELENDCANCEL',
    'SPI_GETMENUUNDERLINES', 'VK_GAMEPAD_DPAD_LEFT', 'SM_CXICONSPACING',
    'RID_HEADER', 'WM_NCMBUTTONDBLCLK', 'KLF_SUBSTITUTE_OK', 'DFC_BUTTON',
    'BSF_FLUSHDISK', 'TOUCH_HIT_TESTING_PROXIMITY_FARTHEST', 'QS_SENDMESSAGE',
    'EWX_REBOOT', 'MB_SERVICE_NOTIFICATION', 'WM_CTLCOLORSTATIC', 'RT_CURSOR',
    'RI_MOUSE_WHEEL', 'EM_LINEFROMCHAR', 'UISF_ACTIVE', 'LBS_DISABLENOSCROLL',
    'SPI_SETDRAGFROMMAXIMIZE', 'DCX_EXCLUDERGN', 'FKF_FILTERKEYSON', 'QS_KEY',
    'GESTUREVISUALIZATION_ON', 'CBN_SELENDOK', 'IDC_UPARROW', 'HWND_TOP',
    'LR_CREATEDIBSECTION', 'TOUCH_MASK_PRESSURE', 'WS_GROUP', 'SM_CXCURSOR',
    'PDC_MODE_ASPECTRATIOPRESERVED', 'RI_MOUSE_BUTTON_1_UP', 'CB_SETTOPINDEX',
    'APPCOMMAND_MEDIA_CHANNEL_UP', 'SPI_GETFLATMENU', 'RAWINPUT_ALIGN',
    'WM_MOUSEFIRST', 'COLOR_INACTIVECAPTION', 'SetClassLongPtrW', 'BS_CENTER',
    'BDR_RAISEDOUTER', 'WM_HSCROLL', 'SM_CYMINSPACING', 'MB_DEFBUTTON4',
    'MA_ACTIVATEANDEAT', 'SPI_SETSTICKYKEYS', 'PDC_MAPPING_CHANGE', 'AW_HIDE',
    'WM_POINTERDEVICECHANGE', 'OIC_BANG', 'TOUCHINPUTMASKF_CONTACTAREA',
    'HSHELL_ACCESSIBILITYSTATE', 'PDC_RESOLUTION', 'SBM_SETSCROLLINFO',
    'WM_DWMSENDICONICTHUMBNAIL', 'SPI_SETFOCUSBORDERWIDTH', 'LLKHF_INJECTED',
    'SOUND_SYSTEM_MINIMIZE', 'CDS_SET_PRIMARY', 'SPI_SETICONTITLELOGFONT',
    'SBM_GETPOS', 'SKF_RSHIFTLOCKED', 'WM_GETOBJECT', 'VK_NAVIGATION_UP',
    'SKF_HOTKEYACTIVE', 'HWND_MESSAGE', 'POINTER_MOD_SHIFT',
    'LR_DEFAULTSIZE', 'SPI_SETWINARRANGING', 'InsertMenu', 'WM_CTLCOLORDLG',
    'IS_POINTER_INRANGE_WPARAM', 'STATE_SYSTEM_MARQUEED', 'LB_SETANCHORINDEX',
    'CBS_HASSTRINGS', 'POINTER_DEVICE_PRODUCT_STRING_MAX', 'SPI_SETBORDER',
    'FKF_INDICATOR', 'EM_SETREADONLY', 'OCR_CROSS', 'ESB_DISABLE_RTDN',
    'FKF_AVAILABLE', 'APPCOMMAND_VOLUME_DOWN', 'WPF_ASYNCWINDOWPLACEMENT',
    'LBS_MULTICOLUMN', 'WM_MDICREATE', 'WS_CLIPSIBLINGS', 'SM_YVIRTUALSCREEN',
    'HSHELL_WINDOWDESTROYED', 'SPI_GETFOCUSBORDERHEIGHT', 'SM_MAXIMUMTOUCHES',
    'VK_GAMEPAD_LEFT_THUMBSTICK_UP', 'OBJID_QUERYCLASSNAMEIDX', 'DST_BITMAP',
    'WM_GETTITLEBARINFOEX', 'DC_SMALLCAP', 'GET_WHEEL_DELTA_WPARAM', 'IDH_OK',
    'SB_THUMBPOSITION', 'GWL_EXSTYLE', 'WVR_HREDRAW', 'VK_INSERT', 'VK_PLAY',
    'FAPPCOMMAND_MASK', 'DWL_MSGRESULT', 'COLOR_ACTIVECAPTION', 'WS_VSCROLL',
    'COLOR_MENUBAR', 'MSGFLT_RESET', 'DFCS_INACTIVE', 'ALERT_SYSTEM_CRITICAL',
    'MF_BITMAP', 'SS_BITMAP', 'TOUCH_HIT_TESTING_NONE', 'SM_CXMENUSIZE',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP', 'GID_ROTATE',
    'CreateDialogIndirectW', 'MDIS_ALLCHILDSTYLES', 'NID_INTEGRATED_TOUCH',
    'MA_ACTIVATE', 'MOD_NOREPEAT', 'HSHELL_TASKMAN', 'MFT_MENUBARBREAK',
    'DI_NORMAL', 'WVR_ALIGNLEFT', 'KF_EXTENDED', 'VK_VOLUME_UP', 'SB_HORZ',
    'GET_FLAGS_LPARAM', 'APPCOMMAND_MEDIA_STOP', 'CTLCOLOR_DLG', 'WB_LEFT',
    'RIDEV_INPUTSINK', 'TOUCH_HIT_TESTING_DEFAULT', 'EM_LIMITTEXT', 'GID_END',
    'DT_SINGLELINE', 'SHOW_OPENNOACTIVATE', 'FAPPCOMMAND_OEM', 'BS_OWNERDRAW',
    'HELP_MULTIKEY', 'WM_RENDERFORMAT', 'IDC_SIZEWE', 'PBT_APMBATTERYLOW',
    'SS_EDITCONTROL', 'EnumWindowStations', 'GCL_CBCLSEXTRA', 'SW_RESTORE',
    'HCBT_DESTROYWND', 'VK_CRSEL', 'GetClassLongPtr', 'GET_APPCOMMAND_LPARAM',
    'LB_GETHORIZONTALEXTENT', 'SPI_SETACTIVEWNDTRKZORDER', 'DM_GETDEFID',
    'WS_EX_LAYERED', 'RT_BITMAP', 'MOUSEEVENTF_XUP', 'UOI_HEAPSIZE', 'CF_DIB',
    'SM_CXEDGE', 'SPI_GETSTICKYKEYS', 'WB_RIGHT', 'WMSZ_TOP',
    'PBT_APMQUERYSTANDBY', 'RT_DLGINCLUDE', 'TWF_FINETOUCH', 'EN_AFTER_PASTE',
    'ENDSESSION_CRITICAL', 'APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE',
    'OCR_SIZEALL', 'STATE_SYSTEM_SELECTABLE', 'FLASHW_TRAY', 'EM_SCROLLCARET',
    'VK_MEDIA_STOP', 'SPI_GETCARETBROWSING', 'ESB_DISABLE_LEFT', 'BF_ADJUST',
    'SM_CYFULLSCREEN', 'WM_NCRBUTTONDOWN', 'GESTUREVISUALIZATION_OFF',
    'EVENT_SYSTEM_DRAGDROPEND', 'WINSTA_ACCESSGLOBALATOMS', 'GR_USEROBJECTS',
    'MB_APPLMODAL', 'SKF_TWOKEYSOFF', 'BS_BITMAP',
    'POINTER_MESSAGE_FLAG_FOURTHBUTTON', 'SetUserObjectInformation', 'CF_DIF',
    'VK_NAVIGATION_LEFT', 'BM_GETIMAGE', 'VK_OEM_102', 'BST_PUSHED', 'WH_MIN',
    'DFCS_TRANSPARENT', 'CBS_DISABLENOSCROLL', 'SetMenuItemInfo', 'DWL_USER',
    'WM_SETICON', 'SM_CYSCREEN', 'VK_VOLUME_DOWN', 'VK_DIVIDE', 'SM_CYBORDER',
    'POINTER_FLAG_INRANGE', 'DLGC_UNDEFPUSHBUTTON', 'PEN_FLAG_NONE', 'VK_ADD',
    'ES_NUMBER', 'MF_APPEND', 'CONTACTVISUALIZATION_PRESENTATIONMODE',
    'MAPVK_VK_TO_VSC', 'PENARBITRATIONTYPE_NONE', 'POINTER_FLAG_NEW', 'VK_F5',
    'SKF_RCTLLOCKED', 'LBN_ERRSPACE', 'PBT_APMQUERYSUSPEND', 'LB_GETTOPINDEX',
    'MSGFLT_REMOVE', 'QS_POINTER', 'SPI_SETSNAPSIZING', 'WM_NCLBUTTONDOWN',
    'WS_SYSMENU', 'MNS_CHECKORBMP', 'QS_INPUT', 'ODA_SELECT', 'SM_CYMENUSIZE',
    'SPI_SETPENWINDOWS', 'UnregisterClass', 'HCF_LOGONDESKTOP', 'WM_TCARD',
    'HCF_HOTKEYSOUND', 'WVR_ALIGNRIGHT', 'FE_FONTSMOOTHINGCLEARTYPE', 'HTTOP',
    'LoadCursorFromFile', 'WM_PAINTCLIPBOARD', 'GCL_STYLE', 'SLE_WARNING',
    'GetClassInfoEx', 'UOI_TYPE', 'GR_GDIOBJECTS', 'CF_RIFF', 'VK_RSHIFT',
    'SPI_GETSHOWIMEUI', 'SPI_GETTOOLTIPFADE', 'SWP_FRAMECHANGED', 'LLKHF_UP',
    'APPCOMMAND_NEW', 'LR_LOADTRANSPARENT', 'MKF_INDICATOR', 'GWLP_ID',
    'GET_POINTERID_WPARAM', 'APPCOMMAND_MEDIA_NEXTTRACK', 'MKF_HOTKEYSOUND',
    'SPI_GETMOUSECLICKLOCKTIME', 'DCX_NORESETATTRS', 'SBS_SIZEBOX', 'VK_ZOOM',
    'APPCOMMAND_BROWSER_REFRESH', 'SOUND_SYSTEM_SHUTDOWN', 'WM_MDISETMENU',
    'BDR_SUNKENINNER', 'SPI_GETMOUSE', 'GCL_WNDPROC', 'DFCS_SCROLLDOWN',
    'EVENT_CONSOLE_UPDATE_SCROLL', 'STATE_SYSTEM_INVISIBLE', 'LBS_STANDARD',
    'STATE_SYSTEM_TRAVERSED', 'TPM_TOPALIGN', 'EVENT_SYSTEM_DRAGDROPSTART',
    'MessageBox', 'DT_BOTTOM', 'DOF_SHELLDATA', 'VK_SHIFT', 'OemToCharBuff',
    'SM_CXFOCUSBORDER', 'MB_OKCANCEL', 'SPI_GETSNAPSIZING', 'WS_POPUP',
    'SM_CXBORDER', 'RIDEV_REMOVE', 'MapVirtualKey', 'DCX_PARENTCLIP', 'NMHDR',
    'WM_CTLCOLORLISTBOX', 'SM_REMOTESESSION', 'RI_MOUSE_HWHEEL', 'MF_CHECKED',
    'MOUSE_MOVE_NOCOALESCE', 'SM_CYMINIMIZED', 'DFCS_CAPTIONMAX', 'BS_FLAT',
    'GW_HWNDNEXT', 'GET_SC_WPARAM', 'DT_WORD_ELLIPSIS', 'WM_IME_KEYDOWN',
    'SM_MOUSEWHEELPRESENT', 'GMMP_USE_DISPLAY_POINTS', 'EM_SETTABSTOPS',
    'OBM_OLD_DNARROW', 'VkKeyScan', 'CB_SELECTSTRING', 'HTSYSMENU', 'LB_OKAY',
    'WINABLEAPI', 'GC_PAN_WITH_SINGLE_FINGER_VERTICALLY', 'RDW_ERASE',
    'HSHELL_MONITORCHANGED', 'APPCOMMAND_MEDIA_FAST_FORWARD', 'COLOR_3DFACE',
    'SOUND_SYSTEM_WARNING', 'STN_ENABLE', 'RIDI_PREPARSEDDATA', 'EM_SCROLL',
    'VK_OEM_WSCTRL', 'HCF_HOTKEYAVAILABLE', 'DT_RTLREADING', 'WM_COMPACTING',
    'SPI_SETDROPSHADOW', 'DFCS_MENUBULLET', 'FindWindow', 'CreateWindowA',
    'DISP_CHANGE_NOTUPDATED', 'CTLCOLOR_LISTBOX', 'WM_DEVICECHANGE', 'WM_APP',
    'POINTER_FLAG_UPDATE', 'WINEVENT_SKIPOWNPROCESS', 'DialogBoxIndirectW',
    'WM_NCMBUTTONDOWN', 'BM_SETSTATE', 'HTMINBUTTON', 'WS_THICKFRAME',
    'VK_GAMEPAD_DPAD_UP', 'GID_ROLLOVER', 'COLOR_ACTIVEBORDER', 'OBJID_MENU',
    'KLF_ACTIVATE', 'VK_SPACE', 'MOUSEEVENTF_VIRTUALDESK', 'GetKeyNameText',
    'WM_ACTIVATEAPP', 'OpenWindowStation', 'VK_SUBTRACT', 'SS_USERITEM',
    'IDC_ARROW', 'WM_SYSCHAR', 'WM_DPICHANGED_AFTERPARENT', 'EM_SETIMESTATUS',
    'MAX_LOGICALDPIOVERRIDE', 'EVENT_OBJECT_INVOKED', 'PostMessage', 'VK_F22',
    'CBS_DROPDOWNLIST', 'HSHELL_HIGHBIT', 'SKF_LSHIFTLOCKED', 'EM_LINELENGTH',
    'COLOR_GRADIENTINACTIVECAPTION', 'POINTER_FLAG_CANCELED', 'SIF_ALL',
    'SPI_GETMOUSEVANISH', 'COLOR_3DSHADOW', 'SM_DBCSENABLED', 'HSHELL_FLASH',
    'VK_GAMEPAD_RIGHT_THUMBSTICK_UP', 'WINSTA_READSCREEN', 'WM_SIZING',
    'STATE_SYSTEM_FOCUSABLE', 'WINEVENT_OUTOFCONTEXT', 'WH_MOUSE_LL', 'INPUT',
    'SM_CXPADDEDBORDER', 'LBS_HASSTRINGS', 'VK_OEM_PERIOD', 'WM_NCXBUTTONUP',
    'EWX_SHUTDOWN', 'CreateDesktop', 'CBS_OEMCONVERT', 'RIDEV_NOLEGACY',
    'DlgDirSelectEx', 'OBM_UPARROW', 'HTBORDER', 'WM_ENDSESSION', 'LoadImage',
    'WM_NCRBUTTONUP', 'SPI_GETSCREENREADER', 'GESTURECONFIGMAXCOUNT', 'ACCEL',
    'MSGF_MENU', 'INPUT_MOUSE', 'CB_MSGMAX', 'HELP_TCARD_DATA', 'DCX_WINDOW',
    'SWP_HIDEWINDOW', 'RI_MOUSE_BUTTON_5_UP', 'HWND_NOTOPMOST', 'WS_DISABLED',
    'EM_GETIMESTATUS', 'CONSOLE_CARET_SELECTION', 'SM_CXSIZEFRAME', 'DI_MASK',
    'WM_MBUTTONDOWN', 'SPI_GETPOWEROFFTIMEOUT', 'COLOR_CAPTIONTEXT', 'VK_F23',
    'TOUCHEVENTF_PRIMARY', 'DDL_DIRECTORY', 'SPI_GETAUDIODESCRIPTION',
    'VK_GAMEPAD_DPAD_DOWN', 'SM_CYDOUBLECLK', 'RI_MOUSE_BUTTON_5_DOWN',
    'NID_EXTERNAL_PEN', 'TOUCH_MASK_ORIENTATION', 'RIM_TYPEMAX', 'COLOR_MENU',
    'SM_CXMAXTRACK', 'SM_CXMINTRACK', 'MKF_MODIFIERS', 'WM_DRAWITEM', 'GetDC',
    'WVR_ALIGNTOP', 'PBTF_APMRESUMEFROMFAILURE', 'WH_KEYBOARD', 'BN_UNPUSHED',
    'WM_PALETTECHANGED', 'EVENT_OBJECT_STATECHANGE', 'WM_CANCELMODE',
    'MFT_RADIOCHECK', 'DFCS_BUTTON3STATE', 'OBJID_WINDOW', 'WS_CLIPCHILDREN',
    'DT_EXPANDTABS', 'HBMMENU_POPUP_MAXIMIZE', 'MONITORINFOF_PRIMARY',
    'WS_EX_LAYOUTRTL', 'WS_EX_NOPARENTNOTIFY', 'EN_CHANGE', 'HTNOWHERE',
    'EVENT_OBJECT_FOCUS', 'SM_CXDRAG', 'LWA_ALPHA', 'VK_F20',
    'GetKeyboardLayoutName', 'COLOR_MENUHILIGHT', 'MDITILE_HORIZONTAL',
    'SM_PENWINDOWS', 'HBMMENU_MBAR_MINIMIZE', 'RIDEV_PAGEONLY', 'MNC_SELECT',
    'SPI_SETCURSORS', 'DS_LOCALEDIT', 'SPI_GETHIGHCONTRAST', 'VK_APPS',
    'CopyAcceleratorTable', 'WM_IME_COMPOSITIONFULL', 'HBMMENU_POPUP_RESTORE',
    'IS_POINTER_FIFTHBUTTON_WPARAM', 'STATE_SYSTEM_PROTECTED', 'BS_LEFTTEXT',
    'GET_XBUTTON_WPARAM', 'MSGFLTINFO_ALREADYDISALLOWED_FORWND', 'MOD_SHIFT',
    'RIM_TYPEHID', 'OBM_OLD_LFARROW', 'WM_MBUTTONDBLCLK', 'RIDEV_EXMODE',
    'MINIMUM_RESERVED_MANIFEST_RESOURCE_ID', 'GID_ROTATE_ANGLE_FROM_ARGUMENT',
    'CB_GETTOPINDEX', 'VK_OEM_FJ_TOUROKU', 'UISF_HIDEACCEL', 'WA_CLICKACTIVE',
    'HSHELL_RUDEAPPACTIVATED', 'MIM_BACKGROUND', 'CF_PRIVATELAST', 'IDRETRY',
    'SSWF_DISPLAY', 'WM_RENDERALLFORMATS', 'WM_TIMECHANGE', 'BST_CHECKED',
    'TOUCH_MASK_NONE', 'SM_CYVTHUMB', 'WM_POINTERUPDATE', 'CF_OWNERDISPLAY',
    'CCHILDREN_SCROLLBAR', 'HELP_SETINDEX', 'APPCOMMAND_TREBLE_UP', 'WM_UNDO',
    'DialogBoxIndirect', 'DOF_PROGMAN', 'MIIM_FTYPE', 'SW_SHOWDEFAULT',
    'BSF_ALLOWSFW', 'BS_CHECKBOX', 'EM_REPLACESEL', 'APPCOMMAND_VOLUME_MUTE',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA', 'DSS_DISABLED',
    'EVENT_CONSOLE_END_APPLICATION', 'GET_RAWINPUT_CODE_WPARAM', 'WM_GETTEXT',
    'GetWindowTextLength', 'GUI_POPUPMENUMODE', 'CCHILDREN_TITLEBAR',
    'GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY', 'EnumDisplaySettings', 'VK_F21',
    'POINTER_MESSAGE_FLAG_INCONTACT', 'MSGFLT_ALLOW', 'WINSTA_ENUMDESKTOPS',
    'APPCOMMAND_UNDO', 'FKF_HOTKEYSOUND', 'VK_HOME', 'TPM_HORIZONTAL',
    'SPI_SETTOUCHPREDICTIONPARAMETERS', 'DSS_PREFIXONLY', 'CS_CLASSDC',
    'BSF_NOTIMEOUTIFNOTHUNG', 'BROADCAST_QUERY_DENY', 'BSM_NETDRIVER',
    'WM_SYNCPAINT', 'RT_ANICURSOR', 'GET_KEYSTATE_WPARAM', 'DS_USEPIXELS',
    'EVENT_OBJECT_DRAGENTER', '_In_bypassable_reads_or_z_', 'MOD_CONTROL',
    'SPI_SETPENARBITRATIONTYPE', 'MK_MBUTTON', 'LoadKeyboardLayout', 'VK_F24',
    'EM_FMTLINES', 'BS_PUSHBUTTON', 'DFCS_MENUARROWRIGHT', 'TME_LEAVE',
    'SB_PAGEDOWN', 'EVENT_SYSTEM_SOUND', 'RT_STRING', 'HCBT_SYSCOMMAND',
    'WS_EX_MDICHILD', 'RIDEV_APPKEYS', 'ALERT_SYSTEM_QUERY', 'RI_KEY_MAKE',
    'HBMMENU_MBAR_RESTORE', 'WTS_REMOTE_DISCONNECT', 'NEXTRAWINPUTBLOCK',
    'MSGF_MESSAGEBOX', 'SM_CYDLGFRAME', 'CB_MULTIPLEADDSTRING', 'HTRIGHT',
    'MF_MENUBARBREAK', 'GetMonitorInfo', 'MONITOR_DEFAULTTONEAREST', 'MF_END',
    'SPI_SETTOOLTIPFADE', 'QS_TIMER', 'WH_MOUSE', 'DFCS_PUSHED', 'MB_RIGHT',
    'SPI_GETCOMBOBOXANIMATION', 'APPCOMMAND_BROWSER_SEARCH', 'SM_SERVERR2',
    'HC_SYSMODALOFF', 'WM_STYLECHANGING', 'HSHELL_WINDOWREPLACED', 'SW_HIDE',
    'VK_BROWSER_HOME', 'MF_DISABLED', 'GWL_WNDPROC', 'MDITILE_SKIPDISABLED',
    'EVENT_SYSTEM_MINIMIZEEND', 'FKF_CONFIRMHOTKEY', 'WM_SHOWWINDOW',
    'IS_POINTER_FLAG_SET_WPARAM', 'RI_MOUSE_BUTTON_1_DOWN', 'WinHelp',
    'WM_CTLCOLORSCROLLBAR', 'COLOR_BTNTEXT', 'DDL_POSTMSGS', 'IDH_HELP',
    'APPCOMMAND_DWM_FLIP3D', 'DST_ICON', 'CB_LIMITTEXT', 'WMSZ_TOPRIGHT',
    'TOUCHEVENTF_NOCOALESCE', 'SPI_GETSCREENSAVEACTIVE', 'SM_CYMENUCHECK',
    'SM_CXSMSIZE', 'SPI_SETTHREADLOCALINPUTSETTINGS', 'SPI_GETDESKWALLPAPER',
    'GWLP_HWNDPARENT', 'EDS_RAWMODE', 'PostAppMessageA', 'GMDI_GOINTOPOPUPS',
    'RegisterWindowMessage', 'IDI_EXCLAMATION', 'WM_MDITILE', 'DS_SHELLFONT',
    'LB_SETTOPINDEX', 'SPI_SETSNAPTODEFBUTTON', 'WM_SETFONT', 'DlgDirList',
    'SPI_SETFOREGROUNDFLASHCOUNT', 'HELP_PARTIALKEY', 'DFCS_CAPTIONHELP',
    'SPI_GETWAITTOKILLTIMEOUT', 'CONTACTVISUALIZATION_OFF', 'IDANI_CAPTION',
    'RI_MOUSE_LEFT_BUTTON_DOWN', 'SPI_GETLOWPOWERTIMEOUT', 'GID_TWOFINGERTAP',
    'BSF_QUERY', 'EVENT_CONSOLE_UPDATE_REGION', 'WM_PRINTCLIENT', 'RI_KEY_E0',
    'RDW_INVALIDATE', 'WM_INITMENUPOPUP', 'EDGE_ETCHED', 'GCL_HICONSM',
    'CB_ERRSPACE', 'VK_NAVIGATION_DOWN', 'DS_NOFAILCREATE', 'WS_MAXIMIZE',
    'SMTO_ERRORONEXIT', 'KEYEVENTF_SCANCODE', 'LB_SELITEMRANGE', 'RI_KEY_E1',
    'CBN_EDITCHANGE', 'WM_HANDHELDFIRST', 'SMTO_NOTIMEOUTIFNOTHUNG', 'BF_TOP',
    'WS_EX_NOACTIVATE', 'CS_DROPSHADOW', 'DSS_RIGHT', 'DESKTOP_CREATEWINDOW',
    'LBN_SELCHANGE', 'CS_NOCLOSE', 'STATE_SYSTEM_ANIMATED', 'CharUpper',
    'BSF_SENDNOTIFYMESSAGE', 'RDW_UPDATENOW', 'LR_LOADFROMFILE', 'RT_RCDATA',
    'IsCharAlphaNumeric', 'LB_GETLOCALE', 'SW_SHOWNOACTIVATE', 'UIS_CLEAR',
    'BF_DIAGONAL_ENDTOPRIGHT', 'BSM_APPLICATIONS', 'WM_CLIPBOARDUPDATE',
    'MAX_TOUCH_PREDICTION_FILTER_TAPS', 'SPI_SETCLIENTAREAANIMATION',
    'SPI_SETFONTSMOOTHINGCONTRAST', 'STM_GETIMAGE', 'WM_SYSDEADCHAR',
    'ODT_MENU', 'LB_SETLOCALE', 'SS_ETCHEDHORZ', 'GCL_HCURSOR', 'EN_HSCROLL',
    'CreateMDIWindow', 'SPI_GETMOUSECLICKLOCK', 'WM_NCCALCSIZE', 'SM_CYFRAME',
    'APPCOMMAND_CLOSE', 'CDS_FULLSCREEN', 'WM_POINTERDEVICEOUTOFRANGE',
    'BST_UNCHECKED', 'WM_DELETEITEM', 'STATE_SYSTEM_FLOATING', 'WM_CLOSE',
    'DS_SETFONT', 'MB_ICONEXCLAMATION', 'SPI_GETMOUSESONAR', 'BF_BOTTOMLEFT',
    'VK_BROWSER_FAVORITES', 'CreateAcceleratorTable', 'OBM_OLD_REDUCE',
    'MF_HELP', 'ISMEX_NOSEND', 'GetMessage', 'EN_BEFORE_PASTE', 'VK_JUNJA',
    'DCX_LOCKWINDOWUPDATE', 'SWP_NOREDRAW', 'NF_REQUERY', 'DFCS_CAPTIONCLOSE',
    'LBN_SETFOCUS', 'GID_PRESSANDTAP', 'WINEVENT_SKIPOWNTHREAD', 'LoadString',
    'OIC_NOTE', 'POINTER_FLAG_PRIMARY', 'IDH_CANCEL', 'SOUND_SYSTEM_BEEP',
    'USER_TIMER_MINIMUM', 'DOF_DIRECTORY', 'MNS_MODELESS', 'WM_NCMOUSEMOVE',
    'PENVISUALIZATION_TAP', 'wsprintf', 'VK_OEM_FJ_JISHO', 'CW_USEDEFAULT',
    'CF_BITMAP', 'IDCANCEL', 'SM_DIGITIZER', 'SPI_SETGRADIENTCAPTIONS',
    'SPI_SETDOUBLECLKWIDTH', 'SC_MONITORPOWER', 'RegisterClipboardFormat',
    'GCLP_HICONSM', 'OBJID_CARET', 'IS_INTRESOURCE', 'SKF_AVAILABLE',
    'VK_BROWSER_BACK', 'WM_GETDPISCALEDSIZE', 'WINSTA_CREATEDESKTOP',
    'WM_CONTEXTMENU', 'OBJID_NATIVEOM', 'GA_ROOT', 'CB_DELETESTRING',
    'SBM_SETRANGE', 'SM_CYSMICON', 'BSM_INSTALLABLEDRIVERS', 'SS_ICON',
    'POINTER_FLAG_FOURTHBUTTON', 'IDI_WARNING', 'NF_QUERY', 'WM_CREATE',
    'CTLCOLOR_EDIT', 'SM_SYSTEMDOCKED', 'OCR_SIZENS', 'DT_EDITCONTROL',
    'LBS_SORT', 'APPCOMMAND_COPY', 'SLE_MINORERROR', 'WM_COPY', 'MF_GRAYED',
    'PENARBITRATIONTYPE_WIN8', 'PENVISUALIZATION_OFF', 'OBJID_HSCROLL',
    'POINTER_FLAG_CONFIDENCE', 'VK_OEM_NEC_EQUAL', 'SCF_ISSECURE', 'DFCS_HOT',
    'WM_ACTIVATE', 'TOUCHEVENTF_INRANGE', 'SB_LINEUP', 'WM_MOUSEHOVER',
    'MNS_DRAGDROP', 'SKF_LCTLLATCHED', 'HBMMENU_CALLBACK', 'SW_INVALIDATE',
    'SPI_GETMOUSETRAILS', 'HBMMENU_MBAR_CLOSE_D', 'SPI_SETPENVISUALIZATION',
    'RIDI_DEVICENAME', 'DT_CALCRECT', 'SPI_SETMOUSEDRAGOUTTHRESHOLD',
    'GIDC_REMOVAL', 'SPI_SETMENUANIMATION', 'SPI_SETFASTTASKSWITCH', 'IDHELP',
    'GW_HWNDFIRST', 'STATE_SYSTEM_HOTTRACKED', 'LB_SETHORIZONTALEXTENT',
    'CB_SETLOCALE', 'NID_INTEGRATED_PEN', 'CF_DIBV5', 'MKF_LEFTBUTTONSEL',
    'WM_INPUTLANGCHANGEREQUEST', 'SM_RESERVED1', 'PDC_ORIENTATION_270',
    'SM_RESERVED3', 'SM_RESERVED2', 'GetWindowLongPtr', 'BS_AUTORADIOBUTTON',
    'IDH_GENERIC_HELP_BUTTON', 'EVENT_OBJECT_IME_HIDE', 'TPM_VERTICAL',
    'MOUSEEVENTF_LEFTDOWN', 'WM_DRAWCLIPBOARD', 'VK_GAMEPAD_LEFT_SHOULDER',
    'GWFS_INCLUDE_ANCESTORS', 'SSTF_NONE', 'WM_ENTERMENULOOP', 'WS_DLGFRAME',
    'IDHOT_SNAPWINDOW', 'WM_TIMER', 'EVENT_SYSTEM_SWITCHER_APPDROPPED',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN', 'SBS_BOTTOMALIGN',
    'STATE_SYSTEM_ALERT_HIGH', 'PBT_APMRESUMECRITICAL', 'WM_ENTERSIZEMOVE',
    'DISP_CHANGE_BADDUALVIEW', 'ARW_BOTTOMLEFT', 'BSF_LUID', 'WM_SYSKEYDOWN',
    'SSGF_NONE', 'GUI_16BITTASK', 'IS_POINTER_THIRDBUTTON_WPARAM', 'VK_KANA',
    'HELP_FINDER', 'PBT_POWERSETTINGCHANGE', 'WVR_VALIDRECTS', 'RT_PLUGPLAY',
    'GUI_SYSTEMMENUMODE', 'HCBT_SETFOCUS', 'HBMMENU_POPUP_CLOSE', 'OCR_WAIT',
    'IDI_APPLICATION', 'QS_MOUSEBUTTON', 'POINTER_FLAG_CAPTURECHANGED',
    'SPI_SETMOUSEHOVERWIDTH', 'SPI_GETCARETWIDTH', 'COLOR_WINDOW', 'WM_SIZE',
    'WM_UNICHAR', 'COLOR_BACKGROUND', 'FindWindowEx', 'EM_SETMARGINS',
    'EM_LINESCROLL', 'SKF_TRISTATE', 'MFT_SEPARATOR', 'WS_EX_RIGHTSCROLLBAR',
    'SPI_SETNONCLIENTMETRICS', 'SPI_GETMOUSEHOVERHEIGHT', 'WM_COMMNOTIFY',
    'EVENT_OBJECT_SELECTIONREMOVE', 'SPI_GETLOWPOWERACTIVE', 'SIZENORMAL',
    'SPI_SETKEYBOARDPREF', 'PDC_MODE_CENTERED', 'EVENT_OBJECT_DESTROY',
    'VK_OEM_AUTO', 'DFCS_BUTTONRADIO', 'SM_MOUSEPRESENT', 'POINTSTOPOINT',
    'EVENT_OBJECT_DRAGCOMPLETE', 'WM_XBUTTONUP', 'BS_TYPEMASK', 'WM_INPUT',
    'LBS_WANTKEYBOARDINPUT', 'MKF_RIGHTBUTTONSEL', 'TOUCH_HIT_TESTING_CLIENT',
    'WM_ENABLE', 'WM_CTLCOLORMSGBOX', 'SPI_GETMOUSEHOVERWIDTH', 'SM_TABLETPC',
    'SendMessageTimeout', 'EVENT_OBJECT_NAMECHANGE', 'SC_SEPARATOR', 'HTZOOM',
    'WM_NCHITTEST', 'SERKF_AVAILABLE', 'SKF_RALTLOCKED', 'OBM_UPARROWD',
    'SOUND_SYSTEM_QUESTION', 'STATE_SYSTEM_VALID', 'POINTER_MOD_CTRL',
    'MK_LBUTTON', 'SM_CXVSCROLL', 'CB_GETDROPPEDSTATE', 'HTVSCROLL', 'SW_MAX',
    'MSGFLTINFO_ALREADYALLOWED_FORWND', 'MIIM_SUBMENU', 'ODT_BUTTON',
    'CB_GETLBTEXTLEN', 'SM_SLOWMACHINE', 'APPCOMMAND_HELP', 'WM_HELP',
    'EM_ENABLEFEATURE', 'DT_NOFULLWIDTHCHARBREAK', 'MF_CHANGE', 'SC_HOTKEY',
    'STATE_SYSTEM_EXPANDED', 'COLOR_3DHILIGHT', 'VK_ICO_CLEAR', 'OBM_MNARROW',
    'WM_DWMWINDOWMAXIMIZEDCHANGE', 'WM_IME_SETCONTEXT', 'SIF_DISABLENOSCROLL',
    'SSF_INDICATOR', 'GET_MOUSEORKEY_LPARAM', 'DST_PREFIXTEXT', 'BDR_RAISED',
    'ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID', 'EVENT_SYSTEM_END',
    'IDC_APPSTARTING', 'EM_SETWORDBREAKPROC', 'SWP_DRAWFRAME', 'AW_BLEND',
    'INDEXID_CONTAINER', 'MKF_MOUSEKEYSON', 'SM_CYVIRTUALSCREEN', 'VK_NONAME',
    'WM_DWMSENDICONICLIVEPREVIEWBITMAP', 'WINEVENT_INCONTEXT', 'MAKELRESULT',
    'STATE_SYSTEM_READONLY', 'COLOR_MENUTEXT', 'WM_CHANGECBCHAIN', 'DC_ICON',
    'LB_GETSELCOUNT', 'OBJID_VSCROLL', 'GWL_HWNDPARENT', 'WM_NCACTIVATE',
    'WM_DWMCOLORIZATIONCOLORCHANGED', 'MNS_NOCHECK', 'SW_PARENTOPENING',
    'EWX_POWEROFF', 'ODS_SELECTED', 'ESB_DISABLE_RIGHT', 'GCL_HMODULE',
    'EVENT_OBJECT_DESCRIPTIONCHANGE', 'LB_SETTABSTOPS', 'DCX_CLIPCHILDREN',
    'MB_ICONHAND', 'SC_VSCROLL', 'BS_MULTILINE', 'RegisterDeviceNotification',
    'BF_MIDDLE', 'DS_MODALFRAME', 'SOUND_SYSTEM_APPSTART', 'CDS_RESET_EX',
    'SPI_SETDOUBLECLKHEIGHT', 'WM_TABLET_LAST', 'BN_PUSHED', 'SPI_SETICONS',
    'PM_NOREMOVE', 'ODT_LISTBOX', 'SPI_SETCARETBROWSING', 'HC_ACTION',
    'RDW_FRAME', 'TOUCH_FEEDBACK_INDIRECT', 'SPIF_SENDWININICHANGE', 'VK_END',
    'EVENT_SYSTEM_MENUPOPUPSTART', 'DIFFERENCE', 'PDC_REMOVAL', 'PM_NOYIELD',
    'SPI_GETLISTBOXSMOOTHSCROLLING', 'RDW_ALLCHILDREN', 'EVENT_AIA_END',
    'SWP_NOOWNERZORDER', 'HSHELL_REDRAW', 'DT_NOCLIP', 'HTERROR', 'WC_DIALOG',
    'SPI_GETTHREADLOCALINPUTSETTINGS', 'APPCOMMAND_DELETE', 'EnumTaskWindows',
    'CONSOLE_APPLICATION_16BIT', 'OIC_SHIELD', 'CF_UNICODETEXT', 'HC_NOREM',
    'DT_END_ELLIPSIS', 'SPI_GETFONTSMOOTHINGCONTRAST', 'SBS_SIZEGRIP',
    'RI_MOUSE_LEFT_BUTTON_UP', 'LWA_COLORKEY', 'VK_FINAL', 'VK_CAPITAL',
    'VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN', 'LR_COPYDELETEORG', 'EnumPropsEx',
    'SM_REMOTECONTROL', 'DLGC_RADIOBUTTON', 'HELP_CONTENTS', 'OBM_REDUCED',
    'HCF_DEFAULTDESKTOP', 'DFCS_SCROLLCOMBOBOX', 'MDITILE_ZORDER', 'PWR_FAIL',
    'SPI_GETACTIVEWINDOWTRACKING', 'VK_OEM_COPY', 'DT_EXTERNALLEADING',
    'EVENT_SYSTEM_SWITCHER_APPGRABBED', 'SPI_GETFONTSMOOTHINGORIENTATION',
    'MB_ICONMASK', 'EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED', 'SIF_POS',
    'WM_HOTKEY', 'SPI_SETDESKWALLPAPER', 'PostThreadMessage', 'WM_IME_CHAR',
    'SOUND_SYSTEM_FAULT', 'ISMEX_SEND', 'EIMES_GETCOMPSTRATONCE', 'GW_CHILD',
    'BM_SETIMAGE', 'SPI_ICONHORIZONTALSPACING', 'SPI_GETSERIALKEYS', 'FSHIFT',
    'APPCOMMAND_BROWSER_FAVORITES', 'WM_RBUTTONDOWN', 'SPI_SETMOUSESPEED',
    'SPI_SETLOGICALDPIOVERRIDE', 'MB_TYPEMASK', 'MOUSEEVENTF_LEFTUP',
    'TOUCHEVENTF_MOVE', 'WS_MINIMIZEBOX', 'PDC_ORIGIN', 'IDC_PERSON',
    'HCBT_MINMAX', 'BF_BOTTOMRIGHT', 'HSHELL_SYSMENU', 'WINSTA_ALL_ACCESS',
    'APPCOMMAND_MEDIA_CHANNEL_DOWN', 'LBS_NOTIFY', 'WM_INITMENU', 'CF_TIFF',
    'MFS_GRAYED', 'DC_BUTTONS', 'SPI_SETBEEP', 'POINTER_MESSAGE_FLAG_PRIMARY',
    'SIZEZOOMSHOW', 'UNICODE_NOCHAR', 'COLOR_APPWORKSPACE', 'OpenDesktop',
    'WM_GESTURENOTIFY', 'MOUSE_MOVE_ABSOLUTE', 'MB_ICONWARNING', 'MF_SYSMENU',
    'TPM_CENTERALIGN', 'WM_MENURBUTTONUP', 'ESB_DISABLE_LTUP', 'HIDE_WINDOW',
    'HCBT_KEYSKIPPED', 'MFT_RIGHTJUSTIFY', 'AW_VER_NEGATIVE', 'MF_POPUP',
    'BS_RIGHTBUTTON', 'WS_TILEDWINDOW', 'SPI_SETMINIMIZEDMETRICS', 'SW_ERASE',
    'CBN_KILLFOCUS', 'HTBOTTOM', 'GetAltTabInfo', 'CWP_ALL', 'IDI_WINLOGO',
    'HSHELL_WINDOWCREATED', 'PEN_MASK_TILT_X', 'PEN_MASK_TILT_Y', 'OBM_CLOSE',
    'POINTER_FLAG_HASTRANSFORM', 'WM_PENWINLAST', 'TOUCH_FLAG_NONE', 'VK_PA1',
    'MF_SEPARATOR', 'CDS_UPDATEREGISTRY', 'STATE_SYSTEM_ALERT_LOW', 'SetProp',
    'VK_GAMEPAD_MENU', 'SPI_SETFLATMENU', 'WM_POINTERDEVICEINRANGE', 'OCR_NO',
    'SM_MIDEASTENABLED', 'BN_HILITE', 'WS_MINIMIZE', 'DlgDirListComboBox',
    'CS_VREDRAW', 'STN_CLICKED', 'COLOR_SCROLLBAR', 'VK_OEM_FJ_MASSHOU',
    'POINTER_MESSAGE_FLAG_SECONDBUTTON', 'DWL_DLGPROC', 'GMDI_USEDISABLED',
    'CTLCOLOR_STATIC', 'SS_ENHMETAFILE', 'GA_ROOTOWNER', 'EVENT_MAX',
    'CDS_VIDEOPARAMETERS', 'GetRawInputDeviceInfo', 'PENVISUALIZATION_ON',
    'WM_POINTERROUTEDAWAY', 'KLF_SHIFTLOCK', 'WM_IME_KEYLAST', 'ARW_RIGHT',
    'OBM_RESTORE', 'HTCAPTION', 'NID_READY', 'WM_XBUTTONDOWN', 'VK_OEM_4',
    'VK_OEM_5', 'VK_OEM_6', 'VK_OEM_7', 'PMB_ACTIVE', 'VK_OEM_1', 'VK_OEM_2',
    'VK_OEM_3', 'VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT', 'VK_OEM_8', 'CharLower',
    'COLOR_GRAYTEXT', 'STATE_SYSTEM_COLLAPSED', 'LB_GETCURSEL', 'WM_AFXFIRST',
    'SPI_GETMENUFADE', 'TIMERV_COALESCING_MAX', 'DWLP_MSGRESULT', 'VK_LSHIFT',
    'WM_MDIICONARRANGE', 'WS_EX_TOPMOST', 'WM_DWMCOMPOSITIONCHANGED',
    'BN_SETFOCUS', 'POINTER_FLAG_HWHEEL', 'MB_ICONASTERISK', 'PM_QS_PAINT',
    'SPI_GETTOOLTIPANIMATION', 'SPI_GETKEYBOARDCUES', 'VK_KANJI', 'DWLP_USER',
    'SPI_GETFOREGROUNDFLASHCOUNT', 'SPI_GETDISABLEOVERLAPPEDCONTENT',
    'DCX_INTERSECTRGN', 'SPI_GETSPEECHRECOGNITION', 'RT_MANIFEST', 'WM_CHAR',
    'SM_CYDRAG', 'SPI_SETACTIVEWNDTRKTIMEOUT', 'DCX_CACHE', 'DLGC_HASSETSEL',
    'WM_DWMNCRENDERINGCHANGED', 'WM_AFXLAST', 'SPI_GETICONMETRICS', 'SC_ZOOM',
    'FKF_CLICKON', 'GR_USEROBJECTS_PEAK', 'RDW_NOERASE', 'OBM_RESTORED',
    'POINTER_MESSAGE_FLAG_FIFTHBUTTON', 'LB_GETSEL', 'WM_DISPLAYCHANGE',
    'SBS_VERT', 'MB_NOFOCUS', 'DT_CENTER', 'VK_SCROLL', 'SC_ICON',
    'GESTUREVISUALIZATION_RIGHTTAP', 'MF_OWNERDRAW',
    'MIIM_DATA', 'DI_NOMIRROR', 'HSHELL_GETMINRECT', 'CF_PRIVATEFIRST',
    'MKF_RIGHTBUTTONDOWN', 'MB_ICONERROR', 'WS_EX_PALETTEWINDOW', 'DrawState',
    'OBM_OLD_RESTORE', 'ISOLATIONAWARE_MANIFEST_RESOURCE_ID', 'DrawTextEx',
    'CCHDEVICENAME', 'PEN_MASK_NONE', 'APPCOMMAND_FIND', 'GC_ALLGESTURES',
    'PENARBITRATIONTYPE_FIS', 'SSTF_DISPLAY', 'CB_GETDROPPEDCONTROLRECT',
    'POINTER_FLAG_FIFTHBUTTON', 'LB_GETSELITEMS', 'GF_BEGIN', 'WM_NEXTDLGCTL',
    'CB_SETHORIZONTALEXTENT', 'ENUM_CURRENT_SETTINGS', 'SM_CXICON', 'CF_WAVE',
    'SHOW_OPENWINDOW', 'SM_CMONITORS', 'SS_BLACKFRAME', 'MB_MISCMASK',
    'SOUND_SYSTEM_APPEND', 'CBN_SETFOCUS', 'BF_DIAGONAL_ENDBOTTOMLEFT',
    'APPCOMMAND_MEDIA_PAUSE', 'DFC_MENU', 'WM_IME_STARTCOMPOSITION', 'BS_TOP',
    'SM_CYMIN', 'SW_MINIMIZE', 'MOUSEEVENTF_MOVE', 'DC_HASDEFID', 'NFR_ANSI',
    'APPCOMMAND_LAUNCH_MEDIA_SELECT', 'HBMMENU_MBAR_MINIMIZE_D', 'VK_LBUTTON',
    'LB_SETITEMHEIGHT', 'PRF_OWNED', 'FE_FONTSMOOTHINGSTANDARD', 'CS_HREDRAW',
    'ES_PASSWORD', 'DI_DEFAULTSIZE', 'SPI_GETACCESSTIMEOUT', 'CTLCOLOR_MAX',
    'BDR_SUNKENOUTER', 'INPUTLANGCHANGE_BACKWARD', 'CB_GETDROPPEDWIDTH',
    'UOI_USER_SID', 'PRF_NONCLIENT', 'LR_MONOCHROME', 'WM_NEXTMENU', 'VK_F19',
    'TPM_LAYOUTRTL', 'OBM_UPARROWI', 'BS_GROUPBOX', 'OIC_ERROR',
    'SIZEFULLSCREEN', 'VK_OEM_PLUS', 'CharLowerBuff', 'PeekMessage', 'VK_F18',
    'IDI_ERROR', 'VK_EREOF', 'SS_LEFTNOWORDWRAP', 'SC_RESTORE', 'SS_SIMPLE',
    'GET_KEYSTATE_LPARAM', 'CBN_EDITUPDATE', 'TKF_CONFIRMHOTKEY', 'CF_LOCALE',
    'BS_USERBUTTON', 'GESTUREVISUALIZATION_PRESSANDTAP', 'SWP_ASYNCWINDOWPOS',
    'CreateWindowEx', 'IDC_SIZENWSE', 'SPI_SETHUNGAPPTIMEOUT', 'BM_SETCHECK',
    'SMTO_ABORTIFHUNG', 'SPI_GETPENSIDEMOVETHRESHOLD', 'GCL_CBWNDEXTRA',
    'DS_CENTERMOUSE', 'GetMenuItemInfo', 'BF_DIAGONAL_ENDTOPLEFT', 'VK_DOWN',
    'EWX_FORCE', 'EVENT_OBJECT_DEFACTIONCHANGE', 'WM_UPDATEUISTATE', 'VK_F13',
    'EVENT_SYSTEM_IME_KEY_NOTIFICATION', 'RIDEV_DEVNOTIFY', 'LB_RESETCONTENT',
    'GUI_CARETBLINKING', 'LB_SELITEMRANGEEX', 'CB_SHOWDROPDOWN', 'RT_MENU',
    'SPI_SETPOWEROFFTIMEOUT', 'SS_GRAYRECT', 'EVENT_UIA_PROPID_END', 'VK_F12',
    'EWX_BOOTOPTIONS', 'IDI_HAND', 'PBT_APMRESUMESUSPEND', 'SC_MAXIMIZE',
    'SSWF_CUSTOM', 'SW_OTHERUNZOOM', 'CreateDialogIndirectA', 'VK_ICO_HELP',
    'EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED', 'RES_CURSOR', 'WM_QUEUESYNC',
    'SPI_SETGRIDGRANULARITY', 'WS_HSCROLL', 'ARW_HIDE', 'EWX_FORCEIFHUNG',
    'RI_MOUSE_BUTTON_2_DOWN', 'EVENT_OBJECT_LIVEREGIONCHANGED', 'HTTOPLEFT',
    'RI_MOUSE_RIGHT_BUTTON_UP', 'SPI_SETCARETTIMEOUT', 'CB_RESETCONTENT',
    'EDD_GET_DEVICE_INTERFACE_NAME', 'WM_SYSKEYUP', 'BS_RADIOBUTTON',
    'GWLP_HINSTANCE', 'OCR_SIZENWSE', 'IDC_SIZENS', 'EMSIS_COMPOSITIONSTRING',
    'WM_IME_NOTIFY', 'WM_PENWINFIRST', 'SS_WORDELLIPSIS', 'WM_NCCREATE',
    'EVENT_OBJECT_CONTENTSCROLLED', 'CB_GETCURSEL', 'BM_GETSTATE', 'HKL_PREV',
    'APPCOMMAND_MICROPHONE_VOLUME_UP', 'LB_ADDFILE', 'BS_ICON', 'DS_3DLOOK',
    'CALERT_SYSTEM', 'WM_IME_ENDCOMPOSITION', 'PBT_APMPOWERSTATUSCHANGE',
    'BS_DEFPUSHBUTTON', 'ARW_STARTMASK', 'SetClassLongPtrA', 'WM_APPCOMMAND',
    'WM_GETTEXTLENGTH', 'WM_SIZECLIPBOARD', 'LB_GETTEXTLEN', 'CreateWindowW',
    'WM_VSCROLLCLIPBOARD', 'HTHSCROLL', 'BSF_FORCEIFHUNG', 'WM_SETTEXT',
    'IDI_ASTERISK', 'FLASHW_TIMER', 'GetWindowModuleFileName', 'CB_GETLOCALE',
    'DM_REPOSITION', 'WM_WINDOWPOSCHANGED', 'SPI_GETPENVISUALIZATION',
    'MFT_RIGHTORDER', 'DS_SETFOREGROUND', 'GetClassLong', 'STM_SETICON',
    'SBM_GETSCROLLBARINFO', 'HWND_BOTTOM', 'WS_EX_CLIENTEDGE', 'VK_LEFT',
    'HELP_FORCEFILE', 'UOI_NAME', 'SendNotifyMessage', 'ES_LOWERCASE',
    'CB_OKAY', 'SM_CYSIZE', 'OBM_OLD_RGARROW', 'HELPINFO_WINDOW', 'WM_CLEAR',
    'TOUCHEVENTF_UP', 'DLGC_WANTTAB', 'SPI_SETMOUSEVANISH', 'GC_ZOOM',
    'SB_LINEDOWN', 'PENARBITRATIONTYPE_SPT', 'CDS_ENABLE_UNSAFE_MODES',
    'WM_GETMINMAXINFO', 'RIM_TYPEKEYBOARD', 'LB_SETCURSEL', 'WM_GESTURE',
    'SetWindowsHookEx', 'SPI_SETSPEECHRECOGNITION', 'CB_GETHORIZONTALEXTENT',
    'RT_VERSION', 'VK_OEM_PA1', 'VK_OEM_PA3', 'VK_OEM_PA2', 'MFS_DEFAULT',
    'BST_FOCUS', 'SPI_SETPENDRAGOUTTHRESHOLD', 'HELP_WM_HELP', 'EN_SETFOCUS',
    'SPI_SETSCREENSAVETIMEOUT', 'MDITILE_VERTICAL', 'IDTRYAGAIN', 'MF_DELETE',
    'VK_GAMEPAD_LEFT_THUMBSTICK_DOWN', 'SM_CXFRAME', 'SetClassLongPtr',
    'SPI_GETKEYBOARDSPEED', 'SSF_AVAILABLE', 'TME_NONCLIENT', 'DC_GRADIENT',
    'OCR_APPSTARTING', 'IDCLOSE', 'EM_LINEINDEX', 'PWR_CRITICALRESUME',
    'MN_GETHMENU', 'TIMERV_DEFAULT_COALESCING', 'HCF_AVAILABLE', 'VK_F11',
    'WM_MOUSEACTIVATE', 'SM_CMOUSEBUTTONS', 'SPI_GETANIMATION', 'VK_F10',
    'LB_ADDSTRING', 'SPI_GETWINARRANGING', 'VK_F17', 'VK_F16', 'VK_F15',
    'VK_F14', 'SM_CXSIZE', 'TWF_WANTPALM', 'WM_DEVMODECHANGE', 'CTLCOLOR_BTN',
    'SPI_SETANIMATION', 'SM_CXVIRTUALSCREEN', 'LBS_EXTENDEDSEL', 'STM_MSGMAX',
    'MNS_NOTIFYBYPOS', 'SOUND_SYSTEM_STARTUP', 'EVENT_SYSTEM_MENUPOPUPEND',
    'LB_ERRSPACE', 'APPCOMMAND_FORWARD_MAIL', 'SM_STARTER', 'DFCS_MONO',
    'SSTF_BORDER', 'GW_MAX', 'POINTER_MESSAGE_FLAG_CONFIDENCE', 'BS_TEXT',
    'SPI_SETMOUSESIDEMOVETHRESHOLD', 'LLKHF_ALTDOWN', 'WM_MENUCHAR', 'LB_DIR',
    'ASFW_ANY', 'GWL_HINSTANCE', 'MF_HILITE', 'HELPINFO_MENUITEM', 'SC_SIZE',
    'USER_TIMER_MAXIMUM', 'QS_ALLINPUT', 'HELP_COMMAND', 'QS_TOUCH', 'HTLEFT',
    'SM_CXHSCROLL', 'EM_GETTHUMB', 'ODS_NOFOCUSRECT', 'VK_VOLUME_MUTE',
    'FE_FONTSMOOTHINGORIENTATIONBGR', 'LoadBitmap', 'DLGC_STATIC', 'WM_PRINT',
    'EVENT_SYSTEM_SCROLLINGSTART', 'WM_PALETTEISCHANGING', 'SC_NEXTWINDOW',
    'TKF_AVAILABLE', 'SW_NORMAL', 'MFS_HILITE', 'MKF_HOTKEYACTIVE', 'VK_ATTN',
    'SW_SCROLLCHILDREN', 'AW_VER_POSITIVE', 'APPCOMMAND_PRINT', 'VK_ACCEPT',
    'QS_POSTMESSAGE', 'MNGOF_BOTTOMGAP', 'HSHELL_ENDTASK', 'EWX_RESTARTAPPS',
    'EVENT_OBJECT_SELECTIONWITHIN', 'DESKTOP_JOURNALRECORD', 'MK_SHIFT',
    'APPCOMMAND_VOLUME_UP', 'EVENT_SYSTEM_ALERT', 'MIM_MAXHEIGHT', 'VK_EXSEL',
    'VkKeyScanEx', 'LBS_NOREDRAW', 'SPI_SETMENUUNDERLINES', 'SB_LINELEFT',
    'APPCOMMAND_BASS_UP', 'APPCOMMAND_TREBLE_DOWN', 'OIC_INFORMATION',
    'SetDlgItemText', 'CB_FINDSTRINGEXACT', 'CS_PARENTDC', 'VK_CLEAR',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE', 'ARW_DOWN',
    'EVENT_SYSTEM_CONTEXTHELPSTART', 'SC_DEFAULT', 'SBS_TOPALIGN', 'FCONTROL',
    'WB_ISDELIMITER', 'TOUCHINPUTMASKF_TIMEFROMSYSTEM', 'SPI_LANGDRIVER',
    'DFCS_BUTTONPUSH', 'EM_SETLIMITTEXT', 'WM_ERASEBKGND', 'VK_OEM_FINISH',
    'EVENT_CONSOLE_LAYOUT', 'WS_EX_COMPOSITED', 'HC_NOREMOVE', 'WDA_MONITOR',
    'GMMP_USE_HIGH_RESOLUTION_POINTS', 'SPI_SETICONMETRICS', 'WM_NCDESTROY',
    'EN_ERRSPACE', 'EIMES_COMPLETECOMPSTRKILLFOCUS', 'SKF_LWINLATCHED',
    'WS_EX_LEFTSCROLLBAR', 'MB_ICONQUESTION', 'VK_LAUNCH_MEDIA_SELECT',
    'GW_ENABLEDPOPUP', 'SBM_SETRANGEREDRAW', 'CB_FINDSTRING', 'HTGROWBOX',
    'DEVICE_NOTIFY_ALL_INTERFACE_CLASSES', 'WS_CAPTION', 'LB_SETCOUNT',
    'SPI_SETTOGGLEKEYS', 'SPI_SETSERIALKEYS', 'SIF_TRACKPOS', 'SS_GRAYFRAME',
    'IsDialogMessage', 'LLMHF_INJECTED', 'MessageBoxIndirect', 'EM_GETLINE',
    'SPI_GETDEFAULTINPUTLANG', 'LBS_OWNERDRAWFIXED', 'SOUND_SYSTEM_ERROR',
    'SPI_SETDISABLEOVERLAPPEDCONTENT', 'CallMsgFilter', 'ULW_COLORKEY',
    'DFCS_BUTTONRADIOMASK', 'SPI_GETFOCUSBORDERWIDTH', 'CF_SYLK',
    'COLOR_DESKTOP', 'DCX_VALIDATE', 'SS_ELLIPSISMASK', 'WM_QUERYDRAGICON',
    'POINTER_MESSAGE_FLAG_FIRSTBUTTON', 'TPM_VCENTERALIGN', 'SIF_PAGE',
    'SIZE_MAXIMIZED', 'CBN_SELCHANGE', 'ENDSESSION_LOGOFF', 'CSOUND_SYSTEM',
    'SKF_STICKYKEYSON', 'DISP_CHANGE_FAILED', 'MF_STRING',
    'BS_AUTO3STATE', 'SPI_SETSCREENSAVEACTIVE', 'SM_CYSIZEFRAME', 'HTREDUCE',
    'SetWindowLongPtr', 'VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON', 'SSGF_DISPLAY',
    'SPI_SETMOUSEWHEELROUTING', 'LBS_OWNERDRAWVARIABLE', 'SPI_SETWORKAREA',
    'DF_ALLOWOTHERACCOUNTHOOK', 'SPI_GETWHEELSCROLLLINES', 'MIIM_CHECKMARKS',
    'GC_PAN_WITH_INERTIA', 'EnumDisplayDevices', 'APPCOMMAND_REPLY_TO_MAIL',
    'MOUSEEVENTF_ABSOLUTE', 'VK_MBUTTON', 'VK_MODECHANGE', 'WS_EX_RTLREADING',
    'LB_CTLCODE', 'HELP_TCARD_OTHER_CALLER', 'TPM_RIGHTBUTTON', 'BDR_INNER',
    'VK_GAMEPAD_LEFT_THUMBSTICK_LEFT', 'PRF_CHECKVISIBLE', 'DFCS_SCROLLUP',
    'POINTER_FLAG_WHEEL', 'APPCOMMAND_SEND_MAIL', 'WM_GETHOTKEY', 'EM_UNDO',
    'DOF_DOCUMENT', 'SetWindowsHook', 'BN_UNHILITE', 'GC_TWOFINGERTAP',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY', 'WINUSERAPI', 'OBM_DNARROWD',
    'SOUND_SYSTEM_RESTOREUP', 'OBM_DNARROWI', 'OBM_BTNCORNERS', 'OCR_ICOCUR',
    'KLF_REPLACELANG', 'NID_EXTERNAL_TOUCH', 'CB_SETITEMHEIGHT', 'CharNext',
    'HTMAXBUTTON', 'LBS_NOINTEGRALHEIGHT', 'SPI_SETCLEARTYPE', 'COLOR_INFOBK',
    'SM_CYSMCAPTION', 'WM_NCXBUTTONDBLCLK', 'HC_GETNEXT', 'HELP_SETPOPUP_POS',
    'SM_SAMEDISPLAYFORMAT', 'GC_PAN_WITH_GUTTER', 'SPI_SETMENUDROPALIGNMENT',
    'RT_MESSAGETABLE', 'SIZEZOOMHIDE', 'DO_PRINTFILE', 'SPI_SETMOUSE',
    'PENARBITRATIONTYPE_MAX', 'EM_GETLIMITTEXT', 'DFCS_MENUARROW', 'BF_RECT',
    'LB_SETSEL', 'DFCS_CAPTIONMIN', 'EVENT_OBJECT_SELECTION', 'KF_MENUMODE',
    'SPI_SETMOUSECLICKLOCKTIME', 'SPI_GETTOGGLEKEYS', 'SM_CXMAXIMIZED',
    'GF_END', 'HCBT_CLICKSKIPPED', 'MFS_CHECKED', 'ModifyMenu', 'SSWF_TITLE',
    'WM_CTLCOLOREDIT', 'SPI_SETDEFAULTINPUTLANG', 'WTS_SESSION_UNLOCK',
    'PA_NOACTIVATE', 'SS_OWNERDRAW', 'WM_INPUTLANGCHANGE', 'WM_MOUSELAST',
    'HCF_CONFIRMHOTKEY', 'CBS_OWNERDRAWFIXED', 'ALERT_SYSTEM_WARNING',
    'MAKELPARAM', 'APPCOMMAND_MEDIA_PLAY', 'WM_POINTERUP', 'BS_PUSHBOX',
    'DESKTOP_HOOKCONTROL', 'GCL_MENUNAME', 'SM_CYCURSOR', 'IDC_SIZENESW',
    'CF_GDIOBJFIRST', 'PENVISUALIZATION_DOUBLETAP', 'CF_ENHMETAFILE',
    'WM_VKEYTOITEM', 'VK_RBUTTON', 'CB_INSERTSTRING', 'WMSZ_RIGHT', 'CS_IME',
    'STATE_SYSTEM_EXTSELECTABLE', 'SPI_GETMOUSEWHEELROUTING', 'MNC_EXECUTE',
    'WM_NCMOUSEHOVER', 'SPI_SETACCESSTIMEOUT', 'GCLP_HMODULE', 'LB_ERR',
    'TOUCH_FEEDBACK_DEFAULT', 'GWLP_USERDATA', 'VK_GAMEPAD_RIGHT_TRIGGER',
    'DISP_CHANGE_RESTART', 'SM_CXFIXEDFRAME', 'SPIF_UPDATEINIFILE', 'GID_PAN',
    'SSWF_WINDOW', 'WM_NCLBUTTONDBLCLK', 'SM_CYEDGE', 'SPI_GETICONTITLEWRAP',
    'WM_PARENTNOTIFY', 'AW_ACTIVATE', 'SPI_SETCONTACTVISUALIZATION', 'WH_CBT',
    'WM_SPOOLERSTATUS', 'SBS_LEFTALIGN', 'ENDSESSION_CLOSEAPP', 'KLF_RESET',
    'EWX_LOGOFF', 'RIDEV_NOHOTKEYS', 'MF_REMOVE', 'WM_LBUTTONDBLCLK',
    'DDL_EXCLUSIVE', 'CBS_SORT', 'LR_DEFAULTCOLOR',
    'VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT', 'SS_PATHELLIPSIS', 'DT_VCENTER',
    'VK_NAVIGATION_RIGHT', 'SPI_SETKEYBOARDCUES', 'TPM_NOANIMATION', 'HTSIZE',
    'COLOR_BTNFACE', 'SPI_SETMOUSEHOVERHEIGHT', 'MFT_STRING', 'KF_REPEAT',
    'RIDEV_EXINPUTSINK', 'CBS_NOINTEGRALHEIGHT', 'OBM_OLD_UPARROW', 'SW_SHOW',
    'APPCOMMAND_SAVE', 'PrivateExtractIcons', 'BF_BOTTOM', 'TKF_INDICATOR',
    'CB_GETEXTENDEDUI', 'EM_GETWORDBREAKPROC', 'TOUCHEVENTF_DOWN', 'IDC_SIZE',
    'GetClipboardFormatName', 'BF_DIAGONAL_ENDBOTTOMRIGHT', 'VK_LCONTROL',
    'TOUCH_COORD_TO_PIXEL', 'CONTACTVISUALIZATION_ON', 'WM_NCRBUTTONDBLCLK',
    'APPCOMMAND_MEDIA_REWIND', 'EDGE_RAISED', 'TME_CANCEL', 'BS_VCENTER',
    'SPI_SETSCREENSAVERRUNNING', 'SOUND_SYSTEM_MENUCOMMAND', 'LB_GETTEXT',
    'CURSOR_SUPPRESSED', 'WH_CALLWNDPROCRET', 'NID_MULTI_INPUT', 'RIM_INPUT',
    'HCF_HOTKEYACTIVE', 'SC_MINIMIZE', 'UIS_INITIALIZE', 'DFCS_MENUCHECK',
    'SOUND_SYSTEM_MAXIMIZE', 'ODS_FOCUS', 'CBS_SIMPLE', 'APPCOMMAND_REDO',
    'STATE_SYSTEM_MOVEABLE', 'IMAGE_CURSOR', 'WA_ACTIVE', 'HTBOTTOMRIGHT',
    'EVENT_OBJECT_HELPCHANGE', 'OBJID_SYSMENU', 'MONITOR_DEFAULTTOPRIMARY',
    'EVENT_OBJECT_ACCELERATORCHANGE', 'MF_ENABLED', 'WM_CANCELJOURNAL',
    'DT_INTERNAL', 'SKF_RSHIFTLATCHED', 'MOUSE_VIRTUAL_DESKTOP', 'SWP_NOMOVE',
    'EVENT_CONSOLE_START_APPLICATION', 'TKF_HOTKEYACTIVE', 'BM_SETSTYLE',
    'WTS_SESSION_LOGOFF', 'CreateDialog', 'SPI_SETMOUSEHOVERTIME', 'OBM_ZOOM',
    'WTS_SESSION_LOGON', 'CF_DSPBITMAP', 'WS_EX_DLGMODALFRAME', 'ES_READONLY',
    'WS_OVERLAPPED', 'WVR_ALIGNBOTTOM', 'DS_SYSMODAL', 'PA_ACTIVATE',
    'SPI_GETACTIVEWNDTRKZORDER', 'APPCOMMAND_LAUNCH_APP1', 'DT_PATH_ELLIPSIS',
    'APPCOMMAND_LAUNCH_APP2', 'EVENT_SYSTEM_MENUEND', 'SM_CYFIXEDFRAME',
    'TOUCH_MASK_CONTACTAREA', 'SBM_ENABLE_ARROWS', 'SM_NETWORK', 'IDANI_OPEN',
    'DOF_EXECUTABLE', 'SWP_NOREPOSITION', 'STN_DISABLE', 'LoadIcon', 'CB_DIR',
    'RT_FONTDIR', 'WM_MOVE', 'CURSOR_SHOWING', 'GetWindowLongPtrW', 'SB_LEFT',
    'SBS_SIZEBOXBOTTOMRIGHTALIGN', 'VK_DECIMAL', 'GetWindowLongPtrA',
    'MND_CONTINUE', 'ODT_COMBOBOX', 'STATE_SYSTEM_MULTISELECTABLE', 'VK_RWIN',
    'OBM_LFARROWD', 'VK_LMENU', 'OBM_LFARROWI', 'WDA_NONE', 'MB_ICONSTOP',
    'METRICS_USEDEFAULT', 'EVENT_SYSTEM_MENUSTART', 'ChangeDisplaySettingsEx',
    'SPI_GETMOUSEKEYS', 'EnumDisplaySettingsEx', 'WM_HSCROLLCLIPBOARD',
    'HCF_HIGHCONTRASTON', 'EVENT_SYSTEM_FOREGROUND', 'WM_CHANGEUISTATE',
    'SPI_SETACTIVEWINDOWTRACKING', 'SPI_GETMOUSEDOCKTHRESHOLD', 'AW_SLIDE',
    'EVENT_OBJECT_VALUECHANGE', 'WM_SETHOTKEY', 'HELP_CONTEXTPOPUP', 'RAWHID',
    'MA_NOACTIVATE', 'EN_ALIGN_LTR_EC', 'WM_SETCURSOR', 'SPI_SETSOUNDSENTRY',
    'GCF_INCLUDE_ANCESTORS', 'DFCS_ADJUSTRECT', 'WM_SETREDRAW', 'DSS_NORMAL',
    'RIDI_DEVICEINFO', 'DESKTOP_READOBJECTS', 'WM_MDIDESTROY', 'OBM_BTSIZE',
    'WM_MDICASCADE', 'MNS_AUTODISMISS', 'WM_MDIREFRESHMENU', 'TPM_WORKAREA',
    'MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID', 'EVENT_CONSOLE_END', 'SS_SUNKEN',
    'WMSZ_BOTTOMRIGHT', 'MSGFLT_ADD', 'SPI_GETMENUSHOWDELAY', 'MB_DEFBUTTON2',
    'DFCS_BUTTONRADIOIMAGE', 'MSGFLTINFO_NONE', 'MB_DEFBUTTON3', 'BDR_OUTER',
    'MB_DEFBUTTON1', 'WS_OVERLAPPEDWINDOW', 'DISP_CHANGE_BADMODE', 'IDC_WAIT',
    'VK_BROWSER_REFRESH', 'TPM_VERPOSANIMATION', 'STATE_SYSTEM_INDETERMINATE',
    'WM_VSCROLL', 'SPI_GETBEEP', 'EN_VSCROLL', 'SERKF_INDICATOR', 'QS_HOTKEY',
    'SWP_NOSIZE', 'PBT_APMSUSPEND', 'LB_INITSTORAGE', 'TPM_RECURSE', 'PINPUT',
    'SPI_SETPOWEROFFACTIVE', 'GESTUREVISUALIZATION_PRESSANDHOLD', 'VK_RIGHT',
    'SPI_GETACTIVEWNDTRKTIMEOUT', 'HTSIZELAST', 'PDC_MODE_DEFAULT', 'BF_SOFT',
    'SS_ETCHEDVERT', 'SPI_SETMENURECT', 'SWP_SHOWWINDOW', 'SM_SWAPBUTTON',
    'SM_DEBUG', 'SM_CYSMSIZE', 'OCR_ICON', 'HWND_DESKTOP', 'IDC_SIZEALL',
    'SKF_INDICATOR', 'RIDEV_CAPTUREMOUSE', 'EM_SETPASSWORDCHAR', 'OemToChar',
    'CharToOem', 'GetWindowLong', 'EVENT_SYSTEM_DESKTOPSWITCH', 'WM_GETFONT',
    'DM_SETDEFID', 'NFR_UNICODE', 'OIC_WINLOGO', 'SM_CYICONSPACING',
    'TPM_VERNEGANIMATION', 'LB_ITEMFROMPOINT', 'SPI_SETFONTSMOOTHINGTYPE',
    'POINTER_FLAG_FIRSTBUTTON', 'SM_CYICON', 'BN_DOUBLECLICKED', 'WM_NCPAINT',
    'STATE_SYSTEM_MIXED', 'VK_MEDIA_PLAY_PAUSE', 'SIZE_MAXHIDE', 'LBS_NODATA',
    'WTS_CONSOLE_DISCONNECT', 'MSGF_SCROLLBAR', 'FLASHW_TIMERNOFG', 'BF_MONO',
    'GCLP_WNDPROC', 'IDI_SHIELD', 'WH_MINHOOK', 'CTLCOLOR_MSGBOX', 'WS_TILED',
    'QS_MOUSEMOVE', 'VK_GAMEPAD_RIGHT_SHOULDER', 'SPI_GETSHOWSOUNDS',
    'MFS_DISABLED', 'CreateDialogParam', 'EVENT_OBJECT_SHOW', 'MSGF_USER',
    'MIN_LOGICALDPIOVERRIDE', 'SS_NOTIFY', 'POINTER_MESSAGE_FLAG_INRANGE',
    'ChangeMenu', 'EVENT_OEM_DEFINED_END', 'VK_NAVIGATION_MENU', 'GCL_HICON',
    'APPCOMMAND_MICROPHONE_VOLUME_DOWN', 'EVENT_UIA_PROPID_START', 'CharPrev',
    'EVENT_OBJECT_PARENTCHANGE', 'LBS_USETABSTOPS', 'IMAGE_BITMAP', 'GetProp',
    'CBN_DBLCLK', 'RI_MOUSE_BUTTON_2_UP', 'SendMessageCallback', 'LBN_DBLCLK',
    'SM_CXHTHUMB', 'MAPVK_VK_TO_VSC_EX', 'MOUSEEVENTF_RIGHTUP', 'GR_GLOBAL',
    'SPI_SETDRAGFULLWINDOWS', 'WS_EX_NOINHERITLAYOUT', 'WM_TOUCHHITTESTING',
    'SS_WHITEFRAME', 'SW_FORCEMINIMIZE', 'DS_NOIDLEMSG', 'WM_DPICHANGED',
    'DCX_CLIPSIBLINGS', 'CWP_SKIPINVISIBLE', 'WINSTA_WRITEATTRIBUTES',
    'SM_XVIRTUALSCREEN', 'RegisterClass', 'ES_UPPERCASE', 'SM_CMETRICS',
    'LB_MSGMAX', 'TPM_HORNEGANIMATION', 'DLGC_BUTTON', 'WM_QUERYENDSESSION',
    'DM_POINTERHITTEST', 'WM_LBUTTONDOWN', 'DefMDIChildProc', 'SC_KEYMENU',
    'HBMMENU_MBAR_CLOSE', 'STATE_SYSTEM_ALERT_MEDIUM', 'EVENT_AIA_START',
    'PBT_APMQUERYSTANDBYFAILED', 'GetMenuString', 'DT_PREFIXONLY', 'FVIRTKEY',
    'WM_MDIGETACTIVE', 'COLOR_BTNSHADOW', 'DT_NOPREFIX', 'CB_SETCURSEL',
    'SHOW_FULLSCREEN', 'VK_DELETE', 'DFCS_BUTTONCHECK', 'EM_GETHANDLE',
    'CS_GLOBALCLASS', 'CreateDialogIndirectParam', 'WS_POPUPWINDOW', 'IsMenu',
    'ULW_OPAQUE', 'HTSIZEFIRST', 'LB_GETLISTBOXINFO', 'DDL_READWRITE',
    'EVENT_SYSTEM_SWITCHER_APPOVERTARGET', 'CF_DSPMETAFILEPICT', 'WS_VISIBLE',
    'GetWindowTask', 'SPI_SETWHEELSCROLLLINES', 'WM_POINTERENTER', 'VK_RMENU',
    'WM_USERCHANGED', 'IsCharLower', 'WM_POINTERACTIVATE', 'LSFW_UNLOCK',
    'ODS_DEFAULT', 'FKF_HOTKEYACTIVE', 'OBJID_CLIENT', 'ODS_HOTLIGHT',
    'PBT_APMRESUMESTANDBY', 'MKF_MOUSEMODE', 'COLOR_3DHIGHLIGHT', 'SIF_RANGE',
    'SW_OTHERZOOM', 'SPI_SETBLOCKSENDINPUTRESETS', 'SIZEICONIC', 'ES_RIGHT',
    'POINTER_FLAG_DOWN', 'SM_CYHSCROLL', 'MIM_APPLYTOSUBMENUS', 'SendMessage',
    'BSF_RETURNHDESK', 'EVENT_OBJECT_DRAGDROPPED', 'VK_BROWSER_SEARCH',
    'ICON_SMALL2', 'SPI_SETMENUSHOWDELAY', 'CB_SETITEMDATA', 'WM_PASTE',
    'APPCOMMAND_PASTE', 'LB_SETCOLUMNWIDTH', 'DISP_CHANGE_SUCCESSFUL',
    'WM_ICONERASEBKGND', 'SM_RESERVED4', 'MOUSEEVENTF_MOVE_NOCOALESCE',
    'TME_HOVER', 'CB_INITSTORAGE', 'SPI_SETLANGTOGGLE', 'LB_GETCOUNT',
    'CDS_RESET', 'UOI_TIMERPROC_EXCEPTION_SUPPRESSION', 'CBN_ERRSPACE',
    'ES_AUTOVSCROLL', 'SKF_RWINLATCHED', 'CWF_CREATE_ONLY', 'VK_CONTROL',
    'STATE_SYSTEM_BUSY', 'CF_PENDATA', 'RT_GROUP_CURSOR', 'HTOBJECT',
    'MAPVK_VSC_TO_VK_EX', 'KL_NAMELENGTH', 'POINTER_FLAG_UP', 'ICON_SMALL',
    'SPI_SETWHEELSCROLLCHARS', 'MB_MODEMASK', 'SPI_GETMOUSEDRAGOUTTHRESHOLD',
    'SM_SHOWSOUNDS', 'GW_OWNER', 'MF_UNHILITE', 'INPUT_KEYBOARD', 'CF_HDROP',
    'QS_ALLPOSTMESSAGE', 'MAX_STR_BLOCKREASON', 'CB_SETEXTENDEDUI', 'WM_USER',
    'SWP_NOZORDER', 'SM_CYMENU', 'EnumProps', 'DSS_UNION', 'EN_KILLFOCUS',
    'WTS_SESSION_CREATE', 'ESB_DISABLE_BOTH', 'SMTO_NORMAL', 'EN_MAXTEXT',
    'KLF_SETFORPROCESS', 'APPCOMMAND_BASS_DOWN', 'DFCS_CHECKED', 'WM_MDINEXT',
    'EVENT_OBJECT_DRAGSTART', 'SM_CARETBLINKINGENABLED', 'ES_WANTRETURN',
    'WS_EX_TRANSPARENT', 'SPI_GETGRADIENTCAPTIONS', 'IDTIMEOUT', 'AppendMenu',
    'LLKHF_LOWER_IL_INJECTED', 'CB_GETLBTEXT', 'WA_INACTIVE', 'GCLP_HCURSOR',
    'SM_MEDIACENTER', 'WS_EX_TOOLWINDOW', 'WS_MAXIMIZEBOX', 'MFS_ENABLED',
    'SPI_GETCARETTIMEOUT', 'RI_MOUSE_RIGHT_BUTTON_DOWN', 'QS_ALLEVENTS',
    'SPI_SETMOUSEBUTTONSWAP', 'WM_SETFOCUS', 'CBS_UPPERCASE', 'RT_GROUP_ICON',
    'SetWindowLongPtrW', 'DFCS_FLAT', 'SSTF_CHARS', 'WH_DEBUG', 'BM_GETCHECK',
    'SOUND_SYSTEM_RESTOREDOWN', 'SetWindowLongPtrA', 'VK_GAMEPAD_DPAD_RIGHT',
    'TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX', 'APPCOMMAND_OPEN',
    'WM_POINTERROUTEDRELEASED', 'BDR_SUNKEN', 'ODS_NOACCEL', 'ULW_ALPHA',
    'STATE_SYSTEM_SIZEABLE', 'IsCharUpper', 'MIIM_STATE', 'GWL_STYLE',
    'MA_NOACTIVATEANDEAT', 'MFT_OWNERDRAW', 'BN_DISABLE', 'WH_GETMESSAGE',
    'MKF_LEFTBUTTONDOWN', 'SPI_SETMOUSEDOCKTHRESHOLD', 'CB_ADDSTRING',
    'HELP_TCARD', 'SBS_RIGHTALIGN', 'MKF_CONFIRMHOTKEY', 'SW_PARENTCLOSING',
    'HOVER_DEFAULT', 'PEN_MASK_ROTATION', 'VK_OEM_ENLW', 'SBM_SETPOS',
    'SW_SHOWMINNOACTIVE', 'MSGFLT_DISALLOW', 'OBM_CHECKBOXES', 'SC_MOVE',
    'MB_ABORTRETRYIGNORE', 'MOUSEEVENTF_XDOWN', 'WM_QUERYNEWPALETTE',
    'SPI_GETTOUCHPREDICTIONPARAMETERS', 'WM_DEADCHAR', 'WM_MENUGETOBJECT',
    'CF_PALETTE', 'PRF_ERASEBKGND', 'SC_CONTEXTHELP', 'GWLP_WNDPROC',
    'WM_EXITMENULOOP', 'WM_POWER', 'DLGC_WANTCHARS', 'WS_CHILDWINDOW',
    'EVENT_SYSTEM_ARRANGMENTPREVIEW', 'DLGWINDOWEXTRA', 'SB_BOTTOM',
    'DESKTOP_SWITCHDESKTOP', 'SPI_SETWAITTOKILLTIMEOUT', 'WM_IME_COMPOSITION',
    'DO_DROPFILE', 'FAPPCOMMAND_MOUSE', 'VK_MEDIA_PREV_TRACK', 'DT_WORDBREAK',
    'SPI_SETMESSAGEDURATION', 'SS_CENTERIMAGE', 'WM_IME_CONTROL', 'SBS_HORZ',
    'HTTOPRIGHT', 'WH_FOREGROUNDIDLE', 'COLOR_HIGHLIGHTTEXT', 'MK_XBUTTON1',
    'SPI_SETCARETWIDTH', 'MK_XBUTTON2', 'CDS_DISABLE_UNSAFE_MODES', 'BF_LEFT',
    'EWX_HYBRID_SHUTDOWN', 'WS_EX_CONTROLPARENT', 'GR_GDIOBJECTS_PEAK',
    'SS_RIGHTJUST', 'EVENT_OEM_DEFINED_START', 'SPI_SETFONTSMOOTHING',
    'OBJID_SOUND', 'DefWindowProc', 'MKF_AVAILABLE', 'SPI_GETSELECTIONFADE',
    'WM_WTSSESSION_CHANGE', 'EN_ALIGN_RTL_EC', 'CF_GDIOBJLAST', 'BSM_VXDS',
    'IMAGE_ENHMETAFILE', 'SM_CYMAXIMIZED', 'MB_SYSTEMMODAL', 'OBM_COMBO',
    'ENUM_REGISTRY_SETTINGS', 'DOF_MULTIPLE', 'INPUT_MESSAGE_ORIGIN_ID',
    'FEEDBACK_TYPE', 'DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS', 'PHANDEDNESS',
    'DIALOG_DPI_CHANGE_BEHAVIORS', 'POINTER_DEVICE_CURSOR_TYPE', 'AR_STATE',
    'tagPOINTER_DEVICE_TYPE', 'tagINPUT_MESSAGE_ORIGIN_ID', 'PAR_STATE',
    'tagPOINTER_BUTTON_CHANGE_TYPE', 'tagPOINTER_INPUT_TYPE', 'HANDEDNESS',
    'tagFEEDBACK_TYPE', 'tagPOINTER_DEVICE_CURSOR_TYPE', 'tagAR_STATE',
    'INPUT_MESSAGE_DEVICE_TYPE', 'POINTER_BUTTON_CHANGE_TYPE', 'LPFILTERKEYS',
    'tagINPUT_MESSAGE_DEVICE_TYPE', 'ORIENTATION_PREFERENCE', 'tagHANDEDNESS',
    'EDIT_CONTROL_FEATURE', 'POINTER_DEVICE_TYPE', 'tagGESTUREINFO',
    'tagMSLLHOOKSTRUCT', 'tagRID_DEVICE_INFO_HID', 'PCURSORINFO', 'EVENTMSG',
    'tagTPMPARAMS', 'PMENUBARINFO', 'LPCBTACTIVATESTRUCT', 'tagDROPSTRUCT',
    'NPCWPRETSTRUCT', 'DRAWITEMSTRUCT', 'HARDWAREHOOKSTRUCT', 'LPACCEL',
    'NPWNDCLASSA', 'NPDEBUGHOOKINFO', 'tagMOUSEINPUT', 'LPMSG',
    'TOUCH_HIT_TESTING_PROXIMITY_EVALUATION', 'NPWNDCLASSW', 'tagINPUT',
    'PRID_DEVICE_INFO_KEYBOARD', 'tagACCESSTIMEOUT', 'RAWINPUTHEADER',
    'tagMDICREATESTRUCTW', 'LPDEBUGHOOKINFO', 'KBDLLHOOKSTRUCT',
    'MSLLHOOKSTRUCT', 'tagWINDOWPOS', 'WTSSESSION_NOTIFICATION', 'MENUINFO',
    'LPCURSORINFO', 'tagMINIMIZEDMETRICS', 'PDEBUGHOOKINFO', 'HELPWININFOW',
    'tagMOUSEHOOKSTRUCT', 'CURSORSHAPE', 'LPHARDWAREHOOKSTRUCT',
    'tagGESTURECONFIG', 'tagRID_DEVICE_INFO', 'MDINEXTMENU', 'HELPWININFOA',
    'LASTINPUTINFO', 'LPHELPWININFOW', 'PHELPWININFOA', 'PMSLLHOOKSTRUCT',
    'MOUSEMOVEPOINT', 'PRID_DEVICE_INFO_HID', 'PSCROLLBARINFO', 'tagRAWMOUSE',
    'LPHARDWAREINPUT', 'tagCLIENTCREATESTRUCT', 'PDRAWITEMSTRUCT',
    'LPHELPWININFOA', 'PHELPWININFOW', 'LPDRAWTEXTPARAMS', 'PMOUSEINPUT',
    'tagTITLEBARINFOEX', 'POINTER_DEVICE_PROPERTY', 'tagPOINTER_TOUCH_INFO',
    'tagPOINTER_INFO', 'PPOINTER_TYPE_INFO', 'LPMOUSEINPUT', 'TOUCHINPUT',
    'LPICONMETRICSW', 'LPHIGHCONTRASTA', 'RAWINPUTDEVICELIST', 'PMDINEXTMENU',
    'LPICONMETRICSA', 'INPUT_TRANSFORM', 'tagPOINTER_DEVICE_CURSOR_INFO',
    'LPHIGHCONTRASTW', 'LPRAWINPUTHEADER', 'AUDIODESCRIPTION', 'LPTOGGLEKEYS',
    'tagSOUNDSENTRYA', 'tagANIMATIONINFO', 'tagSOUNDSENTRYW', 'PCWPSTRUCT',
    'PMINIMIZEDMETRICS', 'MOUSEHOOKSTRUCTEX', 'SHELLHOOKINFO', 'FILTERKEYS',
    'PGESTURECONFIG', 'LPMSGBOXPARAMSA', 'LPANIMATIONINFO', 'LPMSGBOXPARAMSW',
    'tagUSAGE_PROPERTIES', 'GESTURECONFIG', 'TPMPARAMS', 'STYLESTRUCT',
    'PLASTINPUTINFO', 'tagMDINEXTMENU', 'LPSCROLLINFO', 'tagHELPINFO',
    'PFLASHWINFO', 'LPMOUSEMOVEPOINT', 'tagHIGHCONTRASTW', 'SERIALKEYSA',
    'tagMOUSEKEYS', 'WINDOWPLACEMENT', 'tagTOUCHINPUT', 'NPCWPSTRUCT',
    'SERIALKEYSW', 'PBSMINFO', 'tagHIGHCONTRASTA', 'LPRID_DEVICE_INFO',
    'PMULTIKEYHELPW', 'ANIMATIONINFO', 'HARDWAREINPUT', 'tagMENUBARINFO',
    'tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION', 'LPCREATESTRUCTW', 'PRAWHID',
    'PCWPRETSTRUCT', 'PGUITHREADINFO', 'LPCREATESTRUCTA', 'LPEVENTMSGMSG',
    'tagWNDCLASSEXW', 'tagWNDCLASSEXA', 'PCOMPAREITEMSTRUCT', 'RAWINPUT',
    'LPWINDOWPOS', 'ACCESSTIMEOUT', 'DELETEITEMSTRUCT', 'POINTER_TOUCH_INFO',
    'PINPUT_INJECTION_VALUE', 'tagHELPWININFOA', 'LPCURSORSHAPE',
    'NONCLIENTMETRICSA', 'tagICONMETRICSW', 'tagWINDOWINFO', 'SOUNDSENTRYW',
    'tagICONMETRICSA', 'NONCLIENTMETRICSW', 'PMOUSEHOOKSTRUCT', 'RAWKEYBOARD',
    'PMOUSEHOOKSTRUCTEX', 'tagMDICREATESTRUCTA', 'PRAWKEYBOARD', 'PRAWINPUT',
    'tagCOMPAREITEMSTRUCT', 'SOUNDSENTRYA', 'USEROBJECTFLAGS', 'STICKYKEYS',
    'tagINPUT_INJECTION_VALUE', 'tagMENUITEMINFOA', 'tagINPUT_TRANSFORM',
    'LPPAINTSTRUCT', 'tagRAWINPUTHEADER', 'tagDRAWTEXTPARAMS', 'TOGGLEKEYS',
    'PUSEROBJECTFLAGS', 'PRAWINPUTDEVICELIST', 'MENUITEMINFOW', 'PWINDOWINFO',
    'MENUITEMINFOA', 'tagNCCALCSIZE_PARAMS', 'NPEVENTMSGMSG', 'tagACCEL',
    'PNONCLIENTMETRICSW', 'tagRID_DEVICE_INFO_MOUSE', 'PNONCLIENTMETRICSA',
    'MENUITEMTEMPLATEHEADER', 'tagCURSORSHAPE', 'tagMENUGETOBJECTINFO',
    'MULTIKEYHELPW', 'PMULTIKEYHELPA', 'tagMSGBOXPARAMSA', 'tagMONITORINFO',
    'PCOMBOBOXINFO', 'tagMSGBOXPARAMSW', 'PEVENTMSGMSG', 'tagSTICKYKEYS',
    'DEBUGHOOKINFO', 'PTITLEBARINFO', 'tagTouchPredictionParameters',
    'tagHELPWININFOW', 'INPUT_INJECTION_VALUE', 'tagGUITHREADINFO', 'BSMINFO',
    'PPOWERBROADCAST_SETTING', 'SCROLLBARINFO', 'NPWNDCLASSEXW',
    'tagPOINTER_TYPE_INFO', 'LPRAWMOUSE', 'PWTSSESSION_NOTIFICATION',
    'COPYDATASTRUCT', 'NPWNDCLASSEXA', 'CLIENTCREATESTRUCT', 'RAWMOUSE',
    'tagCURSORINFO', 'tagMENUINFO', 'tagKEYBDINPUT', 'USAGE_PROPERTIES',
    'PHARDWAREINPUT', 'PGESTURENOTIFYSTRUCT', 'LPCWPRETSTRUCT', 'DLGPROC',
    'MENUBARINFO', 'LPMENUBARINFO', 'LPMOUSEKEYS', 'LPRAWINPUT', 'FLASHWINFO',
    'PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION', 'tagSTYLESTRUCT', 'MOUSEINPUT',
    'PDELETEITEMSTRUCT', 'LPMONITORINFO', 'LPSCROLLBARINFO', 'MOUSEKEYS',
    'MONITORINFOEXW', 'RID_DEVICE_INFO_MOUSE', 'PMSGBOXPARAMSW', 'LPEVENTMSG',
    'LPSERIALKEYSA', 'LPTRACKMOUSEEVENT', 'PMSGBOXPARAMSA', 'MONITORINFOEXA',
    'tagCBTACTIVATESTRUCT', 'MDICREATESTRUCTW', 'tagRAWINPUT', 'PAINTSTRUCT',
    'tagWTSSESSION_NOTIFICATION', 'LPRAWINPUTDEVICE', 'GESTUREINFO',
    'LPACCESSTIMEOUT', 'TRACKMOUSEEVENT', 'PMOUSEMOVEPOINT', 'LPWINDOWINFO',
    'tagDRAWITEMSTRUCT', 'LPGUITHREADINFO', 'tagMOUSEHOOKSTRUCTEX',
    'tagKBDLLHOOKSTRUCT', 'PALTTABINFO', 'LPHELPINFO', 'MENUITEMTEMPLATE',
    'MSGBOXPARAMSA', 'tagCOPYDATASTRUCT', 'MSGBOXPARAMSW', 'tagFILTERKEYS',
    '_ICONINFOEXW', 'tagALTTABINFO', 'DLGITEMTEMPLATE', '_ICONINFOEXA',
    'NPPAINTSTRUCT', 'LPCOMBOBOXINFO', 'LPMINIMIZEDMETRICS', 'DRAWTEXTPARAMS',
    'PRID_DEVICE_INFO', 'PTOUCHINPUT', 'LPKBDLLHOOKSTRUCT', 'PKEYBDINPUT',
    'RID_DEVICE_INFO_KEYBOARD', 'LPMULTIKEYHELPW', 'tagCWPSTRUCT', 'HELPINFO',
    'tagUPDATELAYEREDWINDOWINFO', 'PTOUCHPREDICTIONPARAMETERS', 'tagRAWHID',
    'LPMULTIKEYHELPA', 'GESTURENOTIFYSTRUCT', 'LPMENUITEMINFOA',
    'MENUGETOBJECTINFO', 'tagMEASUREITEMSTRUCT', 'PHARDWAREHOOKSTRUCT',
    'LPCLIENTCREATESTRUCT', 'PTITLEBARINFOEX', 'PRAWINPUTDEVICE', 'tagNMHDR',
    'LPMENUINFO', 'PGESTUREINFO', 'tagRAWINPUTDEVICELIST', 'PDROPSTRUCT',
    'POINTER_DEVICE_INFO', 'LPMEASUREITEMSTRUCT', 'PCHANGEFILTERSTRUCT',
    'UPDATELAYEREDWINDOWINFO', 'COMBOBOXINFO', 'POINTER_PEN_INFO', 'LPRAWHID',
    'PMENUITEMTEMPLATEHEADER', 'LPSTICKYKEYS', 'tagSCROLLBARINFO', 'ICONINFO',
    'LPKEYBDINPUT', 'LPMOUSEHOOKSTRUCT', 'HIGHCONTRASTA', 'WNDCLASSW',
    'tagCWPRETSTRUCT', 'tagCHANGEFILTERSTRUCT', 'MEASUREITEMSTRUCT',
    'tagTOUCH_HIT_TESTING_INPUT', 'PUSAGE_PROPERTIES', 'PRAWINPUTHEADER',
    'WNDCLASSA', 'tagMOUSEMOVEPOINT', 'LPMDICREATESTRUCTA', 'MINMAXINFO',
    'POINTER_TYPE_INFO', 'LPAUDIODESCRIPTION', 'LPMDICREATESTRUCTW',
    'tagCBT_CREATEWNDA', 'tagSERIALKEYSW', 'PMENUGETOBJECTINFO', 'KEYBDINPUT',
    'tagRID_DEVICE_INFO_KEYBOARD', 'tagCBT_CREATEWNDW', 'tagAUDIODESCRIPTION',
    'tagSERIALKEYSA', 'tagHARDWAREINPUT', 'LPMSLLHOOKSTRUCT', 'WINDOWPOS',
    'PICONINFOEXW', 'LPDRAWITEMSTRUCT', 'PICONINFOEXA', 'LPDROPSTRUCT',
    'LPDELETEITEMSTRUCT', 'tagPAINTSTRUCT', 'CHANGEFILTERSTRUCT',
    'tagEVENTMSG', 'MINIMIZEDMETRICS', 'ICONINFOEXA', 'LPNCCALCSIZE_PARAMS',
    'DLGTEMPLATE', 'tagHARDWAREHOOKSTRUCT', 'ICONINFOEXW', 'CWPSTRUCT',
    'POWERBROADCAST_SETTING', 'CURSORINFO', 'tagPOINTER_DEVICE_PROPERTY',
    'PICONMETRICSW', 'tagNONCLIENTMETRICSW', 'LPMENUITEMINFOW',
    'CBTACTIVATESTRUCT', 'PMENUITEMTEMPLATE', 'tagNONCLIENTMETRICSA',
    'PICONMETRICSA', 'GUITHREADINFO', 'LPINPUT', 'HIGHCONTRASTW',
    'tagMULTIKEYHELPW', 'PWNDCLASSA', 'tagCOMBOBOXINFO', 'PWNDCLASSW',
    'tagMULTIKEYHELPA', 'DROPSTRUCT', 'TOUCHPREDICTIONPARAMETERS', 'WNDCLASS',
    'PUPDATELAYEREDWINDOWINFO', 'tagTITLEBARINFO', 'tagTRACKMOUSEEVENT',
    'POINTER_DEVICE_CURSOR_INFO', 'CREATESTRUCTA', 'tagWNDCLASSA',
    'tagPOINTER_PEN_INFO', 'tagWNDCLASSW', 'CREATESTRUCTW', 'LPSOUNDSENTRYA',
    'tagMENUITEMINFOW', 'LPCOMPAREITEMSTRUCT', 'LPSOUNDSENTRYW',
    'PRID_DEVICE_INFO_MOUSE', 'tagCREATESTRUCTA', 'WNDCLASSEXA', 'SCROLLINFO',
    'LPSTYLESTRUCT', 'WNDCLASSEXW', 'tagCREATESTRUCTW', 'tagDEBUGHOOKINFO',
    'PWNDCLASSEXW', 'tagLASTINPUTINFO', 'LPMONITORINFOEXA', 'LPRAWKEYBOARD',
    'PWNDCLASSEXA', 'PKBDLLHOOKSTRUCT', 'tagGESTURENOTIFYSTRUCT', '_ICONINFO',
    'LPMONITORINFOEXW', 'NPMSG', 'TITLEBARINFOEX', 'LPMOUSEHOOKSTRUCTEX',
    'MDICREATESTRUCTA', 'tagWINDOWPLACEMENT', 'LPMDINEXTMENU',
    'PMEASUREITEMSTRUCT', 'tagRAWINPUTDEVICE', 'LPTITLEBARINFO',
    'RID_DEVICE_INFO_HID', 'tagTOGGLEKEYS', 'LPTITLEBARINFOEX', 'ALTTABINFO',
    'tagSCROLLINFO', 'ICONMETRICSA', 'MULTIKEYHELPA', 'LPCWPSTRUCT',
    'ICONMETRICSW', 'RID_DEVICE_INFO', 'CWPRETSTRUCT', 'PWINDOWPOS',
    'tagPOINTER_DEVICE_INFO', 'MONITORINFO', 'COMPAREITEMSTRUCT', 'PRAWMOUSE',
    'WINDOWINFO', 'LPSERIALKEYSW', 'tagMONITORINFOEXW', 'LPWNDCLASSW',
    'TOUCH_HIT_TESTING_INPUT', 'MOUSEHOOKSTRUCT', 'CBT_CREATEWNDA', 'LPNMHDR',
    'LPWNDCLASSA', 'CBT_CREATEWNDW', 'tagDELETEITEMSTRUCT', 'PMINMAXINFO',
    'LPCBT_CREATEWNDW', 'LPSHELLHOOKINFO', 'LPCBT_CREATEWNDA', 'PPAINTSTRUCT',
    'tagRAWKEYBOARD', 'LPMINMAXINFO', 'POINTER_INFO', 'NCCALCSIZE_PARAMS',
    'LPWNDCLASSEXA', 'tagUSEROBJECTFLAGS', 'LPWNDCLASSEXW', 'GetMenu',
    'TITLEBARINFO', 'PCOPYDATASTRUCT', 'LPNONCLIENTMETRICSA', 'PICONINFO',
    'tagMINMAXINFO', 'tagMONITORINFOEXA', 'RAWINPUTDEVICE', 'LPALTTABINFO',
    'LPNONCLIENTMETRICSW', 'PTOUCH_HIT_TESTING_INPUT', 'LPMENUTEMPLATEW',
    'PDLGITEMTEMPLATEA', 'PEN_FLAGS', 'LPDLGTEMPLATEW',
    'MULTIKEYHELP', 'PDLGITEMTEMPLATEW', 'LPMENUTEMPLATEA', 'LPCBT_CREATEWND',
    'EDITWORDBREAKPROCW', 'TIMERPROC', 'EDITWORDBREAKPROCA', 'WNDENUMPROC',
    'PROPENUMPROCA', 'PROPENUMPROCW', 'LPMULTIKEYHELP', 'PROPENUMPROCA',
    'PCGESTUREINFO', 'PICONMETRICS', 'PROPENUMPROCW', 'LPCMENUITEMINFOA',
    'PHELPWININFO', 'NONCLIENTMETRICS',  'LPMSGBOXPARAMS',
    'LPCMENUITEMINFO', 'LPCMENUITEMINFOW', 'HDEVNOTIFY', 'LPMONITORINFOEX',
    'PWNDCLASSEX', 'PWNDCLASS', 'LPCDLGTEMPLATE',
    'PREGISTERCLASSNAMEW', 'LPDLGITEMTEMPLATEA', 'NAMEENUMPROCW', 'EndMenu',
    'CBT_CREATEWND', 'DESKTOPENUMPROCW', 'WINSTAENUMPROCW', 'MDICREATESTRUCT',
    'LPDLGITEMTEMPLATEW', 'TOUCH_MASK', 'MONITORINFOEX', 'LPSERIALKEYS',
    'HIGHCONTRAST', 'SERIALKEYS', 'MENUTEMPLATE', 'GRAYSTRINGPROC', 'GetDCEx',
    'WNDCLASSEX', 'LPTPMPARAMS', 'PWINDOWPLACEMENT', 'LPMDICREATESTRUCT',
    'LPWNDCLASS', 'PROPENUMPROCEXA', 'PROPENUMPROCEXW', 'PDLGITEMTEMPLATE',
    'PCTOUCHINPUT', 'NPWNDCLASSEX', 'HPOWERNOTIFY', 'LPWINDOWPLACEMENT',
    'NAMEENUMPROCW', 'DLGPROC', 'PMSGBOXPARAMS', 'LPCREATESTRUCT', 'IsChild',
    'PICONINFOEX', 'NAMEENUMPROCA', 'NAMEENUMPROCA', 'LPNONCLIENTMETRICS',
    'LPCSCROLLINFO', 'PROPENUMPROC', 'PEN_MASK','WNDENUMPROC',
    'GRAYSTRINGPROC', 'WINSTAENUMPROC', 'PMULTIKEYHELP', 'DRAWSTATEPROC',
    'NPWNDCLASS', 'MSGBOXPARAMS', 'HELPWININFO', 'PROPENUMPROCEXA',
    'SENDASYNCPROC', 'PROPENUMPROCEX', 'PNONCLIENTMETRICS', 'LPMENUITEMINFO',
    'DESKTOPENUMPROC', 'MENUITEMINFO', 'SOUNDSENTRY', 'POINTER_INPUT_TYPE',
    'LPWNDCLASSEX', 'EDITWORDBREAKPROC', 'MONITORENUMPROC', 'CREATESTRUCT',
    'LPHELPWININFO', 'TIMERPROC', 'PHDEVNOTIFY', 'ICONINFOEX', 'TOUCH_FLAGS',
    'PHPOWERNOTIFY', 'PCRAWINPUTDEVICE', 'POINTER_FLAGS', 'HELPPOLY',
    'LPICONMETRICS', 'LPDLGTEMPLATEA', 'HOOKPROC', 'LPCMENUINFO', 'WNDPROC',
    'LPCDLGTEMPLATEW', 'PROPENUMPROCEXW', 'LPDLGTEMPLATE', 'LPMENUTEMPLATE',
    'LPCDLGTEMPLATEA', 'LPSOUNDSENTRY', 'LPDLGITEMTEMPLATE', 'MENUTEMPLATEW',
    'SENDASYNCPROC', 'LPHIGHCONTRAST', 'MENUTEMPLATEA', 'ICONMETRICS',
    'wvsprintfW', 'GetMenuInfo', 'SetUserObjectSecurity', 'IsTouchWindow',
    'wvsprintfA', 'GetGuiResources', 'VkKeyScanExA', 'GetPoINTerDeviceRects',
    'DisplayConfigSetDeviceInfo', 'SetMenuItemInfoA', 'CharUpperBuffA',
    'RegisterShellHookWindow', 'CharUpperBuffW', 'SetMenuItemInfoW',
    'DrawTextA', 'DlgDirSelectExA', 'GetCurrentInputMessageSource', 'EndTask',
    'SendMessageA', 'DlgDirSelectExW', 'GetClientRect', 'GetMenuItemInfoW',
    'SetThreadDpiAwarenessContext', 'DrawTextW', 'GetNextDlgTabItem',
    'CallNextHookEx', 'MapWindowPoINTs', 'TrackPopupMenu', 'OemToCharBuffA',
    'UnhookWindowsHook', 'UserHandleGrantAccess', 'MsgWaitForMultipleObjects',
    'CharToOemW', 'InvalidateRgn', 'DestroyMenu', 'DrawEdge', 'UpdateWindow',
    'GetUserObjectInformationW', 'IsWow64Message', 'DlgDirListComboBoxW',
    'GetUserObjectInformationA', 'ChangeWindowMessageFilter', 'ValidateRect',
    'SetProcessDefaultLayout', 'GetPoINTerCursorId', 'DlgDirListComboBoxA',
    'GetPoINTerFrameInfoHistory', 'GetPoINTerDeviceCursors', 'PeekMessageA',
    'GetWindowFeedbackSetting', 'RegisterSuspendResumeNotification',
    'InsertMenuItemW', 'SetDialogDpiChangeBehavior', 'GetDlgItemTextA',
    'GetWindowDisplayAffinity', 'ScrollDC', 'IsWindowEnabled', 'OpenDesktopW',
    'GetDlgItemTextW', 'GetDlgItemInt', 'RegisterClassW', 'InsertMenuItemA',
    'RegisterPoINTerInputTargetEx', 'InternalGetWindowText', 'GetQueueStatus',
    'EnumDesktopsW', 'CloseWindow', 'OpenDesktopA', 'TrackPopupMenuEx',
    'GetScrollPos', 'GetPriorityClipboardFormat', 'UnhookWinEvent', 'SetMenu',
    'OemToCharA', 'DlgDirListA', 'FlashWindow', 'CreateAcceleratorTableW',
    'WaitForInputIdle', 'DlgDirListW', 'EnumDesktopWindows', 'OemToCharW',
    'GetPhysicalCursorPos', 'GetWindowLongW', 'CreateAcceleratorTableA',
    'GetSystemMetricsForDpi', 'DrawMenuBar', 'CreateDesktopExA', 'KillTimer',
    'DrawAnimatedRects', 'GetOpenClipboardWindow', 'SwitchDesktop', 'ToAscii',
    'SetCaretPos', 'RegisterPoINTerInputTarget', 'RealChildWindowFromPoINT',
    'TrackMouseEvent', 'GetClipboardOwner', 'SystemParametersInfoForDpi',
    'DefWindowProcA', 'CheckMenuRadioItem', 'WaitMessage', 'GetClipboardData',
    'ToUnicodeEx', 'EnableMenuItem', 'SendMessageCallbackA', 'PostMessageA',
    'InSendMessageEx', 'EnumDisplayDevicesW', 'EnumChildWindows', 'wsprintfA',
    'SetProcessDpiAwarenessContext', 'GetMessageExtraInfo', 'PostMessageW',
    'SwapMouseButton', 'DrawCaption', 'CreateWindowStationA', 'FindWindowExA',
    'SetDisplayAutoRotationPreferences', 'GetRawInputDeviceInfoW', 'IsWindow',
    'UnregisterTouchWindow', 'GetLastActivePopup', 'CreateWindowStationW',
    'GetDialogDpiChangeBehavior', 'CreateIconIndirect', 'ScreenToClient',
    'EnumDisplaySettingsA', 'GetMenuItemCount', 'CreateDesktopW', 'wsprintfW',
    'SetDlgItemInt', 'GetRawInputBuffer', 'EnumDisplaySettingsW', 'CopyImage',
    'FindWindowExW', 'BroadcastSystemMessageExW', 'DrawTextExW', 'RemoveMenu',
    'GetDpiFromDpiAwarenessContext', 'CreateDialogIndirectParamW', 'IsZoomed',
    'UnregisterSuspendResumeNotification', 'SetLayeredWindowAttributes',
    'GetMessagePos', 'CreateDialogIndirectParamA', 'SetWinEventHook',
    'MessageBeep', 'DrawTextExA', 'GetWindowThreadProcessId', 'MessageBoxExA',
    'ShowScrollBar', 'DefRawInputProc', 'SendMessageW', 'GetKBCodePage',
    'MessageBoxIndirectA', 'MoveWindow', 'LoadCursorFromFileA', 'GetWindowDC',
    'CreateDesktopA', 'AdjustWindowRectEx', 'MessageBoxExW', 'GetSysColor',
    'LoadCursorFromFileW', 'MessageBoxIndirectW', 'GetWindowModuleFileNameA',
    'DisableProcessWindowsGhosting', 'GetAwarenessFromDpiAwarenessContext',
    'CreateMDIWindowW', 'SetDoubleClickTime', 'WindowFromPoINT', 'FrameRect',
    'GetWindowModuleFileNameW', 'GetMenuDefaultItem', 'DispatchMessageW',
    'GetWindowDpiAwarenessContext', 'CallWindowProcW', 'ChangeMenuA',
    'GetDisplayAutoRotationPreferences', 'DragObject', 'CallWindowProcA',
    'UnregisterDeviceNotification', 'ChangeMenuW', 'GetPoINTerPenInfo',
    'GetUnpredictedMessagePos', 'RedrawWindow', 'RegisterClipboardFormatA',
    'GetForegroundWindow', 'LoadBitmapW', 'SetPhysicalCursorPos', 'ReleaseDC',
    'SetSystemCursor', 'PackTouchHitTestingProximityEvaluation', 'LoadImageW',
    'LoadBitmapA', 'SetWindowPos', 'CalculatePopupWindowPosition', 'IsIconic',
    'EnableNonClientDpiScaling', 'GetRegisteredRawInputDevices', 'ShowCursor',
    'DispatchMessageA', 'GetThreadDesktop', 'EnableMouseInPoINTerForThread',
    'GetMessageTime', 'GetGestureExtraArgs', 'GetClipboardSequenceNumber',
    'GetWindowWord', 'GetClassInfoA', 'DefFrameProcW', 'MonitorFromPoINT',
    'LookupIconIdFromDirectoryEx', 'GetDisplayConfigBufferSizes', 'GetWindow',
    'DefFrameProcA', 'GetClassInfoW', 'RegisterDeviceNotificationA',
    'SetMenuDefaultItem', 'SetScrollPos', 'IsValidDpiAwarenessContext',
    'SetMessageExtraInfo', 'GetActiveWindow', 'GetUpdateRgn', 'EnumPropsExW',
    'MapVirtualKeyExW', 'MapVirtualKeyExA', 'EnumPropsExA', 'GetMessageA',
    'GetMenuContextHelpId', 'GetClassInfoExW', 'SetMenuInfo', 'GetWindowRgn',
    'SetWindowsHookW', 'EnumWindows', 'GetClassInfoExA', 'GetMessageW',
    'ShowWindow', 'DrawFrameControl', 'GetListBoxInfo', 'ValidateRgn',
    'EnumClipboardFormats', 'EnableWindow', 'SetWindowPlacement', 'SetParent',
    'UnregisterPoINTerInputTarget', 'LoadImageA', 'ShowWindowAsync',
    'GetClipboardFormatNameW', 'TranslateMessage', 'CreateCursor', 'PtInRect',
    'GetIconInfo', 'SetClipboardData', 'IsCharLowerA', 'GetWindowPlacement',
    'EnumDisplaySettingsExA', 'RegisterRawInputDevices', 'IsCharLowerW',
    'SendMessageCallbackW', 'GetGestureInfo', 'GetSubMenu', 'EnumPropsA',
    'CreateMenu', 'CreateMDIWindowA', 'ShowOwnedPopups', 'SwitchToThisWindow',
    'SendMessageTimeoutA', 'DeferWindowPos', 'PhysicalToLogicalPoINT',
    'EnumPropsW', 'GetUpdateRect', 'DragDetect', 'SendNotifyMessageA',
    'RegisterTouchHitTestingWindow', 'GetMonitorInfoW', 'OffsetRect',
    'SetLastErrorEx', 'GetMonitorInfoA', 'ClipCursor', 'SendNotifyMessageW',
    'UnregisterPowerSettingNotification', 'ChangeWindowMessageFilterEx',
    'SendDlgItemMessageA', 'GetSystemMetrics', 'GetMouseMovePoINTsEx',
    'EnumDisplaySettingsExW', 'SendDlgItemMessageW', 'CheckDlgButton',
    'RegisterDeviceNotificationW', 'SetWindowLongA', 'CreateDialogParamW',
    'CreatePopupMenu', 'ShowCaret', 'GetClassLongW', 'InvertRect', 'OpenIcon',
    'GetDlgItem', 'CreateDialogParamA', 'UnloadKeyboardLayout', 'FindWindowW',
    'EvaluateProximityToRect', 'ClientToScreen', 'GetClassLongA', 'EndDialog',
    'GetAsyncKeyState', 'GetLayeredWindowAttributes', 'GetKeyboardState',
    'GetMenuStringA', 'IsDlgButtonChecked', 'DestroyAcceleratorTable',
    'CreateIconFromResourceEx', 'GetSystemMenu', 'GetMenuStringW', 'AnyPopup',
    'GetDpiForSystem', 'GetPoINTerInfo', 'LoadMenuA', 'PrivateExtractIconsW',
    'GetIconInfoExA', 'GetCapture', 'GetPoINTerDevice', 'GetShellWindow',
    'GetIconInfoExW', 'PrivateExtractIconsA', 'LoadMenuW', 'CheckMenuItem',
    'FlashWindowEx', 'SetRectEmpty', 'DialogBoxParamW', 'GetNextDlgGroupItem',
    'CascadeWindows', 'GetRawPoINTerDeviceData', 'DialogBoxParamA', 'warning',
    'MsgWaitForMultipleObjectsEx', 'GetKeyState', 'SystemParametersInfoA',
    'UpdateLayeredWindow', 'SoundSentry', 'BroadcastSystemMessageExA',
    'SetWindowWord', 'RealGetWindowClassW', 'GetAltTabInfoA', 'GetClassNameW',
    'GetDesktopWindow', 'CharToOemBuffA', 'GetPoINTerInfoHistory', 'GetPropW',
    'CloseTouchInputHandle', 'MenuItemFromPoINT', 'SystemParametersInfoW',
    'AddClipboardFormatListener', 'RealGetWindowClassA', 'GetAltTabInfoW',
    'IsImmersiveProcess', 'DefDlgProcW', 'TranslateMDISysAccel', 'VkKeyScanA',
    'CloseDesktop', 'IsRectEmpty', 'GetClassNameA', 'SendMessageTimeoutW',
    'CloseClipboard', 'TranslateAcceleratorW', 'ReplyMessage', 'SetWindowRgn',
    'GetMenuCheckMarkDimensions', 'ChangeDisplaySettingsW', 'GetInputState',
    'ChangeDisplaySettingsA', 'GetPoINTerTouchInfoHistory', 'PostQuitMessage',
    'GetWindowContextHelpId', 'LockSetForegroundWindow', 'GetGestureConfig',
    'GetUpdatedClipboardFormats', 'CloseWindowStation', 'VkKeyScanW',
    'SetActiveWindow', 'MapDialogRect', 'GetDlgCtrlID', 'UnregisterClassA',
    'UnregisterClassW', 'GetPoINTerFramePenInfo', 'AllowSetForegroundWindow',
    'UnregisterPoINTerInputTargetEx', 'SetThreadDesktop', 'InSendMessage',
    'LoadMenuIndirectA', 'IsClipboardFormatAvailable', 'CharUpperA',
    'CopyAcceleratorTableA', 'ChangeDisplaySettingsExA', 'LoadMenuIndirectW',
    'SetProcessRestrictionExemption', 'ChangeDisplaySettingsExW', 'EqualRect',
    'CopyAcceleratorTableW', 'EnumWindowStationsW', 'DestroyWindow',
    'SetClassLongW', 'PhysicalToLogicalPoINTForPerMonitorDPI', 'CreateCaret',
    'SetProcessDPIAware', 'SetClassLongA', 'GetPropA', 'GetPoINTerDevices',
    'IsCharAlphaW', 'SetMessageQueue', 'CharUpperW', 'CharToOemBuffW',
    'IsCharAlphaA', 'SetDisplayConfig', 'DestroyCaret', 'GetMenuBarInfo',
    'ActivateKeyboardLayout', 'LoadStringA', 'WindowFromPhysicalPoINT',
    'GetMenuItemRect', 'GetRawInputDeviceInfoA', 'LoadStringW', 'BeginPaINT',
    'GetKeyboardLayoutList', 'IsMouseInPoINTerEnabled', 'CreateWindowExA',
    'GetPoINTerPenInfoHistory', 'PaINTDesktop', 'GetCIMSSM', 'PeekMessageW',
    'CreateWindowExW', 'GetWindowInfo', 'EnableMouseInPoINTer', 'CharPrevA',
    'GetPoINTerInputTransform', 'GetWindowDpiHostingBehavior', 'CharNextA',
    'LogicalToPhysicalPoINT', 'SetMenuContextHelpId', 'ToAsciiEx', 'FillRect',
    'RegisterClipboardFormatW', 'ArrangeIconicWindows', 'CharLowerA',
    'SetScrollRange', 'GetWindowRect', 'EvaluateProximityToPolygon',
    'OemToCharBuffW', 'CharLowerW', 'EnumThreadWindows', 'SetWindowTextA',
    'GetProcessWindowStation', 'InitializeTouchInjection', 'GetWindowLongA',
    'GetTitleBarInfo', 'DisplayConfigGetDeviceInfo', 'SetWindowTextW',
    'SetCoalescableTimer', 'BringWindowToTop', 'AdjustWindowRectExForDpi',
    'GetThreadDpiAwarenessContext', 'LoadCursorA', 'LoadIconA', 'LoadCursorW',
    'CountClipboardFormats', 'SetWindowsHookExA', 'PostThreadMessageW',
    'GetMenuItemInfoA', 'AttachThreadInput', 'TabbedTextOutA', 'GetMenuState',
    'CreateIconFromResource', 'LoadIconW', 'GetMenuItemID', 'NotifyWinEvent',
    'SetForegroundWindow', 'IsProcessDPIAware', 'ExitWindowsEx', 'HideCaret',
    'PostThreadMessageA', 'WindowFromDC', 'EmptyClipboard', 'GetScrollRange',
    'GetCaretBlinkTime', 'IsWinEventHookInstalled', 'GetScrollBarInfo',
    'GetScrollInfo', 'ShutdownBlockReasonQuery', 'GetKeyboardLayout',
    'SetWindowContextHelpId', 'SetMenuItemBitmaps', 'InheritWindowMonitor',
    'SetDialogControlDpiChangeBehavior', 'FindWindowA', 'GetClipCursor',
    'GetSysColorBrush', 'BeginDeferWindowPos', 'RegisterClassExW', 'GetFocus',
    'RemoveClipboardFormatListener', 'RegisterPoINTerDeviceNotifications',
    'LookupIconIdFromDirectory', 'SetDlgItemTextA', 'GetTouchInputInfo',
    'LoadKeyboardLayoutW', 'GetSystemDpiForProcess', 'ChangeClipboardChain',
    'mouse_event', 'GetClassWord', 'LoadKeyboardLayoutA', 'keybd_event',
    'SetWindowFeedbackSetting', 'SetDlgItemTextW', 'RegisterClassExA',
    'GetPoINTerFrameInfo', 'GetDialogControlDpiChangeBehavior', 'DestroyIcon',
    'SetClassWord', 'GetKeyNameTextA', 'IsWindowVisible', 'TileWindows',
    'GetPoINTerTouchInfo', 'SubtractRect', 'ChildWindowFromPoINT', 'SetFocus',
    'GetGUIThreadInfo', 'MessageBoxW', 'UnionRect', 'GetKeyNameTextW',
    'ShutdownBlockReasonDestroy', 'GetPoINTerType', 'CharNextW', 'CreateIcon',
    'IsCharUpperA', 'TranslateAcceleratorA', 'DefDlgProcA', 'GetAncestor',
    'AdjustWindowRect', 'SetWindowsHookExW', 'SetThreadDpiHostingBehavior',
    'UnhookWindowsHookEx', 'SetCursor', 'EnumWindowStationsA', 'VkKeyScanExW',
    'EnumDesktopsA', 'UnregisterHotKey', 'DrawStateA', 'GetParent', 'SetRect',
    'BroadcastSystemMessageA', 'EnableScrollBar', 'SetUserObjectInformationA',
    'BroadcastSystemMessageW', 'DrawStateW', 'ChildWindowFromPoINTEx',
    'GetClipboardViewer', 'DlgDirSelectComboBoxExA', 'GrayStringW',
    'ScrollWindowEx', 'OpenWindowStationW', 'GetPoINTerFrameTouchInfoHistory',
    'GrayStringA', 'DlgDirSelectComboBoxExW', 'CopyRect', 'SetCaretBlinkTime',
    'GetPoINTerFramePenInfoHistory', 'OpenWindowStationA', 'GetCursorPos',
    'SetWindowDisplayAffinity', 'CharLowerBuffW', 'GetPoINTerFrameTouchInfo',
    'LockWorkStation', 'SetUserObjectInformationW', 'DefWindowProcW',
    'CharLowerBuffA', 'CharPrevExA', 'LoadAcceleratorsA', 'GetTopWindow',
    'GetWindowTextLengthA', 'RegisterHotKey', 'GetWindowTextW', 'SetPropA',
    'ExcludeUpdateRgn', 'GetWindowTextLengthW', 'LoadAcceleratorsW',
    'ScrollWindow', 'GetWindowTextA', 'CloseGestureInfoHandle', 'CharPrevW',
    'CreateDesktopExW', 'CallMsgFilterA', 'UpdateLayeredWindowIndirect',
    'CheckRadioButton', 'GetProcessDefaultLayout', 'GetRawInputDeviceList',
    'GetDialogBaseUnits', 'GetCaretPos', 'SetPropW', 'SetWindowsHookA',
    'GetTabbedTextExtentA', 'RegisterPowerSettingNotification', 'WinHelpA',
    'SetClipboardViewer', 'GetTabbedTextExtentW', 'CharNextExA', 'OemKeyScan',
    'EnumDisplayDevicesA', 'QueryDisplayConfig', 'WinHelpW', 'RegisterClassA',
    'IsHungAppWindow', 'InjectTouchInput', 'DrawFocusRect', 'SetTimer',
    'IsDialogMessageW', 'DeregisterShellHookWindow', 'IsWindowUnicode',
    'RegisterTouchWindow', 'ToUnicode', 'TabbedTextOutW', 'GetWindowRgnBox',
    'GetUserObjectSecurity', 'IsDialogMessageA', 'RegisterWindowMessageW',
    'MapVirtualKeyA', 'OpenInputDesktop', 'LockWindowUpdate', 'DrawIcon',
    'GetKeyboardLayoutNameA', 'DefMDIChildProcW', 'CopyIcon', 'InflateRect',
    'GetKeyboardLayoutNameW', 'MapVirtualKeyW', 'GetComboBoxInfo', 'EndPaINT',
    'RegisterWindowMessageA', 'DefMDIChildProcA', 'SetDebugErrorLevel',
    'SetWindowLongW', 'GetCursorInfo', 'SetCapture', 'ReleaseCapture',
    'IsGUIThread', 'GetDisplayAutoRotationPreferencesByProcessId',
    'SetProcessWindowStation', 'SetKeyboardState', 'MonitorFromRect',
    'RemovePropA', 'DrawIconEx', 'GetRawInputData', 'RemovePropW',
    'InsertMenuA', 'SetGestureConfig', 'DialogBoxIndirectParamW', 'SendInput',
    'SkipPoINTerFrameMessages', 'GetThreadDpiHostingBehavior', 'InsertMenuW',
    'DialogBoxIndirectParamA', 'OpenClipboard', 'GetAutoRotationState',
    'IntersectRect', 'CallMsgFilterW', 'HiliteMenuItem', 'AppendMenuA',
    'GetPoINTerDeviceProperties', 'PrINTWindow', 'MessageBoxA', 'AppendMenuW',
    'DestroyCursor', 'SetScrollInfo', 'EndDeferWindowPos', 'SetSysColors',
    'IsCharAlphaNumericA', 'AreDpiAwarenessContextsEqual', 'DeleteMenu',
    'GetDoubleClickTime', 'EnumDisplayMonitors', 'CancelShutdown',
    'ShutdownBlockReasonCreate', 'GetDpiForWindow', 'CharToOemA', '_Success_',
    'SetCursorPos', 'IsCharAlphaNumericW', 'GetClipboardFormatNameA',
    'LogicalToPhysicalPoINTForPerMonitorDPI', 'MonitorFromWindow',
    'InvalidateRect', 'AnimateWindow', 'ModifyMenuA', 'BlockInput',
    'ModifyMenuW', 'IsCharUpperW', 'GetCursor', 'GetLastInputInfo',
    'GetKeyboardType',
)
